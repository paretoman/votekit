{"mappings":"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","sources":["<anon>","node_modules/seedrandom/lib/alea.js","node_modules/seedrandom/lib/xor128.js","node_modules/seedrandom/lib/xorwow.js","node_modules/seedrandom/lib/xorshift7.js","node_modules/seedrandom/lib/xor4096.js","node_modules/seedrandom/lib/tychei.js","node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/@tweenjs/tween.js/dist/tween.esm.js","node_modules/process/browser.js","src/demo/src/demo.js","src/addSandboxes/addSandboxes.js","src/addSandboxes/addDoubleSandboxes.js","src/addSandboxes/doubleSandbox.js","src/sim/sim-index.js","src/sim/sim/Sim.js","src/sim/sim/Changes.js","src/compute/utilities/utilities.js","src/compute/utilities/makeCandidateDistributionCDF.js","src/compute/utilities/statistics.js","src/compute/utilities/math.js","src/compute/utilities/minmax.js","src/compute/utilities/copy.js","src/sim/command/Commander.js","src/sim/command/CommandStore.js","src/sim/command/ComMessenger.js","src/sim/command/ConfigKeeper.js","src/sim/command/History.js","src/sim/options/SimOptions.js","src/sim/options/ElectionOptionsMan.js","src/sim/options/CastOptionsMan.js","src/sim/options/SequenceOptionsMan.js","src/sim/options/PhaseOptionsMan.js","src/compute/socialChoiceMethods/socialChoiceMethods.js","src/compute/socialChoiceMethods/plurality.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/types.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesCanBorders.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesMath.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesCast.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesGeometry.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesGeoms.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesPoints.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesGrid.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesSocialChoice.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesVote.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesVoteArrays.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesVotes.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesVotesForGeom.js","src/compute/socialChoiceMethods/node_modules/@paretoman/votekit-types/typesVotesForGeomGrid.js","src/compute/socialChoiceMethods/randomCandidate.js","src/compute/socialChoiceMethods/huntingtonHill.js","src/compute/socialChoiceMethods/divisorGeneral.js","src/compute/socialChoiceMethods/score.js","src/compute/socialChoiceMethods/stv.js","src/compute/socialChoiceMethods/minimax.js","src/compute/socialChoiceMethods/olprA.js","src/compute/socialChoiceMethods/sainteLague.js","src/compute/socialChoiceMethods/sntv.js","src/compute/socialChoiceMethods/dHondt.js","src/compute/socialChoiceMethods/allocatedScore.js","src/compute/socialChoiceMethods/methodOfEqualShares.js","src/compute/socialChoiceMethods/randomVoter.js","src/sim/options/SocialChoiceOptionsMan.js","src/sim/entities/Entities.js","src/sim/voters/VoterShapeList.js","src/sim/entities/Registrar.js","src/sim/voters/VoterShape.js","src/sim/entities/EntityCommander.js","src/sim/entities/EntityList.js","src/sim/entities/getGeoms.js","src/sim/entities/getPoints.js","src/sim/entities/defaultStrategyRules.js","src/sim/candidates/CandidateList.js","src/graphics/graphics.js","src/graphics/colorBlendScript.js","src/sim/candidates/Candidate.js","src/sim/candidateDns/CandidateDnList.js","src/sim/candidateDns/CandidateDn.js","src/sim/modes/SimMode.js","src/sim/modes/SimModeSample.js","src/sim/geometry/getSamplingGeometry.js","src/sim/geometry/getUsePollsByPhase.js","src/sim/modes/ElectionSampler.js","src/compute/sampleElection/sampleElection.js","src/compute/electionSequence/electionSequence.js","src/compute/electionSequence/electionClosedPrimary.js","src/compute/electionPhase/electionPhase.js","src/compute/election/election.js","src/compute/election/castVotesRun.js","src/compute/voteCasters/voteCasters/voteCasters.js","src/compute/voteCasters/plurality/castPlurality.js","src/compute/types/types.js","src/compute/types/typesCanBorders.js","src/compute/types/typesMath.js","src/compute/types/typesCast.js","src/compute/types/typesGeometry.js","src/compute/types/typesGeoms.js","src/compute/types/typesPoints.js","src/compute/types/typesGrid.js","src/compute/types/typesSocialChoice.js","src/compute/types/typesVote.js","src/compute/types/typesVoteArrays.js","src/compute/types/typesVotes.js","src/compute/types/typesVotesForGeom.js","src/compute/types/typesVotesForGeomGrid.js","node_modules/seedrandom/index.js","node_modules/seedrandom/seedrandom.js","src/compute/voteCasters/plurality/castPluralityIntervals1D.js","src/compute/voteCasters/node_modules/@paretoman/votekit-utilities/utilities.js","src/compute/voteCasters/node_modules/@paretoman/votekit-utilities/makeCandidateDistributionCDF.js","src/compute/voteCasters/node_modules/@paretoman/votekit-utilities/statistics.js","src/compute/voteCasters/node_modules/@paretoman/votekit-utilities/math.js","src/compute/voteCasters/node_modules/@paretoman/votekit-utilities/minmax.js","src/compute/voteCasters/node_modules/@paretoman/votekit-utilities/copy.js","src/compute/voteCasters/plurality/castPluralityQuadrature2D.js","src/compute/voteCasters/plurality/sumCircle.js","src/compute/voteCasters/plurality/castPluralityGrid.js","src/compute/voteCasters/plurality/castPluralityPoint.js","src/compute/voteCasters/plurality/strategicPlurality.js","src/compute/voteCasters/voteCasters/makeGrid1D.js","src/compute/voteCasters/voteCasters/makeGrid2D.js","src/compute/voteCasters/score/castScore.js","src/compute/voteCasters/score/castScoreGrid.js","src/compute/voteCasters/score/castScorePoint.js","src/compute/voteCasters/score/strategicMinMax.js","src/compute/voteCasters/scoreFull/castScoreFull.js","src/compute/voteCasters/scoreFull/castScoreFullGrid.js","src/compute/voteCasters/ranking/castRanking.js","src/compute/voteCasters/ranking/castRankingGrid.js","src/compute/voteCasters/ranking/castRankingPoint.js","src/compute/voteCasters/ranking/castRankingIntervals1D.js","src/compute/voteCasters/ranking/castRankingPolygons2D.js","node_modules/d3-polygon/src/area.js","src/compute/voteCasters/ranking/castRankingFindPolygons.js","src/compute/voteCasters/plurality/equidistantLine.js","src/compute/voteCasters/ranking/splitConvex.js","src/compute/voteCasters/pairwise/castPairwise.js","src/compute/voteCasters/pairwise/castPairwisePlanes2D.js","src/compute/voteCasters/pairwise/castPairwiseIntervals1D.js","src/compute/voteCasters/pairwise/castPairwiseGrid.js","src/compute/voteCasters/pairwise/castPairwisePoint.js","src/compute/voteCasters/pairwise/makeCanBordersPairwise.js","src/compute/voteCasters/pairwise/makePairwiseIntervals1D.js","src/compute/voteCasters/plurality/makeCanBordersPlurality.js","src/compute/voteCasters/plurality/makeVoronoiIntervals1D.js","src/compute/voteCasters/plurality/makeVoronoiLines2D.js","src/compute/voteCasters/ranking/makeCanBordersRanking.js","src/compute/voteCasters/ranking/makeRankingIntervals1D.js","src/compute/election/socialChoiceRun.js","src/compute/election/makeAllocation.js","src/compute/electionPhase/electionCycle.js","src/compute/electionPhase/calculatePolling.js","src/compute/electionSequence/getGeometryForPhase.js","src/compute/electionSequence/getElectionOptions.js","src/compute/electionSequence/electionGeneral.js","src/compute/electionSequence/electionNonPartisanPrimary.js","src/compute/electionSequence/test/optionsBag1.js","src/compute/sampleElection/sampleCanDnGeom.js","src/compute/sampleElection/sampleCanDnGeom1D.js","src/compute/sampleElection/sampleCanDnGeom2D.js","src/sim/modes/updateSeeds.js","src/sim/modes/SimModeOne.js","src/compute/geoElection/geoElection.js","src/compute/districtElection/districtElection.js","src/compute/districtElection/combineVotesStatewide.js","src/compute/districtElection/statewidePairwiseTallies.js","src/compute/districtElection/getNormStatewide.js","src/compute/districtElection/statewidePreferenceLists.js","src/compute/districtElection/statewidePreferenceTallies.js","src/compute/districtElection/statewideCandidateTallies.js","src/compute/districtElection/combineVotesByDistrict.js","src/compute/districtElection/districtPairwiseTallies.js","src/compute/districtElection/getNormDistrict.js","src/compute/districtElection/districtCandidateTallies.js","src/compute/districtElection/districtPreferenceLists.js","src/compute/districtElection/districtPreferenceTallies.js","src/compute/districtElection/castVotesByTract.js","src/compute/districtElection/combineAllocationsStatewide.js","src/sim/geometry/getGeometry.js","src/sim/entities/addDefaultEntities.js","src/sim/sim/Publisher.js","src/sim/geometry/Districts.js","src/compute/makeGeography/makeGeography.js","src/compute/makeGeography/makeCensus.js","src/compute/makeGeography/polygonClip.js","src/compute/makeGeography/makeDistrictMap.js","src/compute/makeGeography/lloydVoronoi.js","node_modules/d3-polygon/src/centroid.js","node_modules/d3-delaunay/src/delaunay.js","node_modules/delaunator/index.js","node_modules/robust-predicates/index.js","node_modules/robust-predicates/esm/orient2d.js","node_modules/robust-predicates/esm/util.js","node_modules/robust-predicates/esm/orient3d.js","node_modules/robust-predicates/esm/incircle.js","node_modules/robust-predicates/esm/insphere.js","node_modules/d3-delaunay/src/path.js","node_modules/d3-delaunay/src/polygon.js","node_modules/d3-delaunay/src/voronoi.js","src/compute/makeGeography/makeTractNoise.js","node_modules/simplex-noise/dist/esm/simplex-noise.js","node_modules/simplex-noise/simplex-noise.ts","src/compute/makeGeography/makeVoterGeomsByDistrict.js","src/compute/makeGeography/makeVoterGeomsByTract.js","src/sim/geometry/getTestGeometry.js","src/addSandboxes/sandbox.js","src/view/view/View.js","src/view/view/layoutOrder.js","src/view/view/Layout.js","src/view/view/ViewMode.js","src/view/view/ViewModePublisher.js","src/view/viewScreens/viewScreens.js","src/view/screen/Screen.js","src/view/screen/EventHandlers.js","src/view/screen/ScreenCanvas.js","src/view/screen/getPixelRatio.js","src/view/screen/ScreenDownload.js","src/view/screen/ScreenSvg.js","node_modules/@mithrandirii/canvas2svg/canvas2svg.js","src/view/viewScreens/addDarkModeSwitch.js","src/view/menu/ButtonGroup.js","src/view/menu/Button.js","src/view/menu/MenuItem.js","src/view/viewScreens/ViewSettings.js","src/view/viewScreens/ViewVizBudget.js","src/view/viz/BaseExplanation.js","src/view/viz/VizExplanationBudgetMES.js","src/view/viz/vizMESChartsCalcBudget.js","src/view/viz/vizMESChartsCalcShape.js","src/view/viz/vizMESChartsRender.js","src/view/viz/colorBlender.js","src/view/phase/getResultsPhaseOptions.js","src/view/phase/getPhaseResults.js","src/view/viewScreens/ViewVizOne.js","src/view/viz/VizDistricts.js","src/view/viz/VizDistrictNoise.js","src/view/viz/VoterRender1D.js","src/view/viz/VoterRender2D.js","src/view/viz/VizOneVoronoi.js","src/view/viz/Voronoi1D.js","src/view/viz/Voronoi2D.js","src/view/viz/VizOneVoronoiRanking.js","src/view/vizBeatMap/BeatMap.js","src/view/vizBeatMap/bMap.js","src/view/vizBeatMap/quantile.js","src/view/vizBeatMap/binarySearch.js","src/view/vizBeatMap/circleCDF.js","src/view/viz/VoronoiRanking1D.js","src/view/viz/VoronoiRanking2D.js","src/view/viz/VizOneGrid.js","src/view/viz/Grid1D.js","src/view/viz/getTallyFractionsNameForVote.js","src/view/viz/Grid2D.js","src/view/viewScreens/ViewBase.js","src/view/viewScreens/DraggableManager.js","src/view/viewScreens/ClickDrag.js","src/view/vizVoters/VoterRendererList.js","src/view/vizVoters/VoterRenderer.js","src/view/strategy/checkSomeStrategy.js","src/view/strategy/checkSomeStrategyForPhase.js","src/view/viewScreens/ViewVizSample.js","src/view/viz/VizSample.js","src/view/viz/VizSampleDensity1D.js","src/view/viz/VizSampleDensity2D.js","node_modules/d3-contour/src/density.js","node_modules/d3-array/src/max.js","node_modules/d3-array/src/ticks.js","node_modules/d3-contour/src/array.js","node_modules/d3-contour/src/blur.js","node_modules/d3-contour/src/constant.js","node_modules/d3-contour/src/contours.js","node_modules/d3-array/src/extent.js","node_modules/d3-array/src/threshold/sturges.js","node_modules/d3-array/src/count.js","node_modules/d3-contour/src/ascending.js","node_modules/d3-contour/src/area.js","node_modules/d3-contour/src/contains.js","node_modules/d3-contour/src/noop.js","node_modules/d3-geo/src/path/index.js","node_modules/d3-geo/src/identity.js","node_modules/d3-geo/src/stream.js","node_modules/d3-geo/src/path/area.js","node_modules/d3-array/src/fsum.js","node_modules/d3-geo/src/math.js","node_modules/d3-geo/src/noop.js","node_modules/d3-geo/src/path/bounds.js","node_modules/d3-geo/src/path/centroid.js","node_modules/d3-geo/src/path/context.js","node_modules/d3-geo/src/path/measure.js","node_modules/d3-geo/src/path/string.js","src/view/vizCandidateDns/CandidateDnRendererList.js","src/view/vizCandidateDns/CandidateDnRenderer.js","src/view/viewScreens/ViewDistrictMaps.js","src/view/viz/DistrictMapViz.js","src/view/viz/DistrictDraw.js","src/view/viz/DistrictColors.js","src/view/viz/getTallyFractions.js","src/view/viz/getMinimaxScore.js","src/view/viz/MapOfTracts.js","src/view/viewScreens/ViewEntitiesOne.js","src/view/vizCandidates/CandidateViewList.js","src/view/vizCandidates/CandidateView.js","src/view/vizCandidates/CandidateGraphic.js","src/view/tooltips/tooltipForEntity.js","src/view/tooltips/tooltipBox.js","src/view/tooltips/hideOnClickOutside.js","src/view/vizEntities/EntityGraphic.js","src/view/vizEntities/SquareGraphic.js","src/view/vizVoters/VoterViewList.js","src/view/vizVoters/VoterView.js","src/view/vizVoters/VoterGraphic.js","src/view/vizEntities/CircleGraphic.js","src/view/vizTestVoter/TestVoterView.js","src/view/vizTestVoter/TestVoterGraphic.js","src/view/tooltips/tooltipForTestVoter.js","src/view/tooltips/TooltipVoteText.js","src/view/vizTestVoter/TestVoter.js","src/view/viewScreens/updateCandidateStatistics.js","src/view/viz/getAllocation.js","src/view/viewScreens/ViewEntitiesSample.js","src/view/vizCandidateDns/CandidateDnViewList.js","src/view/vizCandidateDns/CandidateDnView.js","src/view/vizCandidateDns/CandidateDnGraphic.js","src/view/screen/ScreenCommon.js","src/view/viewScreens/addSvgSwitch.js","src/view/viewScreens/addDownloadScreen.js","src/view/viewButtons/viewButtons.js","src/view/viewButtons/menuSimOptions.js","src/view/viewButtons/menuSeedRandom.js","src/view/viewButtons/menuElectionOptions.js","src/view/viewButtons/menuPhaseOptions.js","src/view/viewButtons/addUndo.js","src/view/viewButtons/addSimControlsLabel.js","src/view/viewButtons/buttonsToAddEntities.js","src/view/viewButtons/candidateAddMakeButton.js","src/view/viewButtons/candidateDnAddMakeButton.js","src/view/viewButtons/voterShapeAddMakeButton.js","src/view/menu/Menu.js","src/view/viewScreens/addResultsPhaseSelector.js","src/view/viewButtons/addWarning.js","src/view/save/loadView.js","src/view/save/checkURL.js","src/view/save/configFromParams.js","src/view/save/loadShortCode.js","src/view/save/ajaxLite.js","src/view/save/shortLinkDatabaseUrl.js","src/view/environments/viewJupyter.js","src/view/environments/jupyter.js","src/view/save/save.js","src/view/save/addSaveConfigToText.js","src/view/save/DownloadLink.js","src/view/save/TextArea.js","src/view/save/orderedJsonStringify.js","src/view/save/addLoadConfigText.js","src/view/save/addUpload.js","src/view/save/addSaveConfigToLink.js","src/view/save/getLink.js","src/view/save/linkFromParams.js","src/view/save/addSaveConfigToShortLink.js","src/view/save/publishShortLink.js","src/view/save/addName.js","src/view/save/addSaveData.js","src/view/save/viewDownload.js","src/addSandboxes/addSingleSandboxes.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirede6b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirede6b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gj6Et\", function(module, exports) {\n// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n(function(global, module1, define1) {\n    function Alea(seed) {\n        var me = this, mash = Mash();\n        me.next = function() {\n            var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n            me.s0 = me.s1;\n            me.s1 = me.s2;\n            return me.s2 = t - (me.c = t | 0);\n        };\n        // Apply the seeding algorithm from Baagoe.\n        me.c = 1;\n        me.s0 = mash(\" \");\n        me.s1 = mash(\" \");\n        me.s2 = mash(\" \");\n        me.s0 -= mash(seed);\n        if (me.s0 < 0) me.s0 += 1;\n        me.s1 -= mash(seed);\n        if (me.s1 < 0) me.s1 += 1;\n        me.s2 -= mash(seed);\n        if (me.s2 < 0) me.s2 += 1;\n        mash = null;\n    }\n    function copy(f, t) {\n        t.c = f.c;\n        t.s0 = f.s0;\n        t.s1 = f.s1;\n        t.s2 = f.s2;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;\n        prng.int32 = function() {\n            return xg.next() * 0x100000000 | 0;\n        };\n        prng.double = function() {\n            return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n        };\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    function Mash() {\n        var n = 0xefc8249d;\n        var mash = function(data) {\n            data = String(data);\n            for(var i = 0; i < data.length; i++){\n                n += data.charCodeAt(i);\n                var h = 0.02519603282416938 * n;\n                n = h >>> 0;\n                h -= n;\n                h *= n;\n                n = h >>> 0;\n                h -= n;\n                n += h * 0x100000000; // 2^32\n            }\n            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n        };\n        return mash;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.alea = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRegister(\"4gDjz\", function(module, exports) {\n// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        // Set up generator function.\n        me.next = function() {\n            var t = me.x ^ me.x << 11;\n            me.x = me.y;\n            me.y = me.z;\n            me.z = me.w;\n            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;\n        };\n        if (seed === (seed | 0)) // Integer seed.\n        me.x = seed;\n        else // String seed.\n        strseed += seed;\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 64; k++){\n            me.x ^= strseed.charCodeAt(k) | 0;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xor128 = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRegister(\"HLBv4\", function(module, exports) {\n// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        // Set up generator function.\n        me.next = function() {\n            var t = me.x ^ me.x >>> 2;\n            me.x = me.y;\n            me.y = me.z;\n            me.z = me.w;\n            me.w = me.v;\n            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n        };\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.v = 0;\n        if (seed === (seed | 0)) // Integer seed.\n        me.x = seed;\n        else // String seed.\n        strseed += seed;\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 64; k++){\n            me.x ^= strseed.charCodeAt(k) | 0;\n            if (k == strseed.length) me.d = me.x << 10 ^ me.x >>> 4;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        t.v = f.v;\n        t.d = f.d;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xorwow = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRegister(\"ktaoY\", function(module, exports) {\n// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this;\n        // Set up generator function.\n        me.next = function() {\n            // Update xor generator.\n            var X = me.x, i = me.i, t, v, w;\n            t = X[i];\n            t ^= t >>> 7;\n            v = t ^ t << 24;\n            t = X[i + 1 & 7];\n            v ^= t ^ t >>> 10;\n            t = X[i + 3 & 7];\n            v ^= t ^ t >>> 3;\n            t = X[i + 4 & 7];\n            v ^= t ^ t << 7;\n            t = X[i + 7 & 7];\n            t = t ^ t << 13;\n            v ^= t ^ t << 9;\n            X[i] = v;\n            me.i = i + 1 & 7;\n            return v;\n        };\n        function init(me, seed) {\n            var j, w, X = [];\n            if (seed === (seed | 0)) // Seed state array using a 32-bit integer.\n            w = X[0] = seed;\n            else {\n                // Seed state using a string.\n                seed = \"\" + seed;\n                for(j = 0; j < seed.length; ++j)X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;\n            }\n            // Enforce an array length of 8, not all zeroes.\n            while(X.length < 8)X.push(0);\n            for(j = 0; j < 8 && X[j] === 0; ++j);\n            if (j == 8) w = X[7] = -1;\n            else w = X[j];\n            me.x = X;\n            me.i = 0;\n            // Discard an initial 256 values.\n            for(j = 256; j > 0; --j)me.next();\n        }\n        init(me, seed);\n    }\n    function copy(f, t) {\n        t.x = f.x.slice();\n        t.i = f.i;\n        return t;\n    }\n    function impl(seed, opts) {\n        if (seed == null) seed = +new Date;\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (state.x) copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xorshift7 = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRegister(\"gBs5C\", function(module, exports) {\n// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this;\n        // Set up generator function.\n        me.next = function() {\n            var w = me.w, X = me.X, i = me.i, t, v;\n            // Update Weyl generator.\n            me.w = w = w + 0x61c88647 | 0;\n            // Update xor generator.\n            v = X[i + 34 & 127];\n            t = X[i = i + 1 & 127];\n            v ^= v << 13;\n            t ^= t << 17;\n            v ^= v >>> 15;\n            t ^= t >>> 12;\n            // Update Xor generator array state.\n            v = X[i] = v ^ t;\n            me.i = i;\n            // Result is the combination.\n            return v + (w ^ w >>> 16) | 0;\n        };\n        function init(me, seed) {\n            var t, v, i, j, w, X = [], limit = 128;\n            if (seed === (seed | 0)) {\n                // Numeric seeds initialize v, which is used to generates X.\n                v = seed;\n                seed = null;\n            } else {\n                // String seeds are mixed into v and X one character at a time.\n                seed = seed + \"\\0\";\n                v = 0;\n                limit = Math.max(limit, seed.length);\n            }\n            // Initialize circular array and weyl value.\n            for(i = 0, j = -32; j < limit; ++j){\n                // Put the unicode characters into the array, and shuffle them.\n                if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n                // After 32 shuffles, take v as the starting w value.\n                if (j === 0) w = v;\n                v ^= v << 10;\n                v ^= v >>> 15;\n                v ^= v << 4;\n                v ^= v >>> 13;\n                if (j >= 0) {\n                    w = w + 0x61c88647 | 0; // Weyl.\n                    t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.\n                    i = 0 == t ? i + 1 : 0; // Count zeroes.\n                }\n            }\n            // We have detected all zeroes; make the key nonzero.\n            if (i >= 128) X[(seed && seed.length || 0) & 127] = -1;\n            // Run the generator 512 times to further mix the state before using it.\n            // Factoring this as a function slows the main generator, so it is just\n            // unrolled here.  The weyl generator is not advanced while warming up.\n            i = 127;\n            for(j = 512; j > 0; --j){\n                v = X[i + 34 & 127];\n                t = X[i = i + 1 & 127];\n                v ^= v << 13;\n                t ^= t << 17;\n                v ^= v >>> 15;\n                t ^= t >>> 12;\n                X[i] = v ^ t;\n            }\n            // Storing state as object members is faster than using closure variables.\n            me.w = w;\n            me.X = X;\n            me.i = i;\n        }\n        init(me, seed);\n    }\n    function copy(f, t) {\n        t.i = f.i;\n        t.w = f.w;\n        t.X = f.X.slice();\n        return t;\n    }\n    function impl(seed, opts) {\n        if (seed == null) seed = +new Date;\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (state.X) copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xor4096 = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRegister(\"ktLSh\", function(module, exports) {\n// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        // Set up generator function.\n        me.next = function() {\n            var b = me.b, c = me.c, d = me.d, a = me.a;\n            b = b << 25 ^ b >>> 7 ^ c;\n            c = c - d | 0;\n            d = d << 24 ^ d >>> 8 ^ a;\n            a = a - b | 0;\n            me.b = b = b << 20 ^ b >>> 12 ^ c;\n            me.c = c = c - d | 0;\n            me.d = d << 16 ^ c >>> 16 ^ a;\n            return me.a = a - b | 0;\n        };\n        /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */ me.a = 0;\n        me.b = 0;\n        me.c = -1640531527;\n        me.d = 1367130551;\n        if (seed === Math.floor(seed)) {\n            // Integer seed.\n            me.a = seed / 0x100000000 | 0;\n            me.b = seed | 0;\n        } else // String seed.\n        strseed += seed;\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 20; k++){\n            me.b ^= strseed.charCodeAt(k) | 0;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.a = f.a;\n        t.b = f.b;\n        t.c = f.c;\n        t.d = f.d;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.tychei = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRegister(\"foUwZ\", function(module, exports) {\n\"use strict\";\n\n});\n\nparcelRegister(\"79Zf3\", function(module, exports) {\n\n$parcel$export(module.exports, \"Group\", () => Group);\n$parcel$export(module.exports, \"Tween\", () => Tween);\n/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */ \nvar $ibaza = parcelRequire(\"ibaza\");\nvar Easing = {\n    Linear: {\n        None: function(amount) {\n            return amount;\n        }\n    },\n    Quadratic: {\n        In: function(amount) {\n            return amount * amount;\n        },\n        Out: function(amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) return 0.5 * amount * amount;\n            return -0.5 * (--amount * (amount - 2) - 1);\n        }\n    },\n    Cubic: {\n        In: function(amount) {\n            return amount * amount * amount;\n        },\n        Out: function(amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) return 0.5 * amount * amount * amount;\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        }\n    },\n    Quartic: {\n        In: function(amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function(amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) return 0.5 * amount * amount * amount * amount;\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        }\n    },\n    Quintic: {\n        In: function(amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function(amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) return 0.5 * amount * amount * amount * amount * amount;\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        }\n    },\n    Sinusoidal: {\n        In: function(amount) {\n            return 1 - Math.cos(amount * Math.PI / 2);\n        },\n        Out: function(amount) {\n            return Math.sin(amount * Math.PI / 2);\n        },\n        InOut: function(amount) {\n            return 0.5 * (1 - Math.cos(Math.PI * amount));\n        }\n    },\n    Exponential: {\n        In: function(amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function(amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function(amount) {\n            if (amount === 0) return 0;\n            if (amount === 1) return 1;\n            if ((amount *= 2) < 1) return 0.5 * Math.pow(1024, amount - 1);\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        }\n    },\n    Circular: {\n        In: function(amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function(amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        }\n    },\n    Elastic: {\n        In: function(amount) {\n            if (amount === 0) return 0;\n            if (amount === 1) return 1;\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function(amount) {\n            if (amount === 0) return 0;\n            if (amount === 1) return 1;\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function(amount) {\n            if (amount === 0) return 0;\n            if (amount === 1) return 1;\n            amount *= 2;\n            if (amount < 1) return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        }\n    },\n    Back: {\n        In: function(amount) {\n            var s = 1.70158;\n            return amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function(amount) {\n            var s = 1.70158;\n            return --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function(amount) {\n            var s = 2.5949095;\n            if ((amount *= 2) < 1) return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        }\n    },\n    Bounce: {\n        In: function(amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function(amount) {\n            if (amount < 1 / 2.75) return 7.5625 * amount * amount;\n            else if (amount < 2 / 2.75) return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            else if (amount < 2.5 / 2.75) return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            else return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n        },\n        InOut: function(amount) {\n            if (amount < 0.5) return Easing.Bounce.In(amount * 2) * 0.5;\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        }\n    }\n};\nvar now;\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\n// eslint-disable-next-line\n// @ts-ignore\nif (typeof self === \"undefined\" && typeof $ibaza !== \"undefined\" && $ibaza.hrtime) now = function() {\n    // eslint-disable-next-line\n    // @ts-ignore\n    var time = $ibaza.hrtime();\n    // Convert [seconds, nanoseconds] to milliseconds.\n    return time[0] * 1000 + time[1] / 1000000;\n};\nelse if (typeof self !== \"undefined\" && self.performance !== undefined && self.performance.now !== undefined) // This must be bound, because directly assigning this function\n// leads to an invocation exception in Chrome.\nnow = self.performance.now.bind(self.performance);\nelse if (Date.now !== undefined) now = Date.now;\nelse now = function() {\n    return new Date().getTime();\n};\nvar now$1 = now;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */ var Group = /** @class */ function() {\n    function Group() {\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n    }\n    Group.prototype.getAll = function() {\n        var _this = this;\n        return Object.keys(this._tweens).map(function(tweenId) {\n            return _this._tweens[tweenId];\n        });\n    };\n    Group.prototype.removeAll = function() {\n        this._tweens = {};\n    };\n    Group.prototype.add = function(tween) {\n        this._tweens[tween.getId()] = tween;\n        this._tweensAddedDuringUpdate[tween.getId()] = tween;\n    };\n    Group.prototype.remove = function(tween) {\n        delete this._tweens[tween.getId()];\n        delete this._tweensAddedDuringUpdate[tween.getId()];\n    };\n    Group.prototype.update = function(time, preserve) {\n        if (time === void 0) time = now$1();\n        if (preserve === void 0) preserve = false;\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0) return false;\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while(tweenIds.length > 0){\n            this._tweensAddedDuringUpdate = {};\n            for(var i = 0; i < tweenIds.length; i++){\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve) delete this._tweens[tweenIds[i]];\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n        return true;\n    };\n    return Group;\n}();\n/**\n *\n */ var Interpolation = {\n    Linear: function(v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) return fn(v[0], v[1], f);\n        if (k > 1) return fn(v[m], v[m - 1], m - f);\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function(v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for(var i = 0; i <= n; i++)b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        return b;\n    },\n    CatmullRom: function(v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) i = Math.floor(f = m * (1 + k));\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        } else {\n            if (k < 0) return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            if (k > 1) return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function(p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function(n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: function() {\n            var a = [\n                1\n            ];\n            return function(n) {\n                var s = 1;\n                if (a[n]) return a[n];\n                for(var i = n; i > 1; i--)s *= i;\n                a[n] = s;\n                return s;\n            };\n        }(),\n        CatmullRom: function(p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        }\n    }\n};\n/**\n * Utils\n */ var Sequence = /** @class */ function() {\n    function Sequence() {}\n    Sequence.nextId = function() {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}();\nvar mainGroup = new Group();\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */ var Tween = /** @class */ function() {\n    function Tween(_object, _group) {\n        if (_group === void 0) _group = mainGroup;\n        this._object = _object;\n        this._group = _group;\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._goToEnd = false;\n    }\n    Tween.prototype.getId = function() {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function() {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function() {\n        return this._isPaused;\n    };\n    Tween.prototype.to = function(properties, duration) {\n        // TODO? restore this, then update the 07_dynamic_to example to set fox\n        // tween's to on each update. That way the behavior is opt-in (there's\n        // currently no opt-out).\n        // for (const prop in properties) this._valuesEnd[prop] = properties[prop]\n        this._valuesEnd = Object.create(properties);\n        if (duration !== undefined) this._duration = duration;\n        return this;\n    };\n    Tween.prototype.duration = function(d) {\n        this._duration = d;\n        return this;\n    };\n    Tween.prototype.start = function(time) {\n        if (this._isPlaying) return this;\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for(var property in this._valuesStartRepeat){\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time !== undefined ? typeof time === \"string\" ? now$1() + parseFloat(time) : time : now$1();\n        this._startTime += this._delayTime;\n        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);\n        return this;\n    };\n    Tween.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {\n        for(var property in _valuesEnd){\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? \"array\" : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === \"undefined\" || propType === \"function\") continue;\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) continue;\n                // handle an array of relative values\n                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));\n                // Create a local copy of the Array with the start value at the front\n                _valuesEnd[property] = [\n                    startValue\n                ].concat(endValues);\n            }\n            // handle the deepness of the values\n            if ((propType === \"object\" || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                // eslint-disable-next-line\n                for(var prop in startValue)// eslint-disable-next-line\n                // @ts-ignore FIXME?\n                _valuesStart[property][prop] = startValue[prop];\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {}; // TODO? repeat nested values? And yoyo? And array values?\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);\n            } else {\n                // Save the starting value, but only once.\n                if (typeof _valuesStart[property] === \"undefined\") _valuesStart[property] = startValue;\n                if (!startValueIsArray) // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                if (isInterpolationList) // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                else _valuesStartRepeat[property] = _valuesStart[property] || 0;\n            }\n        }\n    };\n    Tween.prototype.stop = function() {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) return this;\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) this._onStopCallback(this._object);\n        return this;\n    };\n    Tween.prototype.end = function() {\n        this._goToEnd = true;\n        this.update(Infinity);\n        return this;\n    };\n    Tween.prototype.pause = function(time) {\n        if (time === void 0) time = now$1();\n        if (this._isPaused || !this._isPlaying) return this;\n        this._isPaused = true;\n        this._pauseStart = time;\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        return this;\n    };\n    Tween.prototype.resume = function(time) {\n        if (time === void 0) time = now$1();\n        if (!this._isPaused || !this._isPlaying) return this;\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function() {\n        for(var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++)this._chainedTweens[i].stop();\n        return this;\n    };\n    Tween.prototype.group = function(group) {\n        this._group = group;\n        return this;\n    };\n    Tween.prototype.delay = function(amount) {\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function(times) {\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function(amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function(yoyo) {\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function(easingFunction) {\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function(interpolationFunction) {\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    Tween.prototype.chain = function() {\n        var tweens = [];\n        for(var _i = 0; _i < arguments.length; _i++)tweens[_i] = arguments[_i];\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function(callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function(callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function(callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function(callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function(callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     */ Tween.prototype.update = function(time, autoStart) {\n        if (time === void 0) time = now$1();\n        if (autoStart === void 0) autoStart = true;\n        if (this._isPaused) return true;\n        var property;\n        var elapsed;\n        var endTime = this._startTime + this._duration;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (time > endTime) return false;\n            if (autoStart) this.start(time);\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) return true;\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) this._onStartCallback(this._object);\n            this._onStartCallbackFired = true;\n        }\n        elapsed = (time - this._startTime) / this._duration;\n        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) this._onUpdateCallback(this._object, elapsed);\n        if (elapsed === 1) {\n            if (this._repeat > 0) {\n                if (isFinite(this._repeat)) this._repeat--;\n                // Reassign starting values, restart by making startTime = now\n                for(property in this._valuesStartRepeat){\n                    if (!this._yoyo && typeof this._valuesEnd[property] === \"string\") this._valuesStartRepeat[property] = // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    if (this._yoyo) this._swapEndStartRepeatValues(property);\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) this._reversed = !this._reversed;\n                if (this._repeatDelayTime !== undefined) this._startTime = time + this._repeatDelayTime;\n                else this._startTime = time + this._delayTime;\n                if (this._onRepeatCallback) this._onRepeatCallback(this._object);\n                return true;\n            } else {\n                if (this._onCompleteCallback) this._onCompleteCallback(this._object);\n                for(var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++)// Make the chained tweens start exactly at the time they should,\n                // even if the `update()` method was called way past the duration of the tween\n                this._chainedTweens[i].start(this._startTime + this._duration);\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {\n        for(var property in _valuesEnd){\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) continue;\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) _object[property] = this._interpolationFunction(end, value);\n            else if (typeof end === \"object\" && end) // eslint-disable-next-line\n            // @ts-ignore FIXME?\n            this._updateProperties(_object[property], start, end, value);\n            else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === \"number\") // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                _object[property] = start + (end - start) * value;\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function(start, end) {\n        if (typeof end !== \"string\") return end;\n        if (end.charAt(0) === \"+\" || end.charAt(0) === \"-\") return start + parseFloat(end);\n        else return parseFloat(end);\n    };\n    Tween.prototype._swapEndStartRepeatValues = function(property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === \"string\") this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        else this._valuesStartRepeat[property] = this._valuesEnd[property];\n        this._valuesEnd[property] = tmp;\n    };\n    return Tween;\n}();\nvar VERSION = \"18.6.4\";\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */ var nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */ var TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\nvar getAll = TWEEN.getAll.bind(TWEEN);\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\nvar add = TWEEN.add.bind(TWEEN);\nvar remove = TWEEN.remove.bind(TWEEN);\nvar update = TWEEN.update.bind(TWEEN);\nvar exports = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now$1,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    getAll: getAll,\n    removeAll: removeAll,\n    add: add,\n    remove: remove,\n    update: update\n};\nvar $5368e101edc58608$export$2e2bcd8739ae039 = exports;\n\n});\nparcelRegister(\"ibaza\", function(module, exports) {\n// shim for using process in browser\nvar $d3c1734dacb01657$var$process = module.exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar $d3c1734dacb01657$var$cachedSetTimeout;\nvar $d3c1734dacb01657$var$cachedClearTimeout;\nfunction $d3c1734dacb01657$var$defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction $d3c1734dacb01657$var$defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") $d3c1734dacb01657$var$cachedSetTimeout = setTimeout;\n        else $d3c1734dacb01657$var$cachedSetTimeout = $d3c1734dacb01657$var$defaultSetTimout;\n    } catch (e) {\n        $d3c1734dacb01657$var$cachedSetTimeout = $d3c1734dacb01657$var$defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") $d3c1734dacb01657$var$cachedClearTimeout = clearTimeout;\n        else $d3c1734dacb01657$var$cachedClearTimeout = $d3c1734dacb01657$var$defaultClearTimeout;\n    } catch (e) {\n        $d3c1734dacb01657$var$cachedClearTimeout = $d3c1734dacb01657$var$defaultClearTimeout;\n    }\n})();\nfunction $d3c1734dacb01657$var$runTimeout(fun) {\n    if ($d3c1734dacb01657$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n    // if setTimeout wasn't available but was latter defined\n    if (($d3c1734dacb01657$var$cachedSetTimeout === $d3c1734dacb01657$var$defaultSetTimout || !$d3c1734dacb01657$var$cachedSetTimeout) && setTimeout) {\n        $d3c1734dacb01657$var$cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $d3c1734dacb01657$var$cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return $d3c1734dacb01657$var$cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return $d3c1734dacb01657$var$cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction $d3c1734dacb01657$var$runClearTimeout(marker) {\n    if ($d3c1734dacb01657$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations\n    return clearTimeout(marker);\n    // if clearTimeout wasn't available but was latter defined\n    if (($d3c1734dacb01657$var$cachedClearTimeout === $d3c1734dacb01657$var$defaultClearTimeout || !$d3c1734dacb01657$var$cachedClearTimeout) && clearTimeout) {\n        $d3c1734dacb01657$var$cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $d3c1734dacb01657$var$cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return $d3c1734dacb01657$var$cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return $d3c1734dacb01657$var$cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar $d3c1734dacb01657$var$queue = [];\nvar $d3c1734dacb01657$var$draining = false;\nvar $d3c1734dacb01657$var$currentQueue;\nvar $d3c1734dacb01657$var$queueIndex = -1;\nfunction $d3c1734dacb01657$var$cleanUpNextTick() {\n    if (!$d3c1734dacb01657$var$draining || !$d3c1734dacb01657$var$currentQueue) return;\n    $d3c1734dacb01657$var$draining = false;\n    if ($d3c1734dacb01657$var$currentQueue.length) $d3c1734dacb01657$var$queue = $d3c1734dacb01657$var$currentQueue.concat($d3c1734dacb01657$var$queue);\n    else $d3c1734dacb01657$var$queueIndex = -1;\n    if ($d3c1734dacb01657$var$queue.length) $d3c1734dacb01657$var$drainQueue();\n}\nfunction $d3c1734dacb01657$var$drainQueue() {\n    if ($d3c1734dacb01657$var$draining) return;\n    var timeout = $d3c1734dacb01657$var$runTimeout($d3c1734dacb01657$var$cleanUpNextTick);\n    $d3c1734dacb01657$var$draining = true;\n    var len = $d3c1734dacb01657$var$queue.length;\n    while(len){\n        $d3c1734dacb01657$var$currentQueue = $d3c1734dacb01657$var$queue;\n        $d3c1734dacb01657$var$queue = [];\n        while(++$d3c1734dacb01657$var$queueIndex < len)if ($d3c1734dacb01657$var$currentQueue) $d3c1734dacb01657$var$currentQueue[$d3c1734dacb01657$var$queueIndex].run();\n        $d3c1734dacb01657$var$queueIndex = -1;\n        len = $d3c1734dacb01657$var$queue.length;\n    }\n    $d3c1734dacb01657$var$currentQueue = null;\n    $d3c1734dacb01657$var$draining = false;\n    $d3c1734dacb01657$var$runClearTimeout(timeout);\n}\n$d3c1734dacb01657$var$process.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];\n    $d3c1734dacb01657$var$queue.push(new $d3c1734dacb01657$var$Item(fun, args));\n    if ($d3c1734dacb01657$var$queue.length === 1 && !$d3c1734dacb01657$var$draining) $d3c1734dacb01657$var$runTimeout($d3c1734dacb01657$var$drainQueue);\n};\n// v8 likes predictible objects\nfunction $d3c1734dacb01657$var$Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n$d3c1734dacb01657$var$Item.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\n$d3c1734dacb01657$var$process.title = \"browser\";\n$d3c1734dacb01657$var$process.browser = true;\n$d3c1734dacb01657$var$process.env = {};\n$d3c1734dacb01657$var$process.argv = [];\n$d3c1734dacb01657$var$process.version = \"\"; // empty string to avoid regexp issues\n$d3c1734dacb01657$var$process.versions = {};\nfunction $d3c1734dacb01657$var$noop() {}\n$d3c1734dacb01657$var$process.on = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.addListener = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.once = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.off = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.removeListener = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.removeAllListeners = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.emit = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.prependListener = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.prependOnceListener = $d3c1734dacb01657$var$noop;\n$d3c1734dacb01657$var$process.listeners = function(name) {\n    return [];\n};\n$d3c1734dacb01657$var$process.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\n$d3c1734dacb01657$var$process.cwd = function() {\n    return \"/\";\n};\n$d3c1734dacb01657$var$process.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\n$d3c1734dacb01657$var$process.umask = function() {\n    return 0;\n};\n\n});\n\n\n/** @module */ /** @module */ /** @module */ /**\r\n * Javascript Utilities.\r\n * Just a few helpful functions that are self-contained and don't need much context.\r\n * @module */ /** @module */ /** @module */ const $a13bab49ccd6d247$var$coefInvSqrt2Pi = 1 / Math.sqrt(2 * Math.PI);\nfunction $a13bab49ccd6d247$export$f6e9b6133dd229d9(x, mean, sd) {\n    const coef = $a13bab49ccd6d247$var$coefInvSqrt2Pi / sd;\n    return coef * Math.exp(-0.5 * ((x - mean) / sd) ** 2);\n}\nfunction $a13bab49ccd6d247$export$e94e7ee3b047a94d(x, mean, sd) {\n    if (x === Infinity) return 1;\n    if (x === -Infinity) return 0;\n    return 0.5 * $a13bab49ccd6d247$var$erf((x - mean) / (sd * Math.sqrt(2))) + 0.5;\n}\nfunction $a13bab49ccd6d247$var$erf(x) {\n    const ERF_A = 0.147;\n    const x2 = x ** 2;\n    const down = 1 + ERF_A * x2;\n    const up = 4 / Math.PI + ERF_A * x2;\n    const ratio = -(up / down) * x2;\n    const expofun = Math.exp(ratio);\n    const radical = Math.sqrt(1 - expofun);\n    const z = radical * Math.sign(x);\n    return z;\n}\nfunction $a13bab49ccd6d247$export$d40dd1c74110676b(proportion) {\n    // probability mass function\n    const pmf = $a13bab49ccd6d247$export$36468e3b15474df0(proportion);\n    // https://stackoverflow.com/a/20477613\n    // [5, 10, 3, 2];\n    // [5, 15, 18, 20]\n    // cumulative distribution function\n    const cdf = [];\n    pmf.reduce((p, c, i)=>{\n        const a = p + c;\n        cdf[i] = a;\n        return a;\n    }, 0);\n    return cdf;\n}\nfunction $a13bab49ccd6d247$export$36468e3b15474df0(pdf) {\n    const sum = pdf.reduce((p, c)=>p + c);\n    return pdf.map((p)=>p / sum);\n}\nfunction $a13bab49ccd6d247$export$e7b853c6915bd571(a) {\n    return a.map((x, i)=>{\n        if (i === 0) return x;\n        return x - a[i - 1];\n    });\n}\nfunction $a13bab49ccd6d247$export$2fa81e417e3da73b(cdf, rng) {\n    // sample from distribution\n    // pick a random number from 0 to 1\n    const random1 = rng();\n    const index = cdf.findIndex((x)=>x >= random1);\n    return index;\n}\n\n\nfunction $3bbab14ea57a7ae9$export$2e2bcd8739ae039(canDnGeoms, dimensions) {\n    const proportion = dimensions === 1 ? canDnGeoms.map((cd)=>cd.w) : canDnGeoms.map((cd)=>cd.w ** 2);\n    const canDnCDF = (0, $a13bab49ccd6d247$export$d40dd1c74110676b)(proportion);\n    return canDnCDF;\n}\n\n\n/** @module */ /**\r\n * List the indices of an array of length n.\r\n * @param {number} n - length of array\r\n * @returns {number[]} - A number array from 0 to n-1.\r\n */ function $c9cda941ee132d98$export$d02631cccf789723(n) {\n    const a = Array(n);\n    for(let i = 0; i < n; i++)a[i] = i;\n    return a;\n}\nfunction $c9cda941ee132d98$export$49bdca8d9bee322f(a) {\n    return a.reduce((p, c)=>p + c);\n}\nfunction $c9cda941ee132d98$export$4c7897fafd92b108(a) {\n    const n = a.length;\n    return a[n - 1];\n}\n\n\n\n/** @module */ function $e76ce676473ff390$export$e410eba367ce792b(a) {\n    let min = Infinity;\n    let iClosest = null;\n    for(let i = 0; i < a.length; i++){\n        const d = a[i];\n        if (d < min) {\n            min = d;\n            iClosest = i;\n        }\n    }\n    return iClosest;\n}\nfunction $e76ce676473ff390$export$6e0413888cd9bad3(a) {\n    let max = -Infinity;\n    let iMax = null;\n    for(let i = 0; i < a.length; i++){\n        const d = a[i];\n        if (d > max) {\n            max = d;\n            iMax = i;\n        }\n    }\n    return iMax;\n}\nfunction $e76ce676473ff390$export$6fb785c609d82593(a) {\n    let min = a[0];\n    let max = a[0];\n    for(let i = 0; i < a.length; i++){\n        const d = a[i];\n        if (d < min) min = d;\n        if (d > max) max = d;\n    }\n    return [\n        min,\n        max\n    ];\n}\n\n\n/** @module */ /**\r\n * Try to deepcopy an object.\r\n * @param {object} a - an object to copy.\r\n * @returns {object} A copy of a.\r\n */ function $912c109451e3e417$export$88483c833f74f910(a) {\n    return JSON.parse(JSON.stringify(a));\n}\nfunction $912c109451e3e417$export$f67cbcd1c395127c(a) {\n    const n = a.length;\n    const b = Array(n);\n    for(let i = 0; i < n; i++)b[i] = a[i];\n    return b;\n}\nfunction $912c109451e3e417$export$36bc15d7720c7140(a) {\n    const n = a.length;\n    const b = Array(n);\n    for(let i = 0; i < n; i++){\n        const m = a[i].length;\n        b[i] = Array(m);\n        for(let k = 0; k < m; k++)b[i][k] = a[i][k];\n    }\n    return b;\n}\n\n\n\n\nfunction $c15271acf3d28b91$export$2e2bcd8739ae039() {\n    const self = this;\n    const changes = [\n        \"init\"\n    ];\n    self.add = (changeList)=>{\n        changeList.forEach((c)=>changes.push(c));\n    };\n    self.check = (changeList)=>{\n        let n = 0;\n        changeList.forEach((c)=>{\n            n += changes.includes(c) ? 1 : 0;\n        });\n        return n > 0;\n    };\n    self.checkNone = ()=>changes.length === 0;\n    self.checkAny = ()=>changes.length !== 0;\n    self.clear = ()=>{\n        changes.splice(0, changes.length);\n    };\n    self.numChanges = ()=>changes.length;\n    self.getChanges = ()=>(0, $912c109451e3e417$export$88483c833f74f910)(changes) // debugging\n    ;\n}\n\n\n/** @module */ /**\r\n * Keep a\r\n * @param {Commander} commander  */ function $70368e423808ca8a$export$2e2bcd8739ae039(commander) {\n    const self = this;\n    // A list of actions we can execute (for sender)\n    const actions = [];\n    /**\r\n     * A menu item or other object can add an action that it wants to execute with a value.\r\n     * The action can be performed by calling commander.do(command),\r\n     * where command has a name and value.\r\n     * @param {String} name - The name of the action.\r\n     * @param {Function} action - The action function itself, which is called with a value.\r\n     */ self.addSender = (args)=>{\n        const { name: name, action: action, props: props } = args;\n        actions[name] = action;\n        const command = (value)=>({\n                name: name,\n                value: value,\n                props: props\n            });\n        const go = (value)=>commander.do(command(value));\n        const load = (value)=>commander.loadCommands([\n                command(value)\n            ]);\n        const sender = {\n            command: command,\n            go: go,\n            load: load\n        };\n        return sender;\n    };\n    /**\r\n     * Make a sender with a command and a way to do the command.\r\n     * This type of sender deals with lists.\r\n     *\r\n     * Say we want to change a value for the nth candidate.\r\n     * And say the nth candidate doesn't exist.\r\n     * Then we have to use an action which acts on the list of candidates,\r\n     * rather than the candidate itself.\r\n     *\r\n     * @param {Object} args\r\n     * @returns {Object} - methods command(id,value) and go(id,value)\r\n     */ self.addSenderForList = (args)=>{\n        const { name: name, action: action, props: props } = args;\n        actions[name] = action;\n        const command = (id, value, currentValue)=>({\n                name: name,\n                id: id,\n                value: value,\n                props: props,\n                currentValue: currentValue\n            });\n        const go = (id, value, currentValue)=>commander.do(command(id, value, currentValue));\n        const load = (id, value, currentValue)=>commander.loadCommands([\n                command(id, value, currentValue)\n            ]);\n        const sender = {\n            command: command,\n            go: go,\n            load: load\n        };\n        return sender;\n    };\n    /**\r\n     * Actually execute the action.\r\n     * @param {Object} command -\r\n     */ self.execute = (command)=>{\n        const { name: name, id: id, value: value } = command;\n        const action = actions[name];\n        if (id !== undefined) action(id, value);\n        else action(value);\n    };\n}\n\n\n/** @module */ /** Connect two sandboxes by passing messages between their commanders.\r\n * This is kind of like a mediator pattern, but also maybe an observer pattern. */ class $c1a641038cdfa870$export$2e2bcd8739ae039 {\n    /** Make sure broadcasted commands don't trigger broadcasts */ // All variables are intended to be private.\n    constructor(){\n        this.linked = true;\n        this.commanders = [];\n        this.protect = false;\n    }\n    setLinked(value) {\n        this.linked = value;\n    }\n    addCommander(commander) {\n        this.commanders.push(commander);\n    }\n    broadcastDo(command, originCommander) {\n        if (this.linked && this.protect === false) {\n            this.protect = true;\n            this.commanders.forEach((com)=>com.passDo(command));\n            this.protect = false;\n        } else originCommander.passDo(command);\n    }\n    broadcastDoCommands(commands, originCommander) {\n        if (this.linked && this.protect === false) {\n            this.protect = true;\n            this.commanders.forEach((com)=>com.passDoCommands(commands));\n            this.protect = false;\n        } else originCommander.passDoCommands(commands);\n    }\n    broadcastLoadConfig(newConfig, originCommander) {\n        if (this.linked && this.protect === false) {\n            this.protect = true;\n            this.commanders.forEach((com)=>com.passLoadConfig(newConfig));\n            this.protect = false;\n        } else originCommander.passLoadConfig(newConfig);\n    }\n    broadCastLoadCommands(commands, originCommander) {\n        if (this.linked && this.protect === false) {\n            this.protect = true;\n            this.commanders.forEach((com)=>com.passLoadCommands(commands));\n            this.protect = false;\n        } else originCommander.passLoadCommands(commands);\n    }\n}\n\n\n/** Handle the Config */ function $b08a4e41f55fe5b0$export$2e2bcd8739ae039(commander) {\n    const self = this;\n    // The list of all mementos\n    const config = {};\n    const firstActions = [];\n    /**\r\n     * A menu item or other object can add an action that it wants to execute with a value.\r\n     * The action can be performed by calling commander.do(command),\r\n     * where command has a name and value.\r\n     * @param {String} name - The name of the action.\r\n     * @param {Function} action - The action function itself, which is called with a value.\r\n     */ self.addSender = (args)=>{\n        const { name: name, currentValue: currentValue, props: props } = args;\n        if (props !== undefined && props.isFirstAction) firstActions[name] = true;\n        config[name] = currentValue;\n    };\n    /**\r\n     * Make a sender with a command and a way to do the command.\r\n     * This type of sender deals with lists.\r\n     *\r\n     * Say we want to change a value for the nth candidate.\r\n     * And say the nth candidate doesn't exist.\r\n     * Then we have to use an action which acts on the list of candidates,\r\n     * rather than the candidate itself.\r\n     *\r\n     * @param {Object} args\r\n     * @returns {Function} - a method to get the current value at an id.\r\n     */ self.addSenderForList = (args)=>{\n        const { name: name, props: props } = args;\n        if (props !== undefined && props.isFirstAction) firstActions[name] = true;\n        config[name] = [];\n        const getCurrentValue = (id)=>config[name][id];\n        return getCurrentValue;\n    };\n    /**\r\n     * Update the config when executing a command.\r\n     * @param {Object} command -\r\n     */ self.execute = (command)=>{\n        const { name: name, id: id, value: value } = command;\n        if (id !== undefined) config[name][id] = value;\n        else config[name] = value;\n    };\n    self.makeUndo = (command)=>{\n        const { name: name, id: id, props: props } = command // command is {name, value, props}\n        ;\n        // Store the current value so we can undo the command.\n        let currentValue;\n        if (id === undefined) currentValue = config[name];\n        else {\n            currentValue = config[name][id];\n            if (currentValue === undefined) currentValue = command.currentValue;\n        }\n        // Store how to undo the command.\n        const undoCommand = {\n            name: name,\n            id: id,\n            value: currentValue,\n            props: props\n        };\n        return undoCommand;\n    };\n    self.passLoadConfig = (newConfig)=>{\n        // newConfig is a list of commands to execute.\n        self.loadConfigPriority(newConfig, \"high\");\n        self.loadConfigPriority(newConfig, \"low\");\n    };\n    self.loadConfigPriority = (newConfig, priority)=>{\n        // newConfig is a list of commands to execute.\n        const names = Object.keys(newConfig);\n        names.forEach((name)=>{\n            // Decide whether to process commands, based on their priority.\n            const isHigh = firstActions[name] !== undefined;\n            if (priority === \"low\" && isHigh) return;\n            if (priority === \"high\" && !isHigh) return;\n            // if we have a list, then create commands for each item in the list\n            const valueArray = newConfig[name];\n            if (valueArray instanceof Array) valueArray.forEach((value, id)=>{\n                // const subValue = newConfig[name][id]\n                const command = {\n                    name: name,\n                    id: id,\n                    value: value\n                };\n                commander.execute(command);\n            });\n            else {\n                const value = valueArray;\n                const command = {\n                    name: name,\n                    value: value\n                };\n                commander.execute(command);\n            }\n        });\n    };\n    self.passLoadCommands = (commands)=>{\n        // execute commands without adding to history\n        commands.forEach((command)=>{\n            commander.execute(command);\n        });\n    };\n    self.getConfig = ()=>structuredClone(config);\n}\n\n\nfunction $73f365686e2c9818$export$2e2bcd8739ae039(commander) {\n    const self = this;\n    // Keep commands and undos in history\n    const history = [];\n    let head = -1 // Head is where we are in history, where our head is at.\n    ;\n    self.clearHistory = ()=>{\n        history.splice(0, history.length);\n        head = -1;\n    };\n    /**\r\n     * We want to do a command. We need to keep track of what we do so we can undo it.\r\n     * @param {Object} command\r\n     * @param {String} command.name\r\n     * @param {(String|Number|Boolean)} command.value\r\n     * @param {Object} command.props - a catchall for easier coding\r\n     */ self.passDo = (command)=>{\n        const undoCommand = commander.makeUndo(command);\n        // remove future redos\n        // example: head:-1 means history will be cleared splice(0,length)\n        history.splice(head + 1, history.length - (head + 1));\n        // Actually preform the command.\n        commander.execute(command);\n        // Add command to history\n        if (command.props && command.props.combineWithCurrentCommand && head > -1) // combine with current command.\n        history[head].push({\n            command: command,\n            undoCommand: undoCommand\n        });\n        else {\n            history.push([\n                {\n                    command: command,\n                    undoCommand: undoCommand\n                }\n            ]);\n            head += 1;\n        }\n    };\n    /**\r\n     * Do a set of commands together, so they have one history item.\r\n     * @param {Object[]} commands - a list of command objects\r\n     */ self.passDoCommands = (commands)=>{\n        // remove future redos\n        // example: head:-1 means history will be cleared splice(0,length)\n        history.splice(head + 1, history.length - (head + 1));\n        const historyItem = [];\n        commands.forEach((command)=>{\n            // todo: make into one undo item\n            const undoCommand = commander.makeUndo(command);\n            // Store in one history item\n            historyItem.push({\n                command: command,\n                undoCommand: undoCommand\n            });\n            // Actually preform the command.\n            commander.execute(command);\n        });\n        // Add command to history\n        history.push(historyItem);\n        head += 1;\n    };\n    // control the duration of the setXY undos with a timeout. Here's a default timeout.\n    const chainDuration = 30;\n    let chainTimer = setTimeout(()=>null, chainDuration);\n    self.undo = ()=>{\n        if (head === -1) return; // There is no history\n        const last = history[head];\n        last.forEach((pair)=>{\n            commander.execute(pair.undoCommand);\n        });\n        head -= 1 // Now we're in the past.\n        ;\n        // If we're in a setXY chain, then continue with another undo after a pause.\n        const { undoCommand: undoCommand } = last[0];\n        if (undoCommand.props === undefined) return;\n        if (undoCommand.props.isChain !== true) return;\n        if (head === -1) return;\n        const penUltimate = history[head][0];\n        if (penUltimate.undoCommand.props.isChain !== true) return;\n        if (penUltimate.undoCommand.name !== undoCommand.name) return;\n        if (undoCommand.id !== undefined && penUltimate.undoCommand.id !== undoCommand.id) return;\n        // todo: make this only work for repeated setXY commands\n        // set timer and callback\n        clearTimeout(chainTimer);\n        chainTimer = setTimeout(self.undo, chainDuration);\n    };\n    self.redo = ()=>{\n        if (head === history.length - 1) return; // Nothing to do\n        const next = history[head + 1];\n        next.forEach((pair)=>commander.execute(pair.command));\n        head += 1 // Now we're in the future.\n        ;\n        // If we're in a setXY chain, then continue with another redo after a pause.\n        const { command: command } = next[0];\n        if (command.props === undefined) return;\n        if (command.props.isChain !== true) return;\n        if (head === history.length - 1) return;\n        const nextnext = history[head + 1][0];\n        if (nextnext.command.props.isChain !== true) return;\n        if (nextnext.command.name !== command.name) return;\n        if (command.id !== undefined && nextnext.command.id !== command.id) return;\n        // todo: make this only work for repeated setXY commands\n        // set timer and callback\n        clearTimeout(chainTimer);\n        chainTimer = setTimeout(self.redo, chainDuration);\n    };\n}\n\n\nfunction $a47780f4820c2a83$export$2e2bcd8739ae039(optComMessenger) {\n    const self = this;\n    const commandStore = new (0, $70368e423808ca8a$export$2e2bcd8739ae039)(self);\n    const configKeeper = new (0, $b08a4e41f55fe5b0$export$2e2bcd8739ae039)(self);\n    const history = new (0, $73f365686e2c9818$export$2e2bcd8739ae039)(self);\n    const comMessenger = optComMessenger || new (0, $c1a641038cdfa870$export$2e2bcd8739ae039)();\n    comMessenger.addCommander(self);\n    /**\r\n     * A menu item or other object can add an action that it wants to execute with a value.\r\n     * The action can be performed by calling commander.do(command),\r\n     * where command has a name and value.\r\n     * @param {Object} args - argument catchall\r\n     * @param {String} args.name - The name of the action.\r\n     * @param {Function} args.action - The action function itself, which is called with a value.\r\n     */ // make a sender with a command and a way to do the command\n    self.addSender = (args)=>{\n        configKeeper.addSender(args);\n        const sender = commandStore.addSender(args);\n        return sender;\n    };\n    /** Say we want to change a value for the nth candidate.\r\n     * And say the nth candidate doesn't exist.\r\n     * Then we have to use an action which acts on the list of candidates,\r\n     * rather than the candidate itself.\r\n     */ /**\r\n     * Make a sender with a command and a way to do the command.\r\n     * This type of sender deals with lists.\r\n     * @param {Object} args\r\n     * @returns {Object} - methods command(id,value) and go(id,value)\r\n     */ self.addSenderForList = (args)=>{\n        const sender = commandStore.addSenderForList(args);\n        sender.getCurrentValue = configKeeper.addSenderForList(args);\n        return sender;\n    };\n    /**\r\n     * Actually execute the action.\r\n     * @param {Object} command -\r\n     */ self.execute = (command)=>{\n        configKeeper.execute(command);\n        commandStore.execute(command);\n    };\n    // ConfigKeeper functions\n    self.makeUndo = configKeeper.makeUndo;\n    self.passLoadConfig = configKeeper.passLoadConfig;\n    self.passLoadCommands = configKeeper.passLoadCommands;\n    self.getConfig = configKeeper.getConfig;\n    self.loadConfig = (newConfig)=>{\n        // the broadcast will call passLoadConfig\n        comMessenger.broadcastLoadConfig(newConfig, self);\n    };\n    self.loadCommands = (commands)=>{\n        // the broadcast will call passLoadComands\n        comMessenger.broadCastLoadCommands(commands, self);\n    };\n    // History functions\n    /**\r\n     * Put a commandMessenger in the middle,\r\n     * between the command being asked for and the command being done.\r\n     * @param {Object} command - a command to do. See passDo.\r\n     */ self.do = (command)=>{\n        // the broadcast will call passDo\n        comMessenger.broadcastDo(command, self);\n    };\n    self.doCommands = (commands)=>{\n        // the broadcast will call passDoCommands\n        comMessenger.broadcastDoCommands(commands, self);\n    };\n    self.passDo = history.passDo;\n    self.passDoCommands = history.passDoCommands;\n    self.undo = history.undo;\n    self.redo = history.redo;\n    self.clearHistory = history.clearHistory;\n}\n\n\n/**\r\n * Add menu items to switch between types of sim modes.\r\n * @param {Menu} menu\r\n */ function $37bbc074930a134e$export$2e2bcd8739ae039(changes, commander) {\n    const self = this;\n    self.init = ()=>{\n        // Defaults\n        self.setMode(\"one\");\n        self.setDimensions(2);\n        self.seeds = [\n            0\n        ];\n        self.setSeedRandom(true);\n    };\n    self.setMode = commander.addSender({\n        name: \"mode\",\n        currentValue: self.mode,\n        action (mode) {\n            self.mode = mode;\n            changes.add([\n                \"mode\"\n            ]);\n        }\n    }).go;\n    self.setDimensions = commander.addSender({\n        name: \"dimensions\",\n        currentValue: self.dimensions,\n        action (dimensions) {\n            self.dimensions = dimensions;\n            changes.add([\n                \"dimensions\"\n            ]);\n        }\n    }).go;\n    self.setSeeds = commander.addSenderForList({\n        name: \"seeds\",\n        action (i, seed) {\n            self.seeds[i] = seed;\n            changes.add([\n                \"seeds\"\n            ]);\n        },\n        props: {\n            combineWithCurrentCommand: true\n        }\n    }).go;\n    self.setSeedRandom = commander.addSender({\n        name: \"seedRandom\",\n        currentValue: self.seedRandom,\n        action (seedRandom) {\n            self.seedRandom = seedRandom;\n            changes.add([\n                \"seedRandom\"\n            ]);\n        }\n    }).go;\n    self.resultsPhaseBySeq = {\n        general: \"general\",\n        closedPrimary: \"general\",\n        nonpartisanOpenPrimary: \"general\"\n    };\n    self.setResultsPhase = (sequence, val)=>{\n        self.resultsPhaseBySeq[sequence] = val;\n        changes.add([\n            \"resultsPhase\"\n        ]);\n    };\n    self.resultsPartyBySeq = {\n        general: undefined,\n        closedPrimary: 0,\n        nonpartisanOpenPrimary: undefined\n    };\n    self.setResultsParty = (sequence, val)=>{\n        self.resultsPartyBySeq[sequence] = val;\n        changes.add([\n            \"resultsParty\"\n        ]);\n    };\n    self.init();\n}\n\n\n/** @module */ function $b818ddec457ff131$export$2e2bcd8739ae039(changes, simOptions, optionsBag) {\n    const self = this;\n    const castOptions = {\n        usr: 4,\n        verbosity: 2\n    };\n    self.update = ()=>{\n        if (changes.check([\n            \"mode\"\n        ]) || changes.check([\n            \"numTracts\"\n        ])) {\n            if (simOptions.mode === \"one\") {\n                if (optionsBag.numTracts === 1) {\n                    castOptions.verbosity = 2;\n                    castOptions.usr = 4;\n                } else {\n                    castOptions.verbosity = 1;\n                    castOptions.usr = 32;\n                }\n            } else {\n                castOptions.verbosity = 0;\n                if (optionsBag.numTracts === 1) castOptions.usr = 16;\n                else castOptions.usr = 32;\n            }\n        }\n    };\n    self.getOptions = ()=>({\n            ...castOptions\n        });\n}\n\n\n/** @module */ /** @module */ /**\r\n * @namespace typesMath\r\n */ /**\r\n * @typedef {number[]} lineHomogeneous - line in homogeneous coordinates, [ax, ay, b],\r\n * ax * x + ay * y = b\r\n * @memberof typesMath\r\n */ /**\r\n * @typedef {object} vector2D\r\n * @property {number} x\r\n * @property {number} y\r\n * @memberof typesMath\r\n */ var $e0b7af443585cb1f$export$2e2bcd8739ae039 = {};\n\n\nvar /**\r\n * @namespace typesCanBorders\r\n */ /**\r\n * @typedef {object} canBorders\r\n * @property {pairwiseIntervals1D} [pairwiseIntervals1D]\r\n * @property {voronoiIntervals1D} [voronoiIntervals1D]\r\n * @property {voronoiLines2D} [voronoiLines2D]\r\n * @property {rankingIntervals1D} [rankingIntervals1D]\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {object} pairwiseIntervals1D\r\n * @property {number[][]} midpoints - midpoint for every pair of candidates\r\n * @property {number[][]} iLower - true if first candidate of pair is lower in x coordinate than second.\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {object} voronoiIntervals1D\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {typesMath.lineHomogeneous[]} voronoiLines2D\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {object} rankingIntervals1D\r\n * @memberof typesCanBorders\r\n */ $db5d16cbf987ea1d$export$2e2bcd8739ae039 = {};\n\n\n// How exporting types works:\n// https://stackoverflow.com/a/73232942\n/**\r\n * @namespace typesCast\r\n */ /**\r\n * @typedef {object} castOptions - options for how to cast votes.\r\n * @property {number} usr - undersampling ratio. Sample grid points faster by reducing resolution in each dimension by this factor.\r\n * @property {number} verbosity - how much to store in votes data structure.\r\n * @memberof typesCast\r\n */ var $1ff3aaccec1a4b3a$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesGeoms\r\n */ /**\r\n * @typedef {canPoint1D[] | canPoint2D[]} canPoints - geometries for a number of candidates.\r\n * For 2D, an array of objects: {x,y}. For 1D, an array of objects: {x}.\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {voterGeom1D[] | voterGeom2D[]} voterGeoms - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {voterGeom1D | voterGeom2D} voterGeom - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {number} canPoint1D - the point where a candidate sits in 1D - x position\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {number[]} canPoint2D - the point where a candidate sits in 2D- [x,y] position\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {object} voterGeom1D - the geometry of a voter distribution in 1D\r\n * @property {number} x - x position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {object} voterGeom2D - the geometry of a voter distribution in 2D\r\n * @property {number} x - x position\r\n * @property {number} y - y position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */ var $1d5e329d7a352c99$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesPoints\r\n */ /**\r\n * @typedef {point[]} points - For 2D, an array of objects: {x,y,w}. For 1D, an array of objects: {x,w,densityProfile}.\r\n */ /**\r\n * @typedef {point1D | point2D} point\r\n */ /**\r\n * @typedef {number} point1D - a point in 1D, x coordinate in policy space.\r\n * @memberof typesPoints\r\n */ /**\r\n * @typedef {number[]} point2D - a point in 2D, [x,y] coordinates in policy space.\r\n * @memberof typesPoints\r\n */ var $b90f6195f509a461$export$2e2bcd8739ae039 = {};\n\n\nvar // How exporting types works:\n// https://stackoverflow.com/a/73232942\n/**\r\n * @namespace typesGeometry\r\n */ /**\r\n * @typedef {object} geometry - geometry for casting votes\r\n * @property {geoms.canPoints} canPoints\r\n * @property {geoms.voterGeoms} voterGeoms\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @property {string} [strategySeed]\r\n * @property {object} [voterStrategyList]\r\n * @memberof typesGeometry\r\n */ /**\r\n * @typedef {object} parties - describes parties each candidate belongs to.\r\n * @property {number[]} partiesByCan - each candidate has party.\r\n * @property {number} numParties - total number of parties.\r\n * @memberof typesGeometry\r\n */ /**\r\n * @typedef {object} testGeometry -geometry for casting one vote\r\n * @property {typesPoints.points} canPoints\r\n * @property {typesPoints.points} voterPoints\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @memberof typesGeometry\r\n */ $ff6f0e506ce588be$export$2e2bcd8739ae039 = {};\n\n\n\n\n\nvar /**\r\n * @namespace typesGrid\r\n */ /**\r\n * @typedef {grid1D | grid2D} grid - data for points on a grid\r\n */ /**\r\n * @typedef {object} grid1D - data for points on a 1D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {typesGeoms.voterGeom1D} voterGeom - the geometry of a voter distribution in 1D\r\n * @memberof typesGrid\r\n */ /**\r\n* @typedef {object} gridX\r\n* @property {number[]} gridX - x coordinates for grid points\r\n* @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n* @property {number} gridPointLength - size of grid point's region in policy space. density * length = count.\r\n * @memberof typesGrid\r\n */ /**\r\n * @typedef {object} grid2D - data for points on a 2D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} y - y coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number} nx - number of x coordinates\r\n * @property {number} ny - number of y coordinates\r\n * @property {number} width - width and height of grid in pixels. grid is square.\r\n * @property {typesPoints.point2D[]} voterPoints - grid points in point2D format\r\n * @property {typesGeoms.voterGeom2D} voterGeom - the geometry of a voter distribution in 2D\r\n * @memberof typesGrid\r\n */ $78c9ef1ec5be0cb7$export$2e2bcd8739ae039 = {};\n\n\n\n\n/**\r\n * @namespace typesSocialChoice\r\n */ /**\r\n * @typedef {object} socialChoiceOptions - options to specify a social choice function.\r\n * @property {number} [seats] - Number of candidates to elect.\r\n * @property {number[]} [seatLimits] - Upper limit of number of candidates to elect from each party, useful for OLPR.\r\n * @property {number} [threshold] - The minimum fraction of voters that a party needs to be eligible for a seat.\r\n * @memberof typesSocialChoice\r\n */ /**\r\n * @typedef {object} socialChoiceResults - the results returned from a social choice function.\r\n * @property {number} [iWinner]\r\n * @property {number[]} [allocation] - says whether each candidate is elected (1) or not (0).\r\n * Allocation also applies to parties. It says how many seats were allocated to each party.\r\n * @memberof typesSocialChoice\r\n */ var $81b9f85f5cf72eb2$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesVote\r\n */ /**\r\n * @typedef rankingVote - a rank for each candidate.\r\n * @property {number[]} cansByRank - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[][]} [netWinsPairwise] - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */ /**\r\n * @typedef pairwiseVote - how candidates compare head-to-head.\r\n * @property {number[][]} netWinsPairwise - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [cansByRank] - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */ /**\r\n * @typedef pluralityVote - a choice of a candidate.\r\n * @property {number} pluralityVote - the chosen candidate.\r\n * A candidate is represented as an integer from 0 to a max.\r\n * The max is the number of candidates minus 1.\r\n * @property {number[]} [pluralityAllocation] - an array of 0's except for a 1 for the chosen candidate.\r\n * @memberof typesVote\r\n */ /**\r\n * @typedef scoreVote - a score for each candidate.\r\n * @property {number[]} scoreVote - an array of scores, indexed by candidate\r\n * A score is a number between 0 and 1.\r\n * In the future, maybe integers between 0 and a maximum score.\r\n * @memberof typesVote\r\n */ var $7a7423bea99d367d$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesVoteArrays\r\n */ /**\r\n * @typedef {object[][]} scoreVotes - Each preference has a score for each candidate.\r\n * @memberof typesVoteArrays\r\n */ /**\r\n * @typedef {object[][]} rankings - Each preference has a rank for each candidate.\r\n * @memberof typesVoteArrays\r\n */ /**\r\n * @typedef {number[][][]} cansByRankList - Each preference is a list indexed by ranking.\r\n * A list of candidates is at each ranking.\r\n * The first index is a group of voters who share the same ranking.\r\n * The second index is the rank number.\r\n * The third index is for a list of candidates at that rank.\r\n * @memberof typesVoteArrays\r\n */ var $4110ef2f4bb3f869$export$2e2bcd8739ae039 = {};\n\n\n\n\n\n\n\nvar /**\r\n * @namespace typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {votesForGeomGridRanking | votesForGeomGridPairwise | votesForGeomGridPlurality | votesForGeomGridScore} votesForGeomGrid - Vote data for just one voter geometry in the form of a grid, 1D or 2D.\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridRanking\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.rankingVote[]} [voteSet] - a vote for each grid point\r\n * @property {number[]} voteCounts\r\n * @property {number} totalVotes\r\n * @property {number[]} [bordaFractionAverageByCan]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridPairwise\r\n * @property {typesGrid.grid} grid - data for points on a grid\r\n * @property {typesVote.rankingVote[]} voteSet - a vote for each grid point\r\n * @property {number} totalVotes\r\n * @property {number[]} bordaFractionAverageByCan\r\n * @property {number[][]} winsPairwise -  The number of wins for the first of a pair of candidates.\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridPlurality\r\n * @property {number[]} countByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.pluralityVote[]} [voteSet] - a vote for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridScore\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.scoreVote[]} [voteSet] - a vote for each grid point\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridScoreFull\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {number[]} voteCounts\r\n * @property {typesVote.scoreVote[]} voteSet - a vote for each grid point\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */ $dd7a7f6021a3a9b5$export$2e2bcd8739ae039 = {};\n\n\nvar /**\r\n * @namespace typesVotesForGeom\r\n */ /**\r\n * @typedef {typesVotesForGeomGrid.votesForGeomGrid | votesForGeomCells | votesForGeomIntervals | votesForGeomPlurality} votesForGeom\r\n */ /**\r\n * @typedef {object} votesForGeomCells - Vote data for just one voter geometry in the form of 2D cells.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @property {number[]} voteCounts - number of votes for each cell\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} rankingPolygons2D - calculated cells of 2D policy space where voters share the same ranking.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} votesForGeomIntervals - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} voteCounts - number of votes for each interval\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} rankingIntervals1D - calculated intervals of 1D policy space where voters share the same ranking.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} votesForGeomPlurality - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {number[]} countByCan - The number of plurality votes for a candidate.\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */ $efc5eea7ff5447de$export$2e2bcd8739ae039 = {};\n\n\n\n\nvar /**\r\n * @namespace typesVotes\r\n */ /**\r\n * @typedef {object} votes - The vote a data structure that contains the information needed to elect, explain, and visualize.\r\n * @property {preferenceLists} [preferenceLists] - Lists of preferences.\r\n * @property {preferenceTallies} [preferenceTallies] - How many votes have a listed preference.\r\n * @property {candidateTallies} [candidateTallies] - vote tallies indexed by candidate\r\n * @property {pairwiseTallies} [pairwiseTallies] - pairwise tallies\r\n * @property {typesVotesForGeom.votesForGeom[]} [votesByGeom] - Vote data for each voter geometry. A list of votesForGeom.\r\n * @property {typesGeometry.parties} [parties] - describes parties each candidate belongs to.\r\n * @property {number} numCans - the number of candidates, comes in handy.\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} preferenceLists - Lists of preferences.\r\n * @property {typesVoteArrays.scoreVotes} [scoreVotes]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} [cansByRankList]\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} preferenceTallies - How many votes have a listed preference.\r\n * @property {number[]} voteFractions - The fraction of voters who share the same preference.\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} candidateTallies - vote tallies indexed by candidate\r\n * @property {number[]} [voteFractionsByCan] - The fraction of plurality votes for each candidate.\r\n * @property {number[]} [scoreFractionAverageByCan] - the average fractional score for each candidate.\r\n * @property {number[]} [firstPreferenceFractions] - A list of fractions of voters\r\n * who ranked a candidate first, indexed by candidate.\r\n * @property {number[]} [bordaFractionAverageByCan] - The average fractional borda score for a candidate.\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} pairwiseTallies - pairwise tallies\r\n * @property {number[][]} winFractionPairwise - The fraction of wins for the first of a pair of candidates.\r\n * who preferred candidate i over k, indexed by [i][k].\r\n * @memberof typesVotes\r\n */ $ec8b3611766c58de$export$2e2bcd8739ae039 = {};\n\n\n\n\n\n\n\nfunction $12c51ce367ee7e1e$export$2e2bcd8739ae039(votes) {\n    const { voteFractionsByCan: voteFractionsByCan } = votes.candidateTallies;\n    const iWinner = (0, $e76ce676473ff390$export$6e0413888cd9bad3)(voteFractionsByCan);\n    const socialChoiceResults = {\n        iWinner: iWinner\n    };\n    return socialChoiceResults;\n}\nconst $12c51ce367ee7e1e$export$b3aa8544b1337244 = {\n    name: \"Plurality\",\n    shortName: \"Plurality\",\n    functionName: \"plurality\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"singleWinner\",\n    elect: $12c51ce367ee7e1e$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \nfunction $81e7c52705eea944$export$2e2bcd8739ae039(votes) {\n    const { voteFractionsByCan: voteFractionsByCan } = votes.candidateTallies;\n    const nk = voteFractionsByCan.length;\n    const iWinner = Math.floor(Math.random() * nk);\n    const socialChoiceResults = {\n        iWinner: iWinner\n    };\n    return socialChoiceResults;\n}\nconst $81e7c52705eea944$export$eac25c355fed8538 = {\n    name: \"Random Candidate\",\n    shortName: \"Rand Cand\",\n    functionName: \"randomCandidate\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"singleWinner\",\n    elect: $81e7c52705eea944$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n/** @module */ \n\nfunction $34532331c6074132$export$2e2bcd8739ae039(votes, socialChoiceOptions, typeOfDivisor) {\n    const { seats: seats, threshold: threshold, seatLimits: seatLimits } = socialChoiceOptions;\n    const { voteFractionsByCan: voteFractionsByCan } = votes.candidateTallies;\n    // find out how many parties pass the threshold\n    let populations = voteFractionsByCan.map((p)=>p < threshold ? 0 : p);\n    let positivePopulations = Array(populations.length);\n    for(let i = 0; i < populations.length; i++)positivePopulations[i] = populations[i] === 0 ? 0 : 1;\n    let nPositiveParties = positivePopulations.reduce((p, c)=>p + c);\n    let makeAdjustment = nPositiveParties === 0;\n    // Do we have limits to how many candidates are available in a party?\n    if (seatLimits !== undefined) {\n        // count how many candidates are available to fill seats\n        const candidatesAvailable = positivePopulations.map((p, i)=>p * seatLimits[i]).reduce((p, c)=>p + c);\n        if (candidatesAvailable < seats) makeAdjustment = true;\n    }\n    // Make an adjustment.\n    // Remove the threshold if there are no parties past the threshold.\n    // Count the number of parties with positive populations.\n    if (makeAdjustment) {\n        populations = (0, $912c109451e3e417$export$f67cbcd1c395127c)(voteFractionsByCan);\n        positivePopulations = populations.map((p)=>p === 0 ? 0 : 1);\n        nPositiveParties = positivePopulations.reduce((p, c)=>p + c);\n    }\n    // When there are more parties above the threshold than seats,\n    // we have to give each party a seat in order\n    // instead of continuing with the algorithm.\n    // This is because Huntington Hill has the first signpost at 0.\n    // This is just sntv.\n    // Also, in the edge case where no votes are cast for any parties,\n    // Just assign a default order however javascript sorts the list of presumably 0s.\n    if (typeOfDivisor === \"Huntington-Hill\" && (nPositiveParties > seats || nPositiveParties === 0)) {\n        // sort parties by population\n        // sort decreasing\n        const populationsSorted = [\n            ...populations\n        ].sort((a, b)=>b - a);\n        const minPopulation = populationsSorted[seats - 1];\n        const pops2 = voteFractionsByCan;\n        // todo: consider ties\n        const allocation = pops2.map((p)=>p >= minPopulation ? 1 : 0);\n        const socialChoiceResults = {\n            allocation: allocation\n        };\n        return socialChoiceResults;\n    }\n    // make a list of break points / divisors, independent of vote totals\n    let genDivisors;\n    if (typeOfDivisor === \"huntingtonHill\") genDivisors = (_, i)=>Math.sqrt(i * (i + 1));\n    else if (typeOfDivisor === \"sainteLague\") genDivisors = (_, i)=>i + 0.5;\n    else if (typeOfDivisor === \"dHondt\") genDivisors = (_, i)=>i + 1;\n    const divisorPattern = Array(seats).fill().map(genDivisors);\n    // Scale the divisor pattern for each party.\n    // Call them signposts, like Balinski and Young.\n    // Ref: Balinski and Young 1982, pages 60-66, Chapter 7, Overview of Methods.\n    // Really, these are the divisors for each party.\n    // They are also a ratio of the representatives to the population\n    // except that the divisorPattern is used to substitute a slightly different number\n    // than the number of respresentatives.\n    const signposts = [];\n    const ids = [];\n    let o = 0;\n    for(let i = 0; i < populations.length; i++){\n        const pop = populations[i];\n        if (pop === 0) continue;\n        const numPosts = seatLimits === undefined ? seats : Math.min(seatLimits[i], seats);\n        for(let k = 0; k < numPosts; k++){\n            signposts[o] = divisorPattern[k] / pop;\n            ids[o] = i;\n            o += 1;\n        }\n    }\n    const doOld = false;\n    if (doOld) return $34532331c6074132$var$oldWay(seats, populations, signposts);\n    const order = (0, $c9cda941ee132d98$export$d02631cccf789723)(ids.length).sort((a, b)=>signposts[a] - signposts[b]);\n    const allocation = Array(populations.length).fill(0);\n    for(let i = 0; i < seats; i++){\n        const iId = order[i];\n        const iCan = ids[iId];\n        allocation[iCan] += 1;\n    }\n    // Todo: consider if there is a tie.\n    // Right now, we give extra seats to all the tied parties if there is a tie.\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    return socialChoiceResults;\n}\nfunction $34532331c6074132$var$oldWay(seats, populations, signposts) {\n    // find last signpost to fill all seats\n    // sort increasing\n    const sortedSignposts = signposts.sort((a, b)=>a - b);\n    const tolerance = 0.00000001 // add a little bit of tolerance for machine-accuracy\n    ;\n    // hopefully there will not be any exact ties.\n    const lastSignpost = sortedSignposts[seats - 1] + tolerance;\n    // In the jargon:\n    //   Divide by populations by the divisors to get the quotients.\n    // Or, more clearly:\n    //   Count how many signposts each party has passed.\n    // lastSignpost = d/p\n    // d = p * lastSignpost\n    // sqrt(i*(i+1)) = d\n    // i=0 is one seat\n    // n = i + 1\n    // sqrt(n*(n-1)) = d\n    // n**2 - n = d**2\n    // n = (-b + sqrt(b-4ac) ) / 2a\n    // a = 1, b = -1, c = -d**2\n    // n = (1 + sqrt(1+4d**2) ) / 2\n    const quotients = populations.map((p)=>p === 0 ? 0 : (1 + Math.sqrt(1 + 4 * (p * lastSignpost) ** 2)) * 0.5);\n    const allocation = quotients.map((p)=>Math.floor(p));\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    return socialChoiceResults;\n}\n\n\nfunction $321d9c960bf9889c$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const typeOfDivisor = \"huntingtonHill\";\n    const socialChoiceResults = (0, $34532331c6074132$export$2e2bcd8739ae039)(votes, socialChoiceOptions, typeOfDivisor);\n    return socialChoiceResults;\n}\nconst $321d9c960bf9889c$export$1e11562302815ed0 = {\n    name: \"Huntington Hill\",\n    shortName: \"Huntington\",\n    functionName: \"huntingtonHill\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"allocation\",\n    elect: $321d9c960bf9889c$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \nfunction $c05021ccd1e22ae3$export$2e2bcd8739ae039(votes) {\n    const { scoreFractionAverageByCan: scoreFractionAverageByCan } = votes.candidateTallies;\n    const max = Math.max(...scoreFractionAverageByCan);\n    const iWinner = scoreFractionAverageByCan.indexOf(max);\n    const results = {\n        iWinner: iWinner\n    };\n    return results;\n}\nconst $c05021ccd1e22ae3$export$898e91b98867c48b = {\n    name: \"Score\",\n    shortName: \"Score\",\n    functionName: \"score\",\n    voteCasterName: \"score\",\n    socialChoiceType: \"singleWinner\",\n    elect: $c05021ccd1e22ae3$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\nfunction $21a061acb7bf56d2$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const { firstPreferenceFractions: firstPreferenceFractions } = votes.candidateTallies;\n    const { voteFractions: voteFractions } = votes.preferenceTallies;\n    const { cansByRankList: cansByRankList } = votes.preferenceLists;\n    const { seats: seats } = socialChoiceOptions;\n    const nk = firstPreferenceFractions.length;\n    const nr = voteFractions.length;\n    if (seats >= nk) {\n        // more seats than candidates, so elect all candidates\n        const allocation = Array(nk).fill(1);\n        const socialChoiceResults = {\n            allocation: allocation\n        };\n        return socialChoiceResults;\n    }\n    // Candidates must have more votes than quota to be elected, as a fraction of total votes.\n    const quota = 1 / (seats + 1);\n    // start round\n    let resolved = false;\n    // round (starts at 0)\n    let r = 0;\n    // Count the number of candidates elected\n    const elected = [];\n    // the current tally of first preferences among candidates still remaining\n    let tally = (0, $912c109451e3e417$export$f67cbcd1c395127c)(firstPreferenceFractions);\n    // is the candidate still in the running? Alternatively, they have been eliminated.\n    const stillIn = Array(nk).fill(true);\n    let canInTally = (0, $c9cda941ee132d98$export$d02631cccf789723)(nk);\n    // Which rank is currently being added to the tally?\n    const activeRank = Array(nr).fill(0);\n    // What is the weight of each group of voters?\n    const weight = Array(nr).fill(1);\n    // has the ballot been exhausted?\n    const exhausted = Array(nr).fill(false);\n    while(!resolved && r < nk){\n        if (r !== 0) {\n            // tally top preferences\n            tally = Array(nk).fill(0);\n            for(let i = 0; i < cansByRankList.length; i++){\n                if (exhausted[i]) continue;\n                const ar = activeRank[i];\n                const canArs = cansByRankList[i][ar];\n                // candidates in the same rank each get full support\n                for(let k = 0; k < canArs.length; k++){\n                    const canAr = canArs[k];\n                    tally[canAr] += voteFractions[i] * weight[i];\n                }\n            }\n            tally = tally.filter((_, i)=>stillIn[i]);\n            canInTally = (0, $c9cda941ee132d98$export$d02631cccf789723)(nk).filter((i)=>stillIn[i]) // candidate corresponding to tally\n            ;\n        }\n        // either eliminate or elect\n        const siWinner = (0, $e76ce676473ff390$export$6e0413888cd9bad3)(tally);\n        const iWinner = canInTally[siWinner];\n        const votesForWinner = tally[siWinner];\n        const elect = votesForWinner >= quota;\n        let reweight = 1;\n        let iEliminate;\n        if (elect) {\n            // remove winning candidate\n            iEliminate = iWinner;\n            // reweight and move activeRank forward\n            reweight = 1 - quota / votesForWinner;\n            // is the counting done? Did we elect enough candidates?\n            elected.push(iWinner);\n            resolved = elected.length === seats;\n        } else {\n            // remove losing candidate\n            const siLoser = (0, $e76ce676473ff390$export$e410eba367ce792b)(tally);\n            const iLoser = canInTally[siLoser];\n            iEliminate = iLoser;\n        }\n        // eliminate a candidate and reweight if needed\n        stillIn[iEliminate] = false;\n        for(let i = 0; i < cansByRankList.length; i++){\n            if (exhausted[i]) continue;\n            const ar = activeRank[i];\n            const canArs = cansByRankList[i][ar];\n            if (canArs.includes(iEliminate)) {\n                if (reweight !== 1) weight[i] *= reweight // reweight if voter selected winner\n                ;\n                // move activeRank forward\n                // while the current activeRank is not still in the running\n                // and while the ballot is not exhausted\n                let moveForward = !exhausted[i];\n                while(moveForward){\n                    activeRank[i] += 1;\n                    const arf = activeRank[i];\n                    // is ballot exhausted? then stop counting this ballot.\n                    if (arf === nk) {\n                        exhausted[i] = true;\n                        break;\n                    }\n                    const canArfs = cansByRankList[i][arf];\n                    // Only move forward if none of the candidates in this rank are still in.\n                    for(let k = 0; k < canArfs.length; k++){\n                        const can = canArfs[k];\n                        moveForward = moveForward && !stillIn[can];\n                    }\n                }\n            }\n        }\n        // increment round\n        r += 1;\n    }\n    // sanity check\n    // We eliminated all the candidates, r == nk, but didn't get enough winners\n    if (!resolved) // eslint-disable-next-line no-console\n    console.warn(\"warning: STV ran over - eliminated all candidates.\");\n    const allocation = Array(nk).fill(0);\n    for(let i = 0; i < elected.length; i++){\n        const iWinner = elected[i];\n        allocation[iWinner] += 1;\n    }\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    return socialChoiceResults;\n}\nconst $21a061acb7bf56d2$export$68422b59ab433fc6 = {\n    name: \"Single Transferable Vote\",\n    shortName: \"STV\",\n    functionName: \"stv\",\n    voteCasterName: \"ranking\",\n    socialChoiceType: \"multiWinner\",\n    elect: $21a061acb7bf56d2$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\nfunction $3bb12402aa0581d1$export$2e2bcd8739ae039(votes) {\n    const { winFractionPairwise: winFractionPairwise } = votes.pairwiseTallies;\n    const n = winFractionPairwise.length;\n    // make a list of number of losses\n    const losses = Array(n).fill(0);\n    const np = 0.5 * n * (n - 1);\n    const lossDegree = Array(n);\n    const loser = Array(np);\n    let o = 0;\n    for(let i = 0; i < n - 1; i++)for(let k = i + 1; k < n; k++){\n        const iOverK = winFractionPairwise[i][k] - winFractionPairwise[k][i];\n        lossDegree[o] = Math.abs(iOverK);\n        // add a loss for each member of the pair\n        // ties go to i\n        const iLost = iOverK < 0;\n        losses[i] += iLost ? 1 : 0;\n        losses[k] += !iLost ? 1 : 0;\n        loser[o] = iLost ? i : k;\n        o += 1;\n    }\n    // i lost to k by an amount\n    // sort the losses\n    const pSorted = (0, $c9cda941ee132d98$export$d02631cccf789723)(np).sort((a, b)=>lossDegree[a] - lossDegree[b]);\n    // eliminate the smallest loss until one is undefeated\n    let iWinner = losses.findIndex((x)=>x === 0);\n    let iNext = 0 // next pair to eliminate (sorted)\n    ;\n    while(iWinner === -1){\n        // find the index of the next loser whose loss will be eliminated.\n        const pLeast = pSorted[iNext];\n        const loserLeast = loser[pLeast];\n        // reduce the loss tally\n        losses[loserLeast] -= 1;\n        // see if a candidate has no remaining losses.\n        iWinner = losses.findIndex((x)=>x === 0);\n        iNext += 1;\n    }\n    const socialChoiceResults = {\n        iWinner: iWinner\n    };\n    return socialChoiceResults;\n}\nconst $3bb12402aa0581d1$export$1cb92cb664091d9 = {\n    name: \"Minimax\",\n    shortName: \"Minimax\",\n    functionName: \"minimax\",\n    voteCasterName: \"pairwise\",\n    socialChoiceType: \"singleWinner\",\n    elect: $3bb12402aa0581d1$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\n/** @module */ \n\nfunction $b891d2eb16e1a4eb$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const typeOfDivisor = \"sainteLague\";\n    const socialChoiceResults = (0, $34532331c6074132$export$2e2bcd8739ae039)(votes, socialChoiceOptions, typeOfDivisor);\n    return socialChoiceResults;\n}\nconst $b891d2eb16e1a4eb$export$de180d3883328b3 = {\n    name: \"Sainte-Lague\",\n    shortName: \"Sainte-Lague\",\n    functionName: \"sainteLague\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"allocation\",\n    elect: $b891d2eb16e1a4eb$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\nfunction $2a18d953a1e57bd7$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const { voteFractionsByCan: voteFractionsByCan } = votes.candidateTallies;\n    const { seats: seats } = socialChoiceOptions;\n    const nk = voteFractionsByCan.length;\n    if (seats >= nk) {\n        // more seats than candidates, so elect all candidates\n        const allocation = Array(nk).fill(1);\n        const socialChoiceResults = {\n            allocation: allocation\n        };\n        return socialChoiceResults;\n    }\n    // sort descending\n    const cansSorted = (0, $c9cda941ee132d98$export$d02631cccf789723)(nk).sort((a, b)=>voteFractionsByCan[b] - voteFractionsByCan[a]);\n    const allocation = Array(nk).fill(0);\n    for(let r = 0; r < seats; r++){\n        const canI = cansSorted[r];\n        allocation[canI] = 1;\n    }\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    return socialChoiceResults;\n}\nconst $2a18d953a1e57bd7$export$7f70f338f53ce0d = {\n    name: \"Single Non-Transferable Vote\",\n    shortName: \"SNTV\",\n    functionName: \"sntv\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"multiWinner\",\n    elect: $2a18d953a1e57bd7$export$2e2bcd8739ae039\n};\n\n\nfunction $cfae221457185925$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    // Make a tally for each party.\n    // TODO: provide these variables in votes\n    const { voteFractionsByCan: voteFractionsByCan } = votes.candidateTallies;\n    const { parties: parties } = votes;\n    const { partiesByCan: partiesByCan, numParties: numParties } = parties;\n    const numCans = voteFractionsByCan.length;\n    const partyVotes = Array(numParties).fill(0);\n    const seatLimits = Array(numParties).fill(0);\n    for(let i = 0; i < numCans; i++){\n        // Find which party the candidate belongs to - index of party.\n        const iParty = partiesByCan[i];\n        // Add tally to party.\n        partyVotes[iParty] += voteFractionsByCan[i];\n        seatLimits[iParty] += 1;\n    }\n    // Find out how many seats each party gets.\n    // todo: change method\n    const socialChoiceOptions3 = {\n        ...socialChoiceOptions\n    };\n    socialChoiceOptions3.seatLimits = seatLimits;\n    const votes3 = {\n        candidateTallies: {\n            voteFractionsByCan: partyVotes\n        },\n        numCans: numCans\n    };\n    const partyResults = (0, $b891d2eb16e1a4eb$export$2e2bcd8739ae039)(votes3, socialChoiceOptions3);\n    const partyAllocation = partyResults.allocation;\n    // Which candidates get the seats?\n    // Find the highest-scoring candidates.\n    const allocation = Array(numCans).fill(0);\n    for(let i = 0; i < numParties; i++){\n        // Set inputs for SNTV.\n        const socialChoiceOptions2 = {\n            seats: partyAllocation[i]\n        };\n        const cansInParty = (0, $c9cda941ee132d98$export$d02631cccf789723)(numCans).filter((k)=>partiesByCan[k] === i);\n        const tfWithinParty = cansInParty.map((k)=>voteFractionsByCan[k]);\n        const totalTFInParty = tfWithinParty.reduce((p, c)=>p + c, 0);\n        const fractionTfWithinParty = tfWithinParty.map((x)=>x / totalTFInParty);\n        // Run sntv.\n        const votes2 = {\n            candidateTallies: {\n                voteFractionsByCan: fractionTfWithinParty\n            },\n            numCans: numCans\n        };\n        const socialChoiceInParty = (0, $2a18d953a1e57bd7$export$2e2bcd8739ae039)(votes2, socialChoiceOptions2);\n        const allocationInParty = socialChoiceInParty.allocation;\n        // Store sntv results in allocation list for all candidates.\n        for(let k = 0; k < cansInParty.length; k++){\n            const iCan = cansInParty[k];\n            allocation[iCan] = allocationInParty[k];\n        }\n    }\n    // Todo: consider if there is a tie.\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    return socialChoiceResults;\n}\nconst $cfae221457185925$export$9ed4c9213bac4315 = {\n    name: \"Open List Proportional Representation\",\n    shortName: \"OLPR A\",\n    functionName: \"olprA\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"multiWinner\",\n    elect: $cfae221457185925$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\nfunction $dda935553f82652b$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const typeOfDivisor = \"dHondt\";\n    const socialChoiceResults = (0, $34532331c6074132$export$2e2bcd8739ae039)(votes, socialChoiceOptions, typeOfDivisor);\n    return socialChoiceResults;\n}\nconst $dda935553f82652b$export$a515facfd691afd = {\n    name: \"d'Hondt\",\n    shortName: \"d'Hondt\",\n    functionName: \"dHondt\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"allocation\",\n    elect: $dda935553f82652b$export$2e2bcd8739ae039\n};\n\n\n\n/** @module */ \n\nfunction $c953d15c329769ec$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const { voteFractions: voteFractions } = votes.preferenceTallies;\n    const { scoreVotes: scoreVotes } = votes.preferenceLists;\n    const { seats: seats } = socialChoiceOptions;\n    const nk = scoreVotes[0].length // number of candidates\n    ;\n    const nv = scoreVotes.length // number of votes\n    ;\n    const quota = 1 / seats // fraction of voters in a quota\n    ;\n    const weight = Array(nv).fill(1);\n    const allocation = Array(nk).fill(0);\n    let nw = 0 // number of winners\n    ;\n    for(let r = 0; r < nk; r++){\n        if (nw >= seats) break;\n        // Select Winner //\n        // add up number of votes for each candidate and choose the one with the most\n        const tally = Array(nk).fill(0);\n        for(let k = 0; k < nk; k++){\n            if (allocation[k] === 1) continue; // no clones\n            for(let i = 0; i < nv; i++)tally[k] += weight[i] * voteFractions[i] * scoreVotes[i][k];\n        }\n        const max = Math.max(...tally);\n        const iWinner = tally.indexOf(max);\n        allocation[iWinner] = 1;\n        nw += 1;\n        // Adjust Weight //\n        // sort scores for winner, find indices of sorted scores\n        // sort descending\n        const iSortVoters = (0, $c9cda941ee132d98$export$d02631cccf789723)(nv).sort((a, b)=>scoreVotes[b][iWinner] - scoreVotes[a][iWinner]);\n        // add up to a quota\n        // remove weight from votes inside quota\n        // sumTop is the sum of the top scores that the winner received.\n        let sumTop = 0;\n        for(let i = 0; i < nv; i++){\n            const index = iSortVoters[i];\n            const score = scoreVotes[index][iWinner];\n            sumTop += score * weight[index] * voteFractions[i];\n            weight[index] = 0 // remove vote\n            ;\n            if (sumTop >= quota) break;\n        }\n    // Todo: deal with when scores are the same.\n    // Todo: deal with sumTop not exactly equal to quota.\n    }\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    return socialChoiceResults;\n}\nconst $c953d15c329769ec$export$432020e72ee56303 = {\n    name: \"Allocated Score\",\n    shortName: \"AllocScore\",\n    functionName: \"allocatedScore\",\n    voteCasterName: \"scoreFull\",\n    socialChoiceType: \"multiWinner\",\n    elect: $c953d15c329769ec$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\nfunction $82a67c8dac3cc451$export$2e2bcd8739ae039(votes, socialChoiceOptions) {\n    const { voteFractions: voteFractions } = votes.preferenceTallies;\n    const { scoreVotes: scoreVotes } = votes.preferenceLists;\n    const { seats: seats } = socialChoiceOptions;\n    const nk = scoreVotes[0].length // number of candidates\n    ;\n    const nv = scoreVotes.length // number of votes\n    ;\n    const groupCost = 1 / seats // fraction of voters in a groupCost\n    ;\n    const budget = Array(nv).fill(1);\n    const allocation = Array(nk).fill(0);\n    const winnersByRound = [];\n    const winnerMaxCostPerScoreByRound = [];\n    const small = 10 ** -4;\n    let nw = 0 // number of winners\n    ;\n    for(let r = 0; r < nk; r++){\n        if (nw >= seats) break;\n        // Select Winner //\n        // add up number of votes for each candidate and choose the one with the most\n        // import math\n        // def leq(a, b):\n        //     return a < b or math.isclose(a, b)\n        // # N:     a list of voters.\n        // # C:     a list of projects (candidates).\n        // # cost:  a dictionary that assigns each project its cost.\n        // # b:     the total available budget.\n        // # u:     a dictionary; u[c][i] is the value that voter i assigns to candidate c.\n        // #        an empty entry means that the corresponding value u[c][i] equals 0.\n        // def complete_utilitarian(N, C, cost, u, b, W):\n        //     util = {c: sum([u[c][i] for i in N]) for c in C}\n        //     committee_cost = sum([cost[c] for c in W])\n        //     while True:\n        //         next_candidate = None\n        //         highest_util = float(\"-inf\")\n        //         for c in C.difference(W):\n        //             if leq(committee_cost + cost[c], b):\n        //                 if util[c] / cost[c] > highest_util:\n        //                     next_candidate = c\n        //                     highest_util = util[c] / cost[c]\n        //         if next_candidate is None:\n        //             break\n        //         W.add(next_candidate)\n        //         committee_cost += cost[next_candidate]\n        //     return W\n        // def method_of_equal_shares(N, C, cost, u, b):\n        //     W = set()\n        //     total_utility = {c: sum(u[c].values()) for c in C}\n        const tally = Array(nk).fill(0);\n        for(let k = 0; k < nk; k++){\n            if (allocation[k] === 1) continue; // no clones\n            for(let i = 0; i < nv; i++)tally[k] += voteFractions[i] * scoreVotes[i][k];\n        }\n        // put candidate indices in descending order from most points to least\n        const cansSorted = (0, $c9cda941ee132d98$export$d02631cccf789723)(nk).sort((a, b)=>tally[b] - tally[a]);\n        // Sort the voters so we can add one voter at a time.\n        // Each voter has a maximum costPerScore that is within their budget.\n        // Start with the voter with the smallest maxCostPerScore,\n        // and calculate how much voters will spend if they all pay that costPerScore.\n        //     supporters = {c: set([i for i in N if u[c][i] > 0]) for c in C}\n        //     budget = {i: b / len(N) for i in N}\n        //     while True:\n        //         next_candidate = None\n        let bestCandidate = null;\n        //         lowest_rho = float(\"inf\")\n        let lowestMaxCostPerScore = Infinity;\n        //         for c in C.difference(W):\n        //             if leq(cost[c], sum([budget[i] for i in supporters[c]])):\n        for(let k = 0; k < nk; k++){\n            const can = cansSorted[k];\n            if (allocation[can] === 1) continue; // no clones\n            // check if candidate's lowest possible costPerScore is smaller than current lowest\n            // See if this candidate is within every voter's budget.\n            const groupCostPerScore = groupCost / tally[can];\n            let withinBudget = true;\n            for(let i = 0; i < nv; i++){\n                const score = scoreVotes[i][can];\n                if (budget[i] < groupCostPerScore * score) {\n                    withinBudget = false;\n                    break;\n                }\n            }\n            // If the candidate is within every voter's budget, then select the candidate.\n            if (withinBudget && groupCostPerScore < lowestMaxCostPerScore) {\n                lowestMaxCostPerScore = groupCostPerScore;\n                bestCandidate = can;\n                break;\n            }\n            // If the candidate is outside of some voter's budget,\n            // then there might be a better choice of candidate.\n            // We will have to do the more complex process of \"masking\"\n            // the scores within the budget.\n            //                 supporters_sorted = sorted(supporters[c], key=lambda i: budget[i] / u[c][i])\n            const maxCostPerScore = [];\n            let totalBudget = 0;\n            const supporters = [];\n            for(let i = 0, j = 0; i < nv; i++){\n                const bud = budget[i];\n                const score = scoreVotes[i][can];\n                maxCostPerScore[i] = bud / score;\n                if (score > 0) {\n                    totalBudget += bud * voteFractions[i];\n                    supporters[j] = i;\n                    j += 1;\n                }\n            }\n            // is there room in the budget for this candidate?\n            // within rounding error\n            if (totalBudget + small - groupCost < 0) continue;\n            // ascending order\n            const supportersSorted = supporters.sort((a, b)=>maxCostPerScore[a] - maxCostPerScore[b]);\n            const ns = supportersSorted.length;\n            //                 price = cost[c]\n            let costLeft = groupCost;\n            //                 util = total_utility[c]\n            let scoreLeft = tally[can];\n            //                 for i in supporters_sorted:\n            // increase the max cost per score until the cost is met\n            let curMaxCostPerScore = null;\n            for(let j = 0; j < ns; j++){\n                const i = supportersSorted[j];\n                //                     if leq(price * u[c][i], budget[i] * util):\n                //                         break\n                //                     price -= budget[i]\n                //                     util -= u[c][i]\n                // maxCostPerScore = budget / score   for each voter\n                // console.log({costLeft,scoreLeft,maxCostPerScore[i]})\n                curMaxCostPerScore = maxCostPerScore[i];\n                if (costLeft < scoreLeft * curMaxCostPerScore) break;\n                // remove voter\n                costLeft -= voteFractions[i] * budget[i];\n                scoreLeft -= voteFractions[i] * scoreVotes[i][can];\n            // if (scoreLeft < 0) {\n            //     console.log(Math.round(scoreLeft * 100))\n            // }\n            }\n            // console.log(scoreLeft)\n            //                 rho = price / util \\\n            //                         if not math.isclose(util, 0) and not math.isclose(price, 0) \\\n            //                         else budget[supporters_sorted[-1]] / u[c][supporters_sorted[-1]]\n            // get a more accurate estimate, possibly, if there isn't an issue of rounding error\n            if (costLeft > small && scoreLeft > small) curMaxCostPerScore = costLeft / scoreLeft;\n            // const curMaxCostPerScore = (nearZero(scoreLeft) || nearZero(costLeft))\n            //     ? budget[supportersSorted[ns - 1]] / scoreVotes[supportersSorted[ns - 1]][can]\n            //     : costLeft / scoreLeft\n            // const maxCostPerScore = price / util\n            //                 if rho < lowest_rho:\n            //                     next_candidate = c\n            //                     lowest_rho = rho\n            if (curMaxCostPerScore < lowestMaxCostPerScore) {\n                bestCandidate = can;\n                lowestMaxCostPerScore = curMaxCostPerScore;\n            }\n        }\n        // If no candidate is within the budget,\n        // pick the candidate with the highest score,\n        // and keep going until we have all the candidates selected.\n        if (bestCandidate === null) {\n            for(let k = 0; k < nk; k++){\n                const can = cansSorted[k];\n                if (allocation[can] === 1) continue; // no clones\n                allocation[can] = 1;\n                nw += 1;\n                if (nw >= seats) break;\n            }\n            break;\n        }\n        //         if next_candidate is None:\n        //             break\n        //         W.add(next_candidate)\n        allocation[bestCandidate] = 1;\n        nw += 1;\n        winnersByRound[r] = bestCandidate;\n        winnerMaxCostPerScoreByRound[r] = lowestMaxCostPerScore;\n        //         for i in N:\n        //             budget[i] -= min(budget[i], lowest_rho * u[next_candidate][i])\n        // console.log(lowestMaxCostPerScore)\n        for(let i = 0; i < nv; i++){\n            const score = scoreVotes[i][bestCandidate];\n            const cost = lowestMaxCostPerScore * score;\n            budget[i] = Math.max(0, budget[i] - cost);\n        }\n    //     return complete_utilitarian(N, C, cost, u, b, W)  # one of the possible completions\n    }\n    const explanation = {\n        winnersByRound: winnersByRound,\n        winnerMaxCostPerScoreByRound: winnerMaxCostPerScoreByRound,\n        socialChoiceOptions: socialChoiceOptions\n    };\n    const socialChoiceResults = {\n        allocation: allocation,\n        explanation: explanation\n    };\n    return socialChoiceResults;\n}\nconst $82a67c8dac3cc451$export$49ada1ac5eaf186f = {\n    name: \"Method of Equal Shares\",\n    shortName: \"MES\",\n    functionName: \"methodOfEqualShares\",\n    voteCasterName: \"scoreFull\",\n    socialChoiceType: \"multiWinner\",\n    elect: $82a67c8dac3cc451$export$2e2bcd8739ae039\n};\n\n\n/** @module */ \n\nfunction $21320e845186371d$export$2e2bcd8739ae039(votes) {\n    const { voteFractionsByCan: voteFractionsByCan } = votes.candidateTallies;\n    const cdf = (0, $a13bab49ccd6d247$export$d40dd1c74110676b)(voteFractionsByCan);\n    const iWinner = (0, $a13bab49ccd6d247$export$2fa81e417e3da73b)(cdf, Math.random);\n    const socialChoiceResults = {\n        iWinner: iWinner\n    };\n    return socialChoiceResults;\n}\nconst $21320e845186371d$export$bc3a1ea42b65b896 = {\n    name: \"Random Voter\",\n    explain: \"Random Voter: Pick a voter and their choice is the winning candidate.\",\n    shortName: \"Rand Vote\",\n    functionName: \"randomVoter\",\n    voteCasterName: \"plurality\",\n    socialChoiceType: \"singleWinner\",\n    elect: $21320e845186371d$export$2e2bcd8739ae039\n};\n\n\n\nconst $ef45c1fe8cec5d24$export$ac6cb01020bcb950 = [\n    (0, $12c51ce367ee7e1e$export$b3aa8544b1337244),\n    (0, $81e7c52705eea944$export$eac25c355fed8538),\n    (0, $321d9c960bf9889c$export$1e11562302815ed0),\n    (0, $c05021ccd1e22ae3$export$898e91b98867c48b),\n    (0, $21a061acb7bf56d2$export$68422b59ab433fc6),\n    (0, $3bb12402aa0581d1$export$1cb92cb664091d9),\n    (0, $cfae221457185925$export$9ed4c9213bac4315),\n    (0, $dda935553f82652b$export$a515facfd691afd),\n    (0, $b891d2eb16e1a4eb$export$de180d3883328b3),\n    (0, $c953d15c329769ec$export$432020e72ee56303),\n    (0, $82a67c8dac3cc451$export$49ada1ac5eaf186f),\n    (0, $21320e845186371d$export$bc3a1ea42b65b896),\n    (0, $2a18d953a1e57bd7$export$7f70f338f53ce0d)\n];\nconst $ef45c1fe8cec5d24$var$socialChoiceMethods = {};\nconst $ef45c1fe8cec5d24$export$c0d4f4ceebadfbcb = {};\n$ef45c1fe8cec5d24$export$ac6cb01020bcb950.forEach((x)=>{\n    $ef45c1fe8cec5d24$var$socialChoiceMethods[x.functionName] = x.elect;\n    $ef45c1fe8cec5d24$export$c0d4f4ceebadfbcb[x.functionName] = x;\n});\nvar $ef45c1fe8cec5d24$export$2e2bcd8739ae039 = $ef45c1fe8cec5d24$var$socialChoiceMethods;\n\n\nfunction $add8e42a22497fa8$export$2e2bcd8739ae039(changes, phaseOptions) {\n    const self = this;\n    const socialChoiceOptions = {\n        seats: 1,\n        threshold: 0.1\n    };\n    self.update = ()=>{\n        if (changes.check([\n            \"socialChoiceMethod\"\n        ])) {\n            const { socialChoiceType: socialChoiceType } = phaseOptions;\n            if (socialChoiceType === \"allocation\") socialChoiceOptions.seats = 5;\n            else if (socialChoiceType === \"multiWinner\") socialChoiceOptions.seats = 3;\n            else socialChoiceOptions.seats = 1;\n        }\n    };\n    self.getOptions = ()=>({\n            ...socialChoiceOptions\n        });\n}\n\n\nfunction $1980ad30922e431c$export$2e2bcd8739ae039(sequenceName, phaseName, changes, commander) {\n    const self = this;\n    const phaseOptions = {\n        socialChoiceMethod: \"plurality\",\n        voteCasterName: \"plurality\",\n        socialChoiceType: \"singleWinner\",\n        socialChoiceOptions: {\n            seats: 1,\n            threshold: 0.1\n        }\n    };\n    self.socialChoiceOptionsMan = new (0, $add8e42a22497fa8$export$2e2bcd8739ae039)(changes, phaseOptions);\n    self.setSocialChoiceMethod = commander.addSender({\n        name: `socialChoiceMethod-sequence-${sequenceName}-phase-${phaseName}`,\n        currentValue: phaseOptions.socialChoiceMethod,\n        action (functionName) {\n            phaseOptions.socialChoiceMethod = functionName;\n            const metadata = (0, $ef45c1fe8cec5d24$export$c0d4f4ceebadfbcb)[functionName];\n            phaseOptions.voteCasterName = metadata.voteCasterName;\n            phaseOptions.socialChoiceType = metadata.socialChoiceType;\n            changes.add([\n                \"socialChoiceMethod\"\n            ]);\n        }\n    }).go;\n    self.init = ()=>{\n        self.setSocialChoiceMethod(\"plurality\");\n    };\n    self.update = ()=>{\n        self.socialChoiceOptionsMan.update();\n        phaseOptions.socialChoiceOptions = self.socialChoiceOptionsMan.getOptions();\n    };\n    self.getOptions = ()=>{\n        const po = {\n            ...phaseOptions\n        };\n        po.socialChoiceOptions = self.socialChoiceOptionsMan.getOptions();\n        return po;\n    };\n}\n\n\nfunction $41207dbd9fae2ba1$export$2e2bcd8739ae039(changes, commander) {\n    const self = this;\n    self.sequences = {\n        general: {\n            phases: {\n                general: new (0, $1980ad30922e431c$export$2e2bcd8739ae039)(\"general\", \"general\", changes, commander)\n            }\n        },\n        closedPrimary: {\n            phases: {\n                closedPrimary: new (0, $1980ad30922e431c$export$2e2bcd8739ae039)(\"closedPrimary\", \"closedPrimary\", changes, commander),\n                general: new (0, $1980ad30922e431c$export$2e2bcd8739ae039)(\"closedPrimary\", \"general\", changes, commander)\n            }\n        },\n        nonpartisanOpenPrimary: {\n            phases: {\n                nonpartisanOpenPrimary: new (0, $1980ad30922e431c$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", \"nonpartisanOpenPrimary\", changes, commander),\n                general: new (0, $1980ad30922e431c$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", \"general\", changes, commander)\n            }\n        }\n    };\n    self.finalPhaseBySequence = {\n        general: \"general\",\n        closedPrimary: \"general\",\n        nonpartisanOpenPrimary: \"general\"\n    };\n    const phaseOptionsManList = [];\n    Object.keys(self.sequences).forEach((sequenceName)=>{\n        const { phases: phases } = self.sequences[sequenceName];\n        Object.keys(phases).forEach((phaseName)=>{\n            phaseOptionsManList.push(phases[phaseName]);\n        });\n    });\n    const sequenceOptions = {};\n    self.init = ()=>{\n        self.setSequenceName(\"general\");\n        phaseOptionsManList.forEach((phaseOptionsMan)=>{\n            phaseOptionsMan.init();\n        });\n    };\n    self.setSequenceName = commander.addSender({\n        name: \"sequenceName\",\n        currentValue: sequenceOptions.sequenceName,\n        action (n) {\n            sequenceOptions.sequenceName = n;\n            changes.add([\n                \"sequenceName\"\n            ]);\n        }\n    }).go;\n    self.update = ()=>{\n        phaseOptionsManList.forEach((phaseOptionsMan)=>{\n            phaseOptionsMan.update();\n        });\n    };\n    self.getOptions = ()=>{\n        const s = {\n            ...sequenceOptions\n        };\n        s.sequences = {};\n        Object.keys(self.sequences).forEach((sequenceName)=>{\n            s.sequences[sequenceName] = {\n                phases: {}\n            };\n            const { phases: phases } = self.sequences[sequenceName];\n            Object.keys(phases).forEach((phaseName)=>{\n                s.sequences[sequenceName].phases[phaseName] = self.sequences[sequenceName].phases[phaseName].getOptions();\n            });\n        });\n        return s;\n    };\n}\n\n\nfunction $245dafb66e148ea4$export$2e2bcd8739ae039(changes, simOptions, commander) {\n    const self = this;\n    const optionsBag = {\n        pollCount: 5,\n        numSampleCandidates: 5\n    };\n    self.castOptionsMan = new (0, $b818ddec457ff131$export$2e2bcd8739ae039)(changes, simOptions, optionsBag);\n    self.sequenceOptionsMan = new (0, $41207dbd9fae2ba1$export$2e2bcd8739ae039)(changes, commander);\n    self.init = ()=>{\n        // Defaults\n        self.sequenceOptionsMan.init();\n        self.setNumTracts(1);\n        self.setNumDistricts(1);\n    };\n    self.setNumDistricts = commander.addSender({\n        name: \"numDistricts\",\n        currentValue: optionsBag.numDistricts,\n        action (n) {\n            optionsBag.numDistricts = n;\n            const useDistricts = n > 1;\n            const useTracts = optionsBag.numTracts > 1;\n            optionsBag.useGeography = useTracts || useDistricts;\n            changes.add([\n                \"numDistricts\"\n            ]);\n        }\n    }).go;\n    self.setNumTracts = commander.addSender({\n        name: \"numTracts\",\n        currentValue: optionsBag.numTracts,\n        action (n) {\n            optionsBag.numTracts = n;\n            const useTracts = n > 1;\n            const useDistricts = optionsBag.numDistricts > 1;\n            optionsBag.useGeography = useTracts || useDistricts;\n            changes.add([\n                \"numTracts\"\n            ]);\n        }\n    }).go;\n    self.update = ()=>{\n        self.castOptionsMan.update();\n        self.sequenceOptionsMan.update();\n        if (changes.check([\n            \"socialChoiceMethod\"\n        ])) {\n            const sequenceOptions = self.sequenceOptionsMan.getOptions();\n            const { sequenceName: sequenceName } = sequenceOptions;\n            const { finalPhaseBySequence: finalPhaseBySequence } = self.sequenceOptionsMan;\n            const finalPhaseName = finalPhaseBySequence[sequenceName];\n            const { socialChoiceType: socialChoiceType } = sequenceOptions.sequences[sequenceName].phases[finalPhaseName];\n            if (socialChoiceType === \"allocation\") optionsBag.numSampleCandidates = 10;\n            else if (socialChoiceType === \"multiWinner\") optionsBag.numSampleCandidates = 10;\n            else optionsBag.numSampleCandidates = 5;\n        }\n    };\n    self.getOptions = ()=>{\n        const ob = {\n            ...optionsBag\n        };\n        ob.castOptions = self.castOptionsMan.getOptions();\n        ob.sequenceOptions = self.sequenceOptionsMan.getOptions();\n        return ob;\n    };\n    self.init();\n}\n\n\n/** @module */ \n/** @module */ /**\r\n * Gives an id to an entity.\r\n * @constructor\r\n */ function $6ffe6222418ae1d6$export$2e2bcd8739ae039() {\n    const self = this;\n    const entities = [];\n    let nextID = 0;\n    self.new = function(entity) {\n        entities.push(entity);\n        const id = nextID;\n        nextID += 1;\n        return id;\n    };\n    self.num = ()=>nextID;\n    self.get = (id)=>entities[id];\n    self.getList = ()=>entities;\n}\n\n\n/** @module */ /**\r\n * VoterShape class with Handle component to take care of dragging.\r\n * Voronoi2D component takes care of drawing votes.\r\n * @param {Object} shape2\r\n * @param {Object} shape1\r\n * @param {Screen} screen\r\n * @param {Registrar} voterRegistrar\r\n * @param {Commander} commander\r\n * @param {Changes} changes\r\n * @param {Boolean} doLoad - Should we add the voter without adding to the history?\r\n * @constructor\r\n */ function $90c48da87f10c1fb$export$2e2bcd8739ae039(shape2, shape1, strategyRules, voterRegistrar, commander, changes, doLoad, voterCommander) {\n    const self = this;\n    // State //\n    self.shape1 = {};\n    self.shape2 = {};\n    self.color = \"#88888888\";\n    self.strategyRules = strategyRules;\n    self.shape1.densityMax = 1;\n    self.shape2.densityMax = 1;\n    self.setAction = {\n        exists (e) {\n            self.exists = e;\n            changes.add([\n                \"voters\",\n                \"draggables\"\n            ]);\n        },\n        shape2p (p) {\n            self.shape2.x = p.x;\n            self.shape2.y = p.y;\n            changes.add([\n                \"voters\",\n                \"draggables\"\n            ]);\n        },\n        shape1x (x) {\n            self.shape1.x = x;\n            changes.add([\n                \"voters\",\n                \"draggables\"\n            ]);\n        },\n        shape2w (w) {\n            self.shape2.w = w;\n            changes.add([\n                \"voters\",\n                \"width\"\n            ]);\n        },\n        shape1w (w) {\n            self.shape1.w = w;\n            changes.add([\n                \"voters\",\n                \"width\"\n            ]);\n        },\n        shape1densityProfile (d) {\n            self.shape1.densityProfile = d;\n            changes.add([\n                \"voters\",\n                \"densityProfile\"\n            ]);\n        },\n        shape2densityProfile (d) {\n            self.shape2.densityProfile = d;\n            changes.add([\n                \"voters\",\n                \"densityProfile\"\n            ]);\n        },\n        strategy (a) {\n            setStrategyRules(a);\n        },\n        actionOptionThreshold (a) {\n            setStrategyRules(a);\n        },\n        actionWeight (a) {\n            setStrategyRules(a);\n        },\n        party (p) {\n            self.party = p;\n            changes.add([\n                \"party\"\n            ]);\n        }\n    };\n    function setStrategyRules(a) {\n        self.strategyRules = a;\n        changes.add([\n            \"voters\",\n            \"strategyRules\"\n        ]);\n    }\n    // Make Commands //\n    const id = voterRegistrar.new(self);\n    self.doSetCommand = {};\n    const actionKeys = Object.keys(self.setAction);\n    actionKeys.forEach((key)=>{\n        self.doSetCommand[key] = (e)=>{\n            const cur = voterCommander[key].getCurrentValue(id);\n            voterCommander[key].go(id, e, cur);\n        };\n    });\n    // Instantiation //\n    // use commands to instantiate variables\n    const shape2p = {\n        x: shape2.x,\n        y: shape2.y\n    };\n    const commands = [\n        voterCommander.exists.command(id, 1, 0),\n        voterCommander.shape2p.command(id, shape2p, shape2p),\n        voterCommander.shape1x.command(id, shape1.x, shape1.x),\n        voterCommander.shape2w.command(id, shape2.w, shape2.w),\n        voterCommander.shape1w.command(id, shape1.w, shape1.w),\n        voterCommander.shape1densityProfile.command(id, shape1.densityProfile, shape1.densityProfile),\n        voterCommander.shape2densityProfile.command(id, shape2.densityProfile, shape2.densityProfile),\n        voterCommander.strategy.command(id, self.strategyRules, self.strategyRules),\n        voterCommander.party.command(id, [\n            id\n        ], [\n            id\n        ])\n    ];\n    // Either load the commands because we don't want to create an item of history\n    // Or do the commands because want to store an item in history, so that we can undo.\n    if (doLoad) commander.loadCommands(commands);\n    else commander.doCommands(commands);\n}\n\n\n/** @module */ /**\r\n * Register senders with the commander for setting entity values.\r\n * This is here because we need an action that takes an id.\r\n * @param {Registrar} registrar\r\n * @param {Commander} commander\r\n * @param {EntityList} entityList\r\n * @constructor\r\n */ function $95b7771e135555e3$export$2e2bcd8739ae039(registrar, commander, entityList, prefix, senderList) {\n    const self = this;\n    // a object with senders that set parameters for lists of entities.\n    // Like if you want to set the exists property of the 2nd voter to 1.\n    senderList.forEach((x)=>makeSender(...x));\n    function makeSender(key, configKey, isChain) {\n        self[key] = commander.addSenderForList({\n            action: (id, e)=>{\n                entityList.setNumberEntities(id + 1);\n                const voter = registrar.get(id);\n                voter.setAction[key](e);\n            },\n            name: `${prefix}-${configKey}`,\n            props: {\n                isChain: isChain\n            }\n        });\n    }\n}\n\n\nfunction $a9402f617ddb7bf6$export$2e2bcd8739ae039(entities, dimensions) {\n    if (dimensions === 1) return entities.map((ent)=>ent.shape1);\n    return entities.map((ent)=>ent.shape2);\n}\n\n\nfunction $882735380764a44c$export$2e2bcd8739ae039(entities, dimensions) {\n    if (dimensions === 1) return entities.map((ent)=>ent.shape1.x);\n    return entities.map((ent)=>[\n            ent.shape2.x,\n            ent.shape2.y\n        ]);\n}\n\n\nfunction $177ecb0a60804ede$export$2e2bcd8739ae039(commander, prefix, registrar) {\n    const self = this;\n    // Publish //\n    const observers = [];\n    self.attachNewE = (observer)=>{\n        observers.push(observer);\n    };\n    const updateObservers = (e)=>{\n        observers.forEach((o)=>o.updateNewE(e));\n    };\n    // Add Entity //\n    self.addEntity = (entity)=>{\n        updateObservers(entity);\n        const num = registrar.num();\n        self.setNumberEntities(num);\n    };\n    self.addEntityPressed = ()=>{\n        // really, we want to make a command to set numEntities to at least an amount\n        const num = registrar.num() + 1;\n        self.setNumberEntities(num);\n    };\n    self.setNumberEntities = commander.addSender({\n        currentValue: 0,\n        name: `${prefix}-setNumberAtLeast`,\n        props: {\n            isFirstAction: true\n        },\n        action: (num)=>{\n            while(registrar.num() < num)self.addDefaultEntity();\n        }\n    }).load;\n    // Getters //\n    self.getEntities = ()=>registrar.getList().filter((c)=>c.exists);\n    self.getGeoms = (dimensions)=>(0, $a9402f617ddb7bf6$export$2e2bcd8739ae039)(self.getEntities(), dimensions);\n    self.getPoints = (dimensions)=>(0, $882735380764a44c$export$2e2bcd8739ae039)(self.getEntities(), dimensions);\n}\n\n\nconst $34f78a09f3b3e7b0$var$defaultStrategyRules = [\n    {\n        condition: {\n            voteCasterName: \"score\"\n        },\n        strategy: [\n            {\n                actionName: \"normalize\",\n                actionWeight: 1,\n                actionOptions: {\n                    threshold: {\n                        type: \"step\",\n                        mean: 0.5,\n                        radius: 0.1\n                    }\n                }\n            },\n            {\n                actionName: \"normalizeOverFrontrunners\",\n                actionWeight: 0,\n                actionOptions: {\n                    threshold: {\n                        type: \"step\",\n                        mean: 0.5,\n                        radius: 0.1\n                    }\n                }\n            }\n        ]\n    },\n    {\n        condition: {\n            voteCasterName: \"plurality\"\n        },\n        strategy: [\n            {\n                actionName: \"closest\",\n                actionWeight: 1,\n                actionOptions: {\n                    threshold: {\n                        type: \"step\",\n                        mean: 0.5,\n                        radius: 0.1\n                    }\n                }\n            },\n            {\n                actionName: \"lesserEvil\",\n                actionWeight: 0,\n                actionOptions: {\n                    threshold: {\n                        type: \"step\",\n                        mean: 0.5,\n                        radius: 0.1\n                    }\n                }\n            }\n        ]\n    },\n    {\n        condition: {\n            voteCasterName: \"ranking\"\n        },\n        strategy: [\n            {\n                actionName: \"closest\",\n                actionWeight: 1,\n                actionOptions: {}\n            }\n        ]\n    },\n    {\n        condition: {\n            voteCasterName: \"pairwise\"\n        },\n        strategy: [\n            {\n                actionName: \"closest\",\n                actionWeight: 1,\n                actionOptions: {}\n            }\n        ]\n    },\n    {\n        condition: {\n            voteCasterName: \"scoreFull\"\n        },\n        strategy: [\n            {\n                actionName: \"normalize\",\n                actionWeight: 1,\n                actionOptions: {}\n            }\n        ]\n    }\n];\nvar $34f78a09f3b3e7b0$export$2e2bcd8739ae039 = $34f78a09f3b3e7b0$var$defaultStrategyRules;\n\n\nfunction $4709d2c6afa23527$export$2e2bcd8739ae039(changes, commander) {\n    const self = this;\n    // Add Entity //\n    const prefix = \"voters\";\n    const voterSenderList = [\n        // key, configKey, isChain\n        [\n            \"exists\",\n            \"exists\",\n            false\n        ],\n        [\n            \"shape2p\",\n            \"shape2D-point\",\n            true\n        ],\n        [\n            \"shape1x\",\n            \"shape1D-x\",\n            true\n        ],\n        [\n            \"shape2w\",\n            \"shape2D-width\",\n            true\n        ],\n        [\n            \"shape1w\",\n            \"shape1D-width\",\n            true\n        ],\n        [\n            \"shape1densityProfile\",\n            \"shape1D-densityProfile\",\n            false\n        ],\n        [\n            \"shape2densityProfile\",\n            \"shape2D-densityProfile\",\n            false\n        ],\n        [\n            \"actionWeight\",\n            \"strategyRules\",\n            true\n        ],\n        [\n            \"strategy\",\n            \"strategyRules\",\n            false\n        ],\n        [\n            \"actionOptionThreshold\",\n            \"strategyRules\",\n            true\n        ],\n        [\n            \"party\",\n            \"party\",\n            false\n        ]\n    ];\n    const registrar = new (0, $6ffe6222418ae1d6$export$2e2bcd8739ae039)();\n    (0, $177ecb0a60804ede$export$2e2bcd8739ae039).call(self, commander, prefix, registrar);\n    const voterCommander = new (0, $95b7771e135555e3$export$2e2bcd8739ae039)(registrar, commander, self, prefix, voterSenderList);\n    self.addVoterCircle = ({ shape2: shape2, shape1: shape1, strategyRules: strategyRules, doLoad: doLoad })=>{\n        // eslint-disable-next-line max-len\n        const voterShape = new (0, $90c48da87f10c1fb$export$2e2bcd8739ae039)(shape2, shape1, strategyRules, registrar, commander, changes, doLoad, voterCommander);\n        self.addEntity(voterShape);\n    };\n    self.addDefaultEntity = ()=>{\n        self.addVoterCircle({\n            shape2: {\n                x: 50,\n                y: 50,\n                w: 200,\n                densityProfile: \"step\",\n                densityMax: 1\n            },\n            shape1: {\n                x: 50,\n                w: 200,\n                densityProfile: \"gaussian\",\n                densityMax: 1\n            },\n            strategyRules: (0, $34f78a09f3b3e7b0$export$2e2bcd8739ae039),\n            doLoad: false\n        });\n    };\n    self.getVoterStrategyListByPhase = (sequenceOptions)=>{\n        // for each phase, we need a voterStrategyList entry\n        const { sequenceName: sequenceName, sequences: sequences } = sequenceOptions;\n        const { phases: phases } = sequences[sequenceName];\n        const voterStrategyListByPhase = {};\n        Object.keys(phases).forEach((phaseName)=>{\n            const phase = phases[phaseName];\n            const { voteCasterName: voteCasterName } = phase;\n            const voterStrategyList = getStrategyList(voteCasterName, phaseName);\n            voterStrategyListByPhase[phaseName] = voterStrategyList;\n        });\n        return voterStrategyListByPhase;\n    };\n    function getStrategyList(voteCasterName, phaseName) {\n        const voterStrategyList = [];\n        const entities = self.getEntities();\n        for(let i = 0; i < entities.length; i += 1){\n            const entity = entities[i];\n            const strategy = $4709d2c6afa23527$export$dbbdbaaddf7acf8a(entity.strategyRules, voteCasterName, phaseName);\n            const actionPDF = (0, $a13bab49ccd6d247$export$36468e3b15474df0)(strategy.map((a)=>a.actionWeight));\n            const strategyCDF = (0, $a13bab49ccd6d247$export$d40dd1c74110676b)(actionPDF);\n            voterStrategyList.push({\n                strategy: strategy,\n                strategyCDF: strategyCDF\n            });\n        }\n        return voterStrategyList;\n    }\n    self.getParties = ()=>{\n        // TODO: consider more than one party for a voterShape.\n        const entities = self.getEntities();\n        const voterParties = entities.map((voter)=>voter.party[0]);\n        return voterParties;\n    };\n}\nfunction $4709d2c6afa23527$export$dbbdbaaddf7acf8a(strategyRules, voteCasterName, phaseName) {\n    for(let i = 0; i < strategyRules.length; i += 1){\n        const s = strategyRules[i];\n        if (s.condition.phaseName !== undefined) {\n            if (s.condition.phaseName !== phaseName) continue;\n        }\n        if (s.condition.voteCasterName !== undefined) {\n            if (s.condition.voteCasterName !== voteCasterName) continue;\n        }\n        // the strategy rule applies if we got through the previous two checks\n        return s.strategy;\n    }\n    return undefined;\n}\n\n\n/**\r\n * Graphics Utilities\r\n * Just a few helpful functions that are self-contained and don't need much context.\r\n * @module */ /* eslint-disable no-nested-ternary */ // https://codepen.io/darsain/pen/XpgMGp\nconst $d504e10e24e18d82$var$r = Math.round;\nfunction $d504e10e24e18d82$export$8da5152a7cb9deca(d1) {\n    const l = d1.length;\n    const rgba = Array(4).fill();\n    if (d1.slice(0, 3).toLowerCase() === \"rgb\") {\n        const d = d1.replace(\" \", \"\").split(\",\");\n        rgba[0] = parseInt(d[0].slice(d[3].toLowerCase() === \"a\" ? 5 : 4), 10);\n        rgba[1] = parseInt(d[1], 10);\n        rgba[2] = parseInt(d[2], 10);\n        rgba[3] = d[3] ? parseFloat(d[3]) : -1;\n    } else {\n        let d;\n        if (l < 6) d = parseInt(String(d1[1]) + d1[1] + d1[2] + d1[2] + d1[3] + d1[3] + (l > 4 ? String(d1[4]) + d1[4] : \"\"), 16);\n        else d = parseInt(d1.slice(1), 16);\n        rgba[0] = d >> 16 & 255;\n        rgba[1] = d >> 8 & 255;\n        rgba[2] = d & 255;\n        rgba[3] = l === 9 || l === 5 ? $d504e10e24e18d82$var$r((d >> 24 & 255) / 255 * 10000) / 10000 : -1;\n    }\n    return rgba;\n}\nfunction $d504e10e24e18d82$export$fdb28526eb2966c3(from1, to1, p1 = 0.5) {\n    const from = from1.trim();\n    const to = to1.trim();\n    const b = p1 < 0;\n    const p = b ? p1 * -1 : p1;\n    const f = $d504e10e24e18d82$export$8da5152a7cb9deca(from);\n    const t = $d504e10e24e18d82$export$8da5152a7cb9deca(to);\n    if (to[0] === \"r\") return `rgb${to[3] === \"a\" ? \"a(\" : \"(\"}${$d504e10e24e18d82$var$r(Math.sqrt(t[0] ** 2 * p + f[0] ** 2 * (1 - p)))},${$d504e10e24e18d82$var$r(Math.sqrt(t[1] ** 2 * p + f[1] ** 2 * (1 - p)))},${$d504e10e24e18d82$var$r(Math.sqrt(t[2] ** 2 * p + f[2] ** 2 * (1 - p)))}${f[3] < 0 && t[3] < 0 ? \"\" : `,${f[3] > -1 && t[3] > -1 ? $d504e10e24e18d82$var$r(Math.sqrt(t[3] ** 2 * p + f[3] ** 2 * (1 - p)) * 10000) / 10000 : t[3] < 0 ? f[3] : t[3]}`})`;\n    return `#${(0x100000000 + (f[3] > -1 && t[3] > -1 ? $d504e10e24e18d82$var$r(Math.sqrt(t[3] ** 2 * p + f[3] ** 2 * (1 - p)) * 255) : t[3] > -1 ? $d504e10e24e18d82$var$r(t[3] * 255) : f[3] > -1 ? $d504e10e24e18d82$var$r(f[3] * 255) : 255) * 0x1000000 + $d504e10e24e18d82$var$r(Math.sqrt(t[0] ** 2 * p + f[0] ** 2 * (1 - p))) * 0x10000 + $d504e10e24e18d82$var$r(Math.sqrt(t[1] ** 2 * p + f[1] ** 2 * (1 - p))) * 0x100 + $d504e10e24e18d82$var$r(Math.sqrt(t[2] ** 2 * p + f[2] ** 2 * (1 - p)))).toString(16).slice(f[3] > -1 || t[3] > -1 ? 1 : 3)}`;\n}\n\n\nfunction $2589a02a34d546fb$export$a2f18a0619b13ed4(text, x, y, textsize, lw, color, alpha, ctx, textAlign) {\n    ctx.save();\n    ctx.globalAlpha = alpha;\n    ctx.textAlign = textAlign || \"center\";\n    ctx.font = `${textsize}px Sans-serif`;\n    ctx.lineWidth = lw;\n    ctx.fillStyle = color;\n    ctx.fillText(text, x, y);\n    ctx.restore();\n}\nfunction $2589a02a34d546fb$export$120cfc2a1d7ff906(f) {\n    if (f === undefined) return \"\";\n    const a = (100 * f).toFixed(0);\n    return a;\n}\nfunction $2589a02a34d546fb$export$7f57f51729968d3b(str) {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = str;\n    const sColor = ctx.fillStyle;\n    canvas.remove();\n    return sColor;\n}\n\n\n/** @module */ \nfunction $ee4376c793a01fdb$export$2e2bcd8739ae039(shape2, shape1, color, candidateRegistrar, commander, changes, doLoad, candidateCommander) {\n    const self = this;\n    // State //\n    self.shape1 = {};\n    self.shape2 = {};\n    self.setAction = {\n        exists (e) {\n            self.exists = e;\n            changes.add([\n                \"draggables\"\n            ]);\n        },\n        shape2p (p) {\n            self.shape2.x = p.x;\n            self.shape2.y = p.y;\n            changes.add([\n                \"draggables\"\n            ]);\n        },\n        shape1x (x) {\n            self.shape1.x = x;\n            changes.add([\n                \"draggables\"\n            ]);\n        },\n        color (newColor) {\n            self.color = newColor;\n            self.colorRGBA = (0, $d504e10e24e18d82$export$8da5152a7cb9deca)(newColor);\n            changes.add([\n                \"color\"\n            ]);\n        },\n        party (p) {\n            self.party = p;\n            changes.add([\n                \"party\"\n            ]);\n        }\n    };\n    // Make Commands //\n    const id = candidateRegistrar.new(self);\n    self.doSetCommand = {};\n    const actionKeys = Object.keys(self.setAction);\n    actionKeys.forEach((key)=>{\n        self.doSetCommand[key] = (e)=>{\n            const cur = candidateCommander[key].getCurrentValue(id);\n            candidateCommander[key].go(id, e, cur);\n        };\n    });\n    // Instantiate Variables //\n    // use commands to instantiate variables\n    const shape2p = {\n        x: shape2.x,\n        y: shape2.y\n    };\n    const commands = [\n        candidateCommander.exists.command(id, 1, 0),\n        candidateCommander.shape2p.command(id, shape2p, shape2p),\n        candidateCommander.shape1x.command(id, shape1.x, shape1.x),\n        candidateCommander.color.command(id, color, color),\n        candidateCommander.party.command(id, [\n            id\n        ], [\n            id\n        ])\n    ];\n    // Either load the commands because we don't want to create an item of history\n    // Or do the commands because want to store an item in history, so that we can undo.\n    if (doLoad) commander.loadCommands(commands);\n    else commander.doCommands(commands);\n}\n\n\n\n\n\nfunction $5e6608903ddebe20$export$2e2bcd8739ae039(changes, commander) {\n    const self = this;\n    // Add Entity //\n    const prefix = \"candidates\";\n    const canSenderList = [\n        // key, configKey, isChain\n        [\n            \"exists\",\n            \"exists\",\n            false\n        ],\n        [\n            \"shape2p\",\n            \"shape2D-point\",\n            true\n        ],\n        [\n            \"shape1x\",\n            \"shape1D-x\",\n            true\n        ],\n        [\n            \"color\",\n            \"color\",\n            false\n        ],\n        [\n            \"party\",\n            \"party\",\n            false\n        ]\n    ];\n    const registrar = new (0, $6ffe6222418ae1d6$export$2e2bcd8739ae039)();\n    (0, $177ecb0a60804ede$export$2e2bcd8739ae039).call(self, commander, prefix, registrar);\n    const candidateCommander = new (0, $95b7771e135555e3$export$2e2bcd8739ae039)(registrar, commander, self, prefix, canSenderList);\n    self.addCandidate = ({ shape2: shape2, shape1: shape1, color: color, doLoad: doLoad })=>{\n        // eslint-disable-next-line no-new, max-len\n        const candidate = new (0, $ee4376c793a01fdb$export$2e2bcd8739ae039)(shape2, shape1, color, registrar, commander, changes, doLoad, candidateCommander);\n        self.addEntity(candidate);\n    };\n    self.addDefaultEntity = ()=>{\n        self.addCandidate({\n            shape2: {\n                x: 50,\n                y: 50\n            },\n            shape1: {\n                x: 50\n            },\n            color: (0, $2589a02a34d546fb$export$7f57f51729968d3b)(\"yellow\"),\n            doLoad: false\n        });\n    };\n    // Getters //\n    self.getParties = ()=>{\n        const canList = self.getEntities();\n        const partiesByCan = getPartyByCan(canList);\n        // TODO: figure out how to vary the number of parties, allow skipping etc.\n        const numParties = 10;\n        const parties = {\n            partiesByCan: partiesByCan,\n            numParties: numParties\n        };\n        return parties;\n    };\n    // TODO: consider more than one party for a candidate.\n    function getPartyByCan(canList) {\n        return canList.map((can)=>can.party[0]);\n    }\n    self.getRGBAList = ()=>{\n        const canList = self.getEntities();\n        return canList.map((c)=>c.colorRGBA);\n    };\n}\n\n\n/** @module */ /**\r\n * This represents a spatial distribution of candidates.\r\n * A draggable handle handle provides draggable behavior.\r\n * @param {Object} shape2\r\n * @param {Object} shape1\r\n * @param {Screen} screen\r\n * @param {Registrar} candidateDnRegistrar\r\n * @param {Commander} commander\r\n * @param {Changes} changes\r\n * @param {Boolean} doLoad - Should we add the candidateDn without adding to the history?\r\n * @constructor\r\n */ function $816f8839ceda0d76$export$2e2bcd8739ae039(shape2, shape1, candidateDnRegistrar, commander, changes, doLoad, candidateDnCommander) {\n    const self = this;\n    // State //\n    self.shape2 = {};\n    self.shape1 = {};\n    self.color = \"#ccc\";\n    self.darkModeColor = \"#333\";\n    self.setAction = {\n        exists (e) {\n            self.exists = e;\n            changes.add([\n                \"draggables\"\n            ]);\n        },\n        shape2p (p) {\n            self.shape2.x = p.x;\n            self.shape2.y = p.y;\n            changes.add([\n                \"draggables\"\n            ]);\n        },\n        shape1x (x) {\n            self.shape1.x = x;\n            changes.add([\n                \"draggables\"\n            ]);\n        },\n        shape2w (w) {\n            self.shape2.w = w;\n            changes.add([\n                \"width\"\n            ]);\n        },\n        shape1w (w) {\n            self.shape1.w = w;\n            changes.add([\n                \"width\"\n            ]);\n        },\n        shape1densityProfile (d) {\n            self.shape1.densityProfile = d;\n            changes.add([\n                \"densityProfile\"\n            ]);\n        },\n        shape2densityProfile (d) {\n            self.shape2.densityProfile = d;\n            changes.add([\n                \"densityProfile\"\n            ]);\n        },\n        party (p) {\n            self.party = p;\n            changes.add([\n                \"party\"\n            ]);\n        }\n    };\n    // Make Commands //\n    const id = candidateDnRegistrar.new(self);\n    self.doSetCommand = {};\n    const actionKeys = Object.keys(self.setAction);\n    actionKeys.forEach((key)=>{\n        self.doSetCommand[key] = (e)=>{\n            const cur = candidateDnCommander[key].getCurrentValue(id);\n            candidateDnCommander[key].go(id, e, cur);\n        };\n    });\n    // Instantiation //\n    // use commands to instantiate variables\n    const shape2p = {\n        x: shape2.x,\n        y: shape2.y\n    };\n    const commands = [\n        candidateDnCommander.exists.command(id, 1, 0),\n        candidateDnCommander.shape2p.command(id, shape2p, shape2p),\n        candidateDnCommander.shape1x.command(id, shape1.x, shape1.x),\n        candidateDnCommander.shape2w.command(id, shape2.w, shape2.w),\n        candidateDnCommander.shape1w.command(id, shape1.w, shape1.w),\n        candidateDnCommander.shape1densityProfile.command(id, shape1.densityProfile, shape1.densityProfile),\n        candidateDnCommander.shape2densityProfile.command(id, shape2.densityProfile, shape2.densityProfile),\n        candidateDnCommander.party.command(id, [\n            id\n        ], [\n            id\n        ])\n    ];\n    // Either load the commands because we don't want to create an item of history\n    // Or do the commands because want to store an item in history, so that we can undo.\n    if (doLoad) commander.loadCommands(commands);\n    else commander.doCommands(commands);\n}\n\n\n\n\n\nfunction $f148b1a60916375c$export$2e2bcd8739ae039(changes, commander) {\n    const self = this;\n    // Add Entity //\n    const prefix = \"candidateDns\";\n    const canDnSenderList = [\n        // key, configKey, isChain\n        [\n            \"exists\",\n            \"exists\",\n            false\n        ],\n        [\n            \"shape2p\",\n            \"shape2D-point\",\n            true\n        ],\n        [\n            \"shape1x\",\n            \"shape1D-x\",\n            true\n        ],\n        [\n            \"shape2w\",\n            \"shape2D-width\",\n            true\n        ],\n        [\n            \"shape1w\",\n            \"shape1D-width\",\n            true\n        ],\n        [\n            \"shape1densityProfile\",\n            \"shape1D-densityProfile\",\n            false\n        ],\n        [\n            \"shape2densityProfile\",\n            \"shape2D-densityProfile\",\n            false\n        ],\n        [\n            \"party\",\n            \"party\",\n            false\n        ]\n    ];\n    const registrar = new (0, $6ffe6222418ae1d6$export$2e2bcd8739ae039)();\n    (0, $177ecb0a60804ede$export$2e2bcd8739ae039).call(self, commander, prefix, registrar);\n    const candidateDnCommander = new (0, $95b7771e135555e3$export$2e2bcd8739ae039)(registrar, commander, self, prefix, canDnSenderList);\n    self.addCandidateDistribution = ({ shape2: shape2, shape1: shape1, doLoad: doLoad })=>{\n        // eslint-disable-next-line no-new, max-len\n        const candidateDn = new (0, $816f8839ceda0d76$export$2e2bcd8739ae039)(shape2, shape1, registrar, commander, changes, doLoad, candidateDnCommander);\n        self.addEntity(candidateDn);\n    };\n    self.addDefaultEntity = ()=>{\n        self.addCandidateDistribution({\n            shape2: {\n                x: 50,\n                y: 50,\n                w: 200,\n                densityProfile: \"step\"\n            },\n            shape1: {\n                x: 50,\n                w: 200,\n                densityProfile: \"gaussian\"\n            },\n            doLoad: false\n        });\n    };\n    // Getters //\n    self.getParties = ()=>{\n        const canList = self.getEntities();\n        const partiesByCan = getPartyByCan(canList);\n        // TODO: figure out how to vary the number of parties, allow skipping etc.\n        const numParties = 10;\n        const parties = {\n            partiesByCan: partiesByCan,\n            numParties: numParties\n        };\n        return parties;\n    };\n    // TODO: consider more than one party for a candidate.\n    function getPartyByCan(canList) {\n        return canList.map((can)=>can.party[0]);\n    }\n}\n\n\nfunction $20f81351c64e36a2$export$2e2bcd8739ae039(changes, commander) {\n    const self = this;\n    // Entities //\n    self.candidateList = new (0, $5e6608903ddebe20$export$2e2bcd8739ae039)(changes, commander, self);\n    self.voterShapeList = new (0, $4709d2c6afa23527$export$2e2bcd8739ae039)(changes, commander, self);\n    self.candidateDnList = new (0, $f148b1a60916375c$export$2e2bcd8739ae039)(changes, commander, self);\n}\n\n\n/** @module */ /** @module */ \nfunction $bbf3b8576e24093e$export$2e2bcd8739ae039(voterStrategyListByPhase) {\n    const usePollsByPhase = {};\n    Object.keys(voterStrategyListByPhase).forEach((phaseName)=>{\n        const voterStrategyList = voterStrategyListByPhase[phaseName];\n        const usePolls = $bbf3b8576e24093e$var$getUsePolls(voterStrategyList);\n        usePollsByPhase[phaseName] = usePolls;\n    });\n    return usePollsByPhase;\n}\nfunction $bbf3b8576e24093e$var$getUsePolls(voterStrategyList) {\n    return voterStrategyList.some((v)=>v.strategy.some((a)=>a.actionName !== \"closest\" && a.actionWeight !== 0));\n}\n\n\nfunction $53c1834b3eb76b4e$export$2e2bcd8739ae039(voterShapeList, candidateDnList, simOptions, optionsBag, districts) {\n    const { dimensions: dimensions, seeds: seeds } = simOptions;\n    const { geography: geography } = districts;\n    const { sequenceOptions: sequenceOptions } = optionsBag;\n    const voterGeoms = voterShapeList.getGeoms(dimensions);\n    const voterParties = voterShapeList.getParties();\n    const voterStrategyListByPhase = voterShapeList.getVoterStrategyListByPhase(sequenceOptions);\n    const usePollsByPhase = (0, $bbf3b8576e24093e$export$2e2bcd8739ae039)(voterStrategyListByPhase);\n    const canDnGeoms = candidateDnList.getGeoms(dimensions);\n    const parties = candidateDnList.getParties();\n    const canDnCDF = (0, $3bbab14ea57a7ae9$export$2e2bcd8739ae039)(canDnGeoms, dimensions);\n    const samplingSeed = `apple${seeds[0]}`;\n    const strategySeed = `pumpkin${seeds[0]}` // todo: use seeds[1] for strategySeed\n    ;\n    const samplingGeometry = {\n        voterGeoms: voterGeoms,\n        voterParties: voterParties,\n        canDnGeoms: canDnGeoms,\n        parties: parties,\n        dimensions: dimensions,\n        geography: geography,\n        canDnCDF: canDnCDF,\n        samplingSeed: samplingSeed,\n        strategySeed: strategySeed,\n        voterStrategyListByPhase: voterStrategyListByPhase,\n        usePollsByPhase: usePollsByPhase\n    };\n    return samplingGeometry;\n}\n\n\n/** @module */ \n/** @module */ /** @module */ \n/** @module */ /** @module */ /** @module */ /** @module */ /**\r\n * @namespace typesMath\r\n */ /**\r\n * @typedef {number[]} lineHomogeneous - line in homogeneous coordinates, [ax, ay, b],\r\n * ax * x + ay * y = b\r\n * @memberof typesMath\r\n */ /**\r\n * @typedef {object} vector2D\r\n * @property {number} x\r\n * @property {number} y\r\n * @memberof typesMath\r\n */ var $d88aa61405844e3c$export$2e2bcd8739ae039 = {};\n\n\nvar /**\r\n * @namespace typesCanBorders\r\n */ /**\r\n * @typedef {object} canBorders\r\n * @property {pairwiseIntervals1D} [pairwiseIntervals1D]\r\n * @property {voronoiIntervals1D} [voronoiIntervals1D]\r\n * @property {voronoiLines2D} [voronoiLines2D]\r\n * @property {rankingIntervals1D} [rankingIntervals1D]\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {object} pairwiseIntervals1D\r\n * @property {number[][]} midpoints - midpoint for every pair of candidates\r\n * @property {number[][]} iLower - true if first candidate of pair is lower in x coordinate than second.\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {object} voronoiIntervals1D\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {typesMath.lineHomogeneous[]} voronoiLines2D\r\n * @memberof typesCanBorders\r\n */ /**\r\n * @typedef {object} rankingIntervals1D\r\n * @memberof typesCanBorders\r\n */ $a4313b9c4f9f5934$export$2e2bcd8739ae039 = {};\n\n\n// How exporting types works:\n// https://stackoverflow.com/a/73232942\n/**\r\n * @namespace typesCast\r\n */ /**\r\n * @typedef {object} castOptions - options for how to cast votes.\r\n * @property {number} usr - undersampling ratio. Sample grid points faster by reducing resolution in each dimension by this factor.\r\n * @property {number} verbosity - how much to store in votes data structure.\r\n * @memberof typesCast\r\n */ var $863da757f5a311e3$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesGeoms\r\n */ /**\r\n * @typedef {canPoint1D[] | canPoint2D[]} canPoints - geometries for a number of candidates.\r\n * For 2D, an array of objects: {x,y}. For 1D, an array of objects: {x}.\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {voterGeom1D[] | voterGeom2D[]} voterGeoms - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {voterGeom1D | voterGeom2D} voterGeom - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {number} canPoint1D - the point where a candidate sits in 1D - x position\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {number[]} canPoint2D - the point where a candidate sits in 2D- [x,y] position\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {object} voterGeom1D - the geometry of a voter distribution in 1D\r\n * @property {number} x - x position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */ /**\r\n * @typedef {object} voterGeom2D - the geometry of a voter distribution in 2D\r\n * @property {number} x - x position\r\n * @property {number} y - y position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */ var $795938429f1160ae$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesPoints\r\n */ /**\r\n * @typedef {point[]} points - For 2D, an array of objects: {x,y,w}. For 1D, an array of objects: {x,w,densityProfile}.\r\n */ /**\r\n * @typedef {point1D | point2D} point\r\n */ /**\r\n * @typedef {number} point1D - a point in 1D, x coordinate in policy space.\r\n * @memberof typesPoints\r\n */ /**\r\n * @typedef {number[]} point2D - a point in 2D, [x,y] coordinates in policy space.\r\n * @memberof typesPoints\r\n */ var $0629a58163deab35$export$2e2bcd8739ae039 = {};\n\n\nvar // How exporting types works:\n// https://stackoverflow.com/a/73232942\n/**\r\n * @namespace typesGeometry\r\n */ /**\r\n * @typedef {object} geometry - geometry for casting votes\r\n * @property {geoms.canPoints} canPoints\r\n * @property {geoms.voterGeoms} voterGeoms\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @property {string} [strategySeed]\r\n * @property {object} [voterStrategyList]\r\n * @memberof typesGeometry\r\n */ /**\r\n * @typedef {object} parties - describes parties each candidate belongs to.\r\n * @property {number[]} partiesByCan - each candidate has party.\r\n * @property {number} numParties - total number of parties.\r\n * @memberof typesGeometry\r\n */ /**\r\n * @typedef {object} testGeometry -geometry for casting one vote\r\n * @property {typesPoints.points} canPoints\r\n * @property {typesPoints.points} voterPoints\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @memberof typesGeometry\r\n */ $fbba0246e7af1d34$export$2e2bcd8739ae039 = {};\n\n\n\n\n\nvar /**\r\n * @namespace typesGrid\r\n */ /**\r\n * @typedef {grid1D | grid2D} grid - data for points on a grid\r\n */ /**\r\n * @typedef {object} grid1D - data for points on a 1D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {typesGeoms.voterGeom1D} voterGeom - the geometry of a voter distribution in 1D\r\n * @memberof typesGrid\r\n */ /**\r\n* @typedef {object} gridX\r\n* @property {number[]} gridX - x coordinates for grid points\r\n* @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n* @property {number} gridPointLength - size of grid point's region in policy space. density * length = count.\r\n * @memberof typesGrid\r\n */ /**\r\n * @typedef {object} grid2D - data for points on a 2D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} y - y coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number} nx - number of x coordinates\r\n * @property {number} ny - number of y coordinates\r\n * @property {number} width - width and height of grid in pixels. grid is square.\r\n * @property {typesPoints.point2D[]} voterPoints - grid points in point2D format\r\n * @property {typesGeoms.voterGeom2D} voterGeom - the geometry of a voter distribution in 2D\r\n * @memberof typesGrid\r\n */ $b6d37f024e3d966c$export$2e2bcd8739ae039 = {};\n\n\n\n\n/**\r\n * @namespace typesSocialChoice\r\n */ /**\r\n * @typedef {object} socialChoiceOptions - options to specify a social choice function.\r\n * @property {number} [seats] - Number of candidates to elect.\r\n * @property {number[]} [seatLimits] - Upper limit of number of candidates to elect from each party, useful for OLPR.\r\n * @property {number} [threshold] - The minimum fraction of voters that a party needs to be eligible for a seat.\r\n * @memberof typesSocialChoice\r\n */ /**\r\n * @typedef {object} socialChoiceResults - the results returned from a social choice function.\r\n * @property {number} [iWinner]\r\n * @property {number[]} [allocation] - says whether each candidate is elected (1) or not (0).\r\n * Allocation also applies to parties. It says how many seats were allocated to each party.\r\n * @memberof typesSocialChoice\r\n */ var $d74dbd62fd2dd943$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesVote\r\n */ /**\r\n * @typedef rankingVote - a rank for each candidate.\r\n * @property {number[]} cansByRank - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[][]} [netWinsPairwise] - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */ /**\r\n * @typedef pairwiseVote - how candidates compare head-to-head.\r\n * @property {number[][]} netWinsPairwise - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [cansByRank] - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */ /**\r\n * @typedef pluralityVote - a choice of a candidate.\r\n * @property {number} pluralityVote - the chosen candidate.\r\n * A candidate is represented as an integer from 0 to a max.\r\n * The max is the number of candidates minus 1.\r\n * @property {number[]} [pluralityAllocation] - an array of 0's except for a 1 for the chosen candidate.\r\n * @memberof typesVote\r\n */ /**\r\n * @typedef scoreVote - a score for each candidate.\r\n * @property {number[]} scoreVote - an array of scores, indexed by candidate\r\n * A score is a number between 0 and 1.\r\n * In the future, maybe integers between 0 and a maximum score.\r\n * @memberof typesVote\r\n */ var $d55774cdfe404369$export$2e2bcd8739ae039 = {};\n\n\n/**\r\n * @namespace typesVoteArrays\r\n */ /**\r\n * @typedef {object[][]} scoreVotes - Each preference has a score for each candidate.\r\n * @memberof typesVoteArrays\r\n */ /**\r\n * @typedef {object[][]} rankings - Each preference has a rank for each candidate.\r\n * @memberof typesVoteArrays\r\n */ /**\r\n * @typedef {number[][][]} cansByRankList - Each preference is a list indexed by ranking.\r\n * A list of candidates is at each ranking.\r\n * The first index is a group of voters who share the same ranking.\r\n * The second index is the rank number.\r\n * The third index is for a list of candidates at that rank.\r\n * @memberof typesVoteArrays\r\n */ var $447508b0c5dab0b8$export$2e2bcd8739ae039 = {};\n\n\n\n\n\n\n\nvar /**\r\n * @namespace typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {votesForGeomGridRanking | votesForGeomGridPairwise | votesForGeomGridPlurality | votesForGeomGridScore} votesForGeomGrid - Vote data for just one voter geometry in the form of a grid, 1D or 2D.\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridRanking\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.rankingVote[]} [voteSet] - a vote for each grid point\r\n * @property {number[]} voteCounts\r\n * @property {number} totalVotes\r\n * @property {number[]} [bordaFractionAverageByCan]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridPairwise\r\n * @property {typesGrid.grid} grid - data for points on a grid\r\n * @property {typesVote.rankingVote[]} voteSet - a vote for each grid point\r\n * @property {number} totalVotes\r\n * @property {number[]} bordaFractionAverageByCan\r\n * @property {number[][]} winsPairwise -  The number of wins for the first of a pair of candidates.\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridPlurality\r\n * @property {number[]} countByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.pluralityVote[]} [voteSet] - a vote for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridScore\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.scoreVote[]} [voteSet] - a vote for each grid point\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */ /**\r\n * @typedef {object} votesForGeomGridScoreFull\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {number[]} voteCounts\r\n * @property {typesVote.scoreVote[]} voteSet - a vote for each grid point\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */ $929c2d8973792935$export$2e2bcd8739ae039 = {};\n\n\nvar /**\r\n * @namespace typesVotesForGeom\r\n */ /**\r\n * @typedef {typesVotesForGeomGrid.votesForGeomGrid | votesForGeomCells | votesForGeomIntervals | votesForGeomPlurality} votesForGeom\r\n */ /**\r\n * @typedef {object} votesForGeomCells - Vote data for just one voter geometry in the form of 2D cells.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @property {number[]} voteCounts - number of votes for each cell\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} rankingPolygons2D - calculated cells of 2D policy space where voters share the same ranking.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} votesForGeomIntervals - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} voteCounts - number of votes for each interval\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} rankingIntervals1D - calculated intervals of 1D policy space where voters share the same ranking.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */ /**\r\n * @typedef {object} votesForGeomPlurality - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {number[]} countByCan - The number of plurality votes for a candidate.\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */ $9b4a6694823ce047$export$2e2bcd8739ae039 = {};\n\n\n\n\nvar /**\r\n * @namespace typesVotes\r\n */ /**\r\n * @typedef {object} votes - The vote a data structure that contains the information needed to elect, explain, and visualize.\r\n * @property {preferenceLists} [preferenceLists] - Lists of preferences.\r\n * @property {preferenceTallies} [preferenceTallies] - How many votes have a listed preference.\r\n * @property {candidateTallies} [candidateTallies] - vote tallies indexed by candidate\r\n * @property {pairwiseTallies} [pairwiseTallies] - pairwise tallies\r\n * @property {typesVotesForGeom.votesForGeom[]} [votesByGeom] - Vote data for each voter geometry. A list of votesForGeom.\r\n * @property {typesGeometry.parties} [parties] - describes parties each candidate belongs to.\r\n * @property {number} numCans - the number of candidates, comes in handy.\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} preferenceLists - Lists of preferences.\r\n * @property {typesVoteArrays.scoreVotes} [scoreVotes]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} [cansByRankList]\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} preferenceTallies - How many votes have a listed preference.\r\n * @property {number[]} voteFractions - The fraction of voters who share the same preference.\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} candidateTallies - vote tallies indexed by candidate\r\n * @property {number[]} [voteFractionsByCan] - The fraction of plurality votes for each candidate.\r\n * @property {number[]} [scoreFractionAverageByCan] - the average fractional score for each candidate.\r\n * @property {number[]} [firstPreferenceFractions] - A list of fractions of voters\r\n * who ranked a candidate first, indexed by candidate.\r\n * @property {number[]} [bordaFractionAverageByCan] - The average fractional borda score for a candidate.\r\n * @memberof typesVotes\r\n */ /**\r\n * @typedef {object} pairwiseTallies - pairwise tallies\r\n * @property {number[][]} winFractionPairwise - The fraction of wins for the first of a pair of candidates.\r\n * who preferred candidate i over k, indexed by [i][k].\r\n * @memberof typesVotes\r\n */ $3ff7d87ccd035943$export$2e2bcd8739ae039 = {};\n\n\n\n\n\n\nvar $f2dae5dda642a89f$exports = {};\n// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\n\nvar $gj6Et = parcelRequire(\"gj6Et\");\n\nvar $4gDjz = parcelRequire(\"4gDjz\");\n\nvar $HLBv4 = parcelRequire(\"HLBv4\");\n\nvar $ktaoY = parcelRequire(\"ktaoY\");\n\nvar $gBs5C = parcelRequire(\"gBs5C\");\n\nvar $ktLSh = parcelRequire(\"ktLSh\");\nvar $fa5d8df011db7ec0$exports = {};\n\n/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ (function(global, pool, math) {\n    //\n    // The following constants are related to IEEE 754 limits.\n    //\n    var width = 256, chunks = 6, digits = 52, rngname = \"random\", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.\n    //\n    // seedrandom()\n    // This is the seedrandom function described above.\n    //\n    function seedrandom(seed, options, callback) {\n        var key = [];\n        options = options == true ? {\n            entropy: true\n        } : options || {};\n        // Flatten the seed string or build one from local entropy if needed.\n        var shortseed = mixkey(flatten(options.entropy ? [\n            seed,\n            tostring(pool)\n        ] : seed == null ? autoseed() : seed, 3), key);\n        // Use the seed to initialize an ARC4 generator.\n        var arc4 = new ARC4(key);\n        // This function returns a random double in [0, 1) that contains\n        // randomness in every bit of the mantissa of the IEEE 754 value.\n        var prng = function() {\n            var n = arc4.g(chunks), d = startdenom, x = 0; //   and no 'extra last byte'.\n            while(n < significance){\n                n = (n + x) * width; //   shifting numerator and\n                d *= width; //   denominator and generating a\n                x = arc4.g(1); //   new least-significant-byte.\n            }\n            while(n >= overflow){\n                n /= 2; //   last byte, shift everything\n                d /= 2; //   right using integer math until\n                x >>>= 1; //   we have exactly the desired bits.\n            }\n            return (n + x) / d; // Form the number within [0, 1).\n        };\n        prng.int32 = function() {\n            return arc4.g(4) | 0;\n        };\n        prng.quick = function() {\n            return arc4.g(4) / 0x100000000;\n        };\n        prng.double = prng;\n        // Mix the randomness into accumulated entropy.\n        mixkey(tostring(arc4.S), pool);\n        // Calling convention: what to return as a function of prng, seed, is_math.\n        return (options.pass || callback || function(prng, seed, is_math_call, state) {\n            if (state) {\n                // Load the arc4 state from the given state if it has an S array.\n                if (state.S) copy(state, arc4);\n                // Only provide the .state method if requested via options.state.\n                prng.state = function() {\n                    return copy(arc4, {});\n                };\n            }\n            // If called as a method of Math (Math.seedrandom()), mutate\n            // Math.random because that is how seedrandom.js has worked since v1.0.\n            if (is_math_call) {\n                math[rngname] = prng;\n                return seed;\n            } else return prng;\n        })(prng, shortseed, \"global\" in options ? options.global : this == math, options.state);\n    }\n    //\n    // ARC4\n    //\n    // An ARC4 implementation.  The constructor takes a key in the form of\n    // an array of at most (width) integers that should be 0 <= x < (width).\n    //\n    // The g(count) method returns a pseudorandom integer that concatenates\n    // the next (count) outputs from ARC4.  Its return value is a number x\n    // that is in the range 0 <= x < (width ^ count).\n    //\n    function ARC4(key) {\n        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n        // The empty key [] is treated as [0].\n        if (!keylen) key = [\n            keylen++\n        ];\n        // Set up S using the standard key scheduling algorithm.\n        while(i < width)s[i] = i++;\n        for(i = 0; i < width; i++){\n            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n            s[j] = t;\n        }\n        // The \"g\" method returns the next (count) outputs as one number.\n        (me.g = function(count) {\n            // Using instance members instead of closure state nearly doubles speed.\n            var t, r = 0, i = me.i, j = me.j, s = me.S;\n            while(count--){\n                t = s[i = mask & i + 1];\n                r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];\n            }\n            me.i = i;\n            me.j = j;\n            return r;\n        // For robust unpredictability, the function call below automatically\n        // discards an initial batch of values.  This is called RC4-drop[256].\n        // See http://google.com/search?q=rsa+fluhrer+response&btnI\n        })(width);\n    }\n    //\n    // copy()\n    // Copies internal state of ARC4 to or from a plain object.\n    //\n    function copy(f, t) {\n        t.i = f.i;\n        t.j = f.j;\n        t.S = f.S.slice();\n        return t;\n    }\n    //\n    // flatten()\n    // Converts an object tree to nested arrays of strings.\n    //\n    function flatten(obj, depth) {\n        var result = [], typ = typeof obj, prop;\n        if (depth && typ == \"object\") {\n            for(prop in obj)try {\n                result.push(flatten(obj[prop], depth - 1));\n            } catch (e) {}\n        }\n        return result.length ? result : typ == \"string\" ? obj : obj + \"\\0\";\n    }\n    //\n    // mixkey()\n    // Mixes a string seed into a key that is an array of integers, and\n    // returns a shortened string seed that is equivalent to the result key.\n    //\n    function mixkey(seed, key) {\n        var stringseed = seed + \"\", smear, j = 0;\n        while(j < stringseed.length)key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n        return tostring(key);\n    }\n    //\n    // autoseed()\n    // Returns an object for autoseeding, using window.crypto and Node crypto\n    // module if available.\n    //\n    function autoseed() {\n        try {\n            var out;\n            if (nodecrypto && (out = nodecrypto.randomBytes)) // The use of 'out' to remember randomBytes makes tight minified code.\n            out = out(width);\n            else {\n                out = new Uint8Array(width);\n                (global.crypto || global.msCrypto).getRandomValues(out);\n            }\n            return tostring(out);\n        } catch (e) {\n            var browser = global.navigator, plugins = browser && browser.plugins;\n            return [\n                +new Date,\n                global,\n                plugins,\n                global.screen,\n                tostring(pool)\n            ];\n        }\n    }\n    //\n    // tostring()\n    // Converts an array of charcodes to a string\n    //\n    function tostring(a) {\n        return String.fromCharCode.apply(0, a);\n    }\n    //\n    // When seedrandom.js is loaded, we immediately mix a few bits\n    // from the built-in RNG into the entropy pool.  Because we do\n    // not want to interfere with deterministic PRNG state later,\n    // seedrandom will not call math.random on its own again after\n    // initialization.\n    //\n    mixkey(math.random(), pool);\n    //\n    // Nodejs and AMD support: export the implementation as a module using\n    // either convention.\n    //\n    if (0, $fa5d8df011db7ec0$exports) {\n        $fa5d8df011db7ec0$exports = seedrandom;\n        // When in node.js, try using crypto package for autoseeding.\n        try {\n            nodecrypto = (parcelRequire(\"foUwZ\"));\n        } catch (ex) {}\n    } else if (typeof define == \"function\" && define.amd) define(function() {\n        return seedrandom;\n    });\n    else // When included as a plain script, set up Math.seedrandom global.\n    math[\"seed\" + rngname] = seedrandom;\n// End anonymous scope, and pass initial values.\n})(// global: `self` in browsers (including strict mode and web workers),\n// otherwise `this` in Node and other environments\ntypeof self !== \"undefined\" ? self : $fa5d8df011db7ec0$exports, [], Math // math: package containing random, pow, and seedrandom\n);\n\n\n$fa5d8df011db7ec0$exports.alea = $gj6Et;\n$fa5d8df011db7ec0$exports.xor128 = $4gDjz;\n$fa5d8df011db7ec0$exports.xorwow = $HLBv4;\n$fa5d8df011db7ec0$exports.xorshift7 = $ktaoY;\n$fa5d8df011db7ec0$exports.xor4096 = $gBs5C;\n$fa5d8df011db7ec0$exports.tychei = $ktLSh;\n$f2dae5dda642a89f$exports = $fa5d8df011db7ec0$exports;\n\n\n/** @module */ /**\r\n * Javascript Utilities.\r\n * Just a few helpful functions that are self-contained and don't need much context.\r\n * @module */ /** @module */ /** @module */ const $63ed14aa294352e1$var$coefInvSqrt2Pi = 1 / Math.sqrt(2 * Math.PI);\nfunction $63ed14aa294352e1$export$f6e9b6133dd229d9(x, mean, sd) {\n    const coef = $63ed14aa294352e1$var$coefInvSqrt2Pi / sd;\n    return coef * Math.exp(-0.5 * ((x - mean) / sd) ** 2);\n}\nfunction $63ed14aa294352e1$export$e94e7ee3b047a94d(x, mean, sd) {\n    if (x === Infinity) return 1;\n    if (x === -Infinity) return 0;\n    return 0.5 * $63ed14aa294352e1$var$erf((x - mean) / (sd * Math.sqrt(2))) + 0.5;\n}\nfunction $63ed14aa294352e1$var$erf(x) {\n    const ERF_A = 0.147;\n    const x2 = x ** 2;\n    const down = 1 + ERF_A * x2;\n    const up = 4 / Math.PI + ERF_A * x2;\n    const ratio = -(up / down) * x2;\n    const expofun = Math.exp(ratio);\n    const radical = Math.sqrt(1 - expofun);\n    const z = radical * Math.sign(x);\n    return z;\n}\nfunction $63ed14aa294352e1$export$d40dd1c74110676b(proportion) {\n    // probability mass function\n    const pmf = $63ed14aa294352e1$export$36468e3b15474df0(proportion);\n    // https://stackoverflow.com/a/20477613\n    // [5, 10, 3, 2];\n    // [5, 15, 18, 20]\n    // cumulative distribution function\n    const cdf = [];\n    pmf.reduce((p, c, i)=>{\n        const a = p + c;\n        cdf[i] = a;\n        return a;\n    }, 0);\n    return cdf;\n}\nfunction $63ed14aa294352e1$export$36468e3b15474df0(pdf) {\n    const sum = pdf.reduce((p, c)=>p + c);\n    return pdf.map((p)=>p / sum);\n}\nfunction $63ed14aa294352e1$export$e7b853c6915bd571(a) {\n    return a.map((x, i)=>{\n        if (i === 0) return x;\n        return x - a[i - 1];\n    });\n}\nfunction $63ed14aa294352e1$export$2fa81e417e3da73b(cdf, rng) {\n    // sample from distribution\n    // pick a random number from 0 to 1\n    const random1 = rng();\n    const index = cdf.findIndex((x)=>x >= random1);\n    return index;\n}\n\n\nfunction $3e805fcd4dd3bd8a$export$2e2bcd8739ae039(canDnGeoms, dimensions) {\n    const proportion = dimensions === 1 ? canDnGeoms.map((cd)=>cd.w) : canDnGeoms.map((cd)=>cd.w ** 2);\n    const canDnCDF = (0, $63ed14aa294352e1$export$d40dd1c74110676b)(proportion);\n    return canDnCDF;\n}\n\n\n/** @module */ /**\r\n * List the indices of an array of length n.\r\n * @param {number} n - length of array\r\n * @returns {number[]} - A number array from 0 to n-1.\r\n */ function $7501ec180fc14dab$export$d02631cccf789723(n) {\n    const a = Array(n);\n    for(let i = 0; i < n; i++)a[i] = i;\n    return a;\n}\nfunction $7501ec180fc14dab$export$49bdca8d9bee322f(a) {\n    return a.reduce((p, c)=>p + c);\n}\nfunction $7501ec180fc14dab$export$4c7897fafd92b108(a) {\n    const n = a.length;\n    return a[n - 1];\n}\n\n\n\n/** @module */ function $0944e23b465e7ddb$export$e410eba367ce792b(a) {\n    let min = Infinity;\n    let iClosest = null;\n    for(let i = 0; i < a.length; i++){\n        const d = a[i];\n        if (d < min) {\n            min = d;\n            iClosest = i;\n        }\n    }\n    return iClosest;\n}\nfunction $0944e23b465e7ddb$export$6e0413888cd9bad3(a) {\n    let max = -Infinity;\n    let iMax = null;\n    for(let i = 0; i < a.length; i++){\n        const d = a[i];\n        if (d > max) {\n            max = d;\n            iMax = i;\n        }\n    }\n    return iMax;\n}\nfunction $0944e23b465e7ddb$export$6fb785c609d82593(a) {\n    let min = a[0];\n    let max = a[0];\n    for(let i = 0; i < a.length; i++){\n        const d = a[i];\n        if (d < min) min = d;\n        if (d > max) max = d;\n    }\n    return [\n        min,\n        max\n    ];\n}\n\n\n/** @module */ /**\r\n * Try to deepcopy an object.\r\n * @param {object} a - an object to copy.\r\n * @returns {object} A copy of a.\r\n */ function $88fb17c192d3ada1$export$88483c833f74f910(a) {\n    return JSON.parse(JSON.stringify(a));\n}\nfunction $88fb17c192d3ada1$export$f67cbcd1c395127c(a) {\n    const n = a.length;\n    const b = Array(n);\n    for(let i = 0; i < n; i++)b[i] = a[i];\n    return b;\n}\nfunction $88fb17c192d3ada1$export$36bc15d7720c7140(a) {\n    const n = a.length;\n    const b = Array(n);\n    for(let i = 0; i < n; i++){\n        const m = a[i].length;\n        b[i] = Array(m);\n        for(let k = 0; k < m; k++)b[i][k] = a[i][k];\n    }\n    return b;\n}\n\n\n\n\n\nfunction $a7526f6bd090f813$export$2e2bcd8739ae039(voterGeom, geometry) {\n    const { canPoints: canPoints, canBorders: canBorders } = geometry;\n    const intervals = canBorders.voronoiIntervals1D;\n    const sum = voterGeom.densityProfile === \"gaussian\" ? $a7526f6bd090f813$export$db68fffe979e7793 : $a7526f6bd090f813$export$a0550d067ba2c229;\n    // return sum for each candidate\n    const n = canPoints.length;\n    const countByCan = Array(n);\n    let totalVotes = 0;\n    for(let i = 0; i < n; i++){\n        const voteCount = sum(voterGeom, intervals[i]);\n        countByCan[i] = voteCount;\n        totalVotes += voteCount;\n    }\n    return {\n        countByCan: countByCan,\n        totalVotes: totalVotes\n    };\n}\nfunction $a7526f6bd090f813$export$a0550d067ba2c229(voterGeom, interval) {\n    const { lower: lower, upper: upper } = interval;\n    const { x: x, w: w, densityMax: densityMax } = voterGeom;\n    const r = 0.5 * w;\n    const lower2 = x - r;\n    const upper2 = x + r;\n    const lower3 = Math.max(lower, lower2);\n    const upper3 = Math.min(upper, upper2);\n    const sum = Math.max(0, upper3 - lower3) * densityMax;\n    return sum;\n}\nfunction $a7526f6bd090f813$export$db68fffe979e7793(voterGeom, interval) {\n    const { lower: lower, upper: upper } = interval;\n    const { x: x, w: w, densityMax: densityMax } = voterGeom;\n    const center = x;\n    const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n    ;\n    // evaluate integral of gaussian on interval\n    const sum = w * ((0, $63ed14aa294352e1$export$e94e7ee3b047a94d)(upper, center, sigma) - (0, $63ed14aa294352e1$export$e94e7ee3b047a94d)(lower, center, sigma)) * densityMax;\n    return sum;\n}\n\n\n/** @module */ \nfunction $15a00d29684bf28c$export$2e2bcd8739ae039(circle, lineSet) {\n    // integrate inside\n    //   Need a direction for \"inside\" for each line.\n    //   Then do a 1D consideration of what is inside.\n    // for each x coordinate,\n    const dx = 2;\n    let sum = 0;\n    const x1 = circle.x;\n    const y1 = circle.y;\n    const { w: w } = circle;\n    const r = 0.5 * w;\n    // x only goes from x1-r to x1+r\n    for(let x = x1 - r; x < x1 + r; x += dx){\n        // find bounds\n        // find equation for circle\n        // (y - y1)**2 + (x-x1)**2 < r**2\n        const diff2 = r ** 2 - (x - x1) ** 2;\n        let half;\n        if (diff2 > 0) half = Math.sqrt(diff2);\n        else half = 0;\n        let high = y1 + half;\n        let low = y1 - half;\n        // for each of the constraints, figure out if it is an upper or lower bound,\n        // then adjust the bound.\n        // The y coefficient tells us whether this is an upper or lower bound.\n        // Imagine infinite +y.\n        // If the y coefficient is negative, then ax * x + ay * y + b < 0, and ax * x + ay * y + b = 0 is a lower bound.\n        // ax * x + ay * y + b = 0\n        // y = -(b + ax * x) / ay\n        for(let i = 0; i < lineSet.length; i++){\n            const [ax, ay, b] = lineSet[i];\n            if (ay === 0) {\n                if (ax * x < -b) ;\n                else low = Infinity // bounded by x\n                ;\n            // not handling 0,0 case\n            } else {\n                const y2 = -(b + ax * x) / ay;\n                if (ay < 0) low = Math.max(low, y2);\n                else high = Math.min(high, y2);\n            }\n        }\n        // count area inside lines\n        const dy = high - low;\n        if (dy > 0) {\n            const area = dy * dx;\n            sum += area;\n        }\n    }\n    return sum;\n}\n\n\nfunction $c63ffb7a1930f4bc$export$2e2bcd8739ae039(voterGeom, geometry) {\n    const lines = geometry.canBorders.voronoiLines2D;\n    const { densityMax: densityMax } = voterGeom;\n    // use lines drawn across shape of voterGeom to sum the area within\n    const n = lines.length;\n    const countByCan = Array(n);\n    let totalVotes = 0;\n    for(let i = 0; i < n; i++){\n        const lineSet = lines[i];\n        // return area for each candidate\n        const area = (0, $15a00d29684bf28c$export$2e2bcd8739ae039)(voterGeom, lineSet);\n        const voteCount = area * densityMax;\n        countByCan[i] = voteCount;\n        totalVotes += voteCount;\n    }\n    return {\n        countByCan: countByCan,\n        totalVotes: totalVotes\n    };\n}\n\n\n/** @module */ \n/** @module */ \n\nfunction $c44aaadc58e2de20$export$2e2bcd8739ae039(dist2, information, voterStrategy, strategyRngs) {\n    if (voterStrategy === undefined) return (0, $0944e23b465e7ddb$export$e410eba367ce792b)(dist2);\n    const { strategyCDF: strategyCDF, strategy: strategy } = voterStrategy;\n    const idx = (0, $63ed14aa294352e1$export$2fa81e417e3da73b)(strategyCDF, strategyRngs[0]);\n    const { actionName: actionName, actionOptions: actionOptions } = strategy[idx];\n    if (actionName !== \"lesserEvil\") return (0, $0944e23b465e7ddb$export$e410eba367ce792b)(dist2);\n    const { mean: mean, radius: radius } = actionOptions.threshold;\n    const rnd = strategyRngs[1]();\n    const threshold = mean + radius * (rnd * 2 - 1);\n    // determine closest of the viable candidates\n    const { voteFractionsByCan: voteFractionsByCan, highestScore: highestScore } = information.polling;\n    if (highestScore === undefined) return (0, $0944e23b465e7ddb$export$e410eba367ce792b)(dist2);\n    const scoreThreshold = threshold * highestScore;\n    const indexViable = (0, $7501ec180fc14dab$export$d02631cccf789723)(dist2.length).filter((i)=>voteFractionsByCan[i] >= scoreThreshold);\n    const dist2Viable = dist2.filter((d, i)=>voteFractionsByCan[i] >= scoreThreshold);\n    if (dist2Viable.length <= 1) return (0, $0944e23b465e7ddb$export$e410eba367ce792b)(dist2);\n    const minIndexViable = (0, $0944e23b465e7ddb$export$e410eba367ce792b)(dist2Viable);\n    const minIdx = indexViable[minIndexViable];\n    return minIdx;\n}\n\n\nfunction $1b38baec92997001$export$2e2bcd8739ae039(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs) {\n    const d2f = dimensions === 1 ? $1b38baec92997001$var$d2f1 : $1b38baec92997001$var$d2f2;\n    const n = canPoints.length;\n    const dist2 = Array(n);\n    for(let i = 0; i < n; i++)dist2[i] = d2f(canPoints[i], voterPoint);\n    const i = (0, $c44aaadc58e2de20$export$2e2bcd8739ae039)(dist2, information, voterStrategy, strategyRngs);\n    if (verbosity < 2) return {\n        pluralityVote: i\n    };\n    const pluralityAllocation = new Array(n).fill(0);\n    pluralityAllocation[i] = 1;\n    const vote = {\n        pluralityAllocation: pluralityAllocation,\n        pluralityVote: i\n    };\n    return vote;\n}\nfunction $1b38baec92997001$var$d2f1(a, b) {\n    return (a - b) ** 2;\n}\nfunction $1b38baec92997001$var$d2f2(a, b) {\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2;\n}\n\n\n\n\nfunction $0a780afa48a699af$export$2e2bcd8739ae039(voterGeom) {\n    const { gridX: gridX, voterPoints: voterPoints, gridPointLength: gridPointLength } = $0a780afa48a699af$var$findGridX(voterGeom);\n    const { density: density, voteCounts: voteCounts, totalVotes: totalVotes } = $0a780afa48a699af$var$findDensity(voterGeom, gridX, gridPointLength);\n    const grid = {\n        x: gridX,\n        density: density,\n        voterPoints: voterPoints,\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        voterGeom: voterGeom\n    };\n    return grid;\n}\n/**\r\n * get x coordinates for grid\r\n * @param {types.typesGeoms.voterGeom1D} voterGeom\r\n * @returns {types.typesGrid.gridX}\r\n */ function $0a780afa48a699af$var$findGridX(voterGeom) {\n    const isGauss = voterGeom.densityProfile === \"gaussian\";\n    const spread = isGauss ? 2 : 1;\n    const iWidth = Math.round(voterGeom.w * spread);\n    const gridX = Array(iWidth);\n    const voterPoints = Array(iWidth);\n    const gridPointLength = 1;\n    for(let i = 0; i < iWidth; i++){\n        const x = i + 0.5 - iWidth * 0.5 + voterGeom.x;\n        gridX[i] = x;\n        voterPoints[i] = x;\n    }\n    return {\n        gridX: gridX,\n        voterPoints: voterPoints,\n        gridPointLength: gridPointLength\n    };\n}\nfunction $0a780afa48a699af$var$findDensity(voterGeom, gridX, gridPointLength) {\n    const { x: x, w: w, densityProfile: densityProfile, densityMax: densityMax } = voterGeom;\n    const isGauss = densityProfile === \"gaussian\";\n    const density = Array(gridX.length);\n    const voteCounts = Array(gridX.length);\n    if (!isGauss) {\n        const d = densityMax;\n        density.fill(d);\n        voteCounts.fill(d);\n        const totalVotes = voteCounts.length * d;\n        return {\n            density: density,\n            voteCounts: voteCounts,\n            totalVotes: totalVotes\n        };\n    }\n    const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n    ;\n    const invNorm = 1 / (0, $63ed14aa294352e1$export$f6e9b6133dd229d9)(0, 0, sigma);\n    let totalVotes = 0;\n    for(let i = 0; i < gridX.length; i++){\n        const xi = gridX[i];\n        const d = (0, $63ed14aa294352e1$export$f6e9b6133dd229d9)(xi, x, sigma) * invNorm * densityMax;\n        density[i] = d;\n        const voteCount = d * gridPointLength;\n        voteCounts[i] = voteCount;\n        totalVotes += voteCount;\n    }\n    return {\n        density: density,\n        voteCounts: voteCounts,\n        totalVotes: totalVotes\n    };\n}\n\n\n\n\nfunction $01979fce4e5838aa$export$2e2bcd8739ae039(voterGeom, castOptions) {\n    const { x: x, y: y, w: w, densityProfile: densityProfile } = voterGeom;\n    const isGauss = densityProfile === \"gaussian\";\n    const spread = isGauss ? 2 : 1;\n    const width = w * spread;\n    const { usr: usr } = castOptions // undersampling ratio\n    ;\n    const iWidth = Math.round(width / usr);\n    // TODO: sample from middle of square\n    const ixGrid = (0, $7501ec180fc14dab$export$d02631cccf789723)(iWidth);\n    const iyGrid = (0, $7501ec180fc14dab$export$d02631cccf789723)(iWidth);\n    const gridXMargin = ixGrid.map((i)=>(i + 0.5) * usr - width * 0.5 + x);\n    const gridYMargin = iyGrid.map((i)=>(i + 0.5) * usr - width * 0.5 + y);\n    const gridPointArea = usr * usr;\n    const nx = ixGrid.length;\n    const ny = iyGrid.length;\n    const gridLength = nx * ny;\n    const gridX = Array(gridLength);\n    const gridY = Array(gridLength);\n    const voterPoints = Array(gridLength);\n    let i = 0;\n    for(let iy = 0; iy < iyGrid.length; iy++)for(let ix = 0; ix < ixGrid.length; ix++){\n        const gx = gridXMargin[ix];\n        const gy = gridYMargin[iy];\n        gridX[i] = gx;\n        gridY[i] = gy;\n        voterPoints[i] = [\n            gx,\n            gy\n        ];\n        i += 1;\n    }\n    const findDensity = isGauss ? $01979fce4e5838aa$var$findDensityGauss : $01979fce4e5838aa$var$findDensityCircle;\n    const { density: density, voteCounts: voteCounts, totalVotes: totalVotes } = findDensity(voterGeom, gridX, gridY, gridPointArea);\n    const grid = {\n        x: gridX,\n        y: gridY,\n        nx: nx,\n        ny: ny,\n        width: width,\n        voterPoints: voterPoints,\n        density: density,\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        voterGeom: voterGeom\n    };\n    return grid;\n}\nfunction $01979fce4e5838aa$var$findDensityCircle(voterGeom, gridX, gridY, gridPointArea) {\n    const { x: x, y: y, w: w, densityMax: densityMax } = voterGeom;\n    const ni = gridX.length;\n    const density = Array(ni).fill(0);\n    const voteCounts = Array(ni).fill(0);\n    let totalVotes = 0;\n    for(let i = 0; i < ni; i++){\n        const gx = gridX[i];\n        const gy = gridY[i];\n        const d2 = (gx - x) ** 2 + (gy - y) ** 2;\n        const r2 = (0.5 * w) ** 2;\n        // TODO: for edges, determine how much of the area of the pixel is within the shape.\n        if (d2 < r2) {\n            density[i] = densityMax;\n            const voteCount = gridPointArea * densityMax;\n            voteCounts[i] = voteCount;\n            totalVotes += voteCount;\n        }\n    // const density = (d2 < r2) ? 1 : 0\n    // return density\n    }\n    return {\n        density: density,\n        voteCounts: voteCounts,\n        totalVotes: totalVotes\n    };\n}\nconst $01979fce4e5838aa$var$invSqrt8 = 1 / Math.sqrt(8);\nfunction $01979fce4e5838aa$var$findDensityGauss(voterGeom, gridX, gridY, gridPointArea) {\n    const { x: x, y: y, w: w, densityMax: densityMax } = voterGeom;\n    // To compare a circle to a 2D normal distribution,\n    // set the circle's density to the normal's density at 0.\n    // Then the radius R of the circle is related to sigma.\n    // radius = sqrt(2) * sigma\n    // sigma = radius / sqrt(2)\n    // The radius is half the width.\n    // sigma = width / sqrt(8)\n    const sigma = w * $01979fce4e5838aa$var$invSqrt8;\n    // normalize density to be 1 at the center.\n    const invNorm = 1 / (0, $63ed14aa294352e1$export$f6e9b6133dd229d9)(0, 0, sigma);\n    const invNorm2 = invNorm ** 2;\n    const ni = gridX.length;\n    const density = Array(ni);\n    const voteCounts = Array(ni);\n    let totalVotes = 0;\n    for(let i = 0; i < ni; i++){\n        const gx = gridX[i];\n        const gy = gridY[i];\n        const d = (0, $63ed14aa294352e1$export$f6e9b6133dd229d9)(gx, x, sigma) * (0, $63ed14aa294352e1$export$f6e9b6133dd229d9)(gy, y, sigma) * invNorm2 * densityMax;\n        density[i] = d;\n        const voteCount = d * gridPointArea;\n        voteCounts[i] = voteCount;\n        totalVotes += voteCount;\n    }\n    return {\n        density: density,\n        voteCounts: voteCounts,\n        totalVotes: totalVotes\n    };\n}\n\n\nfunction $675f1a25ef168fcc$export$2e2bcd8739ae039(voterGeom, geometry, castOptions, strategyRngs, voterStrategy) {\n    const { canPoints: canPoints, dimensions: dimensions, information: information } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // just find the vote and count at each grid point\n    const makeGrid = dimensions === 1 ? (0, $0a780afa48a699af$export$2e2bcd8739ae039) : (0, $01979fce4e5838aa$export$2e2bcd8739ae039);\n    const grid = makeGrid(voterGeom, castOptions);\n    const n = canPoints.length;\n    const countByCan = Array(n).fill(0);\n    let totalVotes = 0;\n    // find vote\n    const gridLength = grid.x.length;\n    const voteSet = Array(gridLength);\n    for(let i = 0; i < gridLength; i++){\n        const voteCounts = grid.voteCounts[i];\n        const voterPoint = grid.voterPoints[i];\n        const vote = (0, $1b38baec92997001$export$2e2bcd8739ae039)(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs);\n        const { pluralityVote: pluralityVote } = vote;\n        countByCan[pluralityVote] += voteCounts;\n        totalVotes += voteCounts;\n        if (verbosity < 2) continue;\n        voteSet[i] = vote;\n    }\n    if (verbosity < 2) return {\n        countByCan: countByCan,\n        totalVotes: totalVotes\n    };\n    return {\n        grid: grid,\n        voteSet: voteSet,\n        countByCan: countByCan,\n        totalVotes: totalVotes\n    };\n}\n\n\nfunction $71106f996b9d16a4$export$2e2bcd8739ae039(geometry, castOptions) {\n    const { canPoints: canPoints, voterGeoms: voterGeoms, dimensions: dimensions, parties: parties, strategySeed: strategySeed, voterStrategyList: voterStrategyList } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n    const someStrategy = voterStrategyList.some((v)=>v.strategy.some((a)=>a.actionName !== \"closest\" && a.actionWeight !== 0));\n    const castRegions = dimensions === 1 ? (0, $a7526f6bd090f813$export$2e2bcd8739ae039) : (0, $c63ffb7a1930f4bc$export$2e2bcd8739ae039);\n    const cast = someGaussian2D || someStrategy ? (0, $675f1a25ef168fcc$export$2e2bcd8739ae039) : castRegions;\n    // get fraction of votes for each candidate so we can summarize results\n    const n = canPoints.length;\n    const votesByGeom = [];\n    const countByCan = new Array(n).fill(0);\n    let totalVotes = 0;\n    const strategyRngs = [\n        (0, (/*@__PURE__*/$parcel$interopDefault($f2dae5dda642a89f$exports)))(`green${strategySeed}`),\n        (0, (/*@__PURE__*/$parcel$interopDefault($f2dae5dda642a89f$exports)))(`orange${strategySeed}`)\n    ];\n    for(let i = 0; i < voterGeoms.length; i++){\n        const voterGeom = voterGeoms[i];\n        const voterStrategy = voterStrategyList[i];\n        const votesForGeom = cast(voterGeom, geometry, castOptions, strategyRngs, voterStrategy);\n        const { countByCan: countByCanForGeom, totalVotes: totalVotesForGeom } = votesForGeom;\n        for(let k = 0; k < n; k++)countByCan[k] += countByCanForGeom[k];\n        totalVotes += totalVotesForGeom;\n        if (verbosity < 2) continue;\n        votesByGeom[i] = votesForGeom;\n    }\n    const voteFractionsByCan = countByCan.map((x)=>x / totalVotes);\n    const candidateTallies = {\n        voteFractionsByCan: voteFractionsByCan\n    };\n    const numCans = canPoints.length;\n    const votes = {\n        candidateTallies: candidateTallies,\n        parties: parties,\n        numCans: numCans\n    };\n    if (verbosity < 2) return votes;\n    votes.votesByGeom = votesByGeom;\n    return votes;\n}\n\n\n/** @module */ \n/** @module */ /** @module */ \nfunction $77b387506f9b5801$export$2e2bcd8739ae039(dist, information, voterStrategy, strategyRngs) {\n    if (voterStrategy === undefined) return (0, $0944e23b465e7ddb$export$6fb785c609d82593)(dist);\n    const { strategyCDF: strategyCDF, strategy: strategy } = voterStrategy;\n    const idx = (0, $63ed14aa294352e1$export$2fa81e417e3da73b)(strategyCDF, strategyRngs[0]);\n    const { actionName: actionName, actionOptions: actionOptions } = strategy[idx];\n    if (actionName !== \"normalizeOverFrontrunners\") return (0, $0944e23b465e7ddb$export$6fb785c609d82593)(dist);\n    const { mean: mean, radius: radius } = actionOptions.threshold;\n    const rnd = strategyRngs[1]();\n    const threshold = mean + radius * (rnd * 2 - 1);\n    // determine closest and furthest of the viable candidates\n    const { scoreFractionAverageByCan: scoreFractionAverageByCan, highestScore: highestScore } = information.polling;\n    if (highestScore === undefined) return (0, $0944e23b465e7ddb$export$6fb785c609d82593)(dist);\n    const scoreThreshold = threshold * highestScore;\n    const distViable = dist.filter((d, i)=>scoreFractionAverageByCan[i] >= scoreThreshold);\n    if (distViable.length <= 1) return (0, $0944e23b465e7ddb$export$6fb785c609d82593)(dist);\n    return (0, $0944e23b465e7ddb$export$6fb785c609d82593)(distViable);\n}\n\n\nfunction $ee32225c29a71c8c$export$2e2bcd8739ae039(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs) {\n    const df = dimensions === 1 ? $ee32225c29a71c8c$var$df1 : $ee32225c29a71c8c$var$df2;\n    const n = canPoints.length;\n    const dist = Array(n);\n    for(let i = 0; i < n; i++)dist[i] = df(canPoints[i], voterPoint);\n    const [min, max] = (0, $77b387506f9b5801$export$2e2bcd8739ae039)(dist, information, voterStrategy, strategyRngs);\n    // in the current implementation, all candidates are frontrunners\n    const maxscore = 1;\n    const minscore = 0;\n    const scoreVote = new Array(n).fill(0);\n    for(let i = 0; i < n; i++){\n        const d = dist[i];\n        if (d <= min) scoreVote[i] = maxscore;\n        else if (d >= max) // in the case that the voter likes the frontrunner candidates equally,\n        // he just votes for everyone better\n        scoreVote[i] = minscore;\n        else {\n            const frac = (d - min) / (max - min);\n            // scoreVote[i] = Math.floor(0.5 + minscore + (maxscore - minscore) * (1 - frac))\n            scoreVote[i] = minscore + (maxscore - minscore) * (1 - frac);\n        }\n    }\n    const vote = {\n        scoreVote: scoreVote\n    };\n    return vote;\n}\nfunction $ee32225c29a71c8c$var$df1(a, b) {\n    return Math.abs(a - b);\n}\nfunction $ee32225c29a71c8c$var$df2(a, b) {\n    return Math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2);\n}\n\n\n\n\nfunction $b28115fdcc76979a$export$2e2bcd8739ae039(voterGeom, geometry, castOptions, strategyRngs, voterStrategy) {\n    const { canPoints: canPoints, dimensions: dimensions, information: information } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // just find the vote and count at each grid point\n    const makeGrid = dimensions === 1 ? (0, $0a780afa48a699af$export$2e2bcd8739ae039) : (0, $01979fce4e5838aa$export$2e2bcd8739ae039);\n    const grid = makeGrid(voterGeom, castOptions);\n    const { voteCounts: voteCounts, totalVotes: totalVotes, voterPoints: voterPoints } = grid;\n    const n = canPoints.length;\n    const scoreSumByCan = Array(n).fill(0);\n    // find vote\n    const gridLength = grid.x.length;\n    const voteSet = Array(gridLength);\n    for(let i = 0; i < gridLength; i++){\n        const voteCount = voteCounts[i];\n        const voterPoint = voterPoints[i];\n        const vote = (0, $ee32225c29a71c8c$export$2e2bcd8739ae039)(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs);\n        voteSet[i] = vote;\n        const { scoreVote: scoreVote } = vote;\n        for(let k = 0; k < n; k++)scoreSumByCan[k] += scoreVote[k] * voteCount;\n    }\n    if (verbosity < 2) return {\n        scoreSumByCan: scoreSumByCan,\n        totalVotes: totalVotes\n    };\n    const votesForGeom = {\n        grid: grid,\n        voteSet: voteSet,\n        scoreSumByCan: scoreSumByCan,\n        totalVotes: totalVotes,\n        voterGeom: voterGeom\n    };\n    return votesForGeom;\n}\n\n\nfunction $69e1e6d64194227d$export$2e2bcd8739ae039(geometry, castOptions) {\n    const { canPoints: canPoints, voterGeoms: voterGeoms, parties: parties, strategySeed: strategySeed, voterStrategyList: voterStrategyList } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // get fraction of votes for each candidate so we can summarize results\n    const n = canPoints.length;\n    const votesByGeom = [];\n    const scoreSumByCan = new Array(n).fill(0);\n    let totalVotes = 0;\n    const strategyRngs = [\n        (0, (/*@__PURE__*/$parcel$interopDefault($f2dae5dda642a89f$exports)))(`green${strategySeed}`),\n        (0, (/*@__PURE__*/$parcel$interopDefault($f2dae5dda642a89f$exports)))(`orange${strategySeed}`)\n    ];\n    for(let i = 0; i < voterGeoms.length; i++){\n        const voterGeom = voterGeoms[i];\n        const voterStrategy = voterStrategyList[i];\n        const votesForGeom = (0, $b28115fdcc76979a$export$2e2bcd8739ae039)(voterGeom, geometry, castOptions, strategyRngs, voterStrategy);\n        votesByGeom[i] = votesForGeom;\n        const { totalVotes: totalVotesForGeom, scoreSumByCan: scoreSumByCanForGeom } = votesForGeom;\n        for(let k = 0; k < n; k++)scoreSumByCan[k] += scoreSumByCanForGeom[k];\n        totalVotes += totalVotesForGeom;\n    }\n    const maxScore = 1;\n    const scoreFractionAverageByCan = scoreSumByCan.map((x)=>x / (totalVotes * maxScore));\n    const candidateTallies = {\n        scoreFractionAverageByCan: scoreFractionAverageByCan\n    };\n    const numCans = canPoints.length;\n    const votes = {\n        candidateTallies: candidateTallies,\n        parties: parties,\n        numCans: numCans\n    };\n    if (verbosity < 2) return votes;\n    votes.votesByGeom = votesByGeom;\n    return votes;\n}\n\n\n/** @module */ /** @module */ \n\n\nfunction $7211c215b9d3ed62$export$2e2bcd8739ae039(voterGeom, geometry, castOptions) {\n    const { canPoints: canPoints, dimensions: dimensions } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // just find the vote and count at each grid point\n    const makeGrid = dimensions === 1 ? (0, $0a780afa48a699af$export$2e2bcd8739ae039) : (0, $01979fce4e5838aa$export$2e2bcd8739ae039);\n    const grid = makeGrid(voterGeom, castOptions);\n    const { voteCounts: voteCounts, totalVotes: totalVotes, voterPoints: voterPoints } = grid;\n    const n = canPoints.length;\n    const scoreSumByCan = Array(n).fill(0);\n    // find vote\n    const gridLength = grid.x.length;\n    const voteSet = Array(gridLength);\n    for(let i = 0; i < gridLength; i++){\n        const voteCount = voteCounts[i];\n        const voterPoint = voterPoints[i];\n        const vote = (0, $ee32225c29a71c8c$export$2e2bcd8739ae039)(canPoints, voterPoint, dimensions);\n        voteSet[i] = vote;\n        const { scoreVote: scoreVote } = vote;\n        for(let k = 0; k < n; k++)scoreSumByCan[k] += scoreVote[k] * voteCount;\n    }\n    if (verbosity < 2) return {\n        voteCounts: voteCounts,\n        voteSet: voteSet,\n        scoreSumByCan: scoreSumByCan,\n        totalVotes: totalVotes\n    };\n    const votesForGeom = {\n        grid: grid,\n        voteCounts: voteCounts,\n        voteSet: voteSet,\n        scoreSumByCan: scoreSumByCan,\n        totalVotes: totalVotes,\n        voterGeom: voterGeom\n    };\n    return votesForGeom;\n}\n\n\nfunction $05a9755cbd930002$export$2e2bcd8739ae039(geometry, castOptions) {\n    const { canPoints: canPoints, voterGeoms: voterGeoms, parties: parties } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // get fraction of votes for each candidate so we can summarize results\n    const n = canPoints.length;\n    // find totalWeight of \"voter area\" over all the voterGeoms\n    // then find normalization factor, which is just 1/totalWeight\n    let totalVotes = 0;\n    const votesByGeom = [];\n    for(let i = 0; i < voterGeoms.length; i++){\n        const voterGeom = voterGeoms[i];\n        const votesForGeom = (0, $7211c215b9d3ed62$export$2e2bcd8739ae039)(voterGeom, geometry, castOptions);\n        votesByGeom[i] = votesForGeom;\n        const { totalVotes: totalVotesForGeom } = votesForGeom;\n        totalVotes += totalVotesForGeom;\n    }\n    const invTotalCount = 1 / totalVotes;\n    // tally votes\n    // flatten voteSets into scoreVotes\n    // voteFractions is number of voters with that vote as a fraction of total votes (usually 1 or lower)\n    const scoreSumByCan = new Array(n).fill(0);\n    const scoreVotes = [];\n    const voteFractions = [];\n    let index = 0;\n    for(let i = 0; i < voterGeoms.length; i++){\n        const { voteCounts: voteCounts, voteSet: voteSet, scoreSumByCan: scoreSumByCanForGeom } = votesByGeom[i];\n        // use voteIndex to find flattened index\n        // voteIndex = Number[] with first index as geometry and second index as voteSet index\n        const voteIndex = [];\n        for(let j = 0; j < voteSet.length; j++){\n            scoreVotes[index] = voteSet[j].scoreVote;\n            voteIndex[j] = index;\n            voteFractions[index] = voteCounts[j] * invTotalCount;\n            index += 1;\n        }\n        votesByGeom[i].voteIndex = voteIndex;\n        for(let k = 0; k < n; k++)scoreSumByCan[k] += scoreSumByCanForGeom[k];\n    }\n    const maxScore = 1;\n    const scoreFractionAverageByCan = scoreSumByCan.map((x)=>x / (totalVotes * maxScore));\n    const preferenceLists = {\n        scoreVotes: scoreVotes\n    };\n    const preferenceTallies = {\n        voteFractions: voteFractions\n    };\n    const candidateTallies = {\n        scoreFractionAverageByCan: scoreFractionAverageByCan\n    };\n    const numCans = canPoints.length;\n    const votes = {\n        preferenceLists: preferenceLists,\n        preferenceTallies: preferenceTallies,\n        candidateTallies: candidateTallies,\n        parties: parties,\n        numCans: numCans\n    };\n    if (verbosity < 2) return votes;\n    votes.votesByGeom = votesByGeom;\n    return votes;\n}\n\n\n/** @module */ \n/** @module */ \n/** @module */ \n\nfunction $331c71aac68d7e32$export$2e2bcd8739ae039(canPoints, voterPoint, dimensions, verbosity) {\n    const d2f = dimensions === 1 ? $331c71aac68d7e32$var$d2f1 : $331c71aac68d7e32$var$d2f2;\n    const n = canPoints.length;\n    const dist2 = Array(n);\n    for(let i = 0; i < n; i++)dist2[i] = d2f(canPoints[i], voterPoint);\n    const indexInOrder = (0, $7501ec180fc14dab$export$d02631cccf789723)(n).sort((a, b)=>dist2[a] - dist2[b]);\n    // Note that ties are not handled.\n    const cansByRank = Array(n);\n    for(let i = 0; i < n; i++){\n        const can = indexInOrder[i];\n        cansByRank[i] = [\n            can\n        ];\n    }\n    if (verbosity === 0) return {\n        cansByRank: cansByRank\n    };\n    const ranking = Array(n);\n    const bordaScores = Array(n);\n    const bordaFractions = Array(n);\n    for(let i = 0; i < n; i++){\n        const can = indexInOrder[i];\n        ranking[can] = i + 1;\n        bordaScores[can] = n - i - 1;\n        bordaFractions[can] = (n - i - 1) / (n - 1);\n    }\n    // Does i beat k? 1 if yes, -1 if opposite, 0 if tie\n    const netWinsPairwise = Array(n);\n    for(let i = 0; i < n; i++){\n        netWinsPairwise[i] = Array(n).fill(0);\n        for(let k = 0; k < n; k++){\n            if (dist2[i] === dist2[k]) continue;\n            netWinsPairwise[i][k] = dist2[i] < dist2[k] ? 1 : -1;\n        }\n    }\n    return {\n        cansByRank: cansByRank,\n        ranking: ranking,\n        netWinsPairwise: netWinsPairwise,\n        bordaFractions: bordaFractions,\n        bordaScores: bordaScores\n    };\n}\nfunction $331c71aac68d7e32$var$d2f1(a, b) {\n    return (a - b) ** 2;\n}\nfunction $331c71aac68d7e32$var$d2f2(a, b) {\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2;\n}\n\n\n\n\nfunction $d6c30a4e9504875f$export$2e2bcd8739ae039(voterGeom, geometry, castOptions) {\n    const { canPoints: canPoints, dimensions: dimensions } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // just find the vote and voteCount at each grid point\n    const makeGrid = dimensions === 1 ? (0, $0a780afa48a699af$export$2e2bcd8739ae039) : (0, $01979fce4e5838aa$export$2e2bcd8739ae039);\n    // @ts-ignore\n    const grid = makeGrid(voterGeom, castOptions);\n    const { voteCounts: voteCounts, totalVotes: totalVotes, voterPoints: voterPoints } = grid;\n    const nk = canPoints.length;\n    const cansByRankList = new Array(nk);\n    let bordaScoreSumByCan;\n    let rankings;\n    let voteSet;\n    if (verbosity >= 2) {\n        bordaScoreSumByCan = Array(nk).fill(0);\n        rankings = new Array(nk);\n        voteSet = Array(voteCounts.length);\n    }\n    // find vote\n    for(let i = 0; i < voteCounts.length; i++){\n        const voteCount = voteCounts[i];\n        const voterPoint = voterPoints[i];\n        const vote = (0, $331c71aac68d7e32$export$2e2bcd8739ae039)(canPoints, voterPoint, dimensions, verbosity);\n        cansByRankList[i] = vote.cansByRank;\n        if (verbosity < 2) continue;\n        voteSet[i] = vote;\n        rankings[i] = vote.ranking;\n        const { bordaScores: bordaScores } = vote;\n        for(let k = 0; k < nk; k++)bordaScoreSumByCan[k] += bordaScores[k] * voteCount;\n    }\n    if (verbosity < 2) return {\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        cansByRankList: cansByRankList\n    };\n    // bordaScore is nk-1 if a candidate receives all the votes for the voter geometry.\n    // bordaFractionAverageByCan is 1 if a candidate receives all the votes.\n    const bordaFractionAverageByCan = bordaScoreSumByCan.map((bt)=>bt / (nk - 1) / totalVotes);\n    return {\n        grid: grid,\n        voteSet: voteSet,\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        bordaFractionAverageByCan: bordaFractionAverageByCan,\n        rankings: rankings,\n        cansByRankList: cansByRankList\n    };\n}\n\n\n/** @module */ \nfunction $ad898daa19131485$export$2e2bcd8739ae039(voterGeom, geometry, castOptions) {\n    const { intervalBorders: intervalBorders, rankings: rankings, cansByRankList: cansByRankList } = geometry.canBorders.rankingIntervals1D;\n    const { verbosity: verbosity } = castOptions;\n    // find count inside each interval\n    const ni = intervalBorders.length - 1;\n    const voteCounts = Array(ni);\n    let totalVotes = 0;\n    for(let i = 0; i < ni; i++){\n        // return count for each ranking\n        const lower = intervalBorders[i];\n        const upper = intervalBorders[i + 1];\n        const voteCount = $ad898daa19131485$var$sumInterval(lower, upper, voterGeom);\n        voteCounts[i] = voteCount;\n        totalVotes += voteCount;\n    }\n    if (verbosity < 2) return {\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        cansByRankList: cansByRankList\n    };\n    return {\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        cansByRankList: cansByRankList,\n        rankings: rankings,\n        intervalBorders: intervalBorders\n    };\n}\nfunction $ad898daa19131485$var$sumInterval(lower, upper, voterGeom) {\n    if (voterGeom.densityProfile === \"gaussian\") return (0, $a7526f6bd090f813$export$db68fffe979e7793)(voterGeom, {\n        lower: lower,\n        upper: upper\n    });\n    return (0, $a7526f6bd090f813$export$a0550d067ba2c229)(voterGeom, {\n        lower: lower,\n        upper: upper\n    });\n}\n\n\n/** @module */ function $64e498bedbbc6430$export$2e2bcd8739ae039(polygon) {\n    var i = -1, n = polygon.length, a, b = polygon[n - 1], area = 0;\n    while(++i < n){\n        a = b;\n        b = polygon[i];\n        area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area / 2;\n}\n\n\n/** @module */ \n\nfunction $62defbbb6cfa799c$export$2e2bcd8739ae039(c1, c2) {\n    const [c1x, c1y] = c1;\n    const [c2x, c2y] = c2;\n    // ax * x + ay * y + b < 0\n    // this is the condition that x counts for a candidate.\n    // line equidistant from two points\n    // https://math.stackexchange.com/a/771773\n    // difference between points\n    const dx = c2x - c1x;\n    const dy = c2y - c1y;\n    // midpoint between points\n    const mx = (c1x + c2x) * 0.5;\n    const my = (c1y + c2y) * 0.5;\n    // equation for line\n    // (y-my) / (x-mx) = - dx / dy\n    // implies y * dy - my * dy = - x * dx + mx * dx\n    // implies dx * x + dy * y = mx * dx + my * dy\n    // rename to A = [dx;dy]\n    //           b = -(mx * dx + my * dy)\n    const ax = dx;\n    const ay = dy;\n    const b = -(mx * dx + my * dy);\n    // is c1 or c2 closer?\n    // c1 is closer is equivalent to ax * x + ay * y + b < 0\n    return [\n        ax,\n        ay,\n        b\n    ];\n}\n\n\n/** @module */ /**\r\n * Beware, points are references to old points, so make sure to make a copy afterward.\r\n * @param {number[][]} points\r\n * @param {number[]} plane\r\n * @returns {{positive:Number[][], negative:Number[][]}} - Object containing properties\r\n * positive and negative, each being a set of points\r\n */ function $bb366623257a05a3$export$2e2bcd8739ae039(points, plane) {\n    // put all points on either the positive or negative side of the plane.\n    // When we cross to the other side, we create a point in the middle and add it to both.\n    const n = points.length;\n    const pos = [];\n    const neg = [];\n    let iPos = 0;\n    let iNeg = 0;\n    let a = points[n - 1];\n    let aNeg = $bb366623257a05a3$var$calcNeg(plane, a);\n    for(let i = 0; i < n; i++){\n        const b = points[i];\n        const bNeg = $bb366623257a05a3$var$calcNeg(plane, b);\n        if (aNeg && !bNeg || !aNeg && bNeg) {\n            const da = $bb366623257a05a3$var$calcDist(plane, a);\n            const db = $bb366623257a05a3$var$calcDist(plane, b);\n            const m = $bb366623257a05a3$var$lerp(a, b, da, db);\n            pos[iPos] = m;\n            neg[iNeg] = m;\n            iPos += 1;\n            iNeg += 1;\n        }\n        if (bNeg) {\n            neg[iNeg] = b;\n            iNeg += 1;\n        } else {\n            pos[iPos] = b;\n            iPos += 1;\n        }\n        a = b;\n        aNeg = bNeg;\n    }\n    return {\n        positive: pos,\n        negative: neg\n    };\n}\nfunction $bb366623257a05a3$var$calcDist(plane, point) {\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    const numerator = plane[0] * point[0] + plane[1] * point[1] + plane[2];\n    const denominator = Math.sqrt(plane[0] ** 2 + plane[1] ** 2);\n    return numerator / denominator;\n}\nfunction $bb366623257a05a3$var$calcNeg(plane, point) {\n    const numerator = plane[0] * point[0] + plane[1] * point[1] + plane[2];\n    return numerator < 0;\n}\nfunction $bb366623257a05a3$var$lerp(a, b, da, db) {\n    const d = da - db;\n    let f = -db / d;\n    if (f < 0) f = 0;\n    if (f > 1) f = 1;\n    const n = [\n        f * a[0] + (1 - f) * b[0],\n        f * a[1] + (1 - f) * b[1]\n    ];\n    return n;\n}\n\n\nfunction $8ac03c9189b50120$export$2e2bcd8739ae039(voterGeom, canPoints, verbosity) {\n    /* Start with polygons for each voterGeom\r\n    * At each division, increment the borda score for the closer candidate.\r\n    * The resulting borda score is nearly the opposite of the ranking. n-i-1.\r\n    */ // Just keep dividing up the polygons for each pair.\n    // Keep track of the indexes of who won, too.\n    // start with polygons for voterGeom\n    const voterPoly = $8ac03c9189b50120$var$makeCircle(voterGeom);\n    let cells = [\n        voterPoly\n    ];\n    const n = canPoints.length;\n    let bordaScore = [\n        Array(n).fill(0)\n    ];\n    for(let i = 0; i < n - 1; i++)for(let k = i + 1; k < n; k++){\n        const cn = cells.length;\n        // split cells with voronoi, guess how many cells\n        // the number of cells will only increase, so start with cn and add more if needed\n        const newCells = Array(cn);\n        const newBordaScore = Array(cn);\n        let o = 0;\n        for(let m = 0; m < cn; m++){\n            const subject = cells[m];\n            const plane = (0, $62defbbb6cfa799c$export$2e2bcd8739ae039)(canPoints[i], canPoints[k]);\n            const newC = (0, $bb366623257a05a3$export$2e2bcd8739ae039)(subject, plane);\n            // sometimes near-zero-area polygons are formed that need to be removed\n            // because they also have rankings that don't make sense.\n            const pos = newC.positive;\n            if (pos !== undefined && pos.length > 2) {\n                newCells[o] = pos;\n                newBordaScore[o] = (0, $88fb17c192d3ada1$export$f67cbcd1c395127c)(bordaScore[m]);\n                newBordaScore[o][k] += 1;\n                o += 1;\n            }\n            const neg = newC.negative;\n            if (neg !== undefined && neg.length > 2) {\n                newCells[o] = neg;\n                newBordaScore[o] = (0, $88fb17c192d3ada1$export$f67cbcd1c395127c)(bordaScore[m]);\n                newBordaScore[o][i] += 1;\n                o += 1;\n            }\n        }\n        cells = newCells;\n        bordaScore = newBordaScore;\n    }\n    const cn = cells.length;\n    const cansByRankList = Array(cn);\n    let rankings;\n    if (verbosity >= 2) {\n        rankings = Array(cn);\n        for(let i = 0; i < cn; i++)rankings[i] = Array(n);\n    }\n    for(let i = 0; i < cn; i++){\n        cansByRankList[i] = Array(n);\n        for(let k = 0; k < n; k++)cansByRankList[i][k] = [];\n        for(let k = 0; k < n; k++){\n            const rik = n - bordaScore[i][k];\n            cansByRankList[i][rik - 1].push(k);\n            if (verbosity < 2) continue;\n            rankings[i][k] = rik;\n        }\n    }\n    if (verbosity < 2) return {\n        cells: cells,\n        cansByRankList: cansByRankList\n    };\n    const rankingPolygons2D = {\n        cells: cells,\n        rankings: rankings,\n        cansByRankList: cansByRankList\n    };\n    return rankingPolygons2D;\n}\n/**\r\n * Make an approximate circle.\r\n * @param {object} voterGeom\r\n */ function $8ac03c9189b50120$var$makeCircle(voterGeom) {\n    const { x: x, y: y, w: w } = voterGeom;\n    const r = w / 2;\n    const n = 100;\n    const circle = Array(n);\n    for(let i = 0; i < n; i++){\n        const frac = i / (n - 1);\n        const angle = 2 * Math.PI * frac;\n        const px = x + r * Math.cos(angle);\n        const py = y + r * Math.sin(angle);\n        circle[i] = [\n            px,\n            py\n        ];\n    }\n    return circle;\n}\n\n\nfunction $912116aa87ff0374$export$2e2bcd8739ae039(voterGeom, geometry, castOptions) {\n    const { canPoints: canPoints } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    const { densityMax: densityMax } = voterGeom;\n    // draw lines across shape of voterGeom\n    let { cells: cells, rankings: rankings, cansByRankList: cansByRankList } = (0, $8ac03c9189b50120$export$2e2bcd8739ae039)(voterGeom, canPoints, verbosity);\n    // find area of polygons\n    const cn = cells.length;\n    const areas = Array(cn);\n    let voteCounts = Array(cn);\n    let totalVotes = 0;\n    for(let i = 0; i < cn; i++){\n        // return area for each ranking\n        const area = -(0, $64e498bedbbc6430$export$2e2bcd8739ae039)(cells[i]);\n        areas[i] = area;\n        const voteCount = area * densityMax;\n        voteCounts[i] = voteCount;\n        totalVotes += voteCount;\n    }\n    // sometimes near-zero-area polygons are formed that need to be removed\n    // because they also have rankings that don't make sense.\n    const tol = 0.000001;\n    cansByRankList = cansByRankList.filter((_, i)=>Math.abs(areas[i]) > tol);\n    voteCounts = voteCounts.filter((_, i)=>Math.abs(areas[i]) > tol);\n    if (verbosity < 2) return {\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        cansByRankList: cansByRankList\n    };\n    rankings = rankings.filter((_, i)=>Math.abs(areas[i]) > tol);\n    cells = cells.filter((_, i)=>Math.abs(areas[i]) > tol);\n    return {\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        cansByRankList: cansByRankList,\n        rankings: rankings,\n        cells: cells\n    };\n}\n\n\nfunction $daad6d0c9ee9c61b$export$2e2bcd8739ae039(geometry, castOptions) {\n    const { canPoints: canPoints, voterGeoms: voterGeoms, dimensions: dimensions, parties: parties } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n    const castRegions = dimensions === 1 ? (0, $ad898daa19131485$export$2e2bcd8739ae039) : (0, $912116aa87ff0374$export$2e2bcd8739ae039);\n    const cast = someGaussian2D ? (0, $d6c30a4e9504875f$export$2e2bcd8739ae039) : castRegions;\n    const n = canPoints.length;\n    // get fraction of votes for each candidate so we can summarize results\n    const voteCounts = [];\n    const rankings = [];\n    const cansByRankList = [];\n    const firstPreferences = Array(n).fill(0);\n    let totalVotes = 0;\n    const votesByGeom = [];\n    // should ideally make a set of polygons for each ranking so that we avoid repeating rankings.\n    voterGeoms.forEach((voterGeom, g)=>{\n        const votesForGeom = cast(voterGeom, geometry, castOptions);\n        const { rankings: rankingsForGeom, cansByRankList: cansByRankListForGeom, voteCounts: voteCountsForGeom, totalVotes: totalVotesForGeom } = votesForGeom;\n        // concat\n        const n1 = voteCounts.length;\n        const n2 = voteCountsForGeom.length;\n        voteCounts.length += n2;\n        for(let i = 0; i < n2; i++){\n            voteCounts[n1 + i] = voteCountsForGeom[i];\n            cansByRankList[n1 + i] = cansByRankListForGeom[i];\n        }\n        totalVotes += totalVotesForGeom;\n        // tally first preferences\n        for(let i = 0; i < cansByRankListForGeom.length; i++){\n            const cr0 = cansByRankListForGeom[i][0];\n            for(let k = 0; k < cr0.length; k++){\n                const c0 = cr0[k];\n                firstPreferences[c0] += voteCountsForGeom[i];\n            }\n        }\n        if (verbosity < 2) return;\n        for(let i = 0; i < n2; i++)rankings[n1 + i] = rankingsForGeom[i];\n        votesByGeom[g] = votesForGeom;\n    });\n    const voteFractions = voteCounts.map((x)=>x / totalVotes);\n    const firstPreferenceFractions = firstPreferences.map((x)=>x / totalVotes);\n    const preferenceLists = {\n        cansByRankList: cansByRankList\n    };\n    const preferenceTallies = {\n        voteFractions: voteFractions\n    };\n    const candidateTallies = {\n        firstPreferenceFractions: firstPreferenceFractions\n    };\n    const numCans = canPoints.length;\n    const votes = {\n        preferenceLists: preferenceLists,\n        preferenceTallies: preferenceTallies,\n        candidateTallies: candidateTallies,\n        parties: parties,\n        numCans: numCans\n    };\n    if (verbosity < 2) return votes;\n    preferenceLists.rankings = rankings;\n    votes.votesByGeom = votesByGeom;\n    return votes;\n}\n\n\n\n\n\n/** @module */ \n/** @module */ \nfunction $6ee82258e7bb97bb$export$2e2bcd8739ae039(voterGeom, geometry) {\n    const { canPoints: canPoints } = geometry;\n    // draw lines across shape of voterGeom\n    const totalArea = $6ee82258e7bb97bb$var$calcVoterTotalArea(voterGeom);\n    const n = canPoints.length;\n    const winsPairwise = Array(n).fill(0);\n    for(let i = 0; i < n; i++)winsPairwise[i] = Array(n).fill(0);\n    for(let i = 0; i < n - 1; i++)for(let k = i + 1; k < n; k++){\n        // find split plane\n        const plane = (0, $62defbbb6cfa799c$export$2e2bcd8739ae039)(canPoints[i], canPoints[k]);\n        const dist = $6ee82258e7bb97bb$var$calcDist(plane, voterGeom);\n        // find winsPairwise for i and k\n        const iArea = $6ee82258e7bb97bb$var$calcArea(dist, voterGeom, totalArea);\n        const kArea = totalArea - iArea;\n        winsPairwise[i][k] = iArea;\n        winsPairwise[k][i] = kArea;\n    }\n    return {\n        winsPairwise: winsPairwise,\n        totalVotes: totalArea\n    };\n}\nfunction $6ee82258e7bb97bb$var$calcDist(plane, voterGeom) {\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    const numerator = plane[0] * voterGeom.x + plane[1] * voterGeom.y + plane[2];\n    const denominator = Math.sqrt(plane[0] ** 2 + plane[1] ** 2);\n    return numerator / denominator;\n}\nfunction $6ee82258e7bb97bb$var$calcArea(dist, voterGeom, totalArea) {\n    // find the area of the cap of circle,\n    // where the area starts at a chord at a distance from the center.\n    // https://en.wikipedia.org/wiki/Circular_segment\n    const r = voterGeom.w / 2;\n    if (dist > r) return 0;\n    if (dist < -r) return totalArea;\n    // const area = r ** 2 * Math.acos(dist / r) - dist * Math.sqrt(r ** 2 - dist ** 2)\n    const d = dist / r;\n    const normArea = Math.acos(d) - d * Math.sqrt(1 - d ** 2);\n    // https://www.desmos.com/calculator\n    // y=\\arccos(d)-d\\sqrt{1-d^{2}}\n    const area = r ** 2 * normArea;\n    return area;\n}\nfunction $6ee82258e7bb97bb$var$calcVoterTotalArea(voterGeom) {\n    return Math.PI * (voterGeom.w / 2) ** 2;\n}\n\n\n/** @module */ \nfunction $255e71e313f13d96$export$2e2bcd8739ae039(voterGeom, geometry) {\n    const { canPoints: canPoints, canBorders: canBorders } = geometry;\n    const { midpoints: midpoints, iLower: iLower } = canBorders.pairwiseIntervals1D;\n    const nCans = canPoints.length;\n    const totalVotes = $255e71e313f13d96$var$calcVoterTotalArea(voterGeom);\n    const winsPairwise = Array(nCans).fill(0);\n    for(let i = 0; i < nCans; i++)winsPairwise[i] = Array(nCans).fill(0);\n    for(let i = 0; i < nCans - 1; i++)for(let k = i + 1; k < nCans; k++){\n        // find split plane\n        const lower = -Infinity;\n        const upper = midpoints[i][k];\n        const lowerWins = $255e71e313f13d96$var$sumInterval(lower, upper, voterGeom);\n        const iWins = iLower[i][k] ? lowerWins : totalVotes - lowerWins;\n        const kWins = totalVotes - iWins;\n        winsPairwise[i][k] = iWins;\n        winsPairwise[k][i] = kWins;\n    }\n    return {\n        winsPairwise: winsPairwise,\n        totalVotes: totalVotes\n    };\n}\nfunction $255e71e313f13d96$var$calcVoterTotalArea(voterGeom) {\n    const lower = -Infinity;\n    const upper = Infinity;\n    return $255e71e313f13d96$var$sumInterval(lower, upper, voterGeom);\n}\nfunction $255e71e313f13d96$var$sumInterval(lower, upper, voterGeom) {\n    if (voterGeom.densityProfile === \"gaussian\") return (0, $a7526f6bd090f813$export$db68fffe979e7793)(voterGeom, {\n        lower: lower,\n        upper: upper\n    });\n    return (0, $a7526f6bd090f813$export$a0550d067ba2c229)(voterGeom, {\n        lower: lower,\n        upper: upper\n    });\n}\n\n\n/** @module */ \n\n/** @module */ \n\nfunction $5a5b921729ac8324$export$2e2bcd8739ae039(canPoints, voterPoint, dimensions, verbosity) {\n    const d2f = dimensions === 1 ? $5a5b921729ac8324$var$d2f1 : $5a5b921729ac8324$var$d2f2;\n    const n = canPoints.length;\n    const dist2 = Array(n);\n    for(let i = 0; i < n; i++)dist2[i] = d2f(canPoints[i], voterPoint);\n    // Does i beat k? 1 if yes, -1 if opposite, 0 if tie\n    const netWinsPairwise = Array(n);\n    for(let i = 0; i < n; i++){\n        netWinsPairwise[i] = Array(n).fill(0);\n        for(let k = 0; k < n; k++){\n            if (dist2[i] === dist2[k]) continue;\n            netWinsPairwise[i][k] = dist2[i] < dist2[k] ? 1 : -1;\n        }\n    }\n    if (verbosity === 0) return {\n        netWinsPairwise: netWinsPairwise\n    };\n    const indexInOrder = (0, $7501ec180fc14dab$export$d02631cccf789723)(n).sort((a, b)=>dist2[a] - dist2[b]);\n    // Note that ties are not handled.\n    const ranking = Array(n);\n    const bordaScores = Array(n);\n    const bordaFractions = Array(n);\n    const cansByRank = Array(n);\n    for(let i = 0; i < n; i++){\n        const can = indexInOrder[i];\n        ranking[can] = i + 1;\n        bordaScores[can] = n - i - 1;\n        bordaFractions[can] = (n - i - 1) / (n - 1);\n        cansByRank[i] = [\n            can\n        ];\n    }\n    return {\n        cansByRank: cansByRank,\n        ranking: ranking,\n        netWinsPairwise: netWinsPairwise,\n        bordaFractions: bordaFractions,\n        bordaScores: bordaScores\n    };\n}\nfunction $5a5b921729ac8324$var$d2f1(a, b) {\n    return (a - b) ** 2;\n}\nfunction $5a5b921729ac8324$var$d2f2(a, b) {\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2;\n}\n\n\nfunction $8ef13bc72321e26f$export$2e2bcd8739ae039(voterGeom, geometry, castOptions) {\n    const { canPoints: canPoints, dimensions: dimensions } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    // just find the vote and count at each grid point\n    const makeGrid = dimensions === 1 ? (0, $0a780afa48a699af$export$2e2bcd8739ae039) : (0, $01979fce4e5838aa$export$2e2bcd8739ae039);\n    const grid = makeGrid(voterGeom, castOptions);\n    const { voteCounts: voteCounts, totalVotes: totalVotes, voterPoints: voterPoints } = grid;\n    const gridLength = voteCounts.length;\n    const nk = canPoints.length;\n    const netWins = new Array(nk);\n    for(let i = 0; i < nk; i++)netWins[i] = Array(nk).fill(0);\n    let bordaScoreSumByCan;\n    if (verbosity >= 1) bordaScoreSumByCan = Array(nk).fill(0);\n    let voteSet;\n    if (verbosity >= 2) voteSet = Array(gridLength);\n    // find vote\n    for(let i = 0; i < gridLength; i++){\n        const voteCount = voteCounts[i];\n        const voterPoint = voterPoints[i];\n        const vote = (0, $5a5b921729ac8324$export$2e2bcd8739ae039)(canPoints, voterPoint, dimensions);\n        const { netWinsPairwise: netWinsPairwise } = vote;\n        for(let m = 0; m < nk; m++)for(let k = 0; k < nk; k++){\n            if (i === k) continue;\n            netWins[m][k] += netWinsPairwise[m][k] * voteCount;\n        }\n        if (verbosity < 1) continue;\n        const { bordaScores: bordaScores } = vote;\n        for(let k = 0; k < nk; k++)bordaScoreSumByCan[k] += bordaScores[k] * voteCount;\n        if (verbosity < 2) continue;\n        voteSet[i] = vote;\n    }\n    // netWins is totalVotes if a candidate receives all the votes for the voter geometry.\n    // winsPairwise is the total number of votes, too\n    const winsPairwise = netWins.map((row)=>row.map((net)=>(net + totalVotes) * 0.5));\n    if (verbosity < 1) return {\n        voteCounts: voteCounts,\n        totalVotes: totalVotes,\n        winsPairwise: winsPairwise\n    };\n    // bordaScore is nk-1 if a candidate receives all the votes for the voter geometry.\n    // bordaFractionAverageByCan is 1 if a candidate receives all the votes.\n    const bordaFractionAverageByCan = bordaScoreSumByCan.map((bt)=>bt / (nk - 1) / totalVotes);\n    return {\n        grid: grid,\n        voteSet: voteSet,\n        winsPairwise: winsPairwise,\n        totalVotes: totalVotes,\n        bordaFractionAverageByCan: bordaFractionAverageByCan\n    };\n}\n\n\nfunction $51ba0b93fbcb16fc$export$2e2bcd8739ae039(geometry, castOptions) {\n    const { canPoints: canPoints, voterGeoms: voterGeoms, dimensions: dimensions, parties: parties } = geometry;\n    const { verbosity: verbosity } = castOptions;\n    const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n    const castRegions = dimensions === 1 ? (0, $255e71e313f13d96$export$2e2bcd8739ae039) : (0, $6ee82258e7bb97bb$export$2e2bcd8739ae039);\n    const cast = someGaussian2D ? (0, $8ef13bc72321e26f$export$2e2bcd8739ae039) : castRegions;\n    // get fraction of votes for each candidate so we can summarize results\n    let totalVotes = 0;\n    // should ideally make a set of polygons for each ranking so that we avoid repeating rankings.\n    const n = canPoints.length;\n    const winsPairwise = Array(n).fill(0);\n    for(let i = 0; i < n; i++)winsPairwise[i] = Array(n).fill(0);\n    const votesByGeom = [];\n    voterGeoms.forEach((voterGeom, g)=>{\n        const votesForGeom = cast(voterGeom, geometry, castOptions);\n        const { winsPairwise: winsPairwiseForGeom, totalVotes: totalVotesForGeom } = votesForGeom;\n        for(let i = 0; i < n; i++)for(let k = 0; k < n; k++)winsPairwise[i][k] += winsPairwiseForGeom[i][k];\n        totalVotes += totalVotesForGeom;\n        if (verbosity < 2) return;\n        votesByGeom[g] = votesForGeom;\n    });\n    const invTotalCount = 1 / totalVotes;\n    const winFractionPairwise = winsPairwise.map((x)=>x.map((a)=>a * invTotalCount));\n    const pairwiseTallies = {\n        winFractionPairwise: winFractionPairwise\n    };\n    const numCans = canPoints.length;\n    const votes = {\n        pairwiseTallies: pairwiseTallies,\n        parties: parties,\n        numCans: numCans\n    };\n    if (verbosity < 1) return votes;\n    // borda scores\n    const bordaScoreSumByCan = Array(n).fill(0);\n    const bordaFractionAverageByCan = Array(n);\n    const invTotalCountTimesNMinus1 = invTotalCount / (n - 1);\n    for(let i = 0; i < n; i++){\n        for(let k = 0; k < n; k++)bordaScoreSumByCan[i] += winsPairwise[i][k];\n        bordaFractionAverageByCan[i] = bordaScoreSumByCan[i] * invTotalCountTimesNMinus1;\n    }\n    const candidateTallies = {\n        bordaFractionAverageByCan: bordaFractionAverageByCan\n    };\n    votes.candidateTallies = candidateTallies;\n    if (verbosity < 2) return votes;\n    votes.votesByGeom = votesByGeom;\n    return votes;\n}\n\n\n\n\nfunction $47e3fda50995499c$export$2e2bcd8739ae039(canPoints) {\n    const n = canPoints.length;\n    const midpoints = Array(n - 1);\n    const iLower = Array(n - 1);\n    for(let i = 0; i < n - 1; i++){\n        midpoints[i] = Array(n - i - 1);\n        iLower[i] = Array(n - i - 1);\n        for(let k = i + 1; k < n; k++){\n            const ix = canPoints[i];\n            const kx = canPoints[k];\n            const midpoint = 0.5 * (ix + kx);\n            midpoints[i][k] = midpoint;\n            iLower[i][k] = ix < kx;\n        }\n    }\n    const pairwiseIntervals1D = {\n        midpoints: midpoints,\n        iLower: iLower\n    };\n    return pairwiseIntervals1D;\n}\n\n\nfunction $51797f8b5b1005cd$export$2e2bcd8739ae039(canPoints, voterGeoms, dimensions) {\n    const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n    if (dimensions === 2 || someGaussian2D) {\n        const canBorders = {};\n        return canBorders;\n    }\n    const canBorders = {\n        pairwiseIntervals1D: (0, $47e3fda50995499c$export$2e2bcd8739ae039)(canPoints)\n    };\n    return canBorders;\n}\n\n\n\nfunction $1b543a55efeee878$export$2e2bcd8739ae039(canPoints) {\n    const n = canPoints.length;\n    const iSorted = (0, $7501ec180fc14dab$export$d02631cccf789723)(n).sort((a, b)=>canPoints[a] - canPoints[b]);\n    const midpoints = new Array(n - 1);\n    for(let i = 0; i < n - 1; i++)midpoints[i] = (canPoints[iSorted[i]] + canPoints[iSorted[i + 1]]) * 0.5;\n    const intervals = new Array(n);\n    for(let i = 0; i < n; i++){\n        const lower = i === 0 ? -Infinity : midpoints[i - 1];\n        const upper = i === n - 1 ? Infinity : midpoints[i];\n        intervals[iSorted[i]] = {\n            lower: lower,\n            upper: upper\n        };\n    }\n    return intervals;\n}\n\n\n\n\nfunction $c0e0f80805f5dbc8$export$2e2bcd8739ae039(canPoints) {\n    // find all lines\n    const n = canPoints.length;\n    const lines = new Array(n) // each candidate has a set of lines for themselves\n    ;\n    for(let i = 0; i < n; i++){\n        lines[i] = [];\n        for(let k = 0; k < n; k++){\n            // skip sames\n            if (i === k) continue;\n            // find equation for a line\n            const c1 = canPoints[i];\n            const c2 = canPoints[k];\n            // lines[i][k] = equidistantLine(c1,c2) // problem when i === k\n            lines[i].push((0, $62defbbb6cfa799c$export$2e2bcd8739ae039)(c1, c2));\n        }\n    }\n    return lines;\n}\n\n\nfunction $91a0f6f8035fe524$export$2e2bcd8739ae039(canPoints, voterGeoms, dimensions) {\n    const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n    if (someGaussian2D) {\n        const canBorders = {};\n        return canBorders;\n    }\n    if (dimensions === 1) {\n        const canBorders = {\n            voronoiIntervals1D: (0, $1b543a55efeee878$export$2e2bcd8739ae039)(canPoints)\n        };\n        return canBorders;\n    }\n    const canBorders = {\n        voronoiLines2D: (0, $c0e0f80805f5dbc8$export$2e2bcd8739ae039)(canPoints)\n    };\n    return canBorders;\n}\n\n\n/** @module */ \nfunction $a69ca38f385d346d$export$2e2bcd8739ae039(canPoints) {\n    /*\r\n    * Find and sort midpoints for each pair of voters.\r\n    * Find intervals in which voters have a ranking.\r\n    * Include -Inf and Inf as interval bounds.\r\n    * At each division, increment the borda score for the closer candidate.\r\n    * The resulting borda score is nearly the opposite of the ranking. n-i-1.\r\n    */ // compute the midpoints\n    const n = canPoints.length;\n    const iSorted = (0, $7501ec180fc14dab$export$d02631cccf789723)(n).sort((a, b)=>canPoints[a] - canPoints[b]);\n    const mn = 0.5 * n * (n - 1);\n    const uMidpoints = Array(mn);\n    const uMidpointPair = Array(mn);\n    let o = 0;\n    for(let i = 0; i < n - 1; i++)for(let k = i + 1; k < n; k++){\n        const ci = iSorted[i];\n        const ck = iSorted[k];\n        const midpoint = $a69ca38f385d346d$var$findMidpoint(canPoints[ci], canPoints[ck]);\n        uMidpoints[o] = midpoint;\n        uMidpointPair[o] = [\n            ci,\n            ck\n        ];\n        o += 1;\n    }\n    // sort the midpoints\n    const mSorted = (0, $7501ec180fc14dab$export$d02631cccf789723)(mn).sort((a, b)=>uMidpoints[a] - uMidpoints[b]);\n    const midpoints = mSorted.map((i)=>uMidpoints[i]);\n    const midpointPair = mSorted.map((i)=>uMidpointPair[i]);\n    // compute ranking at lower side\n    const ranking = Array(n);\n    for(let i = 0; i < n; i++)ranking[iSorted[i]] = i + 1;\n    // compute all rankings\n    const rankings = Array(mn + 1);\n    rankings[0] = (0, $88fb17c192d3ada1$export$f67cbcd1c395127c)(ranking);\n    for(let i = 0; i < mn; i++){\n        const [ci, ck] = midpointPair[i];\n        ranking[ci] += 1;\n        ranking[ck] -= 1;\n        rankings[i + 1] = (0, $88fb17c192d3ada1$export$f67cbcd1c395127c)(ranking);\n    }\n    const cansByRankList = Array(mn + 1);\n    for(let i = 0; i < mn + 1; i++){\n        cansByRankList[i] = Array(n);\n        for(let k = 0; k < n; k++)cansByRankList[i][k] = [];\n        const ri = rankings[i];\n        for(let k = 0; k < n; k++){\n            const rik = ri[k];\n            cansByRankList[i][rik - 1].push(k);\n        }\n    }\n    // Add endpoints\n    const intervalBorders = (0, $88fb17c192d3ada1$export$f67cbcd1c395127c)(midpoints);\n    intervalBorders.unshift(-Infinity);\n    intervalBorders.push(Infinity);\n    const rankingIntervals1D = {\n        intervalBorders: intervalBorders,\n        rankings: rankings,\n        cansByRankList: cansByRankList\n    };\n    return rankingIntervals1D;\n}\nfunction $a69ca38f385d346d$var$findMidpoint(can1, can2) {\n    return (can1 + can2) * 0.5;\n}\n\n\nfunction $cfe8163afa8ed6c7$export$2e2bcd8739ae039(canPoints, voterGeoms, dimensions) {\n    const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n    if (someGaussian2D || dimensions === 2) {\n        const canBorders = {};\n        return canBorders;\n    }\n    const canBorders = {\n        rankingIntervals1D: (0, $a69ca38f385d346d$export$2e2bcd8739ae039)(canPoints)\n    };\n    return canBorders;\n}\n\n\n\n\n/**\r\n * a collection of ways to cast votes\r\n */ const $5378ef2dbac38c7f$var$voteCasters = {\n    plurality: {\n        cast: (0, $71106f996b9d16a4$export$2e2bcd8739ae039),\n        castPoint: (0, $1b38baec92997001$export$2e2bcd8739ae039),\n        makeCanBorders: (0, $91a0f6f8035fe524$export$2e2bcd8739ae039)\n    },\n    score: {\n        cast: (0, $69e1e6d64194227d$export$2e2bcd8739ae039),\n        castPoint: (0, $ee32225c29a71c8c$export$2e2bcd8739ae039)\n    },\n    scoreFull: {\n        cast: (0, $05a9755cbd930002$export$2e2bcd8739ae039),\n        castPoint: (0, $ee32225c29a71c8c$export$2e2bcd8739ae039)\n    },\n    ranking: {\n        cast: (0, $daad6d0c9ee9c61b$export$2e2bcd8739ae039),\n        castPoint: (0, $331c71aac68d7e32$export$2e2bcd8739ae039),\n        makeCanBorders: (0, $cfe8163afa8ed6c7$export$2e2bcd8739ae039)\n    },\n    pairwise: {\n        cast: (0, $51ba0b93fbcb16fc$export$2e2bcd8739ae039),\n        castPoint: (0, $5a5b921729ac8324$export$2e2bcd8739ae039),\n        makeCanBorders: (0, $51797f8b5b1005cd$export$2e2bcd8739ae039)\n    }\n};\nfunction $5378ef2dbac38c7f$export$9051c087f4e3b1ee(canPoints, voterGeoms, dimensions, voteCasterName) {\n    const { makeCanBorders: makeCanBorders } = $5378ef2dbac38c7f$var$voteCasters[voteCasterName];\n    if (makeCanBorders !== undefined) {\n        const canBorders = makeCanBorders(canPoints, voterGeoms, dimensions);\n        return canBorders;\n    }\n    return {};\n}\nvar $5378ef2dbac38c7f$export$2e2bcd8739ae039 = $5378ef2dbac38c7f$var$voteCasters;\n\n\nfunction $8ee03d41a937bf6a$export$2e2bcd8739ae039(geometry, electionOptions, castOptions) {\n    const { voteCasterName: voteCasterName } = electionOptions;\n    const { canPoints: canPoints, voterGeoms: voterGeoms, dimensions: dimensions } = geometry;\n    const geometry2 = {\n        ...geometry\n    };\n    const canBorders = (0, $5378ef2dbac38c7f$export$9051c087f4e3b1ee)(canPoints, voterGeoms, dimensions, voteCasterName);\n    geometry2.canBorders = canBorders;\n    const votes = (0, $5378ef2dbac38c7f$export$2e2bcd8739ae039)[voteCasterName].cast(geometry2, castOptions);\n    return votes;\n}\n\n\n/** @module */ \n/**\r\n * When there is just one winner,\r\n * sometimes the allocation isn't included in the election results.\r\n * So we fill the gap, for now.\r\n */ function $17303c769c566177$export$2e2bcd8739ae039(votes, socialChoiceResults) {\n    const { numCans: numCans } = votes;\n    const { iWinner: iWinner } = socialChoiceResults;\n    const allocation = Array(numCans).fill(0);\n    allocation[iWinner] = 1;\n    return allocation;\n}\n\n\nfunction $1ff7a017be0afffc$export$2e2bcd8739ae039(votes, electionOptions) {\n    // why have two different kinds of results?\n    // socialChoiceResults, the smaller one,\n    //   is in the context of the social choice method,\n    //   which has tallies go in and analysis come out\n    // electionResults, the larger one,\n    //   is in the context of candidate and voter geometries.\n    const { socialChoiceOptions: socialChoiceOptions, socialChoiceMethod: socialChoiceMethod } = electionOptions;\n    const socialChoice = (0, $ef45c1fe8cec5d24$export$2e2bcd8739ae039)[socialChoiceMethod];\n    const socialChoiceResults = socialChoice(votes, socialChoiceOptions);\n    if (socialChoiceResults.allocation === undefined) socialChoiceResults.allocation = (0, $17303c769c566177$export$2e2bcd8739ae039)(votes, socialChoiceResults);\n    return socialChoiceResults;\n}\n\n\nfunction $2b1d54c228b13ade$export$2e2bcd8739ae039(geometry, electionOptions, castOptions) {\n    const votes = (0, $8ee03d41a937bf6a$export$2e2bcd8739ae039)(geometry, electionOptions, castOptions);\n    const socialChoiceResults = (0, $1ff7a017be0afffc$export$2e2bcd8739ae039)(votes, electionOptions);\n    const electionResults = {\n        geometry: geometry,\n        electionOptions: electionOptions,\n        votes: votes,\n        socialChoiceResults: socialChoiceResults\n    };\n    return electionResults;\n}\n\n\n/** @module */ \n/** @module */ /**\r\n * Get polling information from election results.\r\n * @param {*} lastElectionResults\r\n * @returns {*}\r\n */ function $dfb3d3ebdec0a456$export$2e2bcd8739ae039(lastElectionResults) {\n    if (lastElectionResults === null) return {};\n    if (lastElectionResults.votes.candidateTallies === undefined) return {};\n    const { scoreFractionAverageByCan: scoreFractionAverageByCan } = lastElectionResults.votes.candidateTallies;\n    const { voteFractionsByCan: voteFractionsByCan } = lastElectionResults.votes.candidateTallies;\n    if (scoreFractionAverageByCan !== undefined) {\n        const highestScore = Math.max(...scoreFractionAverageByCan);\n        const polling = {\n            highestScore: highestScore,\n            scoreFractionAverageByCan: scoreFractionAverageByCan\n        };\n        return polling;\n    }\n    if (voteFractionsByCan !== undefined) {\n        const highestScore = Math.max(...voteFractionsByCan);\n        const polling = {\n            highestScore: highestScore,\n            voteFractionsByCan: voteFractionsByCan\n        };\n        return polling;\n    }\n    return {};\n}\n\n\nfunction $6a5c8113341ac4c2$export$2e2bcd8739ae039(geometry, electionOptions, optionsBag) {\n    const { pollCount: pollCount } = optionsBag;\n    // run several elections and store the results in electionResultsList\n    // return the last one\n    let electionResults = null;\n    for(let i = 0; i < pollCount + 1; i++){\n        const geometry1 = {\n            ...geometry\n        };\n        const polling = (0, $dfb3d3ebdec0a456$export$2e2bcd8739ae039)(electionResults);\n        geometry1.information = {\n            polling: polling\n        };\n        const { castOptions: castOptions } = optionsBag;\n        electionResults = (0, $2b1d54c228b13ade$export$2e2bcd8739ae039)(geometry1, electionOptions, castOptions);\n    }\n    return electionResults;\n}\n\n\nfunction $22fb0eef1d0b5c04$export$2e2bcd8739ae039(geometry, electionOptions, optionsBag) {\n    const { castOptions: castOptions } = optionsBag;\n    const { usePolls: usePolls } = geometry;\n    if (usePolls) return (0, $6a5c8113341ac4c2$export$2e2bcd8739ae039)(geometry, electionOptions, optionsBag);\n    return (0, $2b1d54c228b13ade$export$2e2bcd8739ae039)(geometry, electionOptions, castOptions);\n}\n\n\n/** @module */ /**\r\n * Use phase description to get geometry. Geometry can differ by phase.\r\n * e.g. voter strategy, use of polls\r\n * @param {*} phaseName\r\n * @param {*} geometry\r\n * @returns {*} geometry\r\n */ function $73d62e7e163c58e0$export$2e2bcd8739ae039(phaseName, geometry) {\n    const phaseGeometry = {\n        ...geometry\n    };\n    phaseGeometry.voterStrategyList = geometry.voterStrategyListByPhase[phaseName];\n    phaseGeometry.usePolls = geometry.usePollsByPhase[phaseName];\n    delete phaseGeometry.voterStrategyListByPhase;\n    delete phaseGeometry.usePollsByPhase;\n    return phaseGeometry;\n}\n\n\n/** @module */ /** get election phase options from election options for a phase\r\n * @param {*} sequenceName\r\n * @param {string} phaseName\r\n * @param {*} optionsBag\r\n * @returns {*} election phase options\r\n */ function $84709a8ea9110cfe$export$2e2bcd8739ae039(sequenceName, phaseName, optionsBag) {\n    const eo = optionsBag.sequenceOptions.sequences[sequenceName].phases[phaseName];\n    return eo;\n}\n\n\nfunction $32bd7cb9bdc64fa9$export$2e2bcd8739ae039(geometry, optionsBag) {\n    const { numParties: numParties } = geometry.parties;\n    const primaryResults = [];\n    const primaryPhaseOptions = (0, $84709a8ea9110cfe$export$2e2bcd8739ae039)(\"closedPrimary\", \"closedPrimary\", optionsBag);\n    for(let i = 0; i < numParties; i++){\n        const { primaryGeometry: primaryGeometry } = $32bd7cb9bdc64fa9$var$getPrimaryGeometry(geometry, i);\n        const { voterGeoms: voterGeoms, canPoints: canPoints } = primaryGeometry;\n        // todo: think about this\n        if (voterGeoms.length === 0) continue;\n        if (canPoints.length === 0) continue;\n        const primaryResult = (0, $22fb0eef1d0b5c04$export$2e2bcd8739ae039)(primaryGeometry, primaryPhaseOptions, optionsBag);\n        primaryResults[i] = primaryResult;\n    }\n    const { generalGeometry: generalGeometry, primaryWinners: primaryWinners } = $32bd7cb9bdc64fa9$var$getGeneralGeometry(geometry, primaryResults, numParties);\n    const generalPhaseOptions = (0, $84709a8ea9110cfe$export$2e2bcd8739ae039)(\"closedPrimary\", \"general\", optionsBag);\n    const general = (0, $22fb0eef1d0b5c04$export$2e2bcd8739ae039)(generalGeometry, generalPhaseOptions, optionsBag);\n    const results = $32bd7cb9bdc64fa9$var$combineClosedPrimaryGeneral(primaryResults, general, primaryWinners, geometry, optionsBag);\n    return results;\n}\n/**\r\n * Get the geometry for a primary election.\r\n * @param {*} geometry\r\n * @param {*} partyIndex\r\n * @returns {*} primaryGeometry\r\n */ function $32bd7cb9bdc64fa9$var$getPrimaryGeometry(geometry, partyIndex) {\n    const g0 = (0, $73d62e7e163c58e0$export$2e2bcd8739ae039)(\"closedPrimary\", geometry);\n    const primaryGeometry = {\n        ...g0\n    };\n    // voters\n    const { voterParties: voterParties } = g0;\n    primaryGeometry.voterGeoms = g0.voterGeoms.filter((v, i)=>voterParties[i] === partyIndex);\n    primaryGeometry.voterStrategyList = g0.voterStrategyList.filter((v, i)=>voterParties[i] === partyIndex);\n    primaryGeometry.voterParties = g0.voterParties.filter((v, i)=>voterParties[i] === partyIndex);\n    // candidates\n    const { partiesByCan: partiesByCan } = g0.parties;\n    const allCanLabels = (0, $c9cda941ee132d98$export$d02631cccf789723)(partiesByCan.length);\n    primaryGeometry.canLabels = allCanLabels.filter((c, i)=>partiesByCan[i] === partyIndex);\n    primaryGeometry.canPoints = g0.canPoints.filter((c, i)=>partiesByCan[i] === partyIndex);\n    // cleanup\n    primaryGeometry.parties = {\n        ...g0.parties\n    };\n    primaryGeometry.parties.numParties = 1;\n    primaryGeometry.parties.partiesByCan = primaryGeometry.parties.partiesByCan.filter((p, i)=>partiesByCan[i] === partyIndex);\n    return {\n        primaryGeometry: primaryGeometry\n    };\n}\nfunction $32bd7cb9bdc64fa9$var$getGeneralGeometry(geometry, primaryResults, numParties) {\n    const g0 = (0, $73d62e7e163c58e0$export$2e2bcd8739ae039)(\"general\", geometry);\n    const generalGeometry = {\n        ...g0\n    };\n    const primaryWinners = [];\n    for(let i = 0; i < numParties; i++){\n        const primaryResult = primaryResults[i];\n        if (primaryResult === undefined) continue;\n        const { allocation: allocation } = primaryResult.socialChoiceResults;\n        const { canLabels: canLabels } = primaryResult.geometry;\n        if (canLabels === undefined || canLabels.length === 0) continue;\n        for(let j = 0; j < allocation.length; j++)if (allocation[j]) {\n            const iWinner = canLabels[j];\n            primaryWinners.push(iWinner);\n        }\n    }\n    generalGeometry.canPoints = primaryWinners.map((iWinner)=>g0.canPoints[iWinner]);\n    generalGeometry.canLabels = primaryWinners;\n    return {\n        generalGeometry: generalGeometry,\n        primaryWinners: primaryWinners\n    };\n}\nfunction $32bd7cb9bdc64fa9$var$combineClosedPrimaryGeneral(primaryResults, general, primaryWinners, geometry, optionsBag) {\n    const generalAllocation = general.socialChoiceResults.allocation;\n    const generalWinnerList = $32bd7cb9bdc64fa9$var$getWinnerList(generalAllocation);\n    const iWinners = generalWinnerList.map((i)=>primaryWinners[i]);\n    const numCans = geometry.canPoints.length;\n    const allocation = Array(numCans).fill(0);\n    iWinners.forEach((iWinner)=>{\n        allocation[iWinner] = 1;\n    });\n    const results = {\n        phases: {\n            closedPrimary: primaryResults,\n            general: general\n        },\n        phaseNames: [\n            \"closedPrimary\",\n            \"general\"\n        ],\n        geometry: geometry,\n        optionsBag: optionsBag,\n        socialChoiceResults: {\n            allocation: allocation\n        }\n    };\n    return results;\n}\nfunction $32bd7cb9bdc64fa9$var$getWinnerList(allocation) {\n    const iWinners = [];\n    allocation.forEach((winner, i)=>{\n        if (winner) iWinners.push(i);\n    });\n    return iWinners;\n}\n\n\n/** @module */ \n\n\n\nfunction $27368370838a5b08$export$2e2bcd8739ae039(geometry, optionsBag) {\n    const generalGeometry = (0, $73d62e7e163c58e0$export$2e2bcd8739ae039)(\"general\", geometry);\n    const allCanLabels = (0, $c9cda941ee132d98$export$d02631cccf789723)(geometry.canPoints.length);\n    generalGeometry.canLabels = allCanLabels;\n    const generalOptions = (0, $84709a8ea9110cfe$export$2e2bcd8739ae039)(\"general\", \"general\", optionsBag);\n    const general = (0, $22fb0eef1d0b5c04$export$2e2bcd8739ae039)(generalGeometry, generalOptions, optionsBag);\n    const { socialChoiceResults: socialChoiceResults } = general;\n    const results = {\n        phases: {\n            general: general\n        },\n        phaseNames: [\n            \"general\"\n        ],\n        geometry: geometry,\n        optionsBag: optionsBag,\n        socialChoiceResults: socialChoiceResults\n    };\n    return results;\n}\n\n\n/** @module */ \n\n\n\nfunction $1e736109da5fcd8d$export$2e2bcd8739ae039(geometry, optionsBag) {\n    // primary phase\n    const primaryGeometry = (0, $73d62e7e163c58e0$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", geometry);\n    const allCanLabels = (0, $c9cda941ee132d98$export$d02631cccf789723)(geometry.canPoints.length);\n    primaryGeometry.canLabels = allCanLabels;\n    const primaryOptions = (0, $84709a8ea9110cfe$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", \"nonpartisanOpenPrimary\", optionsBag);\n    const primary = (0, $22fb0eef1d0b5c04$export$2e2bcd8739ae039)(primaryGeometry, primaryOptions, optionsBag);\n    // general phase\n    const { generalGeometry: generalGeometry, primaryWinners: primaryWinners } = $1e736109da5fcd8d$var$getGeneralGeometry(geometry, primary);\n    const generalOptions = (0, $84709a8ea9110cfe$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", \"general\", optionsBag);\n    const general = (0, $22fb0eef1d0b5c04$export$2e2bcd8739ae039)(generalGeometry, generalOptions, optionsBag);\n    // combine primary and general results\n    const results = $1e736109da5fcd8d$var$combinePrimaryGeneral(primary, general, primaryWinners, geometry, optionsBag);\n    return results;\n}\n/** Get the winners of the primary to be candidates in the general. */ function $1e736109da5fcd8d$var$getGeneralGeometry(geometry, primary) {\n    const g0 = (0, $73d62e7e163c58e0$export$2e2bcd8739ae039)(\"general\", geometry);\n    const generalGeometry = {\n        ...g0\n    };\n    const { allocation: allocation } = primary.socialChoiceResults;\n    const primaryWinners = $1e736109da5fcd8d$var$getWinnerList(allocation);\n    generalGeometry.canPoints = primaryWinners.map((iWinner)=>g0.canPoints[iWinner]);\n    generalGeometry.canLabels = primaryWinners;\n    generalGeometry.parties = {\n        ...g0.parties\n    };\n    generalGeometry.parties.partiesByCan = primaryWinners.map((iWinner)=>g0.parties.partiesByCan[iWinner]);\n    return {\n        generalGeometry: generalGeometry,\n        primaryWinners: primaryWinners\n    };\n}\nfunction $1e736109da5fcd8d$var$combinePrimaryGeneral(primary, general, primaryWinners, geometry, optionsBag) {\n    const generalAllocation = general.socialChoiceResults.allocation;\n    const generalWinnerList = $1e736109da5fcd8d$var$getWinnerList(generalAllocation);\n    const iWinners = generalWinnerList.map((i)=>primaryWinners[i]);\n    const numCans = geometry.canPoints.length;\n    const allocation = Array(numCans).fill(0);\n    iWinners.forEach((iWinner)=>{\n        allocation[iWinner] = 1;\n    });\n    const results = {\n        phases: {\n            nonpartisanOpenPrimary: primary,\n            general: general\n        },\n        phaseNames: [\n            \"nonpartisanOpenPrimary\",\n            \"general\"\n        ],\n        geometry: geometry,\n        optionsBag: optionsBag,\n        socialChoiceResults: {\n            allocation: allocation\n        }\n    };\n    return results;\n}\nfunction $1e736109da5fcd8d$var$getWinnerList(allocation) {\n    const iWinners = [];\n    allocation.forEach((winner, i)=>{\n        if (winner) iWinners.push(i);\n    });\n    return iWinners;\n}\n\n\n\nvar $b904cb338c2427c0$export$2e2bcd8739ae039 = {\n    numTracts: 2,\n    numDistricts: 3,\n    castOptions: {\n        usr: 4,\n        verbosity: 0\n    },\n    numSampleCandidates: 10,\n    pollCount: 5,\n    sequenceOptions: {\n        sequenceName: \"general\",\n        sequences: {\n            general: {\n                phases: {\n                    general: {\n                        socialChoiceMethod: \"plurality\",\n                        voteCasterName: \"plurality\",\n                        socialChoiceType: \"singleWinner\",\n                        socialChoiceOptions: {\n                            seats: 1,\n                            threshold: 0.1\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n\n\nfunction $77baf70a3e5cabee$export$2e2bcd8739ae039(geometry, optionsBag) {\n    const { canPoints: canPoints, voterGeoms: voterGeoms } = geometry;\n    if (voterGeoms.length === 0) return {\n        error: \"No Voters\"\n    };\n    if (canPoints.length === 0) return {\n        error: \"No Candidates\"\n    };\n    const { sequenceName: sequenceName } = optionsBag.sequenceOptions;\n    if (sequenceName === \"closedPrimary\") return (0, $32bd7cb9bdc64fa9$export$2e2bcd8739ae039)(geometry, optionsBag);\n    if (sequenceName === \"nonpartisanOpenPrimary\") return (0, $1e736109da5fcd8d$export$2e2bcd8739ae039)(geometry, optionsBag);\n    // sequence === 'general'\n    return (0, $27368370838a5b08$export$2e2bcd8739ae039)(geometry, optionsBag);\n}\n\n\n/** @module */ /**\r\n * Use this to sample a random candidate from a distribution.\r\n * @param {object} canDnGeom\r\n * @returns {number} x coordinate\r\n */ function $9a77e39367a31884$export$2e2bcd8739ae039(canDnGeom, rng) {\n    const { x: x, w: w, densityProfile: densityProfile } = canDnGeom;\n    // sample circle\n    const isGaussian = densityProfile === \"gaussian\";\n    const sample = isGaussian ? $9a77e39367a31884$var$sampleGaussian : $9a77e39367a31884$var$randomInsideInterval;\n    const canPoint = sample(x, w * 0.5, rng);\n    return canPoint;\n}\nfunction $9a77e39367a31884$var$randomInsideInterval(X, R, rng) {\n    const x = (rng() * 2 - 1) * R + X;\n    return x;\n}\nconst $9a77e39367a31884$var$invSqrtHalfPi = 1 / Math.sqrt(Math.PI / 2);\nfunction $9a77e39367a31884$var$sampleGaussian(X, R, rng) {\n    // to compare a block to a normal distribution\n    // set the block density to the normal density at 0.\n    // Then the radius R of the block is related to sigma.\n    // R is at sqrt(pi/2) * sigma\n    // sigma = R / sqrt(pi/2)\n    // The radius is half the width.\n    const a = $9a77e39367a31884$var$sampleStandardNormal(rng);\n    const sigma = R * $9a77e39367a31884$var$invSqrtHalfPi;\n    const x = a * sigma + X;\n    // const x2 = mag * Math.sin(2 * Math.PI * u2) + X\n    return x;\n}\nfunction $9a77e39367a31884$var$sampleStandardNormal(rng) {\n    // https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n    const u1 = rng();\n    const u2 = rng();\n    const mag = Math.sqrt(-2 * Math.log(u1));\n    const x = mag * Math.cos(2 * Math.PI * u2);\n    return x;\n}\n\n\n/** @module */ /**\r\n * Use this to sample a random candidate from a distribution.\r\n * @param {object} canDnGeom\r\n * @returns {object} x,y coordinates\r\n */ function $89f6e924a10a936e$export$2e2bcd8739ae039(canDnGeom, rng) {\n    const { x: x, y: y, w: w, densityProfile: densityProfile } = canDnGeom;\n    const randomSample = densityProfile === \"gaussian\" ? $89f6e924a10a936e$var$randomInsideGaussian : $89f6e924a10a936e$var$randomInsideCircle;\n    const canPoint = randomSample(x, y, w * 0.5, rng);\n    return canPoint;\n}\nfunction $89f6e924a10a936e$var$randomInsideCircle(X, Y, R, rng) {\n    const [a, b] = $89f6e924a10a936e$var$randomUnitCircle(rng);\n    const x = X + R * a;\n    const y = Y + R * b;\n    return [\n        x,\n        y\n    ];\n}\nfunction $89f6e924a10a936e$var$randomUnitCircle(rng) {\n    let a;\n    let b;\n    let c;\n    do {\n        a = 2 * rng() - 1;\n        b = 2 * rng() - 1;\n        c = a * a + b * b;\n    }while (c > 1 || c === 0);\n    return [\n        a,\n        b\n    ];\n}\nconst $89f6e924a10a936e$var$invSqrt2 = 1 / Math.sqrt(2);\n/**\r\n * Two samples from gaussian around center with stdev scaled to R.\r\n * @param {number} X center.x\r\n * @param {number} Y center.y\r\n * @param {number} R radius = stdev * sqrt(2)\r\n * @returns {object} point\r\n */ function $89f6e924a10a936e$var$randomInsideGaussian(X, Y, R, rng) {\n    const [a, b] = $89f6e924a10a936e$var$randomStandardNormal(rng);\n    // pdfN01 fits inside circle of radius sqrt(2) and density pdfN01([0,0])\n    // So we increase the density a little more to fit inside unit circle.\n    // Then expand to fill circle of radius R.\n    // The circle has a radius R = stdev * sqrt(2).\n    const scale = R * $89f6e924a10a936e$var$invSqrt2;\n    const x = X + scale * a;\n    const y = Y + scale * b;\n    return [\n        x,\n        y\n    ];\n}\n/**\r\n * Marsaglia Method\r\n * https://www.alanzucconi.com/2015/09/16/how-to-sample-from-a-gaussian-distribution/\r\n * @returns {number[]} Two samples from Random standard normal with mean 0 and stdev 1.\r\n */ function $89f6e924a10a936e$var$randomStandardNormal(rng) {\n    let a;\n    let b;\n    let c;\n    do {\n        a = 2 * rng() - 1;\n        b = 2 * rng() - 1;\n        c = a * a + b * b;\n    }while (c > 1 || c === 0);\n    const d = Math.log(c) / c;\n    const e = Math.sqrt(-2 * d);\n    return [\n        e * a,\n        e * b\n    ];\n}\n\n\nfunction $35ee6e6c6480038b$export$2e2bcd8739ae039(canDnGeom, dimensions, rng) {\n    if (dimensions === 1) return (0, $9a77e39367a31884$export$2e2bcd8739ae039)(canDnGeom, rng);\n    return (0, $89f6e924a10a936e$export$2e2bcd8739ae039)(canDnGeom, rng);\n}\n\n\nfunction $1459f832f826849c$export$2e2bcd8739ae039(samplingGeometry, optionsBag, numSamples, rng) {\n    const { voterGeoms: voterGeoms, voterParties: voterParties, canDnGeoms: canDnGeoms, dimensions: dimensions, geography: geography, canDnCDF: canDnCDF, strategySeed: strategySeed, voterStrategyListByPhase: voterStrategyListByPhase, information: information, usePollsByPhase: usePollsByPhase } = samplingGeometry;\n    const { partiesByCan: partiesByCan } = samplingGeometry.parties;\n    if (voterGeoms.length === 0) return {\n        pointsChanged: false\n    };\n    if (canDnGeoms.length === 0) return {\n        pointsChanged: false\n    };\n    const samplingPointsList = [];\n    const samplingPointsCount = [];\n    const partyWins = Array(10).fill(0) // TODO: Use number of parties\n    ;\n    for(let i = 0; i < numSamples; i++){\n        // choose a number of candidates\n        const { numSampleCandidates: numSampleCandidates } = optionsBag;\n        const canPoints = [];\n        const sParties = [];\n        for(let k = 0; k < numSampleCandidates; k++){\n            // sample a point from the distribution of candidates\n            const iDist = (0, $a13bab49ccd6d247$export$2fa81e417e3da73b)(canDnCDF, rng);\n            const party0 = partiesByCan[iDist];\n            const canDnGeom = canDnGeoms[iDist];\n            const canPoint = (0, $35ee6e6c6480038b$export$2e2bcd8739ae039)(canDnGeom, dimensions, rng);\n            // make a candidate\n            canPoints.push(canPoint);\n            sParties.push(party0);\n        }\n        const parties = {\n            partiesByCan: sParties,\n            numParties: 10\n        };\n        const geometry = {\n            voterGeoms: voterGeoms,\n            voterParties: voterParties,\n            canPoints: canPoints,\n            parties: parties,\n            dimensions: dimensions,\n            geography: geography,\n            strategySeed: strategySeed,\n            voterStrategyListByPhase: voterStrategyListByPhase,\n            information: information,\n            usePollsByPhase: usePollsByPhase\n        };\n        const sequenceResults = (0, $77baf70a3e5cabee$export$2e2bcd8739ae039)(geometry, optionsBag);\n        const { allocation: allocation } = sequenceResults.socialChoiceResults;\n        for(let k = 0; k < allocation.length; k++){\n            const winCount = allocation[k];\n            if (winCount === 0) continue;\n            const canPoint = canPoints[k];\n            const winPoint = dimensions === 1 ? [\n                canPoint\n            ] : canPoint;\n            const winParty = sParties[k];\n            samplingPointsList.push(winPoint);\n            samplingPointsCount.push(winCount);\n            partyWins[winParty] += winCount;\n        }\n    }\n    return {\n        samplingPointsList: samplingPointsList,\n        samplingPointsCount: samplingPointsCount,\n        partyWins: partyWins\n    };\n}\n\n\n\nfunction $8f7b44bb767967a0$export$2e2bcd8739ae039() {\n    const self = this;\n    self.update = function(samplingGeometry, changes, optionsBag) {\n        if (changes.checkAny()) self.startSim(samplingGeometry);\n        const samplingResult = self.addSim(samplingGeometry, optionsBag);\n        return samplingResult;\n    };\n    const maxPoints = 5000;\n    let totalPartyWins;\n    let totalPoints;\n    let rng;\n    self.startSim = function(samplingGeometry) {\n        totalPoints = 0;\n        totalPartyWins = Array(10).fill(0) // TODO: Use number of parties\n        ;\n        const seed = `watermelon${samplingGeometry.samplingSeed}`;\n        rng = (0, (/*@__PURE__*/$parcel$interopDefault($f2dae5dda642a89f$exports)))(seed);\n    };\n    self.addSim = function(samplingGeometry, optionsBag) {\n        if (totalPoints > maxPoints) return {\n            pointsChanged: false\n        };\n        const numSamples = 1;\n        const sampleResult = (0, $1459f832f826849c$export$2e2bcd8739ae039)(samplingGeometry, optionsBag, numSamples, rng);\n        const { samplingPointsList: samplingPointsList, samplingPointsCount: samplingPointsCount, partyWins: partyWins, error: error } = sampleResult;\n        if (error !== undefined) return {\n            pointsChanged: false\n        };\n        if (sampleResult.pointsChanged === false) return {\n            pointsChanged: false\n        };\n        const numNewPoints = samplingPointsCount.reduce((p, c)=>p + c);\n        totalPoints += numNewPoints;\n        for(let i = 0; i < partyWins.length; i++)totalPartyWins[i] += partyWins[i];\n        const partyWinFraction = totalPartyWins.map((x)=>x / totalPoints);\n        const pointsChanged = true;\n        const samplingResult = {\n            pointsChanged: pointsChanged,\n            samplingPointsList: samplingPointsList,\n            samplingPointsCount: samplingPointsCount,\n            partyWinFraction: partyWinFraction\n        };\n        return samplingResult;\n    };\n}\n\n\n\nfunction $bb36fd73aa428899$export$2e2bcd8739ae039(simOptions, changes) {\n    if (!changes.checkAny()) return;\n    // debug with console log\n    // console.log(simOptions.seeds[0])\n    if (!simOptions.seedRandom) return;\n    if (changes.check([\n        \"init\",\n        \"seeds\"\n    ])) return;\n    const rng = (0, (/*@__PURE__*/$parcel$interopDefault($f2dae5dda642a89f$exports)))();\n    const seed = Math.floor(rng() * 10000);\n    simOptions.setSeeds(0, seed);\n// console.log(`->${simOptions.seeds[0]}`)\n}\n\n\nfunction $c80a24d03d53e326$export$2e2bcd8739ae039(pub, entities, changes, districts, simOptions, electionOptionsMan) {\n    const self = this;\n    const { candidateDnList: candidateDnList, voterShapeList: voterShapeList } = entities;\n    const electionSampler = new (0, $8f7b44bb767967a0$export$2e2bcd8739ae039)();\n    self.update = ()=>{\n        // Update players. Run an election. Get result.\n        // The election handles any changes.\n        // The samplingResult communicates how to visualize the election.\n        electionOptionsMan.update();\n        const optionsBag = electionOptionsMan.getOptions();\n        districts.update();\n        (0, $bb36fd73aa428899$export$2e2bcd8739ae039)(simOptions, changes);\n        const samplingGeometry = (0, $53c1834b3eb76b4e$export$2e2bcd8739ae039)(voterShapeList, candidateDnList, simOptions, optionsBag, districts);\n        const samplingResult = electionSampler.update(samplingGeometry, changes, optionsBag);\n        const simData = {\n            samplingResult: samplingResult\n        };\n        if (samplingResult.pointsChanged === true || changes.checkAny()) pub.update(simData);\n        changes.clear();\n    };\n}\n\n\n/** @module */ // import sumAllocationsStatewide from '@paretoman/votekit-district-election'\n\n\nfunction $6722cb0bd8be92a5$export$2e2bcd8739ae039(geometry0, optionsBag) {\n    const { canPoints: canPoints, parties: parties, voterParties: voterParties, dimensions: dimensions, geography: geography, strategySeed: strategySeed, usePollsByPhase: usePollsByPhase, voterStrategyListByPhase: voterStrategyListByPhase, information: information } = geometry0;\n    const { voterGeomsByDistrict: voterGeomsByDistrict } = geography;\n    const { nd: nd } = geography.districtMap;\n    // Calculating candidate borders can be useful, unless we have primaries.\n    // const voterGeoms00 = voterGeomsByTract[0][0]\n    // const { voteCasterName } = optionsBag.electionOptions\n    // const canBorders = getCanBorders(canPoints, voterGeoms00, dimensions, voteCasterName)\n    const scResultsByDistrict = (0, $c9cda941ee132d98$export$d02631cccf789723)(nd).map((iDistrict)=>{\n        const voterGeoms = voterGeomsByDistrict[iDistrict];\n        const geometry = {\n            voterGeoms: voterGeoms,\n            voterParties: voterParties,\n            canPoints: canPoints,\n            parties: parties,\n            dimensions: dimensions,\n            strategySeed: strategySeed,\n            information: information,\n            usePollsByPhase: usePollsByPhase,\n            voterStrategyListByPhase: voterStrategyListByPhase\n        };\n        const sequenceResults = (0, $77baf70a3e5cabee$export$2e2bcd8739ae039)(geometry, optionsBag);\n        return sequenceResults;\n    });\n    // need for visuals\n    // votesByTract,\n    // votesByDistrict,\n    // scResultsByDistrict,\n    // votesByTractByDistrict\n    // const { electionOptions } = optionsBag\n    // const allocation = sumAllocationsStatewide(scResultsByDistrict, canPoints, electionOptions)\n    // const socialChoiceResults = { allocation }\n    const electionResults = {\n        scResultsByDistrict: scResultsByDistrict,\n        geometry: geometry0\n    };\n    return electionResults;\n}\n\n\n/** @module */ \nfunction $fbd47c7b0fecb2d9$export$2e2bcd8739ae039(votesByTract) {\n    const numRows = votesByTract.length;\n    const numCols = votesByTract[0].length;\n    const dNorm = 1 / (numRows * numCols);\n    return dNorm;\n}\n\n\nfunction $e661719c539dfc13$export$2e2bcd8739ae039(votesByTract, numCans) {\n    // average pairwiseTallies\n    const tallyNames = Object.keys(votesByTract[0][0].pairwiseTallies);\n    const pairwiseTallies = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const tallyAverage = $e661719c539dfc13$var$getPairwiseTallyAverageStatewide(tallyName, votesByTract, numCans);\n        pairwiseTallies[tallyName] = tallyAverage;\n    }\n    return pairwiseTallies;\n}\nfunction $e661719c539dfc13$var$getPairwiseTallyAverageStatewide(tallyName, votesByTract, numCans) {\n    const pTotals = Array(numCans);\n    for(let k = 0; k < numCans; k++)pTotals[k] = Array(numCans).fill(0);\n    votesByTract.forEach((row)=>row.forEach((votes)=>{\n            const pairwiseTally = votes.pairwiseTallies[tallyName];\n            for(let i = 0; i < numCans; i++)for(let k = 0; k < numCans; k++)pTotals[i][k] += pairwiseTally[i][k];\n        }));\n    const dNorm = (0, $fbd47c7b0fecb2d9$export$2e2bcd8739ae039)(votesByTract);\n    const pairwiseTallyAverage = pTotals.map((row)=>row.map((t)=>t * dNorm));\n    return pairwiseTallyAverage;\n}\n\n\nfunction $3fa308a8452fe9cd$export$2e2bcd8739ae039(votesByTract) {\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceLists);\n    const preferenceLists = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const preferencesAll = $3fa308a8452fe9cd$var$concatPreferenceListsStatewide(tallyName, votesByTract);\n        preferenceLists[tallyName] = preferencesAll;\n    }\n    return preferenceLists;\n}\nfunction $3fa308a8452fe9cd$var$concatPreferenceListsStatewide(tallyName, votesByTract) {\n    // concatenate preferences\n    const preferencesAll = [];\n    votesByTract.forEach((row)=>row.forEach((votes)=>{\n            const preferences = votes.preferenceLists[tallyName];\n            // concat\n            // preferencesAll.push(...preferences)\n            const n1 = preferencesAll.length;\n            const n2 = preferences.length;\n            preferencesAll.length += preferences.length;\n            for(let i = 0; i < n2; i++)preferencesAll[n1 + i] = preferences[i];\n        }));\n    return preferencesAll;\n}\n\n\n\nfunction $09b2e81faeca07f7$export$2e2bcd8739ae039(votesByTract) {\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceTallies);\n    const preferenceTallies = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const tallyAll = $09b2e81faeca07f7$var$concatPreferenceTalliesStatewide(tallyName, votesByTract);\n        preferenceTallies[tallyName] = tallyAll;\n    }\n    return preferenceTallies;\n}\nfunction $09b2e81faeca07f7$var$concatPreferenceTalliesStatewide(tallyName, votesByTract) {\n    // concatenate tallies and normalize\n    let tallyAll = [];\n    votesByTract.forEach((row)=>row.forEach((votes)=>{\n            const tally = votes.preferenceTallies[tallyName];\n            // concat\n            // tallyAll.push(...tally)\n            const n1 = tallyAll.length;\n            const n2 = tally.length;\n            tallyAll.length += tally.length;\n            for(let i = 0; i < n2; i++)tallyAll[n1 + i] = tally[i];\n        }));\n    const dNorm = (0, $fbd47c7b0fecb2d9$export$2e2bcd8739ae039)(votesByTract);\n    tallyAll = tallyAll.map((t)=>t * dNorm);\n    return tallyAll;\n}\n\n\n\nfunction $dc402228f45655fe$export$2e2bcd8739ae039(votesByTract, numCans) {\n    // average tallies\n    const tallyNames = Object.keys(votesByTract[0][0].candidateTallies);\n    const candidateTallies = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const tallyAverage = $dc402228f45655fe$var$getCandidateTallyAverageStatewide(tallyName, votesByTract, numCans);\n        candidateTallies[tallyName] = tallyAverage;\n    }\n    return candidateTallies;\n}\nfunction $dc402228f45655fe$var$getCandidateTallyAverageStatewide(tallyName, votesByTract, numCans) {\n    // average the tally\n    const totals = Array(numCans).fill(0);\n    votesByTract.forEach((row)=>row.forEach((votes)=>{\n            const tally = votes.candidateTallies[tallyName];\n            for(let k = 0; k < numCans; k++)totals[k] += tally[k];\n        }));\n    const dNorm = (0, $fbd47c7b0fecb2d9$export$2e2bcd8739ae039)(votesByTract);\n    const tallyAverage = totals.map((t)=>t * dNorm);\n    return tallyAverage;\n}\n\n\nfunction $10cdea625b2d52c3$export$2e2bcd8739ae039(votesByTract, canPoints) {\n    const numCans = canPoints.length;\n    const votes = {};\n    if (votesByTract[0][0].candidateTallies !== undefined) votes.candidateTallies = (0, $dc402228f45655fe$export$2e2bcd8739ae039)(votesByTract, numCans);\n    if (votesByTract[0][0].pairwiseTallies !== undefined) votes.pairwiseTallies = (0, $e661719c539dfc13$export$2e2bcd8739ae039)(votesByTract, numCans);\n    if (votesByTract[0][0].preferenceLists !== undefined) {\n        votes.preferenceLists = (0, $3fa308a8452fe9cd$export$2e2bcd8739ae039)(votesByTract);\n        votes.preferenceTallies = (0, $09b2e81faeca07f7$export$2e2bcd8739ae039)(votesByTract);\n    }\n    votes.parties = votesByTract[0][0].parties;\n    return votes;\n}\n\n\n\n/**\r\n * Normalize the sum of the stats for a district.\r\n * @param {number[][]} cen - An entry in the census for a district,\r\n * containing the fraction of a tract in a district\r\n * @returns {number} normalizing parameter to multiply stat sum by.\r\n */ function $997fdff8a73e14b5$export$2e2bcd8739ae039(cen) {\n    let gfSum = 0;\n    for(let j = 0; j < cen.length; j++){\n        const [, , gf] = cen[j];\n        gfSum += gf;\n    }\n    const gfNorm = 1 / gfSum;\n    return gfNorm;\n}\n\n\nfunction $39eb7fc99bf8f097$export$2e2bcd8739ae039(votesByTract, cen, numCans) {\n    // average pairwiseTallies\n    const tallyNames = Object.keys(votesByTract[0][0].pairwiseTallies);\n    const pairwiseTallies = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const tallyAverage = $39eb7fc99bf8f097$var$getPairwiseTallyAverageForDistrict(tallyName, votesByTract, cen, numCans);\n        pairwiseTallies[tallyName] = tallyAverage;\n    }\n    return pairwiseTallies;\n}\nfunction $39eb7fc99bf8f097$var$getPairwiseTallyAverageForDistrict(tallyName, votesByTract, cen, numCans) {\n    const pTotals = Array(numCans);\n    for(let k = 0; k < numCans; k++)pTotals[k] = Array(numCans).fill(0);\n    for(let j = 0; j < cen.length; j++){\n        const [gx, gy, gf] = cen[j];\n        const pairwiseTally = votesByTract[gx][gy].pairwiseTallies[tallyName];\n        for(let i = 0; i < numCans; i++)for(let k = 0; k < numCans; k++)pTotals[i][k] += pairwiseTally[i][k] * gf;\n    }\n    const gfNorm = (0, $997fdff8a73e14b5$export$2e2bcd8739ae039)(cen);\n    const pairwiseTallyAverage = pTotals.map((row)=>row.map((t)=>t * gfNorm));\n    return pairwiseTallyAverage;\n}\n\n\n\nfunction $2c1c61e8260ced75$export$2e2bcd8739ae039(votesByTract, cen, numCans) {\n    // average tallies\n    const tallyNames = Object.keys(votesByTract[0][0].candidateTallies);\n    const candidateTallies = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const tallyAverage = $2c1c61e8260ced75$var$getCandidateTallyAverage(tallyName, votesByTract, cen, numCans);\n        candidateTallies[tallyName] = tallyAverage;\n    }\n    return candidateTallies;\n}\nfunction $2c1c61e8260ced75$var$getCandidateTallyAverage(tallyName, votesByTract, cen, numCans) {\n    // average the tally\n    const totals = Array(numCans).fill(0);\n    for(let j = 0; j < cen.length; j++){\n        const [gx, gy, gf] = cen[j];\n        const tally = votesByTract[gx][gy].candidateTallies[tallyName];\n        for(let k = 0; k < numCans; k++)totals[k] += tally[k] * gf;\n    }\n    const gfNorm = (0, $997fdff8a73e14b5$export$2e2bcd8739ae039)(cen);\n    const tallyAverage = totals.map((t)=>t * gfNorm);\n    return tallyAverage;\n}\n\n\nfunction $db9a5a579a1d2610$export$2e2bcd8739ae039(votesByTract, cen) {\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceLists);\n    const preferenceLists = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const preferencesAll = $db9a5a579a1d2610$var$concatPreferenceListsDistrict(tallyName, votesByTract, cen);\n        preferenceLists[tallyName] = preferencesAll;\n    }\n    return preferenceLists;\n}\nfunction $db9a5a579a1d2610$var$concatPreferenceListsDistrict(tallyName, votesByTract, cen) {\n    // concatenate preferences\n    const preferencesAll = [];\n    for(let j = 0; j < cen.length; j++){\n        const [gx, gy] = cen[j];\n        const votesInTract = votesByTract[gx][gy];\n        const preferences = votesInTract.preferenceLists[tallyName];\n        // concat\n        // preferencesAll.push(...preferences)\n        const n1 = preferencesAll.length;\n        const n2 = preferences.length;\n        preferencesAll.length += preferences.length;\n        for(let i = 0; i < n2; i++)preferencesAll[n1 + i] = preferences[i];\n    }\n    return preferencesAll;\n}\n\n\n\nfunction $fc3e0621b0ea595f$export$2e2bcd8739ae039(votesByTract, cen) {\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceTallies);\n    const preferenceTallies = {};\n    for(let i = 0; i < tallyNames.length; i++){\n        const tallyName = tallyNames[i];\n        const tallyAll = $fc3e0621b0ea595f$var$concatPreferenceTalliesDistrict(tallyName, votesByTract, cen);\n        preferenceTallies[tallyName] = tallyAll;\n    }\n    return preferenceTallies;\n}\nfunction $fc3e0621b0ea595f$var$concatPreferenceTalliesDistrict(tallyName, votesByTract, cen) {\n    // concatenate tallies and normalize\n    const tallyAll = [];\n    const gfNorm = (0, $997fdff8a73e14b5$export$2e2bcd8739ae039)(cen);\n    for(let j = 0; j < cen.length; j++){\n        const [gx, gy, gf] = cen[j];\n        const votesInTract = votesByTract[gx][gy];\n        const tally = votesInTract.preferenceTallies[tallyName];\n        const tallyNorm = tally.map((x)=>x * gf * gfNorm);\n        // concat\n        // tallyAll.push(...tally)\n        const n1 = tallyAll.length;\n        const n2 = tallyNorm.length;\n        tallyAll.length += tallyNorm.length;\n        for(let i = 0; i < n2; i++)tallyAll[n1 + i] = tallyNorm[i];\n    }\n    return tallyAll;\n}\n\n\nfunction $31877c41183714e6$export$2e2bcd8739ae039(votesByTract, canPoints, geography) {\n    const { census: census } = geography;\n    const { nd: nd } = geography.districtMap;\n    const numCans = canPoints.length;\n    // Loop through districts.\n    // Each district has a census with a list of tracts with weights.\n    // The weights indicate what fraction of the tract is in the district.\n    // Tracts are listed by index.\n    // This is the same index as the votes list uses.\n    const votesByDistrict = (0, $c9cda941ee132d98$export$d02631cccf789723)(nd).map((iDistrict)=>{\n        const cen = census[iDistrict];\n        const votes = {};\n        if (votesByTract[0][0].candidateTallies !== undefined) votes.candidateTallies = (0, $2c1c61e8260ced75$export$2e2bcd8739ae039)(votesByTract, cen, numCans);\n        if (votesByTract[0][0].pairwiseTallies !== undefined) votes.pairwiseTallies = (0, $39eb7fc99bf8f097$export$2e2bcd8739ae039)(votesByTract, cen, numCans);\n        if (votesByTract[0][0].preferenceLists !== undefined) {\n            votes.preferenceLists = (0, $db9a5a579a1d2610$export$2e2bcd8739ae039)(votesByTract, cen);\n            votes.preferenceTallies = (0, $fc3e0621b0ea595f$export$2e2bcd8739ae039)(votesByTract, cen);\n        }\n        votes.parties = votesByTract[0][0].parties;\n        votes.numCans = numCans;\n        return votes;\n    });\n    return votesByDistrict;\n}\n\n\n\nfunction $dfe757bfc192d95a$export$2e2bcd8739ae039(geometry0, electionOptions, castOptions) {\n    const { canPoints: canPoints, parties: parties, dimensions: dimensions, geography: geography, strategySeed: strategySeed, voterStrategyList: voterStrategyList, information: information } = geometry0;\n    const { voterGeomsByTract: voterGeomsByTract } = geography;\n    const voterGeoms00 = voterGeomsByTract[0][0];\n    const { voteCasterName: voteCasterName } = electionOptions;\n    const canBorders = (0, $5378ef2dbac38c7f$export$9051c087f4e3b1ee)(canPoints, voterGeoms00, dimensions, voteCasterName);\n    const votesByTract = voterGeomsByTract.map((row)=>row.map((voterGeoms)=>{\n            const geometry = {\n                voterGeoms: voterGeoms,\n                canPoints: canPoints,\n                parties: parties,\n                dimensions: dimensions,\n                canBorders: canBorders,\n                strategySeed: strategySeed,\n                voterStrategyList: voterStrategyList,\n                information: information\n            };\n            return (0, $5378ef2dbac38c7f$export$2e2bcd8739ae039)[voteCasterName].cast(geometry, castOptions);\n        }));\n    return votesByTract;\n}\n\n\n// Show wins across all districts for each candidate\nfunction $4eeb5148cf918487$export$2e2bcd8739ae039(scResultsByDistrict, canPoints, electionOptions) {\n    // make a histogram of allocation\n    const numCandidates = canPoints.length;\n    const allocationsSum = Array(numCandidates).fill(0);\n    if (electionOptions.socialChoiceType === \"singleWinner\") {\n        const iWinners = scResultsByDistrict.map((socialChoiceResults)=>socialChoiceResults.iWinner);\n        iWinners.forEach((iWinner)=>{\n            allocationsSum[iWinner] += 1;\n        });\n    } else scResultsByDistrict.forEach((socialChoiceResults)=>{\n        const { allocation: allocation } = socialChoiceResults;\n        for(let i = 0; i < numCandidates; i++)allocationsSum[i] += allocation[i];\n    });\n    return allocationsSum;\n}\n\n\nfunction $9187741c15516e6c$export$2e2bcd8739ae039(geometry, electionOptions, castOptions) {\n    const { canPoints: canPoints, geography: geography } = geometry;\n    const votesByTract = (0, $dfe757bfc192d95a$export$2e2bcd8739ae039)(geometry, electionOptions, castOptions);\n    const allVotes = (0, $10cdea625b2d52c3$export$2e2bcd8739ae039)(votesByTract, canPoints);\n    const votesByDistrict = (0, $31877c41183714e6$export$2e2bcd8739ae039)(votesByTract, canPoints, geography);\n    const scResultsByDistrict = $9187741c15516e6c$var$countDistrictElections(votesByDistrict, electionOptions);\n    const allocation = (0, $4eeb5148cf918487$export$2e2bcd8739ae039)(scResultsByDistrict, canPoints, electionOptions);\n    const socialChoiceResults = {\n        allocation: allocation\n    };\n    const electionResults = {\n        electionOptions: electionOptions,\n        geometry: geometry,\n        votes: allVotes,\n        votesByTract: votesByTract,\n        votesByDistrict: votesByDistrict,\n        scResultsByDistrict: scResultsByDistrict,\n        socialChoiceResults: socialChoiceResults\n    };\n    return electionResults;\n}\n/** Run separate elections in each district. */ function $9187741c15516e6c$var$countDistrictElections(votesByDistrict, electionOptions) {\n    const scResultsByDistrict = votesByDistrict.map((votes)=>(0, $1ff7a017be0afffc$export$2e2bcd8739ae039)(votes, electionOptions));\n    return scResultsByDistrict;\n}\n\n\n\n\nfunction $cc0a5c5d0ba5d8d6$export$2e2bcd8739ae039(voterShapeList, candidateList, simOptions, optionsBag, districts) {\n    const { dimensions: dimensions, seeds: seeds } = simOptions;\n    const { geography: geography } = districts;\n    const { sequenceOptions: sequenceOptions } = optionsBag;\n    const voterGeoms = voterShapeList.getGeoms(dimensions);\n    const voterParties = voterShapeList.getParties();\n    const voterStrategyListByPhase = voterShapeList.getVoterStrategyListByPhase(sequenceOptions);\n    const information = null;\n    const usePollsByPhase = (0, $bbf3b8576e24093e$export$2e2bcd8739ae039)(voterStrategyListByPhase);\n    const canPoints = candidateList.getPoints(dimensions);\n    const parties = candidateList.getParties();\n    const strategySeed = `pumpkin${seeds[0]}` // todo: use seeds[1] for strategySeed\n    ;\n    const geometry = {\n        voterGeoms: voterGeoms,\n        voterParties: voterParties,\n        canPoints: canPoints,\n        parties: parties,\n        dimensions: dimensions,\n        geography: geography,\n        strategySeed: strategySeed,\n        voterStrategyListByPhase: voterStrategyListByPhase,\n        information: information,\n        usePollsByPhase: usePollsByPhase\n    };\n    return geometry;\n}\n\n\nfunction $5a664525795fcf70$export$2e2bcd8739ae039(pub, entities, changes, districts, simOptions, electionOptionsMan) {\n    const self = this;\n    const { voterShapeList: voterShapeList, candidateList: candidateList } = entities;\n    self.update = ()=>{\n        if (changes.checkNone()) return;\n        electionOptionsMan.update();\n        const optionsBag = electionOptionsMan.getOptions();\n        districts.update();\n        const geometry = (0, $cc0a5c5d0ba5d8d6$export$2e2bcd8739ae039)(voterShapeList, candidateList, simOptions, optionsBag, districts);\n        const geoResults = $5a664525795fcf70$var$districtPatch(geometry, optionsBag);\n        geoResults.colorRGBAOfCandidates = candidateList.getRGBAList();\n        const simData = {\n            geoResults: geoResults\n        };\n        pub.update(simData);\n        changes.clear();\n    };\n}\nfunction $5a664525795fcf70$var$districtPatch(geometry, optionsBag) {\n    if (optionsBag.useGeography === true) {\n        const { sequenceName: sequenceName } = optionsBag.sequenceOptions;\n        const phaseName = \"general\";\n        const electionOptions = optionsBag.sequenceOptions.sequences[sequenceName].phases[phaseName];\n        const { castOptions: castOptions } = optionsBag;\n        const geometry2 = (0, $73d62e7e163c58e0$export$2e2bcd8739ae039)(phaseName, geometry);\n        const deResults = (0, $9187741c15516e6c$export$2e2bcd8739ae039)(geometry2, electionOptions, castOptions);\n        const geoResults = deResults;\n        return geoResults;\n    }\n    // else\n    return (0, $6722cb0bd8be92a5$export$2e2bcd8739ae039)(geometry, optionsBag);\n}\n\n\nfunction $f19ce2fbf8e19d4c$export$2e2bcd8739ae039(pub, entities, districts, changes, simOptions, electionOptionsMan) {\n    const self = this;\n    self.modes = {\n        one: new (0, $5a664525795fcf70$export$2e2bcd8739ae039)(pub, entities, changes, districts, simOptions, electionOptionsMan),\n        sample: new (0, $c80a24d03d53e326$export$2e2bcd8739ae039)(pub, entities, changes, districts, simOptions, electionOptionsMan)\n    };\n    self.update = ()=>{\n        self.modes[simOptions.mode].update();\n    };\n}\n\n\n\nfunction $cd35aade988dc1ad$export$2e2bcd8739ae039(entities) {\n    const doLoad = true;\n    entities.candidateList.addCandidate({\n        shape2: {\n            x: 50,\n            y: 100\n        },\n        shape1: {\n            x: 50\n        },\n        color: \"#e05020\",\n        doLoad: doLoad\n    });\n    entities.candidateList.addCandidate({\n        shape2: {\n            x: 100,\n            y: 50\n        },\n        shape1: {\n            x: 100\n        },\n        color: \"#50e020\",\n        doLoad: doLoad\n    });\n    entities.candidateList.addCandidate({\n        shape2: {\n            x: 200,\n            y: 250\n        },\n        shape1: {\n            x: 200\n        },\n        color: \"#2050e0\",\n        doLoad: doLoad\n    });\n    entities.candidateDnList.addCandidateDistribution({\n        shape2: {\n            x: 150,\n            y: 150,\n            w: 200,\n            densityProfile: \"step\"\n        },\n        shape1: {\n            x: 150,\n            w: 200,\n            densityProfile: \"gaussian\"\n        },\n        doLoad: doLoad\n    });\n    entities.voterShapeList.addVoterCircle({\n        shape2: {\n            x: 150,\n            y: 150,\n            w: 200,\n            densityProfile: \"step\",\n            densityMax: 1\n        },\n        shape1: {\n            x: 150,\n            w: 200,\n            densityProfile: \"gaussian\",\n            densityMax: 1\n        },\n        strategyRules: (0, $34f78a09f3b3e7b0$export$2e2bcd8739ae039),\n        doLoad: doLoad\n    });\n}\n\n\nfunction $c57a6b566cbb04f2$export$2e2bcd8739ae039() {\n    const self = this;\n    // Publish to View //\n    const observers = [];\n    self.attach = (observer)=>{\n        observers.push(observer);\n    };\n    self.update = (simData)=>{\n        observers.forEach((o)=>o.update(simData));\n    };\n}\n\n\n/** @module */ /** @module */ /** @module */ // import _ from 'https://cdn.skypack.dev/lodash@4.17.21'\n\n\n// @ts-nocheck\n/**\r\n * Clips a polygon with another polygon to return a polygon.\r\n * Polygons must be counter-clockwise.\r\n * https://observablehq.com/@d3/polygonclip@1237\r\n * @param {number[][]} clip - polygon\r\n * @param {number[][]} subject0 - polygon, gets mutated\r\n * @returns {number[][]} - polygon\r\n */ function $0c00c6a82cd6c172$export$2e2bcd8739ae039(clip, subject0) {\n    const closed = $0c00c6a82cd6c172$var$polygonClosed(subject0);\n    const n = clip.length - $0c00c6a82cd6c172$var$polygonClosed(clip);\n    const subject = subject0.slice() // copy before mutate\n    ;\n    for(let i = 0, a = clip[n - 1], b, c, d; i < n; ++i){\n        const input = subject.slice();\n        const m = input.length - closed;\n        subject.length = 0;\n        b = clip[i];\n        c = input[m - 1];\n        for(let j = 0; j < m; ++j){\n            d = input[j];\n            if ($0c00c6a82cd6c172$var$lineOrient(d, a, b)) {\n                if (!$0c00c6a82cd6c172$var$lineOrient(c, a, b)) subject.push($0c00c6a82cd6c172$var$lineIntersect(c, d, a, b));\n                subject.push(d);\n            } else if ($0c00c6a82cd6c172$var$lineOrient(c, a, b)) subject.push($0c00c6a82cd6c172$var$lineIntersect(c, d, a, b));\n            c = d;\n        }\n        if (closed) subject.push(subject[0]);\n        a = b;\n    }\n    return subject.length ? subject : null;\n}\nfunction $0c00c6a82cd6c172$var$lineOrient([px, py], [ax, ay], [bx, by]) {\n    return (bx - ax) * (py - ay) < (by - ay) * (px - ax);\n}\nfunction $0c00c6a82cd6c172$var$lineIntersect([ax, ay], [bx, by], [cx, cy], [dx, dy]) {\n    const bax = bx - ax;\n    const bay = by - ay;\n    const dcx = dx - cx;\n    const dcy = dy - cy;\n    const k = (bax * (cy - ay) - bay * (cx - ax)) / (bay * dcx - bax * dcy);\n    return [\n        cx + k * dcx,\n        cy + k * dcy\n    ];\n}\nfunction $0c00c6a82cd6c172$var$polygonClosed(points) {\n    const [ax, ay] = points[0];\n    const [bx, by] = points[points.length - 1];\n    return ax === bx && ay === by;\n}\nfunction $0c00c6a82cd6c172$export$ee3193dec5af44e(points) {\n    const n = points.length;\n    const [rx, ry] = points[n - 2];\n    let [qx, qy] = points[n - 1];\n    let vx = rx - qx;\n    let vy = ry - qy;\n    for(let i = 0; i < n; ++i){\n        const [px, py] = points[i];\n        const wx = qx - px;\n        const wy = qy - py;\n        if (wx * vy < wy * vx) return false;\n        if (wx || wy) {\n            vx = wx;\n            vy = wy;\n        }\n        qx = px;\n        qy = py;\n    }\n    return true;\n}\nfunction $0c00c6a82cd6c172$export$396c37ecd94dc52f() {\n    const subject = [\n        [\n            79,\n            200\n        ],\n        [\n            266,\n            100\n        ],\n        [\n            452,\n            200\n        ],\n        [\n            359,\n            450\n        ],\n        [\n            172,\n            420\n        ]\n    ];\n    const clip = [\n        [\n            210,\n            90\n        ],\n        [\n            110,\n            400\n        ],\n        [\n            420,\n            400\n        ],\n        [\n            490,\n            250\n        ]\n    ];\n    return $0c00c6a82cd6c172$export$2e2bcd8739ae039(clip, subject);\n}\n\n\nfunction $684ff26a96d5ad1c$export$2e2bcd8739ae039(districtMap, nx, ny) {\n    const { nd: nd, polygons: polygons } = districtMap;\n    const census = Array(nd).fill().map(()=>[]);\n    const xScale = 1 / nx;\n    const yScale = 1 / ny;\n    for(let gx = 0; gx < nx; gx++)for(let gy = 0; gy < ny; gy++){\n        const subject = $684ff26a96d5ad1c$var$makeSquare(gx * xScale, gy * yScale, xScale, yScale);\n        (0, $c9cda941ee132d98$export$d02631cccf789723)(nd).forEach((iDistrict)=>{\n            const poly = polygons[iDistrict];\n            const clip = (0, $912c109451e3e417$export$88483c833f74f910)(poly).reverse();\n            const overlap = (0, $0c00c6a82cd6c172$export$2e2bcd8739ae039)(clip, subject);\n            // store data more sparsely because it is more efficient\n            // loop through all districts\n            if (overlap !== null) {\n                const gf = (0, $64e498bedbbc6430$export$2e2bcd8739ae039)(overlap);\n                census[iDistrict].push([\n                    gx,\n                    gy,\n                    gf\n                ]);\n            }\n        });\n    }\n    return census;\n}\nfunction $684ff26a96d5ad1c$var$makeSquare(x, y, w, h) {\n    // the points are in counterclockwise order\n    // assuming a coordinate system where y points down and x points right.\n    // top left\n    // bottom left\n    // bottom right\n    // top right\n    const subject = [\n        [\n            x,\n            y\n        ],\n        [\n            x,\n            y + h\n        ],\n        [\n            x + w,\n            y + h\n        ],\n        [\n            x + w,\n            y\n        ]\n    ];\n    return subject;\n}\n\n\n/** @module */ \n/** @module */ function $b694069ea7a74f51$export$2e2bcd8739ae039(polygon) {\n    var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;\n    while(++i < n){\n        a = b;\n        b = polygon[i];\n        k += c = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * c;\n        y += (a[1] + b[1]) * c;\n    }\n    return k *= 3, [\n        x / k,\n        y / k\n    ];\n}\n\n\nconst $901225bbbd8afd6a$export$6c421550c66a327d = 1.1102230246251565e-16;\nconst $901225bbbd8afd6a$export$8cfde575cbd41e40 = 134217729;\nconst $901225bbbd8afd6a$export$a4103c3ab16b06d7 = (3 + 8 * $901225bbbd8afd6a$export$6c421550c66a327d) * $901225bbbd8afd6a$export$6c421550c66a327d;\nfunction $901225bbbd8afd6a$export$8a63f25cc62965f1(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if (fnow > enow === fnow > -enow) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if (fnow > enow === fnow > -enow) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) h[hindex++] = hh;\n        while(eindex < elen && findex < flen){\n            if (fnow > enow === fnow > -enow) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) h[hindex++] = hh;\n        }\n    }\n    while(eindex < elen){\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) h[hindex++] = hh;\n    }\n    while(findex < flen){\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) h[hindex++] = hh;\n    }\n    if (Q !== 0 || hindex === 0) h[hindex++] = Q;\n    return hindex;\n}\nfunction $901225bbbd8afd6a$export$195a93e4bd4d876f(alen, a, blen, b, clen, c, tmp, out) {\n    return $901225bbbd8afd6a$export$8a63f25cc62965f1($901225bbbd8afd6a$export$8a63f25cc62965f1(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\nfunction $901225bbbd8afd6a$export$dcdf75081b88279d(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n    c = $901225bbbd8afd6a$export$8cfde575cbd41e40 * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = $901225bbbd8afd6a$export$8cfde575cbd41e40 * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) h[hindex++] = hh;\n    for(let i = 1; i < elen; i++){\n        enow = e[i];\n        product1 = enow * b;\n        c = $901225bbbd8afd6a$export$8cfde575cbd41e40 * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) h[hindex++] = hh;\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) h[hindex++] = hh;\n    }\n    if (Q !== 0 || hindex === 0) h[hindex++] = Q;\n    return hindex;\n}\nfunction $901225bbbd8afd6a$export$aef51622e549b8b0(elen, e) {\n    for(let i = 0; i < elen; i++)e[i] = -e[i];\n    return elen;\n}\nfunction $901225bbbd8afd6a$export$9f3a0795ca2cc944(elen, e) {\n    let Q = e[0];\n    for(let i = 1; i < elen; i++)Q += e[i];\n    return Q;\n}\nfunction $901225bbbd8afd6a$export$202e0172ed3c7be0(n) {\n    return new Float64Array(n);\n}\n\n\nconst $1b8ebe1b5d7dc8a2$var$ccwerrboundA = (3 + 16 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $1b8ebe1b5d7dc8a2$var$ccwerrboundB = (2 + 12 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $1b8ebe1b5d7dc8a2$var$ccwerrboundC = (9 + 64 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $1b8ebe1b5d7dc8a2$var$B = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $1b8ebe1b5d7dc8a2$var$C1 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $1b8ebe1b5d7dc8a2$var$C2 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(12);\nconst $1b8ebe1b5d7dc8a2$var$D = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(16);\nconst $1b8ebe1b5d7dc8a2$var$u = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nfunction $1b8ebe1b5d7dc8a2$var$orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n    s1 = acx * bcy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $1b8ebe1b5d7dc8a2$var$B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $1b8ebe1b5d7dc8a2$var$B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $1b8ebe1b5d7dc8a2$var$B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $1b8ebe1b5d7dc8a2$var$B[3] = u3;\n    let det = (0, $901225bbbd8afd6a$export$9f3a0795ca2cc944)(4, $1b8ebe1b5d7dc8a2$var$B);\n    let errbound = $1b8ebe1b5d7dc8a2$var$ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) return det;\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) return det;\n    errbound = $1b8ebe1b5d7dc8a2$var$ccwerrboundC * detsum + (0, $901225bbbd8afd6a$export$a4103c3ab16b06d7) * Math.abs(det);\n    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n    s1 = acxtail * bcy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $1b8ebe1b5d7dc8a2$var$u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $1b8ebe1b5d7dc8a2$var$u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $1b8ebe1b5d7dc8a2$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $1b8ebe1b5d7dc8a2$var$u[3] = u3;\n    const C1len = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(4, $1b8ebe1b5d7dc8a2$var$B, 4, $1b8ebe1b5d7dc8a2$var$u, $1b8ebe1b5d7dc8a2$var$C1);\n    s1 = acx * bcytail;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $1b8ebe1b5d7dc8a2$var$u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $1b8ebe1b5d7dc8a2$var$u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $1b8ebe1b5d7dc8a2$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $1b8ebe1b5d7dc8a2$var$u[3] = u3;\n    const C2len = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(C1len, $1b8ebe1b5d7dc8a2$var$C1, 4, $1b8ebe1b5d7dc8a2$var$u, $1b8ebe1b5d7dc8a2$var$C2);\n    s1 = acxtail * bcytail;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $1b8ebe1b5d7dc8a2$var$u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $1b8ebe1b5d7dc8a2$var$u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $1b8ebe1b5d7dc8a2$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $1b8ebe1b5d7dc8a2$var$u[3] = u3;\n    const Dlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(C2len, $1b8ebe1b5d7dc8a2$var$C2, 4, $1b8ebe1b5d7dc8a2$var$u, $1b8ebe1b5d7dc8a2$var$D);\n    return $1b8ebe1b5d7dc8a2$var$D[Dlen - 1];\n}\nfunction $1b8ebe1b5d7dc8a2$export$bbb923599a46a7d8(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= $1b8ebe1b5d7dc8a2$var$ccwerrboundA * detsum) return det;\n    return -$1b8ebe1b5d7dc8a2$var$orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\nfunction $1b8ebe1b5d7dc8a2$export$c42fd1bc0c0a7484(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n\n\n\nconst $33f004acf70f40d1$var$o3derrboundA = (7 + 56 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $33f004acf70f40d1$var$o3derrboundB = (3 + 28 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $33f004acf70f40d1$var$o3derrboundC = (26 + 288 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $33f004acf70f40d1$var$bc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$ca = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$ab = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$at_b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$at_c = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$bt_c = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$bt_a = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$ct_a = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$ct_b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$bct = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $33f004acf70f40d1$var$cat = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $33f004acf70f40d1$var$abt = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $33f004acf70f40d1$var$u = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $33f004acf70f40d1$var$_8 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $33f004acf70f40d1$var$_8b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $33f004acf70f40d1$var$_16 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $33f004acf70f40d1$var$_12 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(12);\nlet $33f004acf70f40d1$var$fin = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(192);\nlet $33f004acf70f40d1$var$fin2 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(192);\nfunction $33f004acf70f40d1$var$finadd(finlen, alen, a) {\n    finlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(finlen, $33f004acf70f40d1$var$fin, alen, a, $33f004acf70f40d1$var$fin2);\n    const tmp = $33f004acf70f40d1$var$fin;\n    $33f004acf70f40d1$var$fin = $33f004acf70f40d1$var$fin2;\n    $33f004acf70f40d1$var$fin2 = tmp;\n    return finlen;\n}\nfunction $33f004acf70f40d1$var$tailinit(xtail, ytail, ax, ay, bx, by, a, b) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;\n    if (xtail === 0) {\n        if (ytail === 0) {\n            a[0] = 0;\n            b[0] = 0;\n            return 1;\n        } else {\n            negate = -ytail;\n            s1 = negate * ax;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            s1 = ytail * bx;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        }\n    } else if (ytail === 0) {\n        s1 = xtail * ay;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * xtail;\n        ahi = c - (c - xtail);\n        alo = xtail - ahi;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ay;\n        bhi = c - (c - ay);\n        blo = ay - bhi;\n        a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n        a[1] = s1;\n        negate = -xtail;\n        s1 = negate * by;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * negate;\n        ahi = c - (c - negate);\n        alo = negate - ahi;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * by;\n        bhi = c - (c - by);\n        blo = by - bhi;\n        b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n        b[1] = s1;\n        return 2;\n    } else {\n        s1 = xtail * ay;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * xtail;\n        ahi = c - (c - xtail);\n        alo = xtail - ahi;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ay;\n        bhi = c - (c - ay);\n        blo = ay - bhi;\n        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n        t1 = ytail * ax;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ytail;\n        ahi = c - (c - ytail);\n        alo = ytail - ahi;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ax;\n        bhi = c - (c - ax);\n        blo = ax - bhi;\n        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n        _i = s0 - t0;\n        bvirt = s0 - _i;\n        a[0] = s0 - (_i + bvirt) + (bvirt - t0);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 - t1;\n        bvirt = _0 - _i;\n        a[1] = _0 - (_i + bvirt) + (bvirt - t1);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        a[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        a[3] = u3;\n        s1 = ytail * bx;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ytail;\n        ahi = c - (c - ytail);\n        alo = ytail - ahi;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bx;\n        bhi = c - (c - bx);\n        blo = bx - bhi;\n        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n        t1 = xtail * by;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * xtail;\n        ahi = c - (c - xtail);\n        alo = xtail - ahi;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * by;\n        bhi = c - (c - by);\n        blo = by - bhi;\n        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n        _i = s0 - t0;\n        bvirt = s0 - _i;\n        b[0] = s0 - (_i + bvirt) + (bvirt - t0);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 - t1;\n        bvirt = _0 - _i;\n        b[1] = _0 - (_i + bvirt) + (bvirt - t1);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        b[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        b[3] = u3;\n        return 4;\n    }\n}\nfunction $33f004acf70f40d1$var$tailadd(finlen, a, b, k, z) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;\n    s1 = a * b;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * a;\n    ahi = c - (c - a);\n    alo = a - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * k;\n    bhi = c - (c - k);\n    blo = k - bhi;\n    _i = s0 * k;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * s0;\n    ahi = c - (c - s0);\n    alo = s0 - ahi;\n    $33f004acf70f40d1$var$u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n    _j = s1 * k;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * s1;\n    ahi = c - (c - s1);\n    alo = s1 - ahi;\n    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n    _k = _i + _0;\n    bvirt = _k - _i;\n    $33f004acf70f40d1$var$u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n    u3 = _j + _k;\n    $33f004acf70f40d1$var$u[2] = _k - (u3 - _j);\n    $33f004acf70f40d1$var$u[3] = u3;\n    finlen = $33f004acf70f40d1$var$finadd(finlen, 4, $33f004acf70f40d1$var$u);\n    if (z !== 0) {\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * z;\n        bhi = c - (c - z);\n        blo = z - bhi;\n        _i = s0 * z;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * s0;\n        ahi = c - (c - s0);\n        alo = s0 - ahi;\n        $33f004acf70f40d1$var$u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n        _j = s1 * z;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * s1;\n        ahi = c - (c - s1);\n        alo = s1 - ahi;\n        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n        _k = _i + _0;\n        bvirt = _k - _i;\n        $33f004acf70f40d1$var$u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n        u3 = _j + _k;\n        $33f004acf70f40d1$var$u[2] = _k - (u3 - _j);\n        $33f004acf70f40d1$var$u[3] = u3;\n        finlen = $33f004acf70f40d1$var$finadd(finlen, 4, $33f004acf70f40d1$var$u);\n    }\n    return finlen;\n}\nfunction $33f004acf70f40d1$var$orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail;\n    let adytail, bdytail, cdytail;\n    let adztail, bdztail, cdztail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n    s1 = bdx * cdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $33f004acf70f40d1$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $33f004acf70f40d1$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $33f004acf70f40d1$var$bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $33f004acf70f40d1$var$bc[3] = u3;\n    s1 = cdx * ady;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $33f004acf70f40d1$var$ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $33f004acf70f40d1$var$ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $33f004acf70f40d1$var$ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $33f004acf70f40d1$var$ca[3] = u3;\n    s1 = adx * bdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $33f004acf70f40d1$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $33f004acf70f40d1$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $33f004acf70f40d1$var$ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $33f004acf70f40d1$var$ab[3] = u3;\n    finlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $33f004acf70f40d1$var$bc, adz, $33f004acf70f40d1$var$_8), $33f004acf70f40d1$var$_8, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $33f004acf70f40d1$var$ca, bdz, $33f004acf70f40d1$var$_8b), $33f004acf70f40d1$var$_8b, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $33f004acf70f40d1$var$ab, cdz, $33f004acf70f40d1$var$_8), $33f004acf70f40d1$var$_8, $33f004acf70f40d1$var$fin);\n    let det = (0, $901225bbbd8afd6a$export$9f3a0795ca2cc944)(finlen, $33f004acf70f40d1$var$fin);\n    let errbound = $33f004acf70f40d1$var$o3derrboundB * permanent;\n    if (det >= errbound || -det >= errbound) return det;\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    bvirt = az - adz;\n    adztail = az - (adz + bvirt) + (bvirt - dz);\n    bvirt = bz - bdz;\n    bdztail = bz - (bdz + bvirt) + (bvirt - dz);\n    bvirt = cz - cdz;\n    cdztail = cz - (cdz + bvirt) + (bvirt - dz);\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0 && adztail === 0 && bdztail === 0 && cdztail === 0) return det;\n    errbound = $33f004acf70f40d1$var$o3derrboundC * permanent + (0, $901225bbbd8afd6a$export$a4103c3ab16b06d7) * Math.abs(det);\n    det += adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) + bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) + cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);\n    if (det >= errbound || -det >= errbound) return det;\n    const at_len = $33f004acf70f40d1$var$tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, $33f004acf70f40d1$var$at_b, $33f004acf70f40d1$var$at_c);\n    const bt_len = $33f004acf70f40d1$var$tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, $33f004acf70f40d1$var$bt_c, $33f004acf70f40d1$var$bt_a);\n    const ct_len = $33f004acf70f40d1$var$tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, $33f004acf70f40d1$var$ct_a, $33f004acf70f40d1$var$ct_b);\n    const bctlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(bt_len, $33f004acf70f40d1$var$bt_c, ct_len, $33f004acf70f40d1$var$ct_b, $33f004acf70f40d1$var$bct);\n    finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bctlen, $33f004acf70f40d1$var$bct, adz, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16);\n    const catlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(ct_len, $33f004acf70f40d1$var$ct_a, at_len, $33f004acf70f40d1$var$at_c, $33f004acf70f40d1$var$cat);\n    finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(catlen, $33f004acf70f40d1$var$cat, bdz, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16);\n    const abtlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(at_len, $33f004acf70f40d1$var$at_b, bt_len, $33f004acf70f40d1$var$bt_a, $33f004acf70f40d1$var$abt);\n    finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(abtlen, $33f004acf70f40d1$var$abt, cdz, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16);\n    if (adztail !== 0) {\n        finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $33f004acf70f40d1$var$bc, adztail, $33f004acf70f40d1$var$_12), $33f004acf70f40d1$var$_12);\n        finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bctlen, $33f004acf70f40d1$var$bct, adztail, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16);\n    }\n    if (bdztail !== 0) {\n        finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $33f004acf70f40d1$var$ca, bdztail, $33f004acf70f40d1$var$_12), $33f004acf70f40d1$var$_12);\n        finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(catlen, $33f004acf70f40d1$var$cat, bdztail, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16);\n    }\n    if (cdztail !== 0) {\n        finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $33f004acf70f40d1$var$ab, cdztail, $33f004acf70f40d1$var$_12), $33f004acf70f40d1$var$_12);\n        finlen = $33f004acf70f40d1$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(abtlen, $33f004acf70f40d1$var$abt, cdztail, $33f004acf70f40d1$var$_16), $33f004acf70f40d1$var$_16);\n    }\n    if (adxtail !== 0) {\n        if (bdytail !== 0) finlen = $33f004acf70f40d1$var$tailadd(finlen, adxtail, bdytail, cdz, cdztail);\n        if (cdytail !== 0) finlen = $33f004acf70f40d1$var$tailadd(finlen, -adxtail, cdytail, bdz, bdztail);\n    }\n    if (bdxtail !== 0) {\n        if (cdytail !== 0) finlen = $33f004acf70f40d1$var$tailadd(finlen, bdxtail, cdytail, adz, adztail);\n        if (adytail !== 0) finlen = $33f004acf70f40d1$var$tailadd(finlen, -bdxtail, adytail, cdz, cdztail);\n    }\n    if (cdxtail !== 0) {\n        if (adytail !== 0) finlen = $33f004acf70f40d1$var$tailadd(finlen, cdxtail, adytail, bdz, bdztail);\n        if (bdytail !== 0) finlen = $33f004acf70f40d1$var$tailadd(finlen, -cdxtail, bdytail, adz, adztail);\n    }\n    return $33f004acf70f40d1$var$fin[finlen - 1];\n}\nfunction $33f004acf70f40d1$export$248ff23af2e93e3e(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n    const det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady);\n    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\n    const errbound = $33f004acf70f40d1$var$o3derrboundA * permanent;\n    if (det > errbound || -det > errbound) return det;\n    return $33f004acf70f40d1$var$orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);\n}\nfunction $33f004acf70f40d1$export$407220085d2c43a5(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n    return adx * (bdy * cdz - bdz * cdy) + bdx * (cdy * adz - cdz * ady) + cdx * (ady * bdz - adz * bdy);\n}\n\n\n\nconst $abd45a38011b6fa7$var$iccerrboundA = (10 + 96 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $abd45a38011b6fa7$var$iccerrboundB = (4 + 48 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $abd45a38011b6fa7$var$iccerrboundC = (44 + 576 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $abd45a38011b6fa7$var$bc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$ca = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$ab = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$aa = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$bb = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$cc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$u = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$v = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$axtbc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$aytbc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$bxtca = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$bytca = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$cxtab = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$cytab = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$abt = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$bct = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$cat = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$abtt = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$bctt = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$catt = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $abd45a38011b6fa7$var$_8 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $abd45a38011b6fa7$var$_16 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(16);\nconst $abd45a38011b6fa7$var$_16b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(16);\nconst $abd45a38011b6fa7$var$_16c = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(16);\nconst $abd45a38011b6fa7$var$_32 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(32);\nconst $abd45a38011b6fa7$var$_32b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(32);\nconst $abd45a38011b6fa7$var$_48 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(48);\nconst $abd45a38011b6fa7$var$_64 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(64);\nlet $abd45a38011b6fa7$var$fin = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nlet $abd45a38011b6fa7$var$fin2 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nfunction $abd45a38011b6fa7$var$finadd(finlen, a, alen) {\n    finlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(finlen, $abd45a38011b6fa7$var$fin, a, alen, $abd45a38011b6fa7$var$fin2);\n    const tmp = $abd45a38011b6fa7$var$fin;\n    $abd45a38011b6fa7$var$fin = $abd45a38011b6fa7$var$fin2;\n    $abd45a38011b6fa7$var$fin2 = tmp;\n    return finlen;\n}\nfunction $abd45a38011b6fa7$var$incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;\n    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;\n    let abtlen, bctlen, catlen;\n    let abttlen, bcttlen, cattlen;\n    let n1, n0;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    s1 = bdx * cdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $abd45a38011b6fa7$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $abd45a38011b6fa7$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $abd45a38011b6fa7$var$bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $abd45a38011b6fa7$var$bc[3] = u3;\n    s1 = cdx * ady;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $abd45a38011b6fa7$var$ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $abd45a38011b6fa7$var$ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $abd45a38011b6fa7$var$ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $abd45a38011b6fa7$var$ca[3] = u3;\n    s1 = adx * bdy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $abd45a38011b6fa7$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $abd45a38011b6fa7$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $abd45a38011b6fa7$var$ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $abd45a38011b6fa7$var$ab[3] = u3;\n    finlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bc, adx, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, adx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bc, ady, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, ady, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ca, bdx, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, bdx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ca, bdy, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, bdy, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, $abd45a38011b6fa7$var$_32b), $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ab, cdx, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, cdx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ab, cdy, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, cdy, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$fin);\n    let det = (0, $901225bbbd8afd6a$export$9f3a0795ca2cc944)(finlen, $abd45a38011b6fa7$var$fin);\n    let errbound = $abd45a38011b6fa7$var$iccerrboundB * permanent;\n    if (det >= errbound || -det >= errbound) return det;\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) return det;\n    errbound = $abd45a38011b6fa7$var$iccerrboundC * permanent + (0, $901225bbbd8afd6a$export$a4103c3ab16b06d7) * Math.abs(det);\n    det += (adx * adx + ady * ady) * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + 2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx) + ((bdx * bdx + bdy * bdy) * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + 2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) + ((cdx * cdx + cdy * cdy) * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + 2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));\n    if (det >= errbound || -det >= errbound) return det;\n    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n        s1 = adx * adx;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n        ahi = c - (c - adx);\n        alo = adx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = ady * ady;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ady;\n        ahi = c - (c - ady);\n        alo = ady - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        $abd45a38011b6fa7$var$aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        $abd45a38011b6fa7$var$aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        $abd45a38011b6fa7$var$aa[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        $abd45a38011b6fa7$var$aa[3] = u3;\n    }\n    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n        s1 = bdx * bdx;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n        ahi = c - (c - bdx);\n        alo = bdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = bdy * bdy;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdy;\n        ahi = c - (c - bdy);\n        alo = bdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        $abd45a38011b6fa7$var$bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        $abd45a38011b6fa7$var$bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        $abd45a38011b6fa7$var$bb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        $abd45a38011b6fa7$var$bb[3] = u3;\n    }\n    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n        s1 = cdx * cdx;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n        ahi = c - (c - cdx);\n        alo = cdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = cdy * cdy;\n        c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdy;\n        ahi = c - (c - cdy);\n        alo = cdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        $abd45a38011b6fa7$var$cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        $abd45a38011b6fa7$var$cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        $abd45a38011b6fa7$var$cc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        $abd45a38011b6fa7$var$cc[3] = u3;\n    }\n    if (adxtail !== 0) {\n        axtbclen = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bc, adxtail, $abd45a38011b6fa7$var$axtbc);\n        finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(axtbclen, $abd45a38011b6fa7$var$axtbc, 2 * adx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$cc, adxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, bdy, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bb, adxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, -cdy, $abd45a38011b6fa7$var$_16c), $abd45a38011b6fa7$var$_16c, $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n    }\n    if (adytail !== 0) {\n        aytbclen = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bc, adytail, $abd45a38011b6fa7$var$aytbc);\n        finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(aytbclen, $abd45a38011b6fa7$var$aytbc, 2 * ady, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bb, adytail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, cdx, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$cc, adytail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, -bdx, $abd45a38011b6fa7$var$_16c), $abd45a38011b6fa7$var$_16c, $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n    }\n    if (bdxtail !== 0) {\n        bxtcalen = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ca, bdxtail, $abd45a38011b6fa7$var$bxtca);\n        finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bxtcalen, $abd45a38011b6fa7$var$bxtca, 2 * bdx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$aa, bdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, cdy, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$cc, bdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, -ady, $abd45a38011b6fa7$var$_16c), $abd45a38011b6fa7$var$_16c, $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n    }\n    if (bdytail !== 0) {\n        bytcalen = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ca, bdytail, $abd45a38011b6fa7$var$bytca);\n        finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bytcalen, $abd45a38011b6fa7$var$bytca, 2 * bdy, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$cc, bdytail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, adx, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$aa, bdytail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, -cdx, $abd45a38011b6fa7$var$_16c), $abd45a38011b6fa7$var$_16c, $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n    }\n    if (cdxtail !== 0) {\n        cxtablen = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ab, cdxtail, $abd45a38011b6fa7$var$cxtab);\n        finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(cxtablen, $abd45a38011b6fa7$var$cxtab, 2 * cdx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bb, cdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, ady, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$aa, cdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, -bdy, $abd45a38011b6fa7$var$_16c), $abd45a38011b6fa7$var$_16c, $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n    }\n    if (cdytail !== 0) {\n        cytablen = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$ab, cdytail, $abd45a38011b6fa7$var$cytab);\n        finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(cytablen, $abd45a38011b6fa7$var$cytab, 2 * cdy, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$aa, cdytail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, bdx, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bb, cdytail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, -adx, $abd45a38011b6fa7$var$_16c), $abd45a38011b6fa7$var$_16c, $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n    }\n    if (adxtail !== 0 || adytail !== 0) {\n        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n            s1 = bdxtail * cdy;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdy;\n            bhi = c - (c - cdy);\n            blo = cdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * cdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            $abd45a38011b6fa7$var$u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            $abd45a38011b6fa7$var$u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$u[3] = u3;\n            s1 = cdxtail * -bdy;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * -bdy;\n            bhi = c - (c - -bdy);\n            blo = -bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * -bdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * -bdytail;\n            bhi = c - (c - -bdytail);\n            blo = -bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            $abd45a38011b6fa7$var$v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            $abd45a38011b6fa7$var$v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$v[3] = u3;\n            bctlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(4, $abd45a38011b6fa7$var$u, 4, $abd45a38011b6fa7$var$v, $abd45a38011b6fa7$var$bct);\n            s1 = bdxtail * cdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdxtail * bdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            $abd45a38011b6fa7$var$bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            $abd45a38011b6fa7$var$bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$bctt[3] = u3;\n            bcttlen = 4;\n        } else {\n            $abd45a38011b6fa7$var$bct[0] = 0;\n            bctlen = 1;\n            $abd45a38011b6fa7$var$bctt[0] = 0;\n            bcttlen = 1;\n        }\n        if (adxtail !== 0) {\n            const len = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bctlen, $abd45a38011b6fa7$var$bct, adxtail, $abd45a38011b6fa7$var$_16c);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(axtbclen, $abd45a38011b6fa7$var$axtbc, adxtail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, 2 * adx, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n            const len2 = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bcttlen, $abd45a38011b6fa7$var$bctt, adxtail, $abd45a38011b6fa7$var$_8);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, 2 * adx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, adxtail, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, adxtail, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64);\n            if (bdytail !== 0) finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$cc, adxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, bdytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16);\n            if (cdytail !== 0) finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bb, -adxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, cdytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16);\n        }\n        if (adytail !== 0) {\n            const len = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bctlen, $abd45a38011b6fa7$var$bct, adytail, $abd45a38011b6fa7$var$_16c);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(aytbclen, $abd45a38011b6fa7$var$aytbc, adytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, 2 * ady, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n            const len2 = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bcttlen, $abd45a38011b6fa7$var$bctt, adytail, $abd45a38011b6fa7$var$_8);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, 2 * ady, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, adytail, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, adytail, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64);\n        }\n    }\n    if (bdxtail !== 0 || bdytail !== 0) {\n        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n            s1 = cdxtail * ady;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ady;\n            bhi = c - (c - ady);\n            blo = ady - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * adytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            $abd45a38011b6fa7$var$u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            $abd45a38011b6fa7$var$u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$u[3] = u3;\n            n1 = -cdy;\n            n0 = -cdytail;\n            s1 = adxtail * n1;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * n0;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            $abd45a38011b6fa7$var$v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            $abd45a38011b6fa7$var$v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$v[3] = u3;\n            catlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(4, $abd45a38011b6fa7$var$u, 4, $abd45a38011b6fa7$var$v, $abd45a38011b6fa7$var$cat);\n            s1 = cdxtail * adytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adxtail * cdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            $abd45a38011b6fa7$var$catt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            $abd45a38011b6fa7$var$catt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$catt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$catt[3] = u3;\n            cattlen = 4;\n        } else {\n            $abd45a38011b6fa7$var$cat[0] = 0;\n            catlen = 1;\n            $abd45a38011b6fa7$var$catt[0] = 0;\n            cattlen = 1;\n        }\n        if (bdxtail !== 0) {\n            const len = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(catlen, $abd45a38011b6fa7$var$cat, bdxtail, $abd45a38011b6fa7$var$_16c);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bxtcalen, $abd45a38011b6fa7$var$bxtca, bdxtail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, 2 * bdx, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n            const len2 = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(cattlen, $abd45a38011b6fa7$var$catt, bdxtail, $abd45a38011b6fa7$var$_8);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, 2 * bdx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, bdxtail, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, bdxtail, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64);\n            if (cdytail !== 0) finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$aa, bdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, cdytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16);\n            if (adytail !== 0) finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$cc, -bdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, adytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16);\n        }\n        if (bdytail !== 0) {\n            const len = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(catlen, $abd45a38011b6fa7$var$cat, bdytail, $abd45a38011b6fa7$var$_16c);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(bytcalen, $abd45a38011b6fa7$var$bytca, bdytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, 2 * bdy, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n            const len2 = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(cattlen, $abd45a38011b6fa7$var$catt, bdytail, $abd45a38011b6fa7$var$_8);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, 2 * bdy, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, bdytail, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, bdytail, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64);\n        }\n    }\n    if (cdxtail !== 0 || cdytail !== 0) {\n        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n            s1 = adxtail * bdy;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdy;\n            bhi = c - (c - bdy);\n            blo = bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * bdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            $abd45a38011b6fa7$var$u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            $abd45a38011b6fa7$var$u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$u[3] = u3;\n            n1 = -ady;\n            n0 = -adytail;\n            s1 = bdxtail * n1;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * n0;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            $abd45a38011b6fa7$var$v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            $abd45a38011b6fa7$var$v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$v[3] = u3;\n            abtlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(4, $abd45a38011b6fa7$var$u, 4, $abd45a38011b6fa7$var$v, $abd45a38011b6fa7$var$abt);\n            s1 = adxtail * bdytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdxtail * adytail;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            $abd45a38011b6fa7$var$abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            $abd45a38011b6fa7$var$abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            $abd45a38011b6fa7$var$abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            $abd45a38011b6fa7$var$abtt[3] = u3;\n            abttlen = 4;\n        } else {\n            $abd45a38011b6fa7$var$abt[0] = 0;\n            abtlen = 1;\n            $abd45a38011b6fa7$var$abtt[0] = 0;\n            abttlen = 1;\n        }\n        if (cdxtail !== 0) {\n            const len = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(abtlen, $abd45a38011b6fa7$var$abt, cdxtail, $abd45a38011b6fa7$var$_16c);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(cxtablen, $abd45a38011b6fa7$var$cxtab, cdxtail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, 2 * cdx, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n            const len2 = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(abttlen, $abd45a38011b6fa7$var$abtt, cdxtail, $abd45a38011b6fa7$var$_8);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, 2 * cdx, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, cdxtail, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, cdxtail, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64);\n            if (adytail !== 0) finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$bb, cdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, adytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16);\n            if (bdytail !== 0) finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, $abd45a38011b6fa7$var$aa, -cdxtail, $abd45a38011b6fa7$var$_8), $abd45a38011b6fa7$var$_8, bdytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16);\n        }\n        if (cdytail !== 0) {\n            const len = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(abtlen, $abd45a38011b6fa7$var$abt, cdytail, $abd45a38011b6fa7$var$_16c);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(cytablen, $abd45a38011b6fa7$var$cytab, cdytail, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, 2 * cdy, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_48), $abd45a38011b6fa7$var$_48);\n            const len2 = (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(abttlen, $abd45a38011b6fa7$var$abtt, cdytail, $abd45a38011b6fa7$var$_8);\n            finlen = $abd45a38011b6fa7$var$finadd(finlen, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, 2 * cdy, $abd45a38011b6fa7$var$_16), $abd45a38011b6fa7$var$_16, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len2, $abd45a38011b6fa7$var$_8, cdytail, $abd45a38011b6fa7$var$_16b), $abd45a38011b6fa7$var$_16b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $abd45a38011b6fa7$var$_16c, cdytail, $abd45a38011b6fa7$var$_32), $abd45a38011b6fa7$var$_32, $abd45a38011b6fa7$var$_32b, $abd45a38011b6fa7$var$_64), $abd45a38011b6fa7$var$_64);\n        }\n    }\n    return $abd45a38011b6fa7$var$fin[finlen - 1];\n}\nfunction $abd45a38011b6fa7$export$454d2cfe884d4dd6(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n    const alift = adx * adx + ady * ady;\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n    const blift = bdx * bdx + bdy * bdy;\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n    const clift = cdx * cdx + cdy * cdy;\n    const det = alift * (bdxcdy - cdxbdy) + blift * (cdxady - adxcdy) + clift * (adxbdy - bdxady);\n    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift + (Math.abs(cdxady) + Math.abs(adxcdy)) * blift + (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;\n    const errbound = $abd45a38011b6fa7$var$iccerrboundA * permanent;\n    if (det > errbound || -det > errbound) return det;\n    return $abd45a38011b6fa7$var$incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);\n}\nfunction $abd45a38011b6fa7$export$f98e78581b4485e6(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const ady = ay - dy;\n    const bdx = bx - dx;\n    const bdy = by - dy;\n    const cdx = cx - dx;\n    const cdy = cy - dy;\n    const abdet = adx * bdy - bdx * ady;\n    const bcdet = bdx * cdy - cdx * bdy;\n    const cadet = cdx * ady - adx * cdy;\n    const alift = adx * adx + ady * ady;\n    const blift = bdx * bdx + bdy * bdy;\n    const clift = cdx * cdx + cdy * cdy;\n    return alift * bcdet + blift * cadet + clift * abdet;\n}\n\n\n\nconst $e4760469e8335230$var$isperrboundA = (16 + 224 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $e4760469e8335230$var$isperrboundB = (5 + 72 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $e4760469e8335230$var$isperrboundC = (71 + 1408 * (0, $901225bbbd8afd6a$export$6c421550c66a327d)) * (0, $901225bbbd8afd6a$export$6c421550c66a327d) * (0, $901225bbbd8afd6a$export$6c421550c66a327d);\nconst $e4760469e8335230$var$ab = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$bc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$cd = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$de = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$ea = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$ac = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$bd = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$ce = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$da = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$eb = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(4);\nconst $e4760469e8335230$var$abc = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$bcd = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$cde = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$dea = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$eab = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$abd = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$bce = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$cda = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$deb = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$eac = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$adet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nconst $e4760469e8335230$var$bdet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nconst $e4760469e8335230$var$cdet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nconst $e4760469e8335230$var$ddet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nconst $e4760469e8335230$var$edet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nconst $e4760469e8335230$var$abdet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(2304);\nconst $e4760469e8335230$var$cddet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(2304);\nconst $e4760469e8335230$var$cdedet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(3456);\nconst $e4760469e8335230$var$deter = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(5760);\nconst $e4760469e8335230$var$_8 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $e4760469e8335230$var$_8b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $e4760469e8335230$var$_8c = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(8);\nconst $e4760469e8335230$var$_16 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(16);\nconst $e4760469e8335230$var$_24 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(24);\nconst $e4760469e8335230$var$_48 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(48);\nconst $e4760469e8335230$var$_48b = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(48);\nconst $e4760469e8335230$var$_96 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(96);\nconst $e4760469e8335230$var$_192 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(192);\nconst $e4760469e8335230$var$_384x = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(384);\nconst $e4760469e8335230$var$_384y = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(384);\nconst $e4760469e8335230$var$_384z = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(384);\nconst $e4760469e8335230$var$_768 = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(768);\nfunction $e4760469e8335230$var$sum_three_scale(a, b, c, az, bz, cz, out) {\n    return (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, a, az, $e4760469e8335230$var$_8), $e4760469e8335230$var$_8, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, b, bz, $e4760469e8335230$var$_8b), $e4760469e8335230$var$_8b, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)(4, c, cz, $e4760469e8335230$var$_8c), $e4760469e8335230$var$_8c, $e4760469e8335230$var$_16, out);\n}\nfunction $e4760469e8335230$var$liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {\n    const len = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(alen, a, blen, b, $e4760469e8335230$var$_48), $e4760469e8335230$var$_48, (0, $901225bbbd8afd6a$export$aef51622e549b8b0)((0, $901225bbbd8afd6a$export$8a63f25cc62965f1)(clen, c, dlen, d, $e4760469e8335230$var$_48b), $e4760469e8335230$var$_48b), $e4760469e8335230$var$_48b, $e4760469e8335230$var$_96);\n    return (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $e4760469e8335230$var$_96, x, $e4760469e8335230$var$_192), $e4760469e8335230$var$_192, x, $e4760469e8335230$var$_384x), $e4760469e8335230$var$_384x, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $e4760469e8335230$var$_96, y, $e4760469e8335230$var$_192), $e4760469e8335230$var$_192, y, $e4760469e8335230$var$_384y), $e4760469e8335230$var$_384y, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $e4760469e8335230$var$_96, z, $e4760469e8335230$var$_192), $e4760469e8335230$var$_192, z, $e4760469e8335230$var$_384z), $e4760469e8335230$var$_384z, $e4760469e8335230$var$_768, out);\n}\nfunction $e4760469e8335230$var$insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n    s1 = ax * by;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ay;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$ab[3] = u3;\n    s1 = bx * cy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * by;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$bc[3] = u3;\n    s1 = cx * dy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * cy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$cd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$cd[3] = u3;\n    s1 = dx * ey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * dy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$de[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$de[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$de[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$de[3] = u3;\n    s1 = ex * ay;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * ey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$ea[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$ea[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$ea[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$ea[3] = u3;\n    s1 = ax * cy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * ay;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$ac[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$ac[3] = u3;\n    s1 = bx * dy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * by;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$bd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$bd[3] = u3;\n    s1 = cx * ey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * cy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$ce[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$ce[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$ce[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$ce[3] = u3;\n    s1 = dx * ay;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * dy;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$da[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$da[3] = u3;\n    s1 = ex * by;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$eb[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$eb[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    $e4760469e8335230$var$eb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$eb[3] = u3;\n    const abclen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$ab, $e4760469e8335230$var$bc, $e4760469e8335230$var$ac, cz, az, -bz, $e4760469e8335230$var$abc);\n    const bcdlen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$bc, $e4760469e8335230$var$cd, $e4760469e8335230$var$bd, dz, bz, -cz, $e4760469e8335230$var$bcd);\n    const cdelen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$cd, $e4760469e8335230$var$de, $e4760469e8335230$var$ce, ez, cz, -dz, $e4760469e8335230$var$cde);\n    const dealen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$de, $e4760469e8335230$var$ea, $e4760469e8335230$var$da, az, dz, -ez, $e4760469e8335230$var$dea);\n    const eablen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$ea, $e4760469e8335230$var$ab, $e4760469e8335230$var$eb, bz, ez, -az, $e4760469e8335230$var$eab);\n    const abdlen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$ab, $e4760469e8335230$var$bd, $e4760469e8335230$var$da, dz, az, bz, $e4760469e8335230$var$abd);\n    const bcelen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$bc, $e4760469e8335230$var$ce, $e4760469e8335230$var$eb, ez, bz, cz, $e4760469e8335230$var$bce);\n    const cdalen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$cd, $e4760469e8335230$var$da, $e4760469e8335230$var$ac, az, cz, dz, $e4760469e8335230$var$cda);\n    const deblen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$de, $e4760469e8335230$var$eb, $e4760469e8335230$var$bd, bz, dz, ez, $e4760469e8335230$var$deb);\n    const eaclen = $e4760469e8335230$var$sum_three_scale($e4760469e8335230$var$ea, $e4760469e8335230$var$ac, $e4760469e8335230$var$ce, cz, ez, az, $e4760469e8335230$var$eac);\n    const deterlen = (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)($e4760469e8335230$var$liftexact(cdelen, $e4760469e8335230$var$cde, bcelen, $e4760469e8335230$var$bce, deblen, $e4760469e8335230$var$deb, bcdlen, $e4760469e8335230$var$bcd, ax, ay, az, $e4760469e8335230$var$adet), $e4760469e8335230$var$adet, $e4760469e8335230$var$liftexact(dealen, $e4760469e8335230$var$dea, cdalen, $e4760469e8335230$var$cda, eaclen, $e4760469e8335230$var$eac, cdelen, $e4760469e8335230$var$cde, bx, by, bz, $e4760469e8335230$var$bdet), $e4760469e8335230$var$bdet, (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)($e4760469e8335230$var$liftexact(eablen, $e4760469e8335230$var$eab, deblen, $e4760469e8335230$var$deb, abdlen, $e4760469e8335230$var$abd, dealen, $e4760469e8335230$var$dea, cx, cy, cz, $e4760469e8335230$var$cdet), $e4760469e8335230$var$cdet, $e4760469e8335230$var$liftexact(abclen, $e4760469e8335230$var$abc, eaclen, $e4760469e8335230$var$eac, bcelen, $e4760469e8335230$var$bce, eablen, $e4760469e8335230$var$eab, dx, dy, dz, $e4760469e8335230$var$ddet), $e4760469e8335230$var$ddet, $e4760469e8335230$var$liftexact(bcdlen, $e4760469e8335230$var$bcd, abdlen, $e4760469e8335230$var$abd, cdalen, $e4760469e8335230$var$cda, abclen, $e4760469e8335230$var$abc, ex, ey, ez, $e4760469e8335230$var$edet), $e4760469e8335230$var$edet, $e4760469e8335230$var$cddet, $e4760469e8335230$var$cdedet), $e4760469e8335230$var$cdedet, $e4760469e8335230$var$abdet, $e4760469e8335230$var$deter);\n    return $e4760469e8335230$var$deter[deterlen - 1];\n}\nconst $e4760469e8335230$var$xdet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(96);\nconst $e4760469e8335230$var$ydet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(96);\nconst $e4760469e8335230$var$zdet = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(96);\nconst $e4760469e8335230$var$fin = (0, $901225bbbd8afd6a$export$202e0172ed3c7be0)(1152);\nfunction $e4760469e8335230$var$liftadapt(a, b, c, az, bz, cz, x, y, z, out) {\n    const len = $e4760469e8335230$var$sum_three_scale(a, b, c, az, bz, cz, $e4760469e8335230$var$_24);\n    return (0, $901225bbbd8afd6a$export$195a93e4bd4d876f)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $e4760469e8335230$var$_24, x, $e4760469e8335230$var$_48), $e4760469e8335230$var$_48, x, $e4760469e8335230$var$xdet), $e4760469e8335230$var$xdet, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $e4760469e8335230$var$_24, y, $e4760469e8335230$var$_48), $e4760469e8335230$var$_48, y, $e4760469e8335230$var$ydet), $e4760469e8335230$var$ydet, (0, $901225bbbd8afd6a$export$dcdf75081b88279d)((0, $901225bbbd8afd6a$export$dcdf75081b88279d)(len, $e4760469e8335230$var$_24, z, $e4760469e8335230$var$_48), $e4760469e8335230$var$_48, z, $e4760469e8335230$var$zdet), $e4760469e8335230$var$zdet, $e4760469e8335230$var$_192, out);\n}\nfunction $e4760469e8335230$var$insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {\n    let ab3, bc3, cd3, da3, ac3, bd3;\n    let aextail, bextail, cextail, dextail;\n    let aeytail, beytail, ceytail, deytail;\n    let aeztail, beztail, ceztail, deztail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n    s1 = aex * bey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bex * aey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ab3 = _j + _i;\n    bvirt = ab3 - _j;\n    $e4760469e8335230$var$ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$ab[3] = ab3;\n    s1 = bex * cey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * bey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bc3 = _j + _i;\n    bvirt = bc3 - _j;\n    $e4760469e8335230$var$bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$bc[3] = bc3;\n    s1 = cex * dey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * cey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    cd3 = _j + _i;\n    bvirt = cd3 - _j;\n    $e4760469e8335230$var$cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$cd[3] = cd3;\n    s1 = dex * aey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = aex * dey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    da3 = _j + _i;\n    bvirt = da3 - _j;\n    $e4760469e8335230$var$da[2] = _j - (da3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$da[3] = da3;\n    s1 = aex * cey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * aey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ac3 = _j + _i;\n    bvirt = ac3 - _j;\n    $e4760469e8335230$var$ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$ac[3] = ac3;\n    s1 = bex * dey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * bey;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = (0, $901225bbbd8afd6a$export$8cfde575cbd41e40) * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    $e4760469e8335230$var$bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    $e4760469e8335230$var$bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bd3 = _j + _i;\n    bvirt = bd3 - _j;\n    $e4760469e8335230$var$bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);\n    $e4760469e8335230$var$bd[3] = bd3;\n    const finlen = (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$aef51622e549b8b0)($e4760469e8335230$var$liftadapt($e4760469e8335230$var$bc, $e4760469e8335230$var$cd, $e4760469e8335230$var$bd, dez, bez, -cez, aex, aey, aez, $e4760469e8335230$var$adet), $e4760469e8335230$var$adet), $e4760469e8335230$var$adet, $e4760469e8335230$var$liftadapt($e4760469e8335230$var$cd, $e4760469e8335230$var$da, $e4760469e8335230$var$ac, aez, cez, dez, bex, bey, bez, $e4760469e8335230$var$bdet), $e4760469e8335230$var$bdet, $e4760469e8335230$var$abdet), $e4760469e8335230$var$abdet, (0, $901225bbbd8afd6a$export$8a63f25cc62965f1)((0, $901225bbbd8afd6a$export$aef51622e549b8b0)($e4760469e8335230$var$liftadapt($e4760469e8335230$var$da, $e4760469e8335230$var$ab, $e4760469e8335230$var$bd, bez, dez, aez, cex, cey, cez, $e4760469e8335230$var$cdet), $e4760469e8335230$var$cdet), $e4760469e8335230$var$cdet, $e4760469e8335230$var$liftadapt($e4760469e8335230$var$ab, $e4760469e8335230$var$bc, $e4760469e8335230$var$ac, cez, aez, -bez, dex, dey, dez, $e4760469e8335230$var$ddet), $e4760469e8335230$var$ddet, $e4760469e8335230$var$cddet), $e4760469e8335230$var$cddet, $e4760469e8335230$var$fin);\n    let det = (0, $901225bbbd8afd6a$export$9f3a0795ca2cc944)(finlen, $e4760469e8335230$var$fin);\n    let errbound = $e4760469e8335230$var$isperrboundB * permanent;\n    if (det >= errbound || -det >= errbound) return det;\n    bvirt = ax - aex;\n    aextail = ax - (aex + bvirt) + (bvirt - ex);\n    bvirt = ay - aey;\n    aeytail = ay - (aey + bvirt) + (bvirt - ey);\n    bvirt = az - aez;\n    aeztail = az - (aez + bvirt) + (bvirt - ez);\n    bvirt = bx - bex;\n    bextail = bx - (bex + bvirt) + (bvirt - ex);\n    bvirt = by - bey;\n    beytail = by - (bey + bvirt) + (bvirt - ey);\n    bvirt = bz - bez;\n    beztail = bz - (bez + bvirt) + (bvirt - ez);\n    bvirt = cx - cex;\n    cextail = cx - (cex + bvirt) + (bvirt - ex);\n    bvirt = cy - cey;\n    ceytail = cy - (cey + bvirt) + (bvirt - ey);\n    bvirt = cz - cez;\n    ceztail = cz - (cez + bvirt) + (bvirt - ez);\n    bvirt = dx - dex;\n    dextail = dx - (dex + bvirt) + (bvirt - ex);\n    bvirt = dy - dey;\n    deytail = dy - (dey + bvirt) + (bvirt - ey);\n    bvirt = dz - dez;\n    deztail = dz - (dez + bvirt) + (bvirt - ez);\n    if (aextail === 0 && aeytail === 0 && aeztail === 0 && bextail === 0 && beytail === 0 && beztail === 0 && cextail === 0 && ceytail === 0 && ceztail === 0 && dextail === 0 && deytail === 0 && deztail === 0) return det;\n    errbound = $e4760469e8335230$var$isperrboundC * permanent + (0, $901225bbbd8afd6a$export$a4103c3ab16b06d7) * Math.abs(det);\n    const abeps = aex * beytail + bey * aextail - (aey * bextail + bex * aeytail);\n    const bceps = bex * ceytail + cey * bextail - (bey * cextail + cex * beytail);\n    const cdeps = cex * deytail + dey * cextail - (cey * dextail + dex * ceytail);\n    const daeps = dex * aeytail + aey * dextail - (dey * aextail + aex * deytail);\n    const aceps = aex * ceytail + cey * aextail - (aey * cextail + cex * aeytail);\n    const bdeps = bex * deytail + dey * bextail - (bey * dextail + dex * beytail);\n    det += (bex * bex + bey * bey + bez * bez) * (cez * daeps + dez * aceps + aez * cdeps + (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) * (aez * bceps - bez * aceps + cez * abeps + (aeztail * bc3 - beztail * ac3 + ceztail * ab3)) - ((aex * aex + aey * aey + aez * aez) * (bez * cdeps - cez * bdeps + dez * bceps + (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) * (dez * abeps + aez * bdeps + bez * daeps + (deztail * ab3 + aeztail * bd3 + beztail * da3))) + 2 * ((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) + (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3) - ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) + (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));\n    if (det >= errbound || -det >= errbound) return det;\n    return $e4760469e8335230$var$insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);\n}\nfunction $e4760469e8335230$export$7846ecd8d3a5d1ac(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n    const aexbey = aex * bey;\n    const bexaey = bex * aey;\n    const ab = aexbey - bexaey;\n    const bexcey = bex * cey;\n    const cexbey = cex * bey;\n    const bc = bexcey - cexbey;\n    const cexdey = cex * dey;\n    const dexcey = dex * cey;\n    const cd = cexdey - dexcey;\n    const dexaey = dex * aey;\n    const aexdey = aex * dey;\n    const da = dexaey - aexdey;\n    const aexcey = aex * cey;\n    const cexaey = cex * aey;\n    const ac = aexcey - cexaey;\n    const bexdey = bex * dey;\n    const dexbey = dex * bey;\n    const bd = bexdey - dexbey;\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n    const det = clift * (dez * ab + aez * bd + bez * da) - dlift * (aez * bc - bez * ac + cez * ab) + (alift * (bez * cd - cez * bd + dez * bc) - blift * (cez * da + dez * ac + aez * cd));\n    const aezplus = Math.abs(aez);\n    const bezplus = Math.abs(bez);\n    const cezplus = Math.abs(cez);\n    const dezplus = Math.abs(dez);\n    const aexbeyplus = Math.abs(aexbey) + Math.abs(bexaey);\n    const bexceyplus = Math.abs(bexcey) + Math.abs(cexbey);\n    const cexdeyplus = Math.abs(cexdey) + Math.abs(dexcey);\n    const dexaeyplus = Math.abs(dexaey) + Math.abs(aexdey);\n    const aexceyplus = Math.abs(aexcey) + Math.abs(cexaey);\n    const bexdeyplus = Math.abs(bexdey) + Math.abs(dexbey);\n    const permanent = (cexdeyplus * bezplus + bexdeyplus * cezplus + bexceyplus * dezplus) * alift + (dexaeyplus * cezplus + aexceyplus * dezplus + cexdeyplus * aezplus) * blift + (aexbeyplus * dezplus + bexdeyplus * aezplus + dexaeyplus * bezplus) * clift + (bexceyplus * aezplus + aexceyplus * bezplus + aexbeyplus * cezplus) * dlift;\n    const errbound = $e4760469e8335230$var$isperrboundA * permanent;\n    if (det > errbound || -det > errbound) return det;\n    return -$e4760469e8335230$var$insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);\n}\nfunction $e4760469e8335230$export$11235b985c819946(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {\n    const aex = pax - pex;\n    const bex = pbx - pex;\n    const cex = pcx - pex;\n    const dex = pdx - pex;\n    const aey = pay - pey;\n    const bey = pby - pey;\n    const cey = pcy - pey;\n    const dey = pdy - pey;\n    const aez = paz - pez;\n    const bez = pbz - pez;\n    const cez = pcz - pez;\n    const dez = pdz - pez;\n    const ab = aex * bey - bex * aey;\n    const bc = bex * cey - cex * bey;\n    const cd = cex * dey - dex * cey;\n    const da = dex * aey - aex * dey;\n    const ac = aex * cey - cex * aey;\n    const bd = bex * dey - dex * bey;\n    const abc = aez * bc - bez * ac + cez * ab;\n    const bcd = bez * cd - cez * bd + dez * bc;\n    const cda = cez * da + dez * ac + aez * cd;\n    const dab = dez * ab + aez * bd + bez * da;\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n    return clift * dab - dlift * abc + (alift * bcd - blift * cda);\n}\n\n\n\n\nconst $7910d402b5fcb5cd$var$EPSILON = Math.pow(2, -52);\nconst $7910d402b5fcb5cd$var$EDGE_STACK = new Uint32Array(512);\nclass $7910d402b5fcb5cd$export$2e2bcd8739ae039 {\n    static from(points, getX = $7910d402b5fcb5cd$var$defaultGetX, getY = $7910d402b5fcb5cd$var$defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n        for(let i = 0; i < n; i++){\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n        return new $7910d402b5fcb5cd$export$2e2bcd8739ae039(coords);\n    }\n    constructor(coords){\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== \"number\") throw new Error(\"Expected coords to contain numbers.\");\n        this.coords = coords;\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n        this.update();\n    }\n    update() {\n        const { coords: coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;\n        const n = coords.length >> 1;\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for(let i = 0; i < n; i++){\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n        let i0, i1, i2;\n        // pick a seed point close to the center\n        for(let i = 0, minDist = Infinity; i < n; i++){\n            const d = $7910d402b5fcb5cd$var$dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n        // find the point closest to the seed\n        for(let i = 0, minDist = Infinity; i < n; i++){\n            if (i === i0) continue;\n            const d = $7910d402b5fcb5cd$var$dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n        let minRadius = Infinity;\n        // find the third point which forms the smallest circumcircle with the first two\n        for(let i = 0; i < n; i++){\n            if (i === i0 || i === i1) continue;\n            const r = $7910d402b5fcb5cd$var$circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for(let i = 0; i < n; i++)this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];\n            $7910d402b5fcb5cd$var$quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for(let i = 0, d0 = -Infinity; i < n; i++){\n                const id = this._ids[i];\n                const d = this._dists[id];\n                if (d > d0) {\n                    hull[j++] = id;\n                    d0 = d;\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n        // swap the order of the seed points for counter-clockwise orientation\n        if ((0, $1b8ebe1b5d7dc8a2$export$bbb923599a46a7d8)(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n        const center = $7910d402b5fcb5cd$var$circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n        for(let i = 0; i < n; i++)this._dists[i] = $7910d402b5fcb5cd$var$dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        // sort the points by distance from the seed triangle circumcenter\n        $7910d402b5fcb5cd$var$quicksort(this._ids, this._dists, 0, n - 1);\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n        for(let k = 0, xp, yp; k < this._ids.length; k++){\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= $7910d402b5fcb5cd$var$EPSILON && Math.abs(y - yp) <= $7910d402b5fcb5cd$var$EPSILON) continue;\n            xp = x;\n            yp = y;\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for(let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++){\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n            start = hullPrev[start];\n            let e = start, q;\n            while(q = hullNext[e], (0, $1b8ebe1b5d7dc8a2$export$bbb923599a46a7d8)(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0){\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while(q = hullNext[n], (0, $1b8ebe1b5d7dc8a2$export$bbb923599a46a7d8)(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0){\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) while(q = hullPrev[e], (0, $1b8ebe1b5d7dc8a2$export$bbb923599a46a7d8)(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0){\n                t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                this._legalize(t + 2);\n                hullTri[q] = t;\n                hullNext[e] = e; // mark as removed\n                hullSize--;\n                e = q;\n            }\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n        this.hull = new Uint32Array(hullSize);\n        for(let i = 0, e = this._hullStart; i < hullSize; i++){\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n    _hashKey(x, y) {\n        return Math.floor($7910d402b5fcb5cd$var$pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n    _legalize(a) {\n        const { _triangles: triangles, _halfedges: halfedges, coords: coords } = this;\n        let i = 0;\n        let ar = 0;\n        // recursion eliminated with a fixed-size stack\n        while(true){\n            const b = halfedges[a];\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */ const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n            if (b === -1) {\n                if (i === 0) break;\n                a = $7910d402b5fcb5cd$var$EDGE_STACK[--i];\n                continue;\n            }\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n            const illegal = $7910d402b5fcb5cd$var$inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n                const hbl = halfedges[bl];\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    }while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n                const br = b0 + (b + 1) % 3;\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < $7910d402b5fcb5cd$var$EDGE_STACK.length) $7910d402b5fcb5cd$var$EDGE_STACK[i++] = br;\n            } else {\n                if (i === 0) break;\n                a = $7910d402b5fcb5cd$var$EDGE_STACK[--i];\n            }\n        }\n        return ar;\n    }\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n        this.trianglesLen += 3;\n        return t;\n    }\n}\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction $7910d402b5fcb5cd$var$pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\nfunction $7910d402b5fcb5cd$var$dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\nfunction $7910d402b5fcb5cd$var$inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\nfunction $7910d402b5fcb5cd$var$circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n    return x * x + y * y;\n}\nfunction $7910d402b5fcb5cd$var$circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n    return {\n        x: x,\n        y: y\n    };\n}\nfunction $7910d402b5fcb5cd$var$quicksort(ids, dists, left, right) {\n    if (right - left <= 20) for(let i = left + 1; i <= right; i++){\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        let j = i - 1;\n        while(j >= left && dists[ids[j]] > tempDist)ids[j + 1] = ids[j--];\n        ids[j + 1] = temp;\n    }\n    else {\n        const median = left + right >> 1;\n        let i = left + 1;\n        let j = right;\n        $7910d402b5fcb5cd$var$swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) $7910d402b5fcb5cd$var$swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) $7910d402b5fcb5cd$var$swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) $7910d402b5fcb5cd$var$swap(ids, left, i);\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while(true){\n            do i++;\n            while (dists[ids[i]] < tempDist);\n            do j--;\n            while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            $7910d402b5fcb5cd$var$swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n        if (right - i + 1 >= j - left) {\n            $7910d402b5fcb5cd$var$quicksort(ids, dists, i, right);\n            $7910d402b5fcb5cd$var$quicksort(ids, dists, left, j - 1);\n        } else {\n            $7910d402b5fcb5cd$var$quicksort(ids, dists, left, j - 1);\n            $7910d402b5fcb5cd$var$quicksort(ids, dists, i, right);\n        }\n    }\n}\nfunction $7910d402b5fcb5cd$var$swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\nfunction $7910d402b5fcb5cd$var$defaultGetX(p) {\n    return p[0];\n}\nfunction $7910d402b5fcb5cd$var$defaultGetY(p) {\n    return p[1];\n}\n\n\nconst $3ff4c258c072845b$var$epsilon = 1e-6;\nclass $3ff4c258c072845b$export$2e2bcd8739ae039 {\n    constructor(){\n        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath\n        this._ = \"\";\n    }\n    moveTo(x, y) {\n        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n    }\n    closePath() {\n        if (this._x1 !== null) {\n            this._x1 = this._x0, this._y1 = this._y0;\n            this._ += \"Z\";\n        }\n    }\n    lineTo(x, y) {\n        this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n    }\n    arc(x, y, r) {\n        x = +x, y = +y, r = +r;\n        const x0 = x + r;\n        const y0 = y;\n        if (r < 0) throw new Error(\"negative radius\");\n        if (this._x1 === null) this._ += `M${x0},${y0}`;\n        else if (Math.abs(this._x1 - x0) > $3ff4c258c072845b$var$epsilon || Math.abs(this._y1 - y0) > $3ff4c258c072845b$var$epsilon) this._ += \"L\" + x0 + \",\" + y0;\n        if (!r) return;\n        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n    }\n    rect(x, y, w, h) {\n        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n    }\n    value() {\n        return this._ || null;\n    }\n}\n\n\nclass $faec48d3859f255b$export$2e2bcd8739ae039 {\n    constructor(){\n        this._ = [];\n    }\n    moveTo(x, y) {\n        this._.push([\n            x,\n            y\n        ]);\n    }\n    closePath() {\n        this._.push(this._[0].slice());\n    }\n    lineTo(x, y) {\n        this._.push([\n            x,\n            y\n        ]);\n    }\n    value() {\n        return this._.length ? this._ : null;\n    }\n}\n\n\n\n\nclass $3d2bc80fc251edd6$export$2e2bcd8739ae039 {\n    constructor(delaunay, [xmin, ymin, xmax, ymax] = [\n        0,\n        0,\n        960,\n        500\n    ]){\n        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n        this.delaunay = delaunay;\n        this._circumcenters = new Float64Array(delaunay.points.length * 2);\n        this.vectors = new Float64Array(delaunay.points.length * 2);\n        this.xmax = xmax, this.xmin = xmin;\n        this.ymax = ymax, this.ymin = ymin;\n        this._init();\n    }\n    update() {\n        this.delaunay.update();\n        this._init();\n        return this;\n    }\n    _init() {\n        const { delaunay: { points: points, hull: hull, triangles: triangles }, vectors: vectors } = this;\n        let bx, by; // lazily computed barycenter of the hull\n        // Compute circumcenters.\n        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n        for(let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2){\n            const t1 = triangles[i] * 2;\n            const t2 = triangles[i + 1] * 2;\n            const t3 = triangles[i + 2] * 2;\n            const x1 = points[t1];\n            const y1 = points[t1 + 1];\n            const x2 = points[t2];\n            const y2 = points[t2 + 1];\n            const x3 = points[t3];\n            const y3 = points[t3 + 1];\n            const dx = x2 - x1;\n            const dy = y2 - y1;\n            const ex = x3 - x1;\n            const ey = y3 - y1;\n            const ab = (dx * ey - dy * ex) * 2;\n            if (Math.abs(ab) < 1e-9) {\n                // For a degenerate triangle, the circumcenter is at the infinity, in a\n                // direction orthogonal to the halfedge and away from the “center” of\n                // the diagram <bx, by>, defined as the hull’s barycenter.\n                if (bx === undefined) {\n                    bx = by = 0;\n                    for (const i of hull)bx += points[i * 2], by += points[i * 2 + 1];\n                    bx /= hull.length, by /= hull.length;\n                }\n                const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);\n                x = (x1 + x3) / 2 - a * ey;\n                y = (y1 + y3) / 2 + a * ex;\n            } else {\n                const d = 1 / ab;\n                const bl = dx * dx + dy * dy;\n                const cl = ex * ex + ey * ey;\n                x = x1 + (ey * bl - dy * cl) * d;\n                y = y1 + (dx * cl - ex * bl) * d;\n            }\n            circumcenters[j] = x;\n            circumcenters[j + 1] = y;\n        }\n        // Compute exterior cell rays.\n        let h = hull[hull.length - 1];\n        let p0, p1 = h * 4;\n        let x0, x1 = points[2 * h];\n        let y0, y1 = points[2 * h + 1];\n        vectors.fill(0);\n        for(let i = 0; i < hull.length; ++i){\n            h = hull[i];\n            p0 = p1, x0 = x1, y0 = y1;\n            p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n            vectors[p0 + 2] = vectors[p1] = y0 - y1;\n            vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n        }\n    }\n    render(context) {\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        const { delaunay: { halfedges: halfedges, inedges: inedges, hull: hull }, circumcenters: circumcenters, vectors: vectors } = this;\n        if (hull.length <= 1) return null;\n        for(let i = 0, n = halfedges.length; i < n; ++i){\n            const j = halfedges[i];\n            if (j < i) continue;\n            const ti = Math.floor(i / 3) * 2;\n            const tj = Math.floor(j / 3) * 2;\n            const xi = circumcenters[ti];\n            const yi = circumcenters[ti + 1];\n            const xj = circumcenters[tj];\n            const yj = circumcenters[tj + 1];\n            this._renderSegment(xi, yi, xj, yj, context);\n        }\n        let h0, h1 = hull[hull.length - 1];\n        for(let i = 0; i < hull.length; ++i){\n            h0 = h1, h1 = hull[i];\n            const t = Math.floor(inedges[h1] / 3) * 2;\n            const x = circumcenters[t];\n            const y = circumcenters[t + 1];\n            const v = h0 * 4;\n            const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n            if (p) this._renderSegment(x, y, p[0], p[1], context);\n        }\n        return buffer && buffer.value();\n    }\n    renderBounds(context) {\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n        return buffer && buffer.value();\n    }\n    renderCell(i, context) {\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        const points = this._clip(i);\n        if (points === null || !points.length) return;\n        context.moveTo(points[0], points[1]);\n        let n = points.length;\n        while(points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)n -= 2;\n        for(let i = 2; i < n; i += 2)if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);\n        context.closePath();\n        return buffer && buffer.value();\n    }\n    *cellPolygons() {\n        const { delaunay: { points: points } } = this;\n        for(let i = 0, n = points.length / 2; i < n; ++i){\n            const cell = this.cellPolygon(i);\n            if (cell) cell.index = i, yield cell;\n        }\n    }\n    cellPolygon(i) {\n        const polygon = new (0, $faec48d3859f255b$export$2e2bcd8739ae039);\n        this.renderCell(i, polygon);\n        return polygon.value();\n    }\n    _renderSegment(x0, y0, x1, y1, context) {\n        let S;\n        const c0 = this._regioncode(x0, y0);\n        const c1 = this._regioncode(x1, y1);\n        if (c0 === 0 && c1 === 0) {\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n            context.moveTo(S[0], S[1]);\n            context.lineTo(S[2], S[3]);\n        }\n    }\n    contains(i, x, y) {\n        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n        return this.delaunay._step(i, x, y) === i;\n    }\n    *neighbors(i) {\n        const ci = this._clip(i);\n        if (ci) for (const j of this.delaunay.neighbors(i)){\n            const cj = this._clip(j);\n            // find the common edge\n            if (cj) loop: for(let ai = 0, li = ci.length; ai < li; ai += 2){\n                for(let aj = 0, lj = cj.length; aj < lj; aj += 2)if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {\n                    yield j;\n                    break loop;\n                }\n            }\n        }\n    }\n    _cell(i) {\n        const { circumcenters: circumcenters, delaunay: { inedges: inedges, halfedges: halfedges, triangles: triangles } } = this;\n        const e0 = inedges[i];\n        if (e0 === -1) return null; // coincident point\n        const points = [];\n        let e = e0;\n        do {\n            const t = Math.floor(e / 3);\n            points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n            e = e % 3 === 2 ? e - 2 : e + 1;\n            if (triangles[e] !== i) break; // bad triangulation\n            e = halfedges[e];\n        }while (e !== e0 && e !== -1);\n        return points;\n    }\n    _clip(i) {\n        // degenerate case (1 valid point: return the box)\n        if (i === 0 && this.delaunay.hull.length === 1) return [\n            this.xmax,\n            this.ymin,\n            this.xmax,\n            this.ymax,\n            this.xmin,\n            this.ymax,\n            this.xmin,\n            this.ymin\n        ];\n        const points = this._cell(i);\n        if (points === null) return null;\n        const { vectors: V } = this;\n        const v = i * 4;\n        return this._simplify(V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points));\n    }\n    _clipFinite(i, points) {\n        const n = points.length;\n        let P = null;\n        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n        let c0, c1 = this._regioncode(x1, y1);\n        let e0, e1 = 0;\n        for(let j = 0; j < n; j += 2){\n            x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n            c0 = c1, c1 = this._regioncode(x1, y1);\n            if (c0 === 0 && c1 === 0) {\n                e0 = e1, e1 = 0;\n                if (P) P.push(x1, y1);\n                else P = [\n                    x1,\n                    y1\n                ];\n            } else {\n                let S, sx0, sy0, sx1, sy1;\n                if (c0 === 0) {\n                    if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n                    [sx0, sy0, sx1, sy1] = S;\n                } else {\n                    if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n                    [sx1, sy1, sx0, sy0] = S;\n                    e0 = e1, e1 = this._edgecode(sx0, sy0);\n                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n                    if (P) P.push(sx0, sy0);\n                    else P = [\n                        sx0,\n                        sy0\n                    ];\n                }\n                e0 = e1, e1 = this._edgecode(sx1, sy1);\n                if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n                if (P) P.push(sx1, sy1);\n                else P = [\n                    sx1,\n                    sy1\n                ];\n            }\n        }\n        if (P) {\n            e0 = e1, e1 = this._edgecode(P[0], P[1]);\n            if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) return [\n            this.xmax,\n            this.ymin,\n            this.xmax,\n            this.ymax,\n            this.xmin,\n            this.ymax,\n            this.xmin,\n            this.ymin\n        ];\n        return P;\n    }\n    _clipSegment(x0, y0, x1, y1, c0, c1) {\n        // for more robustness, always consider the segment in the same order\n        const flip = c0 < c1;\n        if (flip) [x0, y0, x1, y1, c0, c1] = [\n            x1,\n            y1,\n            x0,\n            y0,\n            c1,\n            c0\n        ];\n        while(true){\n            if (c0 === 0 && c1 === 0) return flip ? [\n                x1,\n                y1,\n                x0,\n                y0\n            ] : [\n                x0,\n                y0,\n                x1,\n                y1\n            ];\n            if (c0 & c1) return null;\n            let x, y, c = c0 || c1;\n            if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n            else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n            else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n            else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n            if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n            else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n        }\n    }\n    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n        let P = Array.from(points), p;\n        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n        if (P = this._clipFinite(i, P)) for(let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2){\n            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n        }\n        else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) P = [\n            this.xmin,\n            this.ymin,\n            this.xmax,\n            this.ymin,\n            this.xmax,\n            this.ymax,\n            this.xmin,\n            this.ymax\n        ];\n        return P;\n    }\n    _edge(i, e0, e1, P, j) {\n        while(e0 !== e1){\n            let x, y;\n            switch(e0){\n                case 5:\n                    e0 = 4;\n                    continue; // top-left\n                case 4:\n                    e0 = 6, x = this.xmax, y = this.ymin;\n                    break; // top\n                case 6:\n                    e0 = 2;\n                    continue; // top-right\n                case 2:\n                    e0 = 10, x = this.xmax, y = this.ymax;\n                    break; // right\n                case 10:\n                    e0 = 8;\n                    continue; // bottom-right\n                case 8:\n                    e0 = 9, x = this.xmin, y = this.ymax;\n                    break; // bottom\n                case 9:\n                    e0 = 1;\n                    continue; // bottom-left\n                case 1:\n                    e0 = 5, x = this.xmin, y = this.ymin;\n                    break; // left\n            }\n            // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n            // undefined, the conditional statement will be executed.\n            if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) P.splice(j, 0, x, y), j += 2;\n        }\n        return j;\n    }\n    _project(x0, y0, vx, vy) {\n        let t = Infinity, c, x, y;\n        if (vy < 0) {\n            if (y0 <= this.ymin) return null;\n            if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n        } else if (vy > 0) {\n            if (y0 >= this.ymax) return null;\n            if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n        }\n        if (vx > 0) {\n            if (x0 >= this.xmax) return null;\n            if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n        } else if (vx < 0) {\n            if (x0 <= this.xmin) return null;\n            if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n        }\n        return [\n            x,\n            y\n        ];\n    }\n    _edgecode(x, y) {\n        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);\n    }\n    _regioncode(x, y) {\n        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);\n    }\n    _simplify(P) {\n        if (P && P.length > 4) {\n            for(let i = 0; i < P.length; i += 2){\n                const j = (i + 2) % P.length, k = (i + 4) % P.length;\n                if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;\n            }\n            if (!P.length) P = null;\n        }\n        return P;\n    }\n}\n\n\nconst $d0f7a2297bbeda8e$var$tau = 2 * Math.PI, $d0f7a2297bbeda8e$var$pow = Math.pow;\nfunction $d0f7a2297bbeda8e$var$pointX(p) {\n    return p[0];\n}\nfunction $d0f7a2297bbeda8e$var$pointY(p) {\n    return p[1];\n}\n// A triangulation is collinear if all its triangles have a non-null area\nfunction $d0f7a2297bbeda8e$var$collinear(d) {\n    const { triangles: triangles, coords: coords } = d;\n    for(let i = 0; i < triangles.length; i += 3){\n        const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n        if (cross > 1e-10) return false;\n    }\n    return true;\n}\nfunction $d0f7a2297bbeda8e$var$jitter(x, y, r) {\n    return [\n        x + Math.sin(x + y) * r,\n        y + Math.cos(x - y) * r\n    ];\n}\nclass $d0f7a2297bbeda8e$export$2e2bcd8739ae039 {\n    static from(points, fx = $d0f7a2297bbeda8e$var$pointX, fy = $d0f7a2297bbeda8e$var$pointY, that) {\n        return new $d0f7a2297bbeda8e$export$2e2bcd8739ae039(\"length\" in points ? $d0f7a2297bbeda8e$var$flatArray(points, fx, fy, that) : Float64Array.from($d0f7a2297bbeda8e$var$flatIterable(points, fx, fy, that)));\n    }\n    constructor(points){\n        this._delaunator = new (0, $7910d402b5fcb5cd$export$2e2bcd8739ae039)(points);\n        this.inedges = new Int32Array(points.length / 2);\n        this._hullIndex = new Int32Array(points.length / 2);\n        this.points = this._delaunator.coords;\n        this._init();\n    }\n    update() {\n        this._delaunator.update();\n        this._init();\n        return this;\n    }\n    _init() {\n        const d = this._delaunator, points = this.points;\n        // check for collinear\n        if (d.hull && d.hull.length > 2 && $d0f7a2297bbeda8e$var$collinear(d)) {\n            this.collinear = Int32Array.from({\n                length: points.length / 2\n            }, (_, i)=>i).sort((i, j)=>points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n            const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [\n                points[2 * e],\n                points[2 * e + 1],\n                points[2 * f],\n                points[2 * f + 1]\n            ], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n            for(let i = 0, n = points.length / 2; i < n; ++i){\n                const p = $d0f7a2297bbeda8e$var$jitter(points[2 * i], points[2 * i + 1], r);\n                points[2 * i] = p[0];\n                points[2 * i + 1] = p[1];\n            }\n            this._delaunator = new (0, $7910d402b5fcb5cd$export$2e2bcd8739ae039)(points);\n        } else delete this.collinear;\n        const halfedges = this.halfedges = this._delaunator.halfedges;\n        const hull = this.hull = this._delaunator.hull;\n        const triangles = this.triangles = this._delaunator.triangles;\n        const inedges = this.inedges.fill(-1);\n        const hullIndex = this._hullIndex.fill(-1);\n        // Compute an index from each point to an (arbitrary) incoming halfedge\n        // Used to give the first neighbor of each point; for this reason,\n        // on the hull we give priority to exterior halfedges\n        for(let e = 0, n = halfedges.length; e < n; ++e){\n            const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n            if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n        }\n        for(let i = 0, n = hull.length; i < n; ++i)hullIndex[hull[i]] = i;\n        // degenerate case: 1 or 2 (distinct) points\n        if (hull.length <= 2 && hull.length > 0) {\n            this.triangles = new Int32Array(3).fill(-1);\n            this.halfedges = new Int32Array(3).fill(-1);\n            this.triangles[0] = hull[0];\n            inedges[hull[0]] = 1;\n            if (hull.length === 2) {\n                inedges[hull[1]] = 0;\n                this.triangles[1] = hull[1];\n                this.triangles[2] = hull[1];\n            }\n        }\n    }\n    voronoi(bounds) {\n        return new (0, $3d2bc80fc251edd6$export$2e2bcd8739ae039)(this, bounds);\n    }\n    *neighbors(i) {\n        const { inedges: inedges, hull: hull, _hullIndex: _hullIndex, halfedges: halfedges, triangles: triangles, collinear: collinear } = this;\n        // degenerate case with several collinear points\n        if (collinear) {\n            const l = collinear.indexOf(i);\n            if (l > 0) yield collinear[l - 1];\n            if (l < collinear.length - 1) yield collinear[l + 1];\n            return;\n        }\n        const e0 = inedges[i];\n        if (e0 === -1) return; // coincident point\n        let e = e0, p0 = -1;\n        do {\n            yield p0 = triangles[e];\n            e = e % 3 === 2 ? e - 2 : e + 1;\n            if (triangles[e] !== i) return; // bad triangulation\n            e = halfedges[e];\n            if (e === -1) {\n                const p = hull[(_hullIndex[i] + 1) % hull.length];\n                if (p !== p0) yield p;\n                return;\n            }\n        }while (e !== e0);\n    }\n    find(x, y, i = 0) {\n        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n        const i0 = i;\n        let c;\n        while((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)i = c;\n        return c;\n    }\n    _step(i, x, y) {\n        const { inedges: inedges, hull: hull, _hullIndex: _hullIndex, halfedges: halfedges, triangles: triangles, points: points } = this;\n        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n        let c = i;\n        let dc = $d0f7a2297bbeda8e$var$pow(x - points[i * 2], 2) + $d0f7a2297bbeda8e$var$pow(y - points[i * 2 + 1], 2);\n        const e0 = inedges[i];\n        let e = e0;\n        do {\n            let t = triangles[e];\n            const dt = $d0f7a2297bbeda8e$var$pow(x - points[t * 2], 2) + $d0f7a2297bbeda8e$var$pow(y - points[t * 2 + 1], 2);\n            if (dt < dc) dc = dt, c = t;\n            e = e % 3 === 2 ? e - 2 : e + 1;\n            if (triangles[e] !== i) break; // bad triangulation\n            e = halfedges[e];\n            if (e === -1) {\n                e = hull[(_hullIndex[i] + 1) % hull.length];\n                if (e !== t) {\n                    if ($d0f7a2297bbeda8e$var$pow(x - points[e * 2], 2) + $d0f7a2297bbeda8e$var$pow(y - points[e * 2 + 1], 2) < dc) return e;\n                }\n                break;\n            }\n        }while (e !== e0);\n        return c;\n    }\n    render(context) {\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        const { points: points, halfedges: halfedges, triangles: triangles } = this;\n        for(let i = 0, n = halfedges.length; i < n; ++i){\n            const j = halfedges[i];\n            if (j < i) continue;\n            const ti = triangles[i] * 2;\n            const tj = triangles[j] * 2;\n            context.moveTo(points[ti], points[ti + 1]);\n            context.lineTo(points[tj], points[tj + 1]);\n        }\n        this.renderHull(context);\n        return buffer && buffer.value();\n    }\n    renderPoints(context, r) {\n        if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n        r = r == undefined ? 2 : +r;\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        const { points: points } = this;\n        for(let i = 0, n = points.length; i < n; i += 2){\n            const x = points[i], y = points[i + 1];\n            context.moveTo(x + r, y);\n            context.arc(x, y, r, 0, $d0f7a2297bbeda8e$var$tau);\n        }\n        return buffer && buffer.value();\n    }\n    renderHull(context) {\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        const { hull: hull, points: points } = this;\n        const h = hull[0] * 2, n = hull.length;\n        context.moveTo(points[h], points[h + 1]);\n        for(let i = 1; i < n; ++i){\n            const h = 2 * hull[i];\n            context.lineTo(points[h], points[h + 1]);\n        }\n        context.closePath();\n        return buffer && buffer.value();\n    }\n    hullPolygon() {\n        const polygon = new (0, $faec48d3859f255b$export$2e2bcd8739ae039);\n        this.renderHull(polygon);\n        return polygon.value();\n    }\n    renderTriangle(i, context) {\n        const buffer = context == null ? context = new (0, $3ff4c258c072845b$export$2e2bcd8739ae039) : undefined;\n        const { points: points, triangles: triangles } = this;\n        const t0 = triangles[i *= 3] * 2;\n        const t1 = triangles[i + 1] * 2;\n        const t2 = triangles[i + 2] * 2;\n        context.moveTo(points[t0], points[t0 + 1]);\n        context.lineTo(points[t1], points[t1 + 1]);\n        context.lineTo(points[t2], points[t2 + 1]);\n        context.closePath();\n        return buffer && buffer.value();\n    }\n    *trianglePolygons() {\n        const { triangles: triangles } = this;\n        for(let i = 0, n = triangles.length / 3; i < n; ++i)yield this.trianglePolygon(i);\n    }\n    trianglePolygon(i) {\n        const polygon = new (0, $faec48d3859f255b$export$2e2bcd8739ae039);\n        this.renderTriangle(i, polygon);\n        return polygon.value();\n    }\n}\nfunction $d0f7a2297bbeda8e$var$flatArray(points, fx, fy, that) {\n    const n = points.length;\n    const array = new Float64Array(n * 2);\n    for(let i = 0; i < n; ++i){\n        const p = points[i];\n        array[i * 2] = fx.call(that, p, i, points);\n        array[i * 2 + 1] = fy.call(that, p, i, points);\n    }\n    return array;\n}\nfunction* $d0f7a2297bbeda8e$var$flatIterable(points, fx, fy, that) {\n    let i = 0;\n    for (const p of points){\n        yield fx.call(that, p, i, points);\n        yield fy.call(that, p, i, points);\n        ++i;\n    }\n}\n\n\nfunction $e3400c917024ce02$export$2e2bcd8739ae039(w, h, n, tolFraction) {\n    let centroids = $e3400c917024ce02$var$randomPoints(w, h, n);\n    let converged = false;\n    let voronoi;\n    let polygons;\n    const tol = tolFraction * Math.min(w, h);\n    for(let i = 0; i < 1000; i++){\n        [centroids, converged, voronoi, polygons] = $e3400c917024ce02$var$relax(centroids, w, h, tol);\n        if (converged) return centroids;\n    }\n    return [\n        centroids,\n        voronoi,\n        polygons\n    ];\n}\n// https://bl.ocks.org/veltman/3d1fb70e6993d4eb2eff7112c9e7bcf4\nfunction $e3400c917024ce02$var$randomPoints(w, h, n) {\n    return Array(n).fill().map(()=>[\n            Math.random() * w,\n            Math.random() * h\n        ]);\n}\nfunction $e3400c917024ce02$var$relax(points, w, h, tol) {\n    const delaunay = (0, $d0f7a2297bbeda8e$export$2e2bcd8739ae039).from(points);\n    const voronoi = delaunay.voronoi([\n        0,\n        0,\n        w,\n        h\n    ]);\n    const polygons = $e3400c917024ce02$var$range(points.length).map((i)=>voronoi.cellPolygon(i));\n    const centroids = polygons.map((0, $b694069ea7a74f51$export$2e2bcd8739ae039));\n    const converged = points.every((point, i)=>$e3400c917024ce02$var$distance2(point, centroids[i]) < tol);\n    return [\n        centroids,\n        converged,\n        voronoi,\n        polygons\n    ];\n}\n// function relax3(points, w, h) {\n//     const polygons = voronoi(points).polygons()\n//     polygons.map(d3.polygonCentroid)\n//     const converged = points.every((point, i) => distance2(point, centroids[i]) < 1)\n//     return { centroids, converged }\n// }\n// cellPolygons.prototype.map = function* (mapper, thisArg) {\n//     for (const val of this) {\n//         yield mapper.call(thisArg, val)\n//     }\n// }\nfunction $e3400c917024ce02$var$distance2(x, y) {\n    return x ** 2 + y ** 2;\n}\nfunction $e3400c917024ce02$var$range(n) {\n    return [\n        ...Array(n).keys()\n    ];\n}\n\n\nfunction $d187152b91af3f55$export$2e2bcd8739ae039(nd) {\n    const [centroids, voronoi, polygons] = (0, $e3400c917024ce02$export$2e2bcd8739ae039)(1, 1, nd, 0.01);\n    const polygonAreas = polygons.map((0, $64e498bedbbc6430$export$2e2bcd8739ae039)).map((x)=>-x);\n    const districtMap = {\n        nd: nd,\n        centroids: centroids,\n        voronoi: voronoi,\n        polygons: polygons,\n        polygonAreas: polygonAreas\n    };\n    return districtMap;\n}\n\n\n/** @module */ // import SimplexNoise from 'https://cdn.skypack.dev/simplex-noise@3.0.1'\n/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2021 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */ const $7ae0f8fc9f8f8162$var$F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\nconst $7ae0f8fc9f8f8162$var$G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\nconst $7ae0f8fc9f8f8162$var$F3 = 1.0 / 3.0;\nconst $7ae0f8fc9f8f8162$var$G3 = 1.0 / 6.0;\nconst $7ae0f8fc9f8f8162$var$F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\nconst $7ae0f8fc9f8f8162$var$G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\nconst $7ae0f8fc9f8f8162$var$grad3 = new Float32Array([\n    1,\n    1,\n    0,\n    -1,\n    1,\n    0,\n    1,\n    -1,\n    0,\n    -1,\n    -1,\n    0,\n    1,\n    0,\n    1,\n    -1,\n    0,\n    1,\n    1,\n    0,\n    -1,\n    -1,\n    0,\n    -1,\n    0,\n    1,\n    1,\n    0,\n    -1,\n    1,\n    0,\n    1,\n    -1,\n    0,\n    -1,\n    -1\n]);\nconst $7ae0f8fc9f8f8162$var$grad4 = new Float32Array([\n    0,\n    1,\n    1,\n    1,\n    0,\n    1,\n    1,\n    -1,\n    0,\n    1,\n    -1,\n    1,\n    0,\n    1,\n    -1,\n    -1,\n    0,\n    -1,\n    1,\n    1,\n    0,\n    -1,\n    1,\n    -1,\n    0,\n    -1,\n    -1,\n    1,\n    0,\n    -1,\n    -1,\n    -1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    0,\n    1,\n    -1,\n    1,\n    0,\n    -1,\n    1,\n    1,\n    0,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    1,\n    -1,\n    0,\n    1,\n    -1,\n    -1,\n    0,\n    -1,\n    1,\n    -1,\n    0,\n    -1,\n    -1,\n    1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    0,\n    -1,\n    1,\n    -1,\n    0,\n    1,\n    1,\n    -1,\n    0,\n    -1,\n    -1,\n    1,\n    0,\n    1,\n    -1,\n    1,\n    0,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    -1,\n    -1,\n    0,\n    -1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    1,\n    -1,\n    0,\n    1,\n    -1,\n    1,\n    0,\n    1,\n    -1,\n    -1,\n    0,\n    -1,\n    1,\n    1,\n    0,\n    -1,\n    1,\n    -1,\n    0,\n    -1,\n    -1,\n    1,\n    0,\n    -1,\n    -1,\n    -1,\n    0\n]);\nclass $7ae0f8fc9f8f8162$export$7cef8d54b4fb09be {\n    /**\n     * Creates a new `SimplexNoise` instance.\n     * This involves some setup. You can save a few cpu cycles by reusing the same instance.\n     * @param randomOrSeed A random number generator or a seed (string|number).\n     * Defaults to Math.random (random irreproducible initialization).\n     */ constructor(randomOrSeed = Math.random){\n        const random = typeof randomOrSeed == \"function\" ? randomOrSeed : $7ae0f8fc9f8f8162$var$alea(randomOrSeed);\n        this.p = $7ae0f8fc9f8f8162$export$98cd52c6119fe283(random);\n        this.perm = new Uint8Array(512);\n        this.permMod12 = new Uint8Array(512);\n        for(let i = 0; i < 512; i++){\n            this.perm[i] = this.p[i & 255];\n            this.permMod12[i] = this.perm[i] % 12;\n        }\n    }\n    /**\n     * Samples the noise field in 2 dimensions\n     * @param x\n     * @param y\n     * @returns a number in the interval [-1, 1]\n     */ noise2D(x, y) {\n        const permMod12 = this.permMod12;\n        const perm = this.perm;\n        let n0 = 0; // Noise contributions from the three corners\n        let n1 = 0;\n        let n2 = 0;\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y) * $7ae0f8fc9f8f8162$var$F2; // Hairy factor for 2D\n        const i = Math.floor(x + s);\n        const j = Math.floor(y + s);\n        const t = (i + j) * $7ae0f8fc9f8f8162$var$G2;\n        const X0 = i - t; // Unskew the cell origin back to (x,y) space\n        const Y0 = j - t;\n        const x0 = x - X0; // The x,y distances from the cell origin\n        const y0 = y - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        } else {\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        const x1 = x0 - i1 + $7ae0f8fc9f8f8162$var$G2; // Offsets for middle corner in (x,y) unskewed coords\n        const y1 = y0 - j1 + $7ae0f8fc9f8f8162$var$G2;\n        const x2 = x0 - 1.0 + 2.0 * $7ae0f8fc9f8f8162$var$G2; // Offsets for last corner in (x,y) unskewed coords\n        const y2 = y0 - 1.0 + 2.0 * $7ae0f8fc9f8f8162$var$G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            const gi0 = permMod12[ii + perm[jj]] * 3;\n            t0 *= t0;\n            n0 = t0 * t0 * ($7ae0f8fc9f8f8162$var$grad3[gi0] * x0 + $7ae0f8fc9f8f8162$var$grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            const gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n            t1 *= t1;\n            n1 = t1 * t1 * ($7ae0f8fc9f8f8162$var$grad3[gi1] * x1 + $7ae0f8fc9f8f8162$var$grad3[gi1 + 1] * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            const gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n            t2 *= t2;\n            n2 = t2 * t2 * ($7ae0f8fc9f8f8162$var$grad3[gi2] * x2 + $7ae0f8fc9f8f8162$var$grad3[gi2 + 1] * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70.0 * (n0 + n1 + n2);\n    }\n    /**\n     * Samples the noise field in 3 dimensions\n     * @param x\n     * @param y\n     * @param z\n     * @returns a number in the interval [-1, 1]\n     */ noise3D(x, y, z) {\n        const permMod12 = this.permMod12;\n        const perm = this.perm;\n        let n0, n1, n2, n3; // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y + z) * $7ae0f8fc9f8f8162$var$F3; // Very nice and simple skew factor for 3D\n        const i = Math.floor(x + s);\n        const j = Math.floor(y + s);\n        const k = Math.floor(z + s);\n        const t = (i + j + k) * $7ae0f8fc9f8f8162$var$G3;\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const x0 = x - X0; // The x,y,z distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } else if (x0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } else {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // Z X Y order\n        } else {\n            if (y0 < z0) {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } else if (x0 < z0) {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } else {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // Y X Z order\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        const x1 = x0 - i1 + $7ae0f8fc9f8f8162$var$G3; // Offsets for second corner in (x,y,z) coords\n        const y1 = y0 - j1 + $7ae0f8fc9f8f8162$var$G3;\n        const z1 = z0 - k1 + $7ae0f8fc9f8f8162$var$G3;\n        const x2 = x0 - i2 + 2.0 * $7ae0f8fc9f8f8162$var$G3; // Offsets for third corner in (x,y,z) coords\n        const y2 = y0 - j2 + 2.0 * $7ae0f8fc9f8f8162$var$G3;\n        const z2 = z0 - k2 + 2.0 * $7ae0f8fc9f8f8162$var$G3;\n        const x3 = x0 - 1.0 + 3.0 * $7ae0f8fc9f8f8162$var$G3; // Offsets for last corner in (x,y,z) coords\n        const y3 = y0 - 1.0 + 3.0 * $7ae0f8fc9f8f8162$var$G3;\n        const z3 = z0 - 1.0 + 3.0 * $7ae0f8fc9f8f8162$var$G3;\n        // Work out the hashed gradient indices of the four simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        // Calculate the contribution from the four corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0) n0 = 0.0;\n        else {\n            const gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n            t0 *= t0;\n            n0 = t0 * t0 * ($7ae0f8fc9f8f8162$var$grad3[gi0] * x0 + $7ae0f8fc9f8f8162$var$grad3[gi0 + 1] * y0 + $7ae0f8fc9f8f8162$var$grad3[gi0 + 2] * z0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0) n1 = 0.0;\n        else {\n            const gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n            t1 *= t1;\n            n1 = t1 * t1 * ($7ae0f8fc9f8f8162$var$grad3[gi1] * x1 + $7ae0f8fc9f8f8162$var$grad3[gi1 + 1] * y1 + $7ae0f8fc9f8f8162$var$grad3[gi1 + 2] * z1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0) n2 = 0.0;\n        else {\n            const gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n            t2 *= t2;\n            n2 = t2 * t2 * ($7ae0f8fc9f8f8162$var$grad3[gi2] * x2 + $7ae0f8fc9f8f8162$var$grad3[gi2 + 1] * y2 + $7ae0f8fc9f8f8162$var$grad3[gi2 + 2] * z2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0) n3 = 0.0;\n        else {\n            const gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n            t3 *= t3;\n            n3 = t3 * t3 * ($7ae0f8fc9f8f8162$var$grad3[gi3] * x3 + $7ae0f8fc9f8f8162$var$grad3[gi3 + 1] * y3 + $7ae0f8fc9f8f8162$var$grad3[gi3 + 2] * z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n        return 32.0 * (n0 + n1 + n2 + n3);\n    }\n    /**\n     * Samples the noise field in 4 dimensions\n     * @param x\n     * @param y\n     * @param z\n     * @returns a number in the interval [-1, 1]\n     */ noise4D(x, y, z, w) {\n        const perm = this.perm;\n        let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n        const s = (x + y + z + w) * $7ae0f8fc9f8f8162$var$F4; // Factor for 4D skewing\n        const i = Math.floor(x + s);\n        const j = Math.floor(y + s);\n        const k = Math.floor(z + s);\n        const l = Math.floor(w + s);\n        const t = (i + j + k + l) * $7ae0f8fc9f8f8162$var$G4; // Factor for 4D unskewing\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const W0 = l - t;\n        const x0 = x - X0; // The x,y,z,w distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        const w0 = w - W0;\n        // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n        // To find out which of the 24 possible simplices we're in, we need to\n        // determine the magnitude ordering of x0, y0, z0 and w0.\n        // Six pair-wise comparisons are performed between each possible pair\n        // of the four coordinates, and the results are used to rank the numbers.\n        let rankx = 0;\n        let ranky = 0;\n        let rankz = 0;\n        let rankw = 0;\n        if (x0 > y0) rankx++;\n        else ranky++;\n        if (x0 > z0) rankx++;\n        else rankz++;\n        if (x0 > w0) rankx++;\n        else rankw++;\n        if (y0 > z0) ranky++;\n        else rankz++;\n        if (y0 > w0) ranky++;\n        else rankw++;\n        if (z0 > w0) rankz++;\n        else rankw++;\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n        // impossible. Only the 24 indices which have non-zero entries make any sense.\n        // We use a thresholding to set the coordinates in turn from the largest magnitude.\n        // Rank 3 denotes the largest coordinate.\n        // Rank 2 denotes the second largest coordinate.\n        // Rank 1 denotes the second smallest coordinate.\n        // The integer offsets for the second simplex corner\n        const i1 = rankx >= 3 ? 1 : 0;\n        const j1 = ranky >= 3 ? 1 : 0;\n        const k1 = rankz >= 3 ? 1 : 0;\n        const l1 = rankw >= 3 ? 1 : 0;\n        // The integer offsets for the third simplex corner\n        const i2 = rankx >= 2 ? 1 : 0;\n        const j2 = ranky >= 2 ? 1 : 0;\n        const k2 = rankz >= 2 ? 1 : 0;\n        const l2 = rankw >= 2 ? 1 : 0;\n        // The integer offsets for the fourth simplex corner\n        const i3 = rankx >= 1 ? 1 : 0;\n        const j3 = ranky >= 1 ? 1 : 0;\n        const k3 = rankz >= 1 ? 1 : 0;\n        const l3 = rankw >= 1 ? 1 : 0;\n        // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n        const x1 = x0 - i1 + $7ae0f8fc9f8f8162$var$G4; // Offsets for second corner in (x,y,z,w) coords\n        const y1 = y0 - j1 + $7ae0f8fc9f8f8162$var$G4;\n        const z1 = z0 - k1 + $7ae0f8fc9f8f8162$var$G4;\n        const w1 = w0 - l1 + $7ae0f8fc9f8f8162$var$G4;\n        const x2 = x0 - i2 + 2.0 * $7ae0f8fc9f8f8162$var$G4; // Offsets for third corner in (x,y,z,w) coords\n        const y2 = y0 - j2 + 2.0 * $7ae0f8fc9f8f8162$var$G4;\n        const z2 = z0 - k2 + 2.0 * $7ae0f8fc9f8f8162$var$G4;\n        const w2 = w0 - l2 + 2.0 * $7ae0f8fc9f8f8162$var$G4;\n        const x3 = x0 - i3 + 3.0 * $7ae0f8fc9f8f8162$var$G4; // Offsets for fourth corner in (x,y,z,w) coords\n        const y3 = y0 - j3 + 3.0 * $7ae0f8fc9f8f8162$var$G4;\n        const z3 = z0 - k3 + 3.0 * $7ae0f8fc9f8f8162$var$G4;\n        const w3 = w0 - l3 + 3.0 * $7ae0f8fc9f8f8162$var$G4;\n        const x4 = x0 - 1.0 + 4.0 * $7ae0f8fc9f8f8162$var$G4; // Offsets for last corner in (x,y,z,w) coords\n        const y4 = y0 - 1.0 + 4.0 * $7ae0f8fc9f8f8162$var$G4;\n        const z4 = z0 - 1.0 + 4.0 * $7ae0f8fc9f8f8162$var$G4;\n        const w4 = w0 - 1.0 + 4.0 * $7ae0f8fc9f8f8162$var$G4;\n        // Work out the hashed gradient indices of the five simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        const ll = l & 255;\n        // Calculate the contribution from the five corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n        if (t0 < 0) n0 = 0.0;\n        else {\n            const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32 * 4;\n            t0 *= t0;\n            n0 = t0 * t0 * ($7ae0f8fc9f8f8162$var$grad4[gi0] * x0 + $7ae0f8fc9f8f8162$var$grad4[gi0 + 1] * y0 + $7ae0f8fc9f8f8162$var$grad4[gi0 + 2] * z0 + $7ae0f8fc9f8f8162$var$grad4[gi0 + 3] * w0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n        if (t1 < 0) n1 = 0.0;\n        else {\n            const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32 * 4;\n            t1 *= t1;\n            n1 = t1 * t1 * ($7ae0f8fc9f8f8162$var$grad4[gi1] * x1 + $7ae0f8fc9f8f8162$var$grad4[gi1 + 1] * y1 + $7ae0f8fc9f8f8162$var$grad4[gi1 + 2] * z1 + $7ae0f8fc9f8f8162$var$grad4[gi1 + 3] * w1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n        if (t2 < 0) n2 = 0.0;\n        else {\n            const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32 * 4;\n            t2 *= t2;\n            n2 = t2 * t2 * ($7ae0f8fc9f8f8162$var$grad4[gi2] * x2 + $7ae0f8fc9f8f8162$var$grad4[gi2 + 1] * y2 + $7ae0f8fc9f8f8162$var$grad4[gi2 + 2] * z2 + $7ae0f8fc9f8f8162$var$grad4[gi2 + 3] * w2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n        if (t3 < 0) n3 = 0.0;\n        else {\n            const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32 * 4;\n            t3 *= t3;\n            n3 = t3 * t3 * ($7ae0f8fc9f8f8162$var$grad4[gi3] * x3 + $7ae0f8fc9f8f8162$var$grad4[gi3 + 1] * y3 + $7ae0f8fc9f8f8162$var$grad4[gi3 + 2] * z3 + $7ae0f8fc9f8f8162$var$grad4[gi3 + 3] * w3);\n        }\n        let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n        if (t4 < 0) n4 = 0.0;\n        else {\n            const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32 * 4;\n            t4 *= t4;\n            n4 = t4 * t4 * ($7ae0f8fc9f8f8162$var$grad4[gi4] * x4 + $7ae0f8fc9f8f8162$var$grad4[gi4 + 1] * y4 + $7ae0f8fc9f8f8162$var$grad4[gi4 + 2] * z4 + $7ae0f8fc9f8f8162$var$grad4[gi4 + 3] * w4);\n        }\n        // Sum up and scale the result to cover the range [-1,1]\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n}\nvar $7ae0f8fc9f8f8162$export$2e2bcd8739ae039 = $7ae0f8fc9f8f8162$export$7cef8d54b4fb09be;\nfunction $7ae0f8fc9f8f8162$export$98cd52c6119fe283(random) {\n    const p = new Uint8Array(256);\n    for(let i = 0; i < 256; i++)p[i] = i;\n    for(let i = 0; i < 255; i++){\n        const r = i + ~~(random() * (256 - i));\n        const aux = p[i];\n        p[i] = p[r];\n        p[r] = aux;\n    }\n    return p;\n}\n/*\nThe ALEA PRNG and masher code used by simplex-noise.js\nis based on code by Johannes Baagøe, modified by Jonas Wagner.\nSee alea.md for the full license.\n*/ function $7ae0f8fc9f8f8162$var$alea(seed) {\n    let s0 = 0;\n    let s1 = 0;\n    let s2 = 0;\n    let c = 1;\n    const mash = $7ae0f8fc9f8f8162$var$masher();\n    s0 = mash(\" \");\n    s1 = mash(\" \");\n    s2 = mash(\" \");\n    s0 -= mash(seed);\n    if (s0 < 0) s0 += 1;\n    s1 -= mash(seed);\n    if (s1 < 0) s1 += 1;\n    s2 -= mash(seed);\n    if (s2 < 0) s2 += 1;\n    return function() {\n        const t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n        s0 = s1;\n        s1 = s2;\n        return s2 = t - (c = t | 0);\n    };\n}\nfunction $7ae0f8fc9f8f8162$var$masher() {\n    let n = 0xefc8249d;\n    return function(data) {\n        data = data.toString();\n        for(let i = 0; i < data.length; i++){\n            n += data.charCodeAt(i);\n            let h = 0.02519603282416938 * n;\n            n = h >>> 0;\n            h -= n;\n            h *= n;\n            n = h >>> 0;\n            h -= n;\n            n += h * 0x100000000; // 2^32\n        }\n        return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n}\n\n\nfunction $0afc515ba3c7dd80$export$2e2bcd8739ae039(nx, ny) {\n    // Simplex Noise Parameters\n    const noiseWidth = 0.5;\n    const noiseHeight = 0.5;\n    // District Noise Parameters - amplitude of noise\n    const xAmp = 100;\n    const yAmp = 100;\n    /** Generate simplex noise. */ const sn = $0afc515ba3c7dd80$export$c32634e934179703(nx, ny, noiseWidth, noiseHeight, xAmp, yAmp);\n    return sn;\n}\nfunction $0afc515ba3c7dd80$export$c32634e934179703(nx, ny, noiseWidth, noiseHeight, xAmp, yAmp) {\n    // @ts-ignore\n    const simplexX = new (0, $7ae0f8fc9f8f8162$export$7cef8d54b4fb09be)(\"s\");\n    // @ts-ignore\n    const simplexY = new (0, $7ae0f8fc9f8f8162$export$7cef8d54b4fb09be)(\"seed\");\n    const map = $0afc515ba3c7dd80$var$zeros(nx, ny);\n    let sumX = 0;\n    let sumY = 0;\n    $0afc515ba3c7dd80$var$range(nx).forEach((ix)=>{\n        $0afc515ba3c7dd80$var$range(ny).forEach((iy)=>{\n            // fractional coordinate divided by period of waves\n            const x = ix / nx * (1 / noiseWidth);\n            const y = iy / ny * (1 / noiseHeight);\n            const noiseX = simplexX.noise2D(x, y);\n            const noiseY = simplexY.noise2D(x, y);\n            map[ix][iy][0] = noiseX - 0.5;\n            map[ix][iy][1] = noiseY - 0.5;\n            sumX += noiseX;\n            sumY += noiseY;\n        });\n    });\n    // normalize\n    const meanX = sumX / (nx * ny) - 0.5;\n    const meanY = sumY / (nx * ny) - 0.5;\n    map.forEach((a)=>{\n        a.forEach((p)=>{\n            // eslint-disable-next-line no-param-reassign\n            p[0] = (p[0] - meanX) * xAmp;\n            // eslint-disable-next-line no-param-reassign\n            p[1] = (p[1] - meanY) * yAmp;\n        });\n    });\n    return map;\n}\nfunction $0afc515ba3c7dd80$var$zeros(nx, ny) {\n    const empty = Array(nx).fill().map(()=>Array(ny).fill().map(()=>Array(2).fill(0)));\n    return empty;\n}\nfunction $0afc515ba3c7dd80$var$range(n) {\n    return [\n        ...Array(n).keys()\n    ];\n}\n\n\n/**\r\n * Update VoterGeoms for each District\r\n * Districts are composed of voter geoms.\r\n * A tract has a set of voter geoms.\r\n * The overlap between a district and a tract determines the density of the voter geom in the district.\r\n *  */ function $df827f6e5b16ff60$export$2e2bcd8739ae039(census, voterGeomsByTract) {\n    const nDistricts = census.length;\n    const voterGeomsByDistrict = [];\n    for(let k = 0; k < nDistricts; k++){\n        const cen = census[k];\n        const voterGeoms = [];\n        for(let j = 0; j < cen.length; j++){\n            const [gx, gy, gf] = cen[j];\n            const voterGeomsForTract = voterGeomsByTract[gx][gy];\n            // Adjust the weight of each voter geometry by the tract's weight in the census.\n            for(let i = 0; i < voterGeomsForTract.length; i++){\n                const voterGeom = {\n                    ...voterGeomsForTract[i]\n                };\n                voterGeom.densityMax *= gf;\n                voterGeoms.push(voterGeom);\n            }\n        }\n        voterGeomsByDistrict.push(voterGeoms);\n    }\n    return voterGeomsByDistrict;\n}\n\n\n/**\r\n * Update VoterGeoms for each Tract\r\n * The set of voter basis geoms is repeated at every census tract on the district map,\r\n * but it is altered by translating it in policy space with a little noise\r\n * to represent differences due to geography\r\n *  */ function $872c994967482d4d$export$2e2bcd8739ae039(voterGeoms, tractNoise, dimensions) {\n    if (dimensions === 1) return $872c994967482d4d$var$voterGeomsByTract1D(voterGeoms, tractNoise);\n    return $872c994967482d4d$var$voterGeomsByTract2D(voterGeoms, tractNoise);\n}\nfunction $872c994967482d4d$var$voterGeomsByTract1D(voterGeoms, tractNoise) {\n    return tractNoise.map((rowNoise)=>rowNoise.map((cellNoise)=>voterGeoms.map((vg)=>{\n                const [xNoise] = cellNoise;\n                const shape1 = {\n                    ...vg\n                };\n                shape1.x += xNoise;\n                return shape1;\n            })));\n}\nfunction $872c994967482d4d$var$voterGeomsByTract2D(voterGeoms, tractNoise) {\n    return tractNoise.map((rowNoise)=>rowNoise.map((cellNoise)=>voterGeoms.map((vg)=>{\n                const [xNoise, yNoise] = cellNoise;\n                const shape2 = {\n                    ...vg\n                };\n                shape2.x += xNoise;\n                shape2.y += yNoise;\n                return shape2;\n            })));\n}\n\n\nfunction $a8d2357f0da786ba$export$2e2bcd8739ae039(numTracts, numDistricts, voterGeoms, dimensions) {\n    const nx = numTracts;\n    const ny = numTracts;\n    const tractNoise = (0, $0afc515ba3c7dd80$export$2e2bcd8739ae039)(nx, ny);\n    const districtMap = (0, $d187152b91af3f55$export$2e2bcd8739ae039)(numDistricts);\n    const census = (0, $684ff26a96d5ad1c$export$2e2bcd8739ae039)(districtMap, nx, ny);\n    const voterGeomsByTract = (0, $872c994967482d4d$export$2e2bcd8739ae039)(voterGeoms, tractNoise, dimensions);\n    const voterGeomsByDistrict = (0, $df827f6e5b16ff60$export$2e2bcd8739ae039)(census, voterGeomsByTract);\n    const geography = {\n        nx: nx,\n        ny: ny,\n        tractNoise: tractNoise,\n        districtMap: districtMap,\n        census: census,\n        voterGeomsByTract: voterGeomsByTract,\n        voterGeomsByDistrict: voterGeomsByDistrict\n    };\n    return geography;\n}\nfunction $a8d2357f0da786ba$export$5a8f9be5ee2afe1d(geography0, numTracts) {\n    const geography = {\n        ...geography0\n    };\n    /** Number of census tracts in x and y */ const nx = numTracts;\n    const ny = numTracts;\n    // Code that handles making geographic district noise.\n    const tractNoise = (0, $0afc515ba3c7dd80$export$2e2bcd8739ae039)(nx, ny);\n    geography.nx = nx;\n    geography.ny = ny;\n    geography.tractNoise = tractNoise;\n    return geography;\n}\nfunction $a8d2357f0da786ba$export$89b44aa28979040b(geography0, numDistricts) {\n    const geography = {\n        ...geography0\n    };\n    geography.districtMap = (0, $d187152b91af3f55$export$2e2bcd8739ae039)(numDistricts);\n    return geography;\n}\nfunction $a8d2357f0da786ba$export$8ed39a1fec3148b4(geography0) {\n    const geography = {\n        ...geography0\n    };\n    const { districtMap: districtMap, nx: nx, ny: ny } = geography;\n    geography.census = (0, $684ff26a96d5ad1c$export$2e2bcd8739ae039)(districtMap, nx, ny);\n    return geography;\n}\nfunction $a8d2357f0da786ba$export$6c6a12f62d20f2d8(geography0, voterGeoms, dimensions) {\n    const geography = {\n        ...geography0\n    };\n    const { tractNoise: tractNoise } = geography;\n    geography.voterGeomsByTract = (0, $872c994967482d4d$export$2e2bcd8739ae039)(voterGeoms, tractNoise, dimensions);\n    return geography;\n}\nfunction $a8d2357f0da786ba$export$a512776eb05c35cf(geography0) {\n    const geography = {\n        ...geography0\n    };\n    const { census: census, voterGeomsByTract: voterGeomsByTract } = geography;\n    geography.voterGeomsByDistrict = (0, $df827f6e5b16ff60$export$2e2bcd8739ae039)(census, voterGeomsByTract);\n    return geography;\n}\n\n\nfunction $13e7f360276e9472$export$2e2bcd8739ae039(voterShapeList, changes, electionOptionsMan, simOptions) {\n    const self = this;\n    self.init = ()=>{\n        const optionsBag = electionOptionsMan.getOptions();\n        const { numTracts: numTracts, numDistricts: numDistricts } = optionsBag;\n        const { dimensions: dimensions } = simOptions;\n        const voterGeoms = voterShapeList.getGeoms(dimensions);\n        self.geography = (0, $a8d2357f0da786ba$export$2e2bcd8739ae039)(numTracts, numDistricts, voterGeoms, dimensions);\n    };\n    let firstRun = true;\n    // Update call from sim //\n    self.update = ()=>{\n        if (changes.checkNone()) return;\n        if (firstRun) {\n            firstRun = false;\n            self.init();\n            return;\n        }\n        const optionsBag = electionOptionsMan.getOptions();\n        if (changes.check([\n            \"numTracts\"\n        ])) {\n            const { numTracts: numTracts } = optionsBag;\n            self.geography = (0, $a8d2357f0da786ba$export$5a8f9be5ee2afe1d)(self.geography, numTracts);\n        }\n        if (changes.check([\n            \"numDistricts\"\n        ])) {\n            const { numDistricts: numDistricts } = optionsBag;\n            self.geography = (0, $a8d2357f0da786ba$export$89b44aa28979040b)(self.geography, numDistricts);\n        }\n        if (changes.check([\n            \"numDistricts\",\n            \"numTracts\"\n        ])) self.geography = (0, $a8d2357f0da786ba$export$8ed39a1fec3148b4)(self.geography);\n        if (changes.check([\n            \"voters\",\n            \"dimensions\",\n            \"numTracts\"\n        ])) {\n            const { dimensions: dimensions } = simOptions;\n            const voterGeoms = voterShapeList.getGeoms(dimensions);\n            self.geography = (0, $a8d2357f0da786ba$export$6c6a12f62d20f2d8)(self.geography, voterGeoms, dimensions);\n        // todo: maybe make this only trigger when voters change\n        }\n        if (changes.check([\n            \"voters\",\n            \"dimensions\",\n            \"numTracts\",\n            \"numDistricts\"\n        ])) self.geography = (0, $a8d2357f0da786ba$export$a512776eb05c35cf)(self.geography);\n    };\n}\n\n\nfunction $3170eb0875557fe1$export$2e2bcd8739ae039(comMessenger) {\n    const changes = new (0, $c15271acf3d28b91$export$2e2bcd8739ae039)();\n    const commander = new (0, $a47780f4820c2a83$export$2e2bcd8739ae039)(comMessenger);\n    const simOptions = new (0, $37bbc074930a134e$export$2e2bcd8739ae039)(changes, commander);\n    const electionOptionsMan = new (0, $245dafb66e148ea4$export$2e2bcd8739ae039)(changes, simOptions, commander);\n    const entities = new (0, $20f81351c64e36a2$export$2e2bcd8739ae039)(changes, commander);\n    const districts = new (0, $13e7f360276e9472$export$2e2bcd8739ae039)(entities.voterShapeList, changes, electionOptionsMan, simOptions);\n    const pub = new (0, $c57a6b566cbb04f2$export$2e2bcd8739ae039)();\n    const simMode = new (0, $f19ce2fbf8e19d4c$export$2e2bcd8739ae039)(pub, entities, districts, changes, simOptions, electionOptionsMan);\n    function init(config) {\n        (0, $cd35aade988dc1ad$export$2e2bcd8739ae039)(entities);\n        commander.loadConfig(config);\n        commander.clearHistory();\n    }\n    function update() {\n        simMode.update();\n    }\n    return {\n        changes: changes,\n        commander: commander,\n        simOptions: simOptions,\n        electionOptionsMan: electionOptionsMan,\n        entities: entities,\n        districts: districts,\n        simMode: simMode,\n        pub: pub,\n        init: init,\n        update: update\n    };\n}\n\n\n\n\n\nfunction $e52cf6111afdcaa2$export$2e2bcd8739ae039(testVoter, candidateList, simOptions) {\n    const { dimensions: dimensions } = simOptions;\n    const voterPoint = (0, $882735380764a44c$export$2e2bcd8739ae039)([\n        testVoter\n    ], dimensions)[0];\n    const canPoints = candidateList.getPoints(dimensions);\n    const parties = candidateList.getParties();\n    const testGeometry = {\n        voterPoint: voterPoint,\n        canPoints: canPoints,\n        parties: parties,\n        dimensions: dimensions\n    };\n    return testGeometry;\n}\n\n\n\nvar $42d022d2d0b7b2ca$export$2e2bcd8739ae039 = (0, $3170eb0875557fe1$export$2e2bcd8739ae039);\n\n\n/** @module */ \n\nconst $79691b908ced9edf$var$layoutOrder = [\n    \"menu\",\n    \"darkModeSwitch\",\n    \"simControlsLabel\",\n    \"addEntities\",\n    \"undo\",\n    \"redo\",\n    \"warning\",\n    \"viz\",\n    \"vizMini\",\n    \"maps\",\n    \"budget\",\n    \"name\",\n    \"resultsPhaseSelector\",\n    \"saveConfigToLink\",\n    \"saveConfigToShortLink\",\n    \"saveConfigToText\",\n    \"loadConfigText\",\n    \"saveData\",\n    \"svgSwitch\",\n    \"showDownloadScreenLink\"\n];\nvar $79691b908ced9edf$export$2e2bcd8739ae039 = $79691b908ced9edf$var$layoutOrder;\n\n\n/** @module */ /**\r\n * Layout keeps an internal ordered list of div names.\r\n * It creates a parent div to fill with these divs.\r\n * New divs are added according to the order of the names.\r\n * If the new div isn't in the list, then it is added at the end of the parent div.\r\n * @param {String[]} - Names in an ordered list for the layout.\r\n * @constructor\r\n */ function $12ee2d67b2ed26c8$export$2e2bcd8739ae039(order) {\n    const self = this;\n    const divsByName = {};\n    const extraDivs = [];\n    /**\r\n     * Adds a new div with a name that should be in Layout's internal ordered list.\r\n     * @param {String} name\r\n     * @param {HTMLElement} div\r\n     */ self.newElement = (name, div)=>{\n        if (order.includes(name)) divsByName[name] = div;\n        else extraDivs.push(div);\n    };\n    /**\r\n     * When we're done adding new divs, we return a parent div.\r\n     * @returns The parent div containing all other divs in order.\r\n     */ self.makeComponent = ()=>{\n        const parent = document.createElement(\"div\");\n        parent.className = \"sandbox\";\n        order.forEach((name)=>{\n            const div = divsByName[name];\n            if (div !== undefined) parent.appendChild(div);\n        });\n        extraDivs.forEach((div)=>{\n            parent.appendChild(div);\n        });\n        return parent;\n    };\n}\n\n\n/** @module */ function $9b222bf6a5bc24a5$export$2e2bcd8739ae039() {\n    const self = this;\n    // Publish to View //\n    const observers = [];\n    self.attach = (observer)=>{\n        observers.push(observer);\n    };\n    self.enter = ()=>{\n        observers.forEach((o)=>o.enter());\n    };\n    self.exit = ()=>{\n        observers.forEach((o)=>o.exit());\n    };\n    self.update = (simData)=>{\n        observers.forEach((o)=>o.update(simData));\n    };\n    self.render = ()=>{\n        observers.forEach((o)=>{\n            if (o.render) o.render();\n        });\n    };\n    self.renderForeground = ()=>{\n        observers.forEach((o)=>{\n            if (o.renderForeground) o.renderForeground();\n        });\n    };\n    self.clear = ()=>{\n        observers.forEach((o)=>{\n            if (o.clear) o.clear();\n        });\n    };\n    self.clearForeground = ()=>{\n        observers.forEach((o)=>{\n            if (o.clearForeground) o.clearForeground();\n        });\n    };\n}\n\n\nfunction $6c551221973b5c3e$export$2e2bcd8739ae039(pub, simOptions, changes) {\n    const self = this;\n    pub.attach(self);\n    self.viewModes = {\n        one: new (0, $9b222bf6a5bc24a5$export$2e2bcd8739ae039)(),\n        sample: new (0, $9b222bf6a5bc24a5$export$2e2bcd8739ae039)()\n    };\n    let viewModeState = self.viewModes[simOptions.mode];\n    self.update = (simData)=>{\n        // state: check for change, exit, set, enter, update.\n        if (changes.check([\n            \"mode\"\n        ])) {\n            viewModeState.exit();\n            viewModeState = self.viewModes[simOptions.mode];\n            viewModeState.enter();\n        }\n        viewModeState.update(simData);\n    };\n    self.render = ()=>{\n        viewModeState.render();\n    };\n    self.renderForeground = ()=>{\n        viewModeState.renderForeground();\n    };\n    self.clear = ()=>{\n        viewModeState.clear();\n    };\n    self.clearForeground = ()=>{\n        viewModeState.clearForeground();\n    };\n    self.rerender = ()=>{\n        self.clear();\n        self.clearForeground();\n        self.render();\n        self.renderForeground();\n    };\n}\n\n\n/* eslint-disable no-new */ /** @module */ \nvar $79Zf3 = parcelRequire(\"79Zf3\");\n/** @module */ /**\r\n * Set event handlers for a screen.foreground.\r\n * We want to set the handlers once for the canvas,\r\n * and use this class to change the functions that the handlers call.\r\n * Then allow sim modes to set the functions called by the handlers.\r\n * @constructor\r\n */ function $12c10003ce90c043$export$2e2bcd8739ae039() {\n    const self = this;\n    // Event Handlers - well, at least they handle the event handlers//\n    self.handlers = {\n        start: ()=>{},\n        move: ()=>{},\n        end: ()=>{},\n        touchmove: ()=>{},\n        touchstart: ()=>{},\n        touchend: ()=>{}\n    };\n    // overwrite event handlers\n    self.set = (eHandlers)=>{\n        Object.assign(self.handlers, eHandlers);\n    };\n}\n\n\n/** @module */ /**\r\n * Use scaling for high DPI devices instead of multiplying every time inside draw calls\r\n * https://www.html5rocks.com/en/tutorials/canvas/hidpi/\r\n * @param context drawing context\r\n * @returns Number\r\n */ function $c21df8477d751e1a$export$2e2bcd8739ae039(context) {\n    const backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    return (window.devicePixelRatio || 1) / backingStore;\n}\n\n\nfunction $8ab30dbd0c8eb7ea$export$2e2bcd8739ae039() {\n    const self = this;\n    self.background = document.createElement(\"canvas\");\n    self.background.setAttribute(\"class\", \"background\");\n    self.ctx = self.background.getContext(\"2d\");\n    self.foreground = document.createElement(\"canvas\");\n    self.foreground.setAttribute(\"class\", \"foreground\");\n    self.fctx = self.foreground.getContext(\"2d\");\n    self.setSize = (w, h)=>{\n        const wpx = `${w}px`;\n        const hpx = `${h}px`;\n        const r = self.pixelRatio;\n        const wd = w * r // measured in device pixels\n        ;\n        const hd = h * r;\n        self.background.width = wd;\n        self.background.height = hd;\n        self.background.style.width = wpx;\n        self.background.style.height = hpx;\n        self.foreground.width = wd;\n        self.foreground.height = hd;\n        self.foreground.style.width = wpx;\n        self.foreground.style.height = hpx;\n        self.ctx.scale(r, r);\n        self.fctx.scale(r, r);\n    };\n    self.setDisplayStyle = (displayStyle)=>{\n        self.background.style.display = displayStyle;\n        self.foreground.style.display = displayStyle;\n    };\n    self.setStrokeStyle = (s)=>{\n        self.ctx.strokeStyle = s;\n        self.fctx.strokeStyle = s;\n    };\n    self.pixelRatio = (0, $c21df8477d751e1a$export$2e2bcd8739ae039)(self.ctx);\n}\n\n\n/** @module */ /**\r\n * Make the download link part of the screen.\r\n */ function $e176139983db3b57$export$2e2bcd8739ae039(screen, viewMode) {\n    const self = this;\n    self.div = document.createElement(\"div\");\n    const makeSvgButton = document.createElement(\"button\");\n    makeSvgButton.className = \"button2\";\n    makeSvgButton.innerText = \"Make SVG\";\n    makeSvgButton.onclick = makeSVG;\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.innerText = \"vote.svg\";\n    downloadLink.download = \"vote.svg\";\n    downloadLink.style.margin = \"4px\";\n    self.div.append(makeSvgButton);\n    self.div.appendChild(downloadLink);\n    self.setShowDownloadScreenLink = (show)=>{\n        if (show) {\n            makeSvgButton.hidden = false;\n            downloadLink.hidden = false;\n        } else {\n            makeSvgButton.hidden = true;\n            downloadLink.hidden = true;\n        }\n    };\n    self.setShowDownloadScreenLink(screen.common.showDownloadScreenLink);\n    function makeSVG() {\n        screen.setFCtx(screen.svg.ctx);\n        viewMode.clear();\n        viewMode.render();\n        viewMode.renderForeground();\n        const svg = screen.svg.ctx.getSerializedSvg(true);\n        const url = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;\n        downloadLink.href = url;\n        screen.setFCtx(screen.svg.fctx);\n        viewMode.rerender();\n    }\n}\n\n\n/** @module */ /*!!\n *  Canvas 2 Svg v1.0.21\n *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.\n *\n *  Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  Author:\n *  Kerry Liu\n *\n *  Copyright (c) 2014 Gliffy Inc.\n */ var $c290346a087eae0d$var$STYLES, $c290346a087eae0d$var$ctx, $c290346a087eae0d$var$CanvasGradient, $c290346a087eae0d$var$CanvasPattern, $c290346a087eae0d$var$namedEntities;\n//helper function to format a string\nfunction $c290346a087eae0d$var$format(str, args) {\n    var keys = Object.keys(args), i;\n    for(i = 0; i < keys.length; i++)str = str.replace(new RegExp(\"\\\\{\" + keys[i] + \"\\\\}\", \"gi\"), args[keys[i]]);\n    return str;\n}\n//helper function that generates a random string\nfunction $c290346a087eae0d$var$randomString(holder) {\n    var chars, randomstring, i;\n    if (!holder) throw new Error(\"cannot create a random attribute name for an undefined object\");\n    chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\";\n    randomstring = \"\";\n    do {\n        randomstring = \"\";\n        for(i = 0; i < 12; i++)randomstring += chars[Math.floor(Math.random() * chars.length)];\n    }while (holder[randomstring]);\n    return randomstring;\n}\n//helper function to map named to numbered entities\nfunction $c290346a087eae0d$var$createNamedToNumberedLookup(items, radix) {\n    var i, entity, lookup = {}, base10, base16;\n    items = items.split(\",\");\n    radix = radix || 10;\n    // Map from named to numbered entities.\n    for(i = 0; i < items.length; i += 2){\n        entity = \"&\" + items[i + 1] + \";\";\n        base10 = parseInt(items[i], radix);\n        lookup[entity] = \"&#\" + base10 + \";\";\n    }\n    //FF and IE need to create a regex from hex values ie &nbsp; == \\xa0\n    lookup[\"\\\\xa0\"] = \"&#160;\";\n    return lookup;\n}\n//helper function to map canvas-textAlign to svg-textAnchor\nfunction $c290346a087eae0d$var$getTextAnchor(textAlign) {\n    //TODO: support rtl languages\n    var mapping = {\n        \"left\": \"start\",\n        \"right\": \"end\",\n        \"center\": \"middle\",\n        \"start\": \"start\",\n        \"end\": \"end\"\n    };\n    return mapping[textAlign] || mapping.start;\n}\n//helper function to map canvas-textBaseline to svg-dominantBaseline\nfunction $c290346a087eae0d$var$getDominantBaseline(textBaseline) {\n    //INFO: not supported in all browsers\n    var mapping = {\n        \"alphabetic\": \"alphabetic\",\n        \"hanging\": \"hanging\",\n        \"top\": \"text-before-edge\",\n        \"bottom\": \"text-after-edge\",\n        \"middle\": \"central\"\n    };\n    return mapping[textBaseline] || mapping.alphabetic;\n}\n// Unpack entities lookup where the numbers are in radix 32 to reduce the size\n// entity mapping courtesy of tinymce\n$c290346a087eae0d$var$namedEntities = $c290346a087eae0d$var$createNamedToNumberedLookup(\"50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,t9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro\", 32);\n//Some basic mappings for attributes and default values.\n$c290346a087eae0d$var$STYLES = {\n    \"strokeStyle\": {\n        svgAttr: \"stroke\",\n        canvas: \"#000000\",\n        svg: \"none\",\n        apply: \"stroke\" //apply on stroke() or fill()\n    },\n    \"fillStyle\": {\n        svgAttr: \"fill\",\n        canvas: \"#000000\",\n        svg: null,\n        apply: \"fill\"\n    },\n    \"lineCap\": {\n        svgAttr: \"stroke-linecap\",\n        canvas: \"butt\",\n        svg: \"butt\",\n        apply: \"stroke\"\n    },\n    \"lineJoin\": {\n        svgAttr: \"stroke-linejoin\",\n        canvas: \"miter\",\n        svg: \"miter\",\n        apply: \"stroke\"\n    },\n    \"miterLimit\": {\n        svgAttr: \"stroke-miterlimit\",\n        canvas: 10,\n        svg: 4,\n        apply: \"stroke\"\n    },\n    \"lineWidth\": {\n        svgAttr: \"stroke-width\",\n        canvas: 1,\n        svg: 1,\n        apply: \"stroke\"\n    },\n    \"globalAlpha\": {\n        svgAttr: \"opacity\",\n        canvas: 1,\n        svg: 1,\n        apply: \"fill stroke\"\n    },\n    \"font\": {\n        //font converts to multiple svg attributes, there is custom logic for this\n        canvas: \"10px sans-serif\"\n    },\n    \"shadowColor\": {\n        canvas: \"#000000\"\n    },\n    \"shadowOffsetX\": {\n        canvas: 0\n    },\n    \"shadowOffsetY\": {\n        canvas: 0\n    },\n    \"shadowBlur\": {\n        canvas: 0\n    },\n    \"textAlign\": {\n        canvas: \"start\"\n    },\n    \"textBaseline\": {\n        canvas: \"alphabetic\"\n    },\n    \"lineDash\": {\n        svgAttr: \"stroke-dasharray\",\n        canvas: [],\n        svg: null,\n        apply: \"stroke\"\n    }\n};\n/**\n     *\n     * @param gradientNode - reference to the gradient\n     * @constructor\n     */ $c290346a087eae0d$var$CanvasGradient = function(gradientNode, ctx) {\n    this.__root = gradientNode;\n    this.__ctx = ctx;\n};\n/**\n     * Adds a color stop to the gradient root\n     */ $c290346a087eae0d$var$CanvasGradient.prototype.addColorStop = function(offset, color) {\n    var stop = this.__ctx.__createElement(\"stop\"), regex, matches;\n    stop.setAttribute(\"offset\", offset);\n    if (color.indexOf(\"rgba\") !== -1) {\n        //separate alpha value, since webkit can't handle it\n        regex = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?\\.?\\d*)\\s*\\)/gi;\n        matches = regex.exec(color);\n        stop.setAttribute(\"stop-color\", $c290346a087eae0d$var$format(\"rgb({r},{g},{b})\", {\n            r: matches[1],\n            g: matches[2],\n            b: matches[3]\n        }));\n        stop.setAttribute(\"stop-opacity\", matches[4]);\n    } else stop.setAttribute(\"stop-color\", color);\n    this.__root.appendChild(stop);\n};\n$c290346a087eae0d$var$CanvasPattern = function(pattern, ctx) {\n    this.__root = pattern;\n    this.__ctx = ctx;\n};\n/**\n     * The mock canvas context\n     * @param o - options include:\n     * ctx - existing Context2D to wrap around\n     * width - width of your canvas (defaults to 500)\n     * height - height of your canvas (defaults to 500)\n     * enableMirroring - enables canvas mirroring (get image data) (defaults to false)\n     * document - the document object (defaults to the current document)\n     */ $c290346a087eae0d$var$ctx = function(o) {\n    var defaultOptions = {\n        width: 500,\n        height: 500,\n        enableMirroring: false\n    }, options;\n    //keep support for this way of calling C2S: new C2S(width,height)\n    if (arguments.length > 1) {\n        options = defaultOptions;\n        options.width = arguments[0];\n        options.height = arguments[1];\n    } else if (!o) options = defaultOptions;\n    else options = o;\n    if (!(this instanceof $c290346a087eae0d$var$ctx)) //did someone call this without new?\n    return new $c290346a087eae0d$var$ctx(options);\n    //setup options\n    this.width = options.width || defaultOptions.width;\n    this.height = options.height || defaultOptions.height;\n    this.enableMirroring = options.enableMirroring !== undefined ? options.enableMirroring : defaultOptions.enableMirroring;\n    this.canvas = this; ///point back to this instance!\n    this.__document = options.document || document;\n    // allow passing in an existing context to wrap around\n    // if a context is passed in, we know a canvas already exist\n    if (options.ctx) this.__ctx = options.ctx;\n    else {\n        this.__canvas = this.__document.createElement(\"canvas\");\n        this.__ctx = this.__canvas.getContext(\"2d\");\n    }\n    this.__setDefaultStyles();\n    this.__stack = [\n        this.__getStyleState()\n    ];\n    this.__groupStack = [];\n    //the root svg element\n    this.__root = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.__root.setAttribute(\"version\", 1.1);\n    this.__root.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    this.__root.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n    this.__root.setAttribute(\"width\", this.width);\n    this.__root.setAttribute(\"height\", this.height);\n    //make sure we don't generate the same ids in defs\n    this.__ids = {};\n    //defs tag\n    this.__defs = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n    this.__root.appendChild(this.__defs);\n    //also add a group child. the svg element can't use the transform attribute\n    this.__currentElement = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    this.__root.appendChild(this.__currentElement);\n};\n/**\n     * Creates the specified svg element\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__createElement = function(elementName, properties, resetFill) {\n    if (typeof properties === \"undefined\") properties = {};\n    var element = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", elementName), keys = Object.keys(properties), i, key;\n    if (resetFill) {\n        //if fill or stroke is not specified, the svg element should not display. By default SVG's fill is black.\n        element.setAttribute(\"fill\", \"none\");\n        element.setAttribute(\"stroke\", \"none\");\n    }\n    for(i = 0; i < keys.length; i++){\n        key = keys[i];\n        element.setAttribute(key, properties[key]);\n    }\n    return element;\n};\n/**\n     * Applies default canvas styles to the context\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__setDefaultStyles = function() {\n    //default 2d canvas context properties see:http://www.w3.org/TR/2dcontext/\n    var keys = Object.keys($c290346a087eae0d$var$STYLES), i, key;\n    for(i = 0; i < keys.length; i++){\n        key = keys[i];\n        this[key] = $c290346a087eae0d$var$STYLES[key].canvas;\n    }\n};\n/**\n     * Applies styles on restore\n     * @param styleState\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__applyStyleState = function(styleState) {\n    var keys = Object.keys(styleState), i, key;\n    for(i = 0; i < keys.length; i++){\n        key = keys[i];\n        this[key] = styleState[key];\n    }\n};\n/**\n     * Gets the current style state\n     * @return {Object}\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__getStyleState = function() {\n    var i, styleState = {}, keys = Object.keys($c290346a087eae0d$var$STYLES), key;\n    for(i = 0; i < keys.length; i++){\n        key = keys[i];\n        styleState[key] = this[key];\n    }\n    return styleState;\n};\n/**\n     * Apples the current styles to the current SVG element. On \"ctx.fill\" or \"ctx.stroke\"\n     * @param type\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__applyStyleToCurrentElement = function(type) {\n    var currentElement = this.__currentElement;\n    var currentStyleGroup = this.__currentElementsToStyle;\n    if (currentStyleGroup) {\n        currentElement.setAttribute(type, \"\");\n        currentElement = currentStyleGroup.element;\n        currentStyleGroup.children.forEach(function(node) {\n            node.setAttribute(type, \"\");\n        });\n    }\n    var keys = Object.keys($c290346a087eae0d$var$STYLES), i, style, value, id, regex, matches;\n    for(i = 0; i < keys.length; i++){\n        style = $c290346a087eae0d$var$STYLES[keys[i]];\n        value = this[keys[i]];\n        if (style.apply) {\n            //is this a gradient or pattern?\n            if (value instanceof $c290346a087eae0d$var$CanvasPattern) {\n                //pattern\n                if (value.__ctx) //copy over defs\n                while(value.__ctx.__defs.childNodes.length){\n                    id = value.__ctx.__defs.childNodes[0].getAttribute(\"id\");\n                    this.__ids[id] = id;\n                    this.__defs.appendChild(value.__ctx.__defs.childNodes[0]);\n                }\n                currentElement.setAttribute(style.apply, $c290346a087eae0d$var$format(\"url(#{id})\", {\n                    id: value.__root.getAttribute(\"id\")\n                }));\n            } else if (value instanceof $c290346a087eae0d$var$CanvasGradient) //gradient\n            currentElement.setAttribute(style.apply, $c290346a087eae0d$var$format(\"url(#{id})\", {\n                id: value.__root.getAttribute(\"id\")\n            }));\n            else if (style.apply.indexOf(type) !== -1 && style.svg !== value) {\n                if ((style.svgAttr === \"stroke\" || style.svgAttr === \"fill\") && value.indexOf(\"rgba\") !== -1) {\n                    //separate alpha value, since illustrator can't handle it\n                    regex = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?\\.?\\d*)\\s*\\)/gi;\n                    matches = regex.exec(value);\n                    currentElement.setAttribute(style.svgAttr, $c290346a087eae0d$var$format(\"rgb({r},{g},{b})\", {\n                        r: matches[1],\n                        g: matches[2],\n                        b: matches[3]\n                    }));\n                    //should take globalAlpha here\n                    var opacity = matches[4];\n                    var globalAlpha = this.globalAlpha;\n                    if (globalAlpha != null) opacity *= globalAlpha;\n                    currentElement.setAttribute(style.svgAttr + \"-opacity\", opacity);\n                } else {\n                    var attr = style.svgAttr;\n                    if (keys[i] === \"globalAlpha\") {\n                        attr = type + \"-\" + style.svgAttr;\n                        if (currentElement.getAttribute(attr)) continue;\n                    }\n                    //otherwise only update attribute if right type, and not svg default\n                    currentElement.setAttribute(attr, value);\n                }\n            }\n        }\n    }\n};\n/**\n     * Will return the closest group or svg node. May return the current element.\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__closestGroupOrSvg = function(node) {\n    node = node || this.__currentElement;\n    if (node.nodeName === \"g\" || node.nodeName === \"svg\") return node;\n    else return this.__closestGroupOrSvg(node.parentNode);\n};\n/**\n     * Returns the serialized value of the svg so far\n     * @param fixNamedEntities - Standalone SVG doesn't support named entities, which document.createTextNode encodes.\n     *                           If true, we attempt to find all named entities and encode it as a numeric entity.\n     * @return serialized svg\n     */ $c290346a087eae0d$var$ctx.prototype.getSerializedSvg = function(fixNamedEntities) {\n    var serialized = new XMLSerializer().serializeToString(this.__root), keys, i, key, value, regexp, xmlns;\n    //IE search for a duplicate xmnls because they didn't implement setAttributeNS correctly\n    xmlns = /xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg\".+xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg/gi;\n    if (xmlns.test(serialized)) serialized = serialized.replace('xmlns=\"http://www.w3.org/2000/svg', 'xmlns:xlink=\"http://www.w3.org/1999/xlink');\n    if (fixNamedEntities) {\n        keys = Object.keys($c290346a087eae0d$var$namedEntities);\n        //loop over each named entity and replace with the proper equivalent.\n        for(i = 0; i < keys.length; i++){\n            key = keys[i];\n            value = $c290346a087eae0d$var$namedEntities[key];\n            regexp = new RegExp(key, \"gi\");\n            if (regexp.test(serialized)) serialized = serialized.replace(regexp, value);\n        }\n    }\n    return serialized;\n};\n/**\n     * Returns the root svg\n     * @return\n     */ $c290346a087eae0d$var$ctx.prototype.getSvg = function() {\n    return this.__root;\n};\n/**\n     * Will generate a group tag.\n     */ $c290346a087eae0d$var$ctx.prototype.save = function() {\n    var group = this.__createElement(\"g\");\n    var parent = this.__closestGroupOrSvg();\n    this.__groupStack.push(parent);\n    parent.appendChild(group);\n    this.__currentElement = group;\n    this.__stack.push(this.__getStyleState());\n};\n/**\n     * Sets current element to parent, or just root if already root\n     */ $c290346a087eae0d$var$ctx.prototype.restore = function() {\n    this.__currentElement = this.__groupStack.pop();\n    this.__currentElementsToStyle = null;\n    //Clearing canvas will make the poped group invalid, currentElement is set to the root group node.\n    if (!this.__currentElement) this.__currentElement = this.__root.childNodes[1];\n    var state = this.__stack.pop();\n    this.__applyStyleState(state);\n};\n/**\n     * Helper method to add transform\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__addTransform = function(t) {\n    //if the current element has siblings, add another group\n    var parent = this.__closestGroupOrSvg();\n    if (parent.childNodes.length > 0) {\n        if (this.__currentElement.nodeName === \"path\") {\n            if (!this.__currentElementsToStyle) this.__currentElementsToStyle = {\n                element: parent,\n                children: []\n            };\n            this.__currentElementsToStyle.children.push(this.__currentElement);\n            this.__applyCurrentDefaultPath();\n        }\n        var group = this.__createElement(\"g\");\n        parent.appendChild(group);\n        this.__currentElement = group;\n    }\n    var transform = this.__currentElement.getAttribute(\"transform\");\n    if (transform) transform += \" \";\n    else transform = \"\";\n    transform += t;\n    this.__currentElement.setAttribute(\"transform\", transform);\n};\n/**\n     *  scales the current element\n     */ $c290346a087eae0d$var$ctx.prototype.scale = function(x, y) {\n    if (y === undefined) y = x;\n    this.__addTransform($c290346a087eae0d$var$format(\"scale({x},{y})\", {\n        x: x,\n        y: y\n    }));\n};\n/**\n     * rotates the current element\n     */ $c290346a087eae0d$var$ctx.prototype.rotate = function(angle) {\n    var degrees = angle * 180 / Math.PI;\n    this.__addTransform($c290346a087eae0d$var$format(\"rotate({angle},{cx},{cy})\", {\n        angle: degrees,\n        cx: 0,\n        cy: 0\n    }));\n};\n/**\n     * translates the current element\n     */ $c290346a087eae0d$var$ctx.prototype.translate = function(x, y) {\n    this.__addTransform($c290346a087eae0d$var$format(\"translate({x},{y})\", {\n        x: x,\n        y: y\n    }));\n};\n/**\n     * applies a transform to the current element\n     */ $c290346a087eae0d$var$ctx.prototype.transform = function(a, b, c, d, e, f) {\n    this.__addTransform($c290346a087eae0d$var$format(\"matrix({a},{b},{c},{d},{e},{f})\", {\n        a: a,\n        b: b,\n        c: c,\n        d: d,\n        e: e,\n        f: f\n    }));\n};\n/**\n     * Create a new Path Element\n     */ $c290346a087eae0d$var$ctx.prototype.beginPath = function() {\n    var path, parent;\n    // Note that there is only one current default path, it is not part of the drawing state.\n    // See also: https://html.spec.whatwg.org/multipage/scripting.html#current-default-path\n    this.__currentDefaultPath = \"\";\n    this.__currentPosition = {};\n    path = this.__createElement(\"path\", {}, true);\n    parent = this.__closestGroupOrSvg();\n    parent.appendChild(path);\n    this.__currentElement = path;\n};\n/**\n     * Helper function to apply currentDefaultPath to current path element\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__applyCurrentDefaultPath = function() {\n    var currentElement = this.__currentElement;\n    if (currentElement.nodeName === \"path\") currentElement.setAttribute(\"d\", this.__currentDefaultPath);\n    else console.error(\"Attempted to apply path command to node\", currentElement.nodeName);\n};\n/**\n     * Helper function to add path command\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__addPathCommand = function(command) {\n    this.__currentDefaultPath += \" \";\n    this.__currentDefaultPath += command;\n};\n/**\n     * Adds the move command to the current path element,\n     * if the currentPathElement is not empty create a new path element\n     */ $c290346a087eae0d$var$ctx.prototype.moveTo = function(x, y) {\n    if (this.__currentElement.nodeName !== \"path\") this.beginPath();\n    // creates a new subpath with the given point\n    this.__currentPosition = {\n        x: x,\n        y: y\n    };\n    this.__addPathCommand($c290346a087eae0d$var$format(\"M {x} {y}\", {\n        x: x,\n        y: y\n    }));\n};\n/**\n     * Closes the current path\n     */ $c290346a087eae0d$var$ctx.prototype.closePath = function() {\n    if (this.__currentDefaultPath) this.__addPathCommand(\"Z\");\n};\n/**\n     * Adds a line to command\n     */ $c290346a087eae0d$var$ctx.prototype.lineTo = function(x, y) {\n    this.__currentPosition = {\n        x: x,\n        y: y\n    };\n    if (this.__currentDefaultPath.indexOf(\"M\") > -1) this.__addPathCommand($c290346a087eae0d$var$format(\"L {x} {y}\", {\n        x: x,\n        y: y\n    }));\n    else this.__addPathCommand($c290346a087eae0d$var$format(\"M {x} {y}\", {\n        x: x,\n        y: y\n    }));\n};\n/**\n     * Add a bezier command\n     */ $c290346a087eae0d$var$ctx.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n    this.__currentPosition = {\n        x: x,\n        y: y\n    };\n    this.__addPathCommand($c290346a087eae0d$var$format(\"C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}\", {\n        cp1x: cp1x,\n        cp1y: cp1y,\n        cp2x: cp2x,\n        cp2y: cp2y,\n        x: x,\n        y: y\n    }));\n};\n/**\n     * Adds a quadratic curve to command\n     */ $c290346a087eae0d$var$ctx.prototype.quadraticCurveTo = function(cpx, cpy, x, y) {\n    this.__currentPosition = {\n        x: x,\n        y: y\n    };\n    this.__addPathCommand($c290346a087eae0d$var$format(\"Q {cpx} {cpy} {x} {y}\", {\n        cpx: cpx,\n        cpy: cpy,\n        x: x,\n        y: y\n    }));\n};\n/**\n     * Return a new normalized vector of given vector\n     */ var $c290346a087eae0d$var$normalize = function(vector) {\n    var len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);\n    return [\n        vector[0] / len,\n        vector[1] / len\n    ];\n};\n/**\n     * Adds the arcTo to the current path\n     *\n     * @see http://www.w3.org/TR/2015/WD-2dcontext-20150514/#dom-context-2d-arcto\n     */ $c290346a087eae0d$var$ctx.prototype.arcTo = function(x1, y1, x2, y2, radius) {\n    // Let the point (x0, y0) be the last point in the subpath.\n    var x0 = this.__currentPosition && this.__currentPosition.x;\n    var y0 = this.__currentPosition && this.__currentPosition.y;\n    // First ensure there is a subpath for (x1, y1).\n    if (typeof x0 == \"undefined\" || typeof y0 == \"undefined\") return;\n    // Negative values for radius must cause the implementation to throw an IndexSizeError exception.\n    if (radius < 0) throw new Error(\"IndexSizeError: The radius provided (\" + radius + \") is negative.\");\n    // If the point (x0, y0) is equal to the point (x1, y1),\n    // or if the point (x1, y1) is equal to the point (x2, y2),\n    // or if the radius radius is zero,\n    // then the method must add the point (x1, y1) to the subpath,\n    // and connect that point to the previous point (x0, y0) by a straight line.\n    if (x0 === x1 && y0 === y1 || x1 === x2 && y1 === y2 || radius === 0) {\n        this.lineTo(x1, y1);\n        return;\n    }\n    // Otherwise, if the points (x0, y0), (x1, y1), and (x2, y2) all lie on a single straight line,\n    // then the method must add the point (x1, y1) to the subpath,\n    // and connect that point to the previous point (x0, y0) by a straight line.\n    var unit_vec_p1_p0 = $c290346a087eae0d$var$normalize([\n        x0 - x1,\n        y0 - y1\n    ]);\n    var unit_vec_p1_p2 = $c290346a087eae0d$var$normalize([\n        x2 - x1,\n        y2 - y1\n    ]);\n    if (unit_vec_p1_p0[0] * unit_vec_p1_p2[1] === unit_vec_p1_p0[1] * unit_vec_p1_p2[0]) {\n        this.lineTo(x1, y1);\n        return;\n    }\n    // Otherwise, let The Arc be the shortest arc given by circumference of the circle that has radius radius,\n    // and that has one point tangent to the half-infinite line that crosses the point (x0, y0) and ends at the point (x1, y1),\n    // and that has a different point tangent to the half-infinite line that ends at the point (x1, y1), and crosses the point (x2, y2).\n    // The points at which this circle touches these two lines are called the start and end tangent points respectively.\n    // note that both vectors are unit vectors, so the length is 1\n    var cos = unit_vec_p1_p0[0] * unit_vec_p1_p2[0] + unit_vec_p1_p0[1] * unit_vec_p1_p2[1];\n    var theta = Math.acos(Math.abs(cos));\n    // Calculate origin\n    var unit_vec_p1_origin = $c290346a087eae0d$var$normalize([\n        unit_vec_p1_p0[0] + unit_vec_p1_p2[0],\n        unit_vec_p1_p0[1] + unit_vec_p1_p2[1]\n    ]);\n    var len_p1_origin = radius / Math.sin(theta / 2);\n    var x = x1 + len_p1_origin * unit_vec_p1_origin[0];\n    var y = y1 + len_p1_origin * unit_vec_p1_origin[1];\n    // Calculate start angle and end angle\n    // rotate 90deg clockwise (note that y axis points to its down)\n    var unit_vec_origin_start_tangent = [\n        -unit_vec_p1_p0[1],\n        unit_vec_p1_p0[0]\n    ];\n    // rotate 90deg counter clockwise (note that y axis points to its down)\n    var unit_vec_origin_end_tangent = [\n        unit_vec_p1_p2[1],\n        -unit_vec_p1_p2[0]\n    ];\n    var getAngle = function(vector) {\n        // get angle (clockwise) between vector and (1, 0)\n        var x = vector[0];\n        var y = vector[1];\n        if (y >= 0) return Math.acos(x);\n        else return -Math.acos(x);\n    };\n    var startAngle = getAngle(unit_vec_origin_start_tangent);\n    var endAngle = getAngle(unit_vec_origin_end_tangent);\n    // Connect the point (x0, y0) to the start tangent point by a straight line\n    this.lineTo(x + unit_vec_origin_start_tangent[0] * radius, y + unit_vec_origin_start_tangent[1] * radius);\n    // Connect the start tangent point to the end tangent point by arc\n    // and adding the end tangent point to the subpath.\n    this.arc(x, y, radius, startAngle, endAngle);\n};\n/**\n     * Sets the stroke property on the current element\n     */ $c290346a087eae0d$var$ctx.prototype.stroke = function() {\n    if (this.__currentElement.nodeName === \"path\") this.__currentElement.setAttribute(\"paint-order\", \"fill stroke markers\");\n    this.__applyCurrentDefaultPath();\n    this.__applyStyleToCurrentElement(\"stroke\");\n};\n/**\n     * Sets fill properties on the current element\n     */ $c290346a087eae0d$var$ctx.prototype.fill = function() {\n    if (this.__currentElement.nodeName === \"path\") this.__currentElement.setAttribute(\"paint-order\", \"stroke fill markers\");\n    this.__applyCurrentDefaultPath();\n    this.__applyStyleToCurrentElement(\"fill\");\n};\n/**\n     *  Adds a rectangle to the path.\n     */ $c290346a087eae0d$var$ctx.prototype.rect = function(x, y, width, height) {\n    if (this.__currentElement.nodeName !== \"path\") this.beginPath();\n    this.moveTo(x, y);\n    this.lineTo(x + width, y);\n    this.lineTo(x + width, y + height);\n    this.lineTo(x, y + height);\n    this.lineTo(x, y);\n    this.closePath();\n};\n/**\n     * adds a rectangle element\n     */ $c290346a087eae0d$var$ctx.prototype.fillRect = function(x, y, width, height) {\n    var rect, parent;\n    rect = this.__createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n    }, true);\n    parent = this.__closestGroupOrSvg();\n    parent.appendChild(rect);\n    this.__currentElement = rect;\n    this.__applyStyleToCurrentElement(\"fill\");\n};\n/**\n     * Draws a rectangle with no fill\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */ $c290346a087eae0d$var$ctx.prototype.strokeRect = function(x, y, width, height) {\n    var rect, parent;\n    rect = this.__createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n    }, true);\n    parent = this.__closestGroupOrSvg();\n    parent.appendChild(rect);\n    this.__currentElement = rect;\n    this.__applyStyleToCurrentElement(\"stroke\");\n};\n/**\n     * Clear entire canvas:\n     * 1. save current transforms\n     * 2. remove all the childNodes of the root g element\n     */ $c290346a087eae0d$var$ctx.prototype.__clearCanvas = function() {\n    var current = this.__closestGroupOrSvg(), transform = current.getAttribute(\"transform\");\n    var rootGroup = this.__root.childNodes[1];\n    var childNodes = rootGroup.childNodes;\n    for(var i = childNodes.length - 1; i >= 0; i--)if (childNodes[i]) rootGroup.removeChild(childNodes[i]);\n    this.__currentElement = rootGroup;\n    //reset __groupStack as all the child group nodes are all removed.\n    this.__groupStack = [];\n    if (transform) this.__addTransform(transform);\n};\n/**\n     * \"Clears\" a canvas by just drawing a white rectangle in the current group.\n     */ $c290346a087eae0d$var$ctx.prototype.clearRect = function(x, y, width, height) {\n    //clear entire canvas\n    if (x === 0 && y === 0 && width === this.width && height === this.height) {\n        this.__clearCanvas();\n        return;\n    }\n    var rect, parent = this.__closestGroupOrSvg();\n    rect = this.__createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: \"#FFFFFF\"\n    }, true);\n    parent.appendChild(rect);\n};\n/**\n     * Adds a linear gradient to a defs tag.\n     * Returns a canvas gradient object that has a reference to it's parent def\n     */ $c290346a087eae0d$var$ctx.prototype.createLinearGradient = function(x1, y1, x2, y2) {\n    var grad = this.__createElement(\"linearGradient\", {\n        id: $c290346a087eae0d$var$randomString(this.__ids),\n        x1: x1 + \"px\",\n        x2: x2 + \"px\",\n        y1: y1 + \"px\",\n        y2: y2 + \"px\",\n        \"gradientUnits\": \"userSpaceOnUse\"\n    }, false);\n    this.__defs.appendChild(grad);\n    return new $c290346a087eae0d$var$CanvasGradient(grad, this);\n};\n/**\n     * Adds a radial gradient to a defs tag.\n     * Returns a canvas gradient object that has a reference to it's parent def\n     */ $c290346a087eae0d$var$ctx.prototype.createRadialGradient = function(x0, y0, r0, x1, y1, r1) {\n    var grad = this.__createElement(\"radialGradient\", {\n        id: $c290346a087eae0d$var$randomString(this.__ids),\n        cx: x1 + \"px\",\n        cy: y1 + \"px\",\n        r: r1 + \"px\",\n        fx: x0 + \"px\",\n        fy: y0 + \"px\",\n        \"gradientUnits\": \"userSpaceOnUse\"\n    }, false);\n    this.__defs.appendChild(grad);\n    return new $c290346a087eae0d$var$CanvasGradient(grad, this);\n};\n/**\n     * Parses the font string and returns svg mapping\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__parseFont = function() {\n    var regex = /^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))(?:\\s*\\/\\s*(normal|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])))?\\s*([-,\\'\\\"\\sa-z0-9]+?)\\s*$/i;\n    var fontPart = regex.exec(this.font);\n    var data = {\n        style: fontPart[1] || \"normal\",\n        size: fontPart[4] || \"10px\",\n        family: fontPart[6] || \"sans-serif\",\n        weight: fontPart[3] || \"normal\",\n        decoration: fontPart[2] || \"normal\",\n        href: null\n    };\n    //canvas doesn't support underline natively, but we can pass this attribute\n    if (this.__fontUnderline === \"underline\") data.decoration = \"underline\";\n    //canvas also doesn't support linking, but we can pass this as well\n    if (this.__fontHref) data.href = this.__fontHref;\n    return data;\n};\n/**\n     * Helper to link text fragments\n     * @param font\n     * @param element\n     * @return {*}\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__wrapTextLink = function(font, element) {\n    if (font.href) {\n        var a = this.__createElement(\"a\");\n        a.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", font.href);\n        a.appendChild(element);\n        return a;\n    }\n    return element;\n};\n/**\n     * Fills or strokes text\n     * @param text\n     * @param x\n     * @param y\n     * @param action - stroke or fill\n     * @private\n     */ $c290346a087eae0d$var$ctx.prototype.__applyText = function(text, x, y, action) {\n    var font = this.__parseFont(), parent = this.__closestGroupOrSvg(), textElement = this.__createElement(\"text\", {\n        \"font-family\": font.family,\n        \"font-size\": font.size,\n        \"font-style\": font.style,\n        \"font-weight\": font.weight,\n        \"text-decoration\": font.decoration,\n        \"x\": x,\n        \"y\": y,\n        \"text-anchor\": $c290346a087eae0d$var$getTextAnchor(this.textAlign),\n        \"dominant-baseline\": $c290346a087eae0d$var$getDominantBaseline(this.textBaseline)\n    }, true);\n    textElement.appendChild(this.__document.createTextNode(text));\n    this.__currentElement = textElement;\n    this.__applyStyleToCurrentElement(action);\n    parent.appendChild(this.__wrapTextLink(font, textElement));\n};\n/**\n     * Creates a text element\n     * @param text\n     * @param x\n     * @param y\n     */ $c290346a087eae0d$var$ctx.prototype.fillText = function(text, x, y) {\n    this.__applyText(text, x, y, \"fill\");\n};\n/**\n     * Strokes text\n     * @param text\n     * @param x\n     * @param y\n     */ $c290346a087eae0d$var$ctx.prototype.strokeText = function(text, x, y) {\n    this.__applyText(text, x, y, \"stroke\");\n};\n/**\n     * No need to implement this for svg.\n     * @param text\n     * @return {TextMetrics}\n     */ $c290346a087eae0d$var$ctx.prototype.measureText = function(text) {\n    this.__ctx.font = this.font;\n    return this.__ctx.measureText(text);\n};\n/**\n     *  Arc command!\n     */ $c290346a087eae0d$var$ctx.prototype.arc = function(x, y, radius, startAngle, endAngle, counterClockwise) {\n    // in canvas no circle is drawn if no angle is provided.\n    if (startAngle === endAngle) return;\n    startAngle = startAngle % (2 * Math.PI);\n    endAngle = endAngle % (2 * Math.PI);\n    if (startAngle === endAngle) //circle time! subtract some of the angle so svg is happy (svg elliptical arc can't draw a full circle)\n    endAngle = (endAngle + 2 * Math.PI - 0.001 * (counterClockwise ? -1 : 1)) % (2 * Math.PI);\n    var endX = x + radius * Math.cos(endAngle), endY = y + radius * Math.sin(endAngle), startX = x + radius * Math.cos(startAngle), startY = y + radius * Math.sin(startAngle), sweepFlag = counterClockwise ? 0 : 1, largeArcFlag = 0, diff = endAngle - startAngle;\n    // https://github.com/gliffy/canvas2svg/issues/4\n    if (diff < 0) diff += 2 * Math.PI;\n    if (counterClockwise) largeArcFlag = diff > Math.PI ? 0 : 1;\n    else largeArcFlag = diff > Math.PI ? 1 : 0;\n    this.lineTo(startX, startY);\n    this.__addPathCommand($c290346a087eae0d$var$format(\"A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}\", {\n        rx: radius,\n        ry: radius,\n        xAxisRotation: 0,\n        largeArcFlag: largeArcFlag,\n        sweepFlag: sweepFlag,\n        endX: endX,\n        endY: endY\n    }));\n    this.__currentPosition = {\n        x: endX,\n        y: endY\n    };\n};\n/**\n     * Generates a ClipPath from the clip command.\n     */ $c290346a087eae0d$var$ctx.prototype.clip = function() {\n    var group = this.__closestGroupOrSvg(), clipPath = this.__createElement(\"clipPath\"), id = $c290346a087eae0d$var$randomString(this.__ids), newGroup = this.__createElement(\"g\");\n    this.__applyCurrentDefaultPath();\n    group.removeChild(this.__currentElement);\n    clipPath.setAttribute(\"id\", id);\n    clipPath.appendChild(this.__currentElement);\n    this.__defs.appendChild(clipPath);\n    //set the clip path to this group\n    group.setAttribute(\"clip-path\", $c290346a087eae0d$var$format(\"url(#{id})\", {\n        id: id\n    }));\n    //clip paths can be scaled and transformed, we need to add another wrapper group to avoid later transformations\n    // to this path\n    group.appendChild(newGroup);\n    this.__currentElement = newGroup;\n};\n/**\n     * Draws a canvas, image or mock context to this canvas.\n     * Note that all svg dom manipulation uses node.childNodes rather than node.children for IE support.\n     * http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-drawimage\n     */ $c290346a087eae0d$var$ctx.prototype.drawImage = function() {\n    //convert arguments to a real array\n    var args = Array.prototype.slice.call(arguments), image = args[0], dx, dy, dw, dh, sx = 0, sy = 0, sw, sh, parent, svg, defs, group, currentElement, svgImage, canvas, context, id;\n    if (args.length === 3) {\n        dx = args[1];\n        dy = args[2];\n        sw = image.width;\n        sh = image.height;\n        dw = sw;\n        dh = sh;\n    } else if (args.length === 5) {\n        dx = args[1];\n        dy = args[2];\n        dw = args[3];\n        dh = args[4];\n        sw = image.width;\n        sh = image.height;\n    } else if (args.length === 9) {\n        sx = args[1];\n        sy = args[2];\n        sw = args[3];\n        sh = args[4];\n        dx = args[5];\n        dy = args[6];\n        dw = args[7];\n        dh = args[8];\n    } else throw new Error(\"Inavlid number of arguments passed to drawImage: \" + arguments.length);\n    parent = this.__closestGroupOrSvg();\n    currentElement = this.__currentElement;\n    var translateDirective = \"translate(\" + dx + \", \" + dy + \")\";\n    if (image instanceof $c290346a087eae0d$var$ctx) {\n        //canvas2svg mock canvas context. In the future we may want to clone nodes instead.\n        //also I'm currently ignoring dw, dh, sw, sh, sx, sy for a mock context.\n        svg = image.getSvg().cloneNode(true);\n        if (svg.childNodes && svg.childNodes.length > 1) {\n            defs = svg.childNodes[0];\n            while(defs.childNodes.length){\n                id = defs.childNodes[0].getAttribute(\"id\");\n                this.__ids[id] = id;\n                this.__defs.appendChild(defs.childNodes[0]);\n            }\n            group = svg.childNodes[1];\n            if (group) {\n                //save original transform\n                var originTransform = group.getAttribute(\"transform\");\n                var transformDirective;\n                if (originTransform) transformDirective = originTransform + \" \" + translateDirective;\n                else transformDirective = translateDirective;\n                group.setAttribute(\"transform\", transformDirective);\n                parent.appendChild(group);\n            }\n        }\n    } else if (image.nodeName === \"IMG\") {\n        svgImage = this.__createElement(\"image\");\n        svgImage.setAttribute(\"width\", dw);\n        svgImage.setAttribute(\"height\", dh);\n        svgImage.setAttribute(\"preserveAspectRatio\", \"none\");\n        if (sx || sy || sw !== image.width || sh !== image.height) {\n            //crop the image using a temporary canvas\n            canvas = this.__document.createElement(\"canvas\");\n            canvas.width = dw;\n            canvas.height = dh;\n            context = canvas.getContext(\"2d\");\n            context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);\n            image = canvas;\n        }\n        svgImage.setAttribute(\"transform\", translateDirective);\n        svgImage.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", image.nodeName === \"CANVAS\" ? image.toDataURL() : image.getAttribute(\"src\"));\n        parent.appendChild(svgImage);\n    } else if (image.nodeName === \"CANVAS\") {\n        svgImage = this.__createElement(\"image\");\n        svgImage.setAttribute(\"width\", dw);\n        svgImage.setAttribute(\"height\", dh);\n        svgImage.setAttribute(\"preserveAspectRatio\", \"none\");\n        // draw canvas onto temporary canvas so that smoothing can be handled\n        canvas = this.__document.createElement(\"canvas\");\n        canvas.width = dw;\n        canvas.height = dh;\n        context = canvas.getContext(\"2d\");\n        context.imageSmoothingEnabled = false;\n        context.mozImageSmoothingEnabled = false;\n        context.oImageSmoothingEnabled = false;\n        context.webkitImageSmoothingEnabled = false;\n        context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);\n        image = canvas;\n        svgImage.setAttribute(\"transform\", translateDirective);\n        svgImage.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", image.toDataURL());\n        parent.appendChild(svgImage);\n    }\n};\n$c290346a087eae0d$var$ctx.prototype.drawImageSvg = function() {\n    //convert arguments to a real array\n    var args = Array.prototype.slice.call(arguments), image = args[0], dx, dy, dw, dh, sx = 0, sy = 0, sw, sh, parent, svg, defs, group, currentElement, svgImage, canvas, context, id;\n    if (args.length === 3) {\n        dx = args[1];\n        dy = args[2];\n        sw = image.width;\n        sh = image.height;\n        dw = sw;\n        dh = sh;\n    } else if (args.length === 5) {\n        dx = args[1];\n        dy = args[2];\n        dw = args[3];\n        dh = args[4];\n        sw = image.width;\n        sh = image.height;\n    } else if (args.length === 9) {\n        sx = args[1];\n        sy = args[2];\n        sw = args[3];\n        sh = args[4];\n        dx = args[5];\n        dy = args[6];\n        dw = args[7];\n        dh = args[8];\n    } else throw new Error(\"Inavlid number of arguments passed to drawImage: \" + arguments.length);\n    parent = this.__closestGroupOrSvg();\n    currentElement = this.__currentElement;\n    var translateDirective = \"translate(\" + dx + \", \" + dy + \")\";\n    if (image instanceof SVGSVGElement) {\n        if (image.childNodes && image.childNodes.length > 1) {\n            var orgWidth = parseFloat(image.getAttribute(\"width\"));\n            var orgHeight = parseFloat(image.getAttribute(\"height\"));\n            image.setAttribute(\"width\", dw);\n            image.setAttribute(\"height\", dh);\n            var scaleW = dw / orgWidth;\n            var scaleH = dh / orgHeight;\n            defs = image.childNodes[0];\n            while(defs.childNodes.length){\n                id = defs.childNodes[0].getAttribute(\"id\");\n                this.__ids[id] = id;\n                this.__defs.appendChild(defs.childNodes[0]);\n            }\n            group = image.childNodes[1];\n            if (group) {\n                //save original transform\n                var originTransform = group.getAttribute(\"transform\");\n                var transformDirective;\n                if (originTransform) transformDirective = originTransform + \" \" + translateDirective;\n                else transformDirective = translateDirective;\n                group.setAttribute(\"transform\", transformDirective + \" scale(\" + scaleW + \", \" + scaleH + \")\");\n                parent.appendChild(group);\n            }\n        }\n    }\n};\n/**\n     * Generates a pattern tag\n     */ $c290346a087eae0d$var$ctx.prototype.createPattern = function(image, repetition) {\n    var pattern = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"pattern\"), id = $c290346a087eae0d$var$randomString(this.__ids), img;\n    pattern.setAttribute(\"id\", id);\n    pattern.setAttribute(\"width\", image.width);\n    pattern.setAttribute(\"height\", image.height);\n    if (image.nodeName === \"CANVAS\" || image.nodeName === \"IMG\") {\n        img = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\n        img.setAttribute(\"width\", image.width);\n        img.setAttribute(\"height\", image.height);\n        img.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", image.nodeName === \"CANVAS\" ? image.toDataURL() : image.getAttribute(\"src\"));\n        pattern.appendChild(img);\n        this.__defs.appendChild(pattern);\n    } else if (image instanceof $c290346a087eae0d$var$ctx) {\n        pattern.appendChild(image.__root.childNodes[1]);\n        this.__defs.appendChild(pattern);\n    }\n    return new $c290346a087eae0d$var$CanvasPattern(pattern, this);\n};\n$c290346a087eae0d$var$ctx.prototype.setLineDash = function(dashArray) {\n    if (dashArray && dashArray.length > 0) this.lineDash = dashArray.join(\",\");\n    else this.lineDash = null;\n};\n/**\n     * Not yet implemented\n     */ $c290346a087eae0d$var$ctx.prototype.drawFocusRing = function() {};\n$c290346a087eae0d$var$ctx.prototype.createImageData = function() {};\n$c290346a087eae0d$var$ctx.prototype.getImageData = function() {};\n$c290346a087eae0d$var$ctx.prototype.putImageData = function() {};\n$c290346a087eae0d$var$ctx.prototype.globalCompositeOperation = function() {};\n$c290346a087eae0d$var$ctx.prototype.setTransform = function() {};\nvar $c290346a087eae0d$export$2e2bcd8739ae039 = $c290346a087eae0d$var$ctx;\n\n\nfunction $d00d542cb927db53$export$2e2bcd8739ae039() {\n    const self = this;\n    self.ctx = new (0, $c290346a087eae0d$export$2e2bcd8739ae039)();\n    self.background = self.ctx.getSvg();\n    self.background.setAttribute(\"class\", \"background\");\n    self.fctx = new (0, $c290346a087eae0d$export$2e2bcd8739ae039)();\n    self.foreground = self.fctx.getSvg();\n    self.foreground.setAttribute(\"class\", \"foreground\");\n    self.setSize = (w, h)=>{\n        const wpx = `${w}px`;\n        const hpx = `${h}px`;\n        self.ctx.width = w;\n        self.ctx.height = h;\n        self.background.style.width = wpx;\n        self.background.style.height = hpx;\n        self.fctx.width = w;\n        self.fctx.height = h;\n        self.foreground.style.width = wpx;\n        self.foreground.style.height = hpx;\n    };\n    self.setDisplayStyle = (displayStyle)=>{\n        self.background.style.display = displayStyle;\n        self.foreground.style.display = displayStyle;\n    };\n    self.setStrokeStyle = (s)=>{\n        self.ctx.strokeStyle = s;\n        self.fctx.strokeStyle = s;\n    };\n}\n\n\nfunction $6f4e9b5281dd3fb8$export$2e2bcd8739ae039(screenCommon, viewMode, layout, layoutName) {\n    const self = this;\n    // Components //\n    self.common = screenCommon;\n    self.common.attach(self);\n    self.canvas = new (0, $8ab30dbd0c8eb7ea$export$2e2bcd8739ae039)();\n    self.svg = new (0, $d00d542cb927db53$export$2e2bcd8739ae039)();\n    self.download = new (0, $e176139983db3b57$export$2e2bcd8739ae039)(self, viewMode);\n    self.setShowDownloadScreenLink = self.download.setShowDownloadScreenLink;\n    self.tweenGroup = new $79Zf3.Group();\n    // Divs //\n    self.tooltips = document.createElement(\"div\");\n    self.tooltips.setAttribute(\"class\", \"tooltips\");\n    const clearDiv = document.createElement(\"div\");\n    self.wrap = document.createElement(\"div\");\n    self.wrap.setAttribute(\"class\", \"screenWrap\");\n    self.wrap.appendChild(clearDiv);\n    self.wrap.appendChild(self.canvas.background);\n    self.wrap.appendChild(self.canvas.foreground);\n    self.wrap.appendChild(self.svg.background);\n    self.wrap.appendChild(self.svg.foreground);\n    self.wrap.appendChild(self.tooltips);\n    self.outer = document.createElement(\"div\");\n    self.outer.appendChild(self.wrap);\n    self.outer.appendChild(self.download.div);\n    layout.newElement(layoutName, self.outer);\n    self.setSize = (w, h)=>{\n        const wpx = `${w}px`;\n        const hpx = `${h}px`;\n        self.width = w // measured in browser pixels\n        ;\n        self.height = h;\n        self.tooltips.style.width = wpx;\n        self.tooltips.style.height = hpx;\n        self.wrap.style.width = wpx;\n        self.wrap.style.height = hpx;\n        self.svg.setSize(w, h);\n        self.canvas.setSize(w, h);\n    };\n    self.setWidth = (w)=>{\n        self.setSize(w, self.height);\n    };\n    self.setHeight = (h)=>{\n        self.setSize(self.width, h);\n    };\n    const { width: width, height: height } = screenCommon;\n    self.setSize(width, height);\n    self.setFCtx = (f)=>{\n        self.fctx = f;\n    };\n    // Clear Screen //\n    self.clear = function() {\n        self.ctx.clearRect(0, 0, self.width, self.height);\n        if (self.common.darkMode && self.noBuffers) {\n            self.ctx.fillStyle = \"#222\";\n            self.ctx.fillRect(0, 0, self.width, self.height);\n            self.ctx.fillStyle = \"white\";\n        }\n    };\n    self.clearForeground = function() {\n        self.fctx.clearRect(0, 0, self.width, self.height);\n    };\n    // Screen Modes //\n    self.switchToSVG = ()=>{\n        self.ctx = self.svg.ctx;\n        self.fctx = self.svg.fctx;\n        self.canvas.setDisplayStyle(\"none\");\n        self.svg.setDisplayStyle(\"block\");\n        self.noBuffers = true;\n    };\n    self.switchToCanvas = ()=>{\n        self.ctx = self.canvas.ctx;\n        self.fctx = self.canvas.fctx;\n        self.canvas.setDisplayStyle(\"block\");\n        self.svg.setDisplayStyle(\"none\");\n        self.noBuffers = false;\n    };\n    self.setSvgMode = (val)=>{\n        if (val) self.switchToSVG();\n        else self.switchToCanvas();\n    };\n    self.setSvgMode(false);\n    self.show = ()=>{\n        self.outer.style.display = \"block\";\n    };\n    self.hide = ()=>{\n        self.outer.style.display = \"none\";\n    };\n    self.setDarkMode = (doDarkMode)=>{\n        const lightStroke = \"#ddd\";\n        const darkStroke = \"#222\";\n        const s = doDarkMode ? lightStroke : darkStroke;\n        self.canvas.setStrokeStyle(s);\n        self.svg.setStrokeStyle(s);\n    };\n    self.setDarkMode(screenCommon.darkMode);\n    // Events //\n    self.eventHandlers = new (0, $12c10003ce90c043$export$2e2bcd8739ae039)();\n    const { handlers: handlers } = self.eventHandlers;\n    self.wrap.onmousedown = (e)=>handlers.start(e);\n    self.wrap.onmousemove = (e)=>handlers.move(e);\n    self.wrap.onmouseup = (e)=>handlers.end(e);\n    self.wrap.addEventListener(\"touchmove\", (e)=>handlers.touchmove(e));\n    self.wrap.addEventListener(\"touchstart\", (e)=>handlers.touchstart(e));\n    self.wrap.addEventListener(\"touchend\", (e)=>handlers.touchend(e));\n    // mouse up outside of canvas\n    const current = document.onmouseup;\n    document.onmouseup = (e)=>{\n        if (current) current(e);\n        self.wrap.onmouseup(e);\n    };\n}\n\n\n/* eslint-disable guard-for-in */ /* eslint-disable no-restricted-syntax */ /* eslint-disable no-param-reassign */ /** @module */ /** @module */ /**\r\n * Class for a single button.\r\n * @param {*} buttonConfig\r\n * @param {*} onChoose\r\n * @constructor\r\n */ function $f895ea350f95b0bf$export$2e2bcd8739ae039(buttonConfig, onChoose) {\n    const self = this;\n    self.config = buttonConfig;\n    self.name = buttonConfig.name;\n    self.nameIsHTML = buttonConfig.nameIsHTML || false;\n    self.dom = document.createElement(\"div\");\n    self.dom.setAttribute(\"class\", \"button button2\");\n    // overwrite margins.  The old way was not working.\n    let fixMargin = buttonConfig.margin;\n    fixMargin = fixMargin || 0;\n    fixMargin = Math.max(fixMargin, 4);\n    self.dom.style.marginRight = `${fixMargin}px`;\n    // Click!\n    self.draw = function() {\n        if (self.nameIsHTML) self.dom.innerHTML = self.name;\n        else self.dom.innerText = self.name;\n    };\n    self.draw();\n    self.dom.setAttribute(\"title\", buttonConfig.explain || \"\");\n    self.onClick = function() {\n        onChoose(self, buttonConfig);\n    };\n    self.dom.onclick = self.onClick;\n    // Turn on or off!\n    self.turnOff = function() {\n        self.isOn = false;\n        self.config.isOn = false;\n        self.dom.setAttribute(\"on\", \"no\");\n    };\n    self.turnOn = function() {\n        self.isOn = true;\n        self.config.isOn = true;\n        self.dom.setAttribute(\"on\", \"yes\");\n    };\n    self.turnOff();\n}\n\n\nfunction $adbab3d2c863fd3e$export$2e2bcd8739ae039(config) {\n    const self = this;\n    self.config = config;\n    // check if there is a function to make the data\n    // this function can be used later to update the buttons\n    if (config.data === undefined) {\n        config.data = [];\n        if (config.makeData === undefined) config.makeData = ()=>[];\n        self.makeData = config.makeData;\n        self.buttonConfigs = self.makeData();\n        self.doMakeData = true;\n    }\n    self.buttonConfigs = config.data;\n    self.labelName = config.label;\n    self.labelIsHTML = config.labelIsHTML || false;\n    self.onChoose = config.onChoose;\n    self.isCheckbox = config.isCheckbox || false;\n    self.isCheckboxBool = config.isCheckboxBool || false;\n    self.justButton = config.justButton || false;\n    self.buttonHidden = config.buttonHidden || {};\n    // DOM!\n    self.dom = document.createElement(\"div\");\n    self.dom.setAttribute(\"class\", \"button-group\");\n    self.buttonDOMByValue = [];\n    self.init = function() {\n        if (self.doMakeData) self.buttonConfigs = self.makeData();\n        // clear\n        self.dom.innerHTML = \"\";\n        self.buttons = [];\n        self.buttonsByName = {};\n        // Label!\n        self.labelDOM = document.createElement(\"div\");\n        self.labelDOM.setAttribute(\"class\", \"button-group-label\");\n        self.labelDOM.setAttribute(\"title\", config.explain || \"\");\n        self.labelTip = document.createElement(\"div\");\n        self.labelTip.setAttribute(\"class\", \"label-tip\");\n        self.labelTip.innerText = config.explain || \"\";\n        let labelToggle = true;\n        self.labelTip.hidden = labelToggle;\n        self.labelDOM.onclick = ()=>{\n            labelToggle = !labelToggle;\n            if (config.explain === undefined) labelToggle = true;\n            self.labelTip.hidden = labelToggle;\n        };\n        self.dom.appendChild(self.labelDOM);\n        self.dom.appendChild(self.labelTip);\n        self.draw();\n        self.buttonContainer = document.createElement(\"div\");\n        self.buttonContainer.setAttribute(\"class\", \"button-group-button-container\");\n        self.dom.appendChild(self.buttonContainer);\n        // Create & place buttons!\n        for(let i = 0; i < self.buttonConfigs.length; i++){\n            const conf = self.buttonConfigs[i];\n            const button = new (0, $f895ea350f95b0bf$export$2e2bcd8739ae039)(conf, self.onToggle);\n            self.buttonsByName[conf.name] = button;\n            button.dom.style.width = `${config.width}px` // whatever\n            ;\n            if (conf.width) button.dom.style.width = `${conf.width}px` // whatever\n            ;\n            self.buttons.push(button);\n            self.buttonContainer.appendChild(button.dom);\n            self.buttonDOMByValue[conf.value] = button.dom;\n        }\n        // And then select the one that says \"selected\"! Fake a click.\n        for(let i = 0; i < self.buttons.length; i++){\n            const button = self.buttons[i];\n            if (button.config.selected) {\n                button.turnOn();\n                break;\n            }\n        }\n        self.draw();\n    };\n    self.updateNames = function() {\n        const data2 = self.makeData();\n        for(let i = 0; i < self.buttonConfigs.length; i++){\n            self.buttonConfigs[i].name = data2[i].name;\n            self.buttons[i].name = self.buttonConfigs[i].name;\n        }\n    };\n    self.redraw = function() {\n        self.updateNames();\n        self.draw();\n    };\n    self.draw = function() {\n        if (self.labelIsHTML) self.labelDOM.innerHTML = self.labelName;\n        else self.labelDOM.innerText = self.labelName;\n        for (const button of self.buttons)button.draw();\n    };\n    self.configureHidden = function() {\n        for (const [buttonName, hidden] of Object.entries(self.buttonHidden))self.buttonsByName[buttonName].dom.hidden = hidden;\n    };\n    // Toggle buttons\n    self.onToggle = function(button, buttonData) {\n        if (self.isCheckbox || self.isCheckboxBool) {\n            if (button.isOn) button.turnOff();\n            else button.turnOn();\n        } else {\n            // Turn all off\n            for(let i = 0; i < self.buttons.length; i++)self.buttons[i].turnOff();\n            button.turnOn() // except one\n            ;\n            if (self.justButton) // turn on for a little while, then off\n            setTimeout(()=>button.turnOff(), 800);\n        }\n        // And send the data up\n        self.onChoose(buttonData);\n    };\n    // Highlight based on data...\n    self.highlight = function(propName, propValue) {\n        // if we haven't set up the buttons yet, then don't do anything yet\n        if (self.buttons.length === 0) return;\n        // Turn all off\n        for(let i = 0; i < self.buttons.length; i++)self.buttons[i].turnOff();\n        if (self.isCheckbox) for(const ibu in self.buttons){\n            const bu = self.buttons[ibu];\n            if (propValue.includes(bu.config[propName])) bu.turnOn();\n        }\n        else if (self.isCheckboxBool) for(const ibu in self.buttons){\n            const bu = self.buttons[ibu];\n            const buttonName = bu.config[propName];\n            // if (Object.keys(propValue).includes(buttonName)) { // the propValue is an array of values\n            if (buttonName in propValue) {\n                if (propValue[buttonName]) bu.turnOn();\n            }\n        }\n        else {\n            // Find the one...\n            const theButton = self.buttons.filter((button)=>button.config[propName] === propValue)[0];\n            if (theButton !== undefined) theButton.turnOn();\n        }\n    };\n    self.init();\n}\n\n\n/** @module */ \nfunction $28e93f854ff6d0d3$export$2e2bcd8739ae039(pub, changes, choice) {\n    const { label: label, options: options, changeList: changeList, getValue: getValue, onChoose: onChoose, explain: explain, checkShow: checkShow } = choice;\n    const self = this;\n    pub.attach(self);\n    self.choose = new (0, $adbab3d2c863fd3e$export$2e2bcd8739ae039)({\n        label: label,\n        explain: explain,\n        width: $28e93f854ff6d0d3$export$aba002ef70684916(3),\n        data: options,\n        onChoose: onChoose\n    });\n    self.update = ()=>{\n        if (changes.check(changeList)) self.select();\n        if (checkShow !== undefined) {\n            const show = checkShow();\n            if (show) self.choose.dom.hidden = false;\n            else self.choose.dom.hidden = true;\n        }\n    };\n    self.select = function() {\n        self.choose.highlight(\"value\", getValue());\n    };\n}\nfunction $28e93f854ff6d0d3$export$aba002ef70684916(numButtons) {\n    const padding = 4;\n    const border = 1;\n    const margin = 4;\n    const between = (padding + border + margin) * 2;\n    const end = padding + border;\n    const width = 302;\n    const usableSpace = width - between * (numButtons - 1) - 2 * end;\n    const buttonWidth1 = usableSpace / numButtons;\n    return buttonWidth1;\n}\n\n\nfunction $c12a719bb56287b7$export$2e2bcd8739ae039(screenCommon, layout, viewMode) {\n    const choose = new (0, $adbab3d2c863fd3e$export$2e2bcd8739ae039)({\n        label: \"Theme:\",\n        width: (0, $28e93f854ff6d0d3$export$aba002ef70684916)(3),\n        data: [\n            {\n                name: \"Light\",\n                value: false\n            },\n            {\n                name: \"Dark\",\n                value: true\n            }\n        ],\n        onChoose: (data)=>{\n            screenCommon.setDarkMode(data.value);\n            viewMode.rerender();\n        }\n    });\n    choose.highlight(\"value\", screenCommon.darkMode);\n    layout.newElement(\"darkModeSwitch\", choose.dom);\n}\n\n\n/** @module */ /**\r\n * @param {Changes} changes\r\n */ function $fe33e11ec59c2627$export$2e2bcd8739ae039(changes) {\n    const self = this;\n    self.setShowNonExistingEntities = (a)=>{\n        self.showGhosts = a;\n        changes.add([\n            \"showGhosts\"\n        ]);\n    };\n}\n\n\n\n/** @module */ /**\r\n * Base Class for Showing an Explanation of Results\r\n * @param {Screen} screen\r\n * @constructor\r\n */ function $a7d5e7837ef65ee0$export$2e2bcd8739ae039() {\n    const self = this;\n    self.enter = ()=>{};\n    self.exit = ()=>{};\n    self.update = function() {};\n    self.render = function() {};\n}\n\n\n/** @module */ /** @module */ /**\r\n * Calculate data for charts of budget for MES\r\n * @param {Object} phaseResults - MES methodResults plus a little extra\r\n * @returns budgetDataMES\r\n */ function $a51bb2da3c4c1724$export$2e2bcd8739ae039(geoResults, phaseResults) {\n    const { socialChoiceResults: socialChoiceResults, votes: votes } = phaseResults;\n    const { colorRGBAOfCandidates: colorRGBAOfCandidates } = geoResults;\n    const { winnersByRound: winnersByRound, winnerMaxCostPerScoreByRound: winnerMaxCostPerScoreByRound } = socialChoiceResults.explanation;\n    const { scoreVotes: scoreVotes } = votes.preferenceLists;\n    const { votesByGeom: votesByGeom } = votes;\n    const nRounds = winnersByRound.length;\n    const nGeoms = votesByGeom.length;\n    const costsByGeom = [];\n    const budgetsByGeom = [];\n    const colorRGBAByGeom = [];\n    // We want to use the geometry rather than voteFractions because voteFractions normalizes to add to 1.\n    for(let g = 0; g < nGeoms; g++){\n        const { voteIndex: voteIndex } = votesByGeom[g];\n        const nVotes = voteIndex.length;\n        const budgets = [];\n        budgets[0] = Array(nVotes).fill(1);\n        const costs = [];\n        const colorRGBA = [];\n        for(let r = 0; r < nRounds; r++){\n            const curBudget = budgets[r];\n            const nextBudget = Array(nVotes);\n            const curCost = Array(nVotes);\n            const winner = winnersByRound[r];\n            const maxCostPerScore = winnerMaxCostPerScoreByRound[r];\n            for(let i = 0; i < nVotes; i++){\n                const vi = voteIndex[i];\n                const score = scoreVotes[vi][winner];\n                const cost = maxCostPerScore * score;\n                curCost[i] = Math.min(curBudget[i], cost);\n                nextBudget[i] = Math.max(0, curBudget[i] - cost);\n            }\n            costs[r] = curCost;\n            colorRGBA[r] = colorRGBAOfCandidates[winner];\n            if (r < nRounds - 1) budgets[r + 1] = nextBudget;\n        }\n        colorRGBAByGeom[g] = colorRGBA;\n        costsByGeom[g] = costs;\n        budgetsByGeom[g] = budgets;\n    }\n    const budgetDataMES = {\n        costsByGeom: costsByGeom,\n        budgetsByGeom: budgetsByGeom,\n        colorRGBAByGeom: colorRGBAByGeom\n    };\n    return budgetDataMES;\n}\n\n\n/** @module */ /**\r\n * Calculate shape data for charts of budget for MES\r\n * @param {Object} sequenceResults - MES methodResults plus a little extra candidate data\r\n * @param {Object} screen\r\n * @param {Object} budgetDataMES\r\n * @returns chartDataMES\r\n */ function $a9e54e1c202b5b84$export$2e2bcd8739ae039(phaseResults, screen, budgetDataMES) {\n    const { socialChoiceResults: socialChoiceResults, votes: votes } = phaseResults;\n    const { winnersByRound: winnersByRound } = socialChoiceResults.explanation;\n    const { costsByGeom: costsByGeom, budgetsByGeom: budgetsByGeom, colorRGBAByGeom: colorRGBAByGeom } = budgetDataMES;\n    const { votesByGeom: votesByGeom } = votes;\n    const nRounds = winnersByRound.length;\n    const nGeoms = votesByGeom.length;\n    const cols = 3;\n    const xScale = 1 / cols;\n    const yScale = -screen.width / cols;\n    const sizeChart = screen.width / cols;\n    const costShapesbyGeom = [];\n    const budgetShapesbyGeom = [];\n    for(let g = 0; g < nGeoms; g++){\n        const { grid: grid, voteIndex: voteIndex, voterGeom: voterGeom } = votesByGeom[g];\n        const { w: w, densityProfile: densityProfile } = voterGeom;\n        const xCenter = voterGeom.x;\n        const gridX = grid.x;\n        const isGauss = densityProfile === \"gaussian\";\n        const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n        ;\n        const nVotes = voteIndex.length;\n        const budgets = budgetsByGeom[g];\n        const costs = costsByGeom[g];\n        const budgetShapes = [];\n        const costShapes = [];\n        for(let r = 0; r < nRounds; r++){\n            const curBudget = budgets[r];\n            const curCost = costs[r];\n            const budgetShape = [];\n            const costShape = [];\n            // Place graph in row and column\n            const idCol = r % cols;\n            const idRow = Math.floor(r / cols);\n            const xTranslate = idCol * sizeChart;\n            const yTranslate = (idRow + 1) * sizeChart;\n            let p = 0 // point counter\n            ;\n            // start bottom left\n            // go outside of screen by one pixel\n            const bottom = 0 * yScale + yTranslate;\n            const left = Math.max(-1, gridX[0]) * xScale + xTranslate;\n            budgetShape[p] = [\n                left,\n                bottom\n            ];\n            costShape[p] = [\n                left,\n                bottom\n            ];\n            p += 1;\n            for(let i = 0; i < nVotes; i++){\n                const xg = gridX[i];\n                if (xg < -1) continue;\n                if (xg > screen.width + 1) continue;\n                const shapeMult = isGauss ? Math.exp(-0.5 * ((xg - xCenter) / sigma) ** 2) : 1;\n                // The shape is affected by the density of voters.\n                const dCurCosti = curCost[i] * shapeMult;\n                const dCurBudgeti = curBudget[i] * shapeMult;\n                // add point\n                const xb = xg * xScale + xTranslate;\n                const yb = dCurBudgeti * yScale + yTranslate;\n                budgetShape[p] = [\n                    xb,\n                    yb\n                ];\n                const xc = xg * xScale + xTranslate;\n                const yc = dCurCosti * yScale + yTranslate;\n                costShape[p] = [\n                    xc,\n                    yc\n                ];\n                p += 1;\n            }\n            // end bottom right\n            const right = Math.min(screen.width + 1, gridX[nVotes - 1]) * xScale + xTranslate;\n            budgetShape[p] = [\n                right,\n                bottom\n            ];\n            costShape[p] = [\n                right,\n                bottom\n            ];\n            p += 1;\n            // close path\n            budgetShape[p] = [\n                left,\n                bottom\n            ];\n            costShape[p] = [\n                left,\n                bottom\n            ];\n            p += 1;\n            costShapes[r] = costShape;\n            budgetShapes[r] = budgetShape;\n        }\n        costShapesbyGeom[g] = costShapes;\n        budgetShapesbyGeom[g] = budgetShapes;\n    }\n    const chartDataMES = {\n        costShapesbyGeom: costShapesbyGeom,\n        budgetShapesbyGeom: budgetShapesbyGeom,\n        colorRGBAByGeom: colorRGBAByGeom\n    };\n    return chartDataMES;\n}\n\n\n/** @module */ /** @module */ /**\r\n * Blend colors in given proportions.\r\n * @param {Number[]} f - proportions of colors, as fraction of 1.\r\n * @param {Number[][]} colors - list of lists. rgb colors.\r\n * @returns {String} - Color\r\n */ function $421104df84ecbab8$export$2e2bcd8739ae039(f, colors) {\n    const n = f.length;\n    const sum2 = [\n        0,\n        0,\n        0\n    ];\n    let sumF = 0;\n    for(let i = 0; i < n; i++){\n        for(let c = 0; c < 3; c++)sum2[c] += f[i] * colors[i][c] ** 2;\n        sumF += f[i];\n    }\n    const blend = sum2.map((x)=>Math.round(Math.sqrt(x / sumF)));\n    return blend;\n}\nfunction $421104df84ecbab8$export$e00a895b09ec9a57(c) {\n    return `rgb(${c[0]},${c[1]},${c[2]})`;\n}\n\n\nfunction $19c386f3c581215f$export$2e2bcd8739ae039(screen, chartDataMES) {\n    const { costShapesbyGeom: costShapesbyGeom, budgetShapesbyGeom: budgetShapesbyGeom, colorRGBAByGeom: colorRGBAByGeom } = chartDataMES;\n    const nGeoms = costShapesbyGeom.length;\n    const { ctx: ctx } = screen;\n    ctx.save();\n    ctx.globalAlpha = 0.7;\n    for(let g = 0; g < nGeoms; g++){\n        const costShapesByRound = costShapesbyGeom[g];\n        const budgetShapesByRound = budgetShapesbyGeom[g];\n        const colorRGBAByRound = colorRGBAByGeom[g];\n        const nRounds = costShapesByRound.length;\n        for(let r = 0; r < nRounds; r++){\n            const costShape = costShapesByRound[r];\n            const budgetShape = budgetShapesByRound[r];\n            const colorRGBA = colorRGBAByRound[r];\n            ctx.fillStyle = \"#cccccc\" // canList[i].colorRGBA\n            ;\n            ctx.strokeStyle = \"#555555\" // rgbToString(colorBlender([0.8, 0.2], [canList[i].colorRGBA, '#000000']))\n            ;\n            ctx.beginPath();\n            // make a shape for budget\n            ctx.moveTo(budgetShape[0][0], budgetShape[0][1]);\n            for(let i = 1; i < budgetShape.length; i++)ctx.lineTo(budgetShape[i][0], budgetShape[i][1]);\n            ctx.fill();\n            ctx.stroke();\n            ctx.fillStyle = (0, $421104df84ecbab8$export$e00a895b09ec9a57)(colorRGBA);\n            ctx.strokeStyle = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)([\n                0.5,\n                0.5\n            ], [\n                colorRGBA,\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ]));\n            ctx.beginPath();\n            // make a shape for cost\n            ctx.moveTo(costShape[0][0], costShape[0][1]);\n            for(let i = 1; i < costShape.length; i++)ctx.lineTo(costShape[i][0], costShape[i][1]);\n            ctx.fill();\n            ctx.stroke();\n        }\n    }\n    ctx.restore();\n}\n\n\nfunction $db2e8da434a90a51$export$2e2bcd8739ae039(screen) {\n    const self = this;\n    let flagNoRender = false;\n    let chartDataMES;\n    self.enter = ()=>{\n        screen.show();\n    };\n    self.exit = ()=>{\n        screen.hide();\n    };\n    self.update = function(geoResults, sequenceResults, phaseResults) {\n        const { error: error } = sequenceResults;\n        if (error !== undefined) {\n            flagNoRender = true;\n            return;\n        }\n        flagNoRender = false;\n        const budgetDataMES = (0, $a51bb2da3c4c1724$export$2e2bcd8739ae039)(geoResults, phaseResults);\n        chartDataMES = (0, $a9e54e1c202b5b84$export$2e2bcd8739ae039)(phaseResults, screen, budgetDataMES);\n    };\n    self.render = function() {\n        if (flagNoRender) return;\n        (0, $19c386f3c581215f$export$2e2bcd8739ae039)(screen, chartDataMES);\n    };\n}\n\n\nfunction $31295da368957eb6$export$2e2bcd8739ae039(optionsBag, simOptions) {\n    const { sequenceName: sequenceName, sequences: sequences } = optionsBag.sequenceOptions;\n    const { resultsPhaseBySeq: resultsPhaseBySeq } = simOptions;\n    const resultsPhaseName = resultsPhaseBySeq[sequenceName];\n    const resultsPhaseOptions = sequences[sequenceName].phases[resultsPhaseName];\n    return resultsPhaseOptions;\n}\n\n\nfunction $2d400110e848f7b3$export$2e2bcd8739ae039(sequenceResults, simOptions) {\n    if (sequenceResults.error) return sequenceResults;\n    const { sequenceName: sequenceName } = sequenceResults.optionsBag.sequenceOptions;\n    const { resultsPhaseBySeq: resultsPhaseBySeq } = simOptions;\n    const resultsPhaseName = resultsPhaseBySeq[sequenceName];\n    if (sequenceName === \"closedPrimary\" && resultsPhaseName === \"closedPrimary\") {\n        const { resultsPartyBySeq: resultsPartyBySeq } = simOptions;\n        const resultsParty = resultsPartyBySeq[resultsPhaseName];\n        const phaseResults = sequenceResults.phases[resultsPhaseName][resultsParty];\n        if (phaseResults === undefined) return {\n            error: true\n        };\n        return phaseResults;\n    }\n    // else\n    const phaseResults = sequenceResults.phases[resultsPhaseName];\n    return phaseResults;\n}\n\n\nfunction $3467d21e4791d697$export$2e2bcd8739ae039(screenCommon, layout, menu, changes, simOptions, electionOptionsMan, viewMode) {\n    const self = this;\n    viewMode.viewModes.one.attach(self);\n    const screen = new (0, $6f4e9b5281dd3fb8$export$2e2bcd8739ae039)(screenCommon, viewMode, layout, \"budget\");\n    const { height: height } = screenCommon;\n    screen.setHeight(height / 3);\n    screen.hide();\n    let vizExplanation;\n    function enterStrategy() {\n        const optionsBag = electionOptionsMan.getOptions();\n        const { useGeography: useGeography } = optionsBag;\n        const resultsPhaseOptions = (0, $31295da368957eb6$export$2e2bcd8739ae039)(optionsBag, simOptions);\n        const { socialChoiceMethod: socialChoiceMethod } = resultsPhaseOptions;\n        const { dimensions: dimensions } = simOptions;\n        const VizExplanation = socialChoiceMethod === \"methodOfEqualShares\" && !useGeography && dimensions === 1 ? (0, $db2e8da434a90a51$export$2e2bcd8739ae039) : (0, $a7d5e7837ef65ee0$export$2e2bcd8739ae039);\n        vizExplanation = new VizExplanation(screen);\n    }\n    enterStrategy();\n    self.enter = ()=>{\n        enterStrategy();\n        vizExplanation.enter();\n    };\n    self.exit = ()=>{\n        vizExplanation.exit();\n    };\n    self.update = (simData)=>{\n        if (changes.checkNone()) return;\n        if (changes.check([\n            \"numDistricts\",\n            \"numTracts\",\n            \"dimensions\",\n            \"socialChoiceMethod\"\n        ])) {\n            self.exit();\n            self.enter();\n        }\n        const optionsBag = electionOptionsMan.getOptions();\n        if (optionsBag.useGeography === true) ;\n        else {\n            const { geoResults: geoResults } = simData;\n            const sequenceResults = geoResults.scResultsByDistrict[0];\n            const phaseResults = (0, $2d400110e848f7b3$export$2e2bcd8739ae039)(sequenceResults, simOptions);\n            vizExplanation.update(geoResults, sequenceResults, phaseResults);\n        }\n        self.clear();\n        self.render();\n    };\n    self.render = ()=>{\n        vizExplanation.render();\n    };\n    self.clear = ()=>{\n        screen.clear();\n    };\n    self.draw = ()=>{\n        self.clear();\n        self.render();\n    };\n}\n\n\n/** @module */ /** @module */ function $65e2037c241d5a3c$export$2e2bcd8739ae039(screen) {\n    const self = this;\n    let voterGeomsByTract;\n    let dimensions;\n    self.update = (districtElectionResults)=>{\n        voterGeomsByTract = districtElectionResults.geometry.geography.voterGeomsByTract;\n        dimensions = districtElectionResults.geometry.dimensions;\n    };\n    self.render = ()=>{\n        const { ctx: ctx } = screen;\n        const { svgMode: svgMode } = screen.common;\n        ctx.save();\n        if (dimensions === 1) {\n            ctx.globalAlpha = 0.3;\n            voterGeomsByTract.forEach((row)=>{\n                row.forEach((cell)=>{\n                    cell.forEach((voterGeom)=>{\n                        const { x: x } = voterGeom;\n                        faintLine(ctx, x);\n                    });\n                });\n            });\n        } else voterGeomsByTract.forEach((row)=>{\n            row.forEach((cell)=>{\n                cell.forEach((voterGeom)=>{\n                    const { x: x, y: y } = voterGeom;\n                    smallCircle(ctx, svgMode, x, y);\n                });\n            });\n        });\n        ctx.restore();\n    };\n    /** Draw a small dot */ const canvas = document.createElement(\"canvas\");\n    canvas.width = 10;\n    canvas.height = 10;\n    const offCtx = canvas.getContext(\"2d\");\n    drawCircle(offCtx, 5, 5);\n    function drawCircle(ctx, x, y) {\n        ctx.beginPath();\n        ctx.fillStyle = \"#555\";\n        ctx.arc(x, y, 1, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n    function smallCircle(ctx, svgMode, x, y) {\n        if (svgMode) {\n            drawCircle(ctx, x, y);\n            return;\n        }\n        ctx.drawImage(canvas, x - 5, y - 5, 10, 10);\n    }\n    function faintLine(ctx, x) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, 100);\n        ctx.stroke();\n    }\n}\n\n\n/** @module */ /**\r\n * Graphics Component for voterShapes in 1D\r\n * @param {VoterShape} voterShape\r\n * @param {Screen} screen\r\n */ function $94b65962391a66d0$export$2e2bcd8739ae039(voterShape, screen) {\n    const self = this;\n    self.render = function() {\n        const { ctx: ctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const { x: x, w: w, densityProfile: densityProfile } = voterShape.shape1;\n        const h = 100;\n        const middle = 150;\n        ctx.save();\n        ctx.strokeStyle = \"#555\";\n        if (darkMode) ctx.strokeStyle = \"#ddd\";\n        ctx.beginPath();\n        doPath();\n        ctx.stroke();\n        ctx.restore();\n        function doPath() {\n            if (densityProfile === \"gaussian\") gaussianPath();\n            else rectanglePath();\n        }\n        function gaussianPath() {\n            const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n            ;\n            const amp = h;\n            const bottom = middle + h * 0.5;\n            // start bottom left\n            ctx.moveTo(0, bottom);\n            const pa = [];\n            for(let i = 0; i <= screen.width; i += 1){\n                const xp = 0.5 * ((i - x) / sigma) ** 2;\n                const y = bottom - amp * Math.exp(-xp);\n                pa.push(y);\n                ctx.lineTo(i, y);\n            }\n            // end bottom right\n            ctx.lineTo(screen.width, bottom);\n            ctx.lineTo(0, bottom);\n        // ctx.closePath()\n        }\n        function rectanglePath() {\n            ctx.rect(x - w * 0.5, middle - h * 0.5, w, h);\n        }\n    };\n    self.renderAt = ()=>{\n        self.render();\n    };\n}\n\n\n/** @module */ /**\r\n * Graphics Component for voterShapes in 2D\r\n * @param {VoterShape} voterShape\r\n * @param {Screen} screen\r\n */ function $e18b7d24ec8943a8$export$2e2bcd8739ae039(voterShape, screen) {\n    const self = this;\n    self.render = function() {\n        const { ctx: ctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const { x: x, y: y, w: w, densityProfile: densityProfile } = voterShape.shape2;\n        // circle\n        ctx.save();\n        if (densityProfile === \"gaussian\") {\n            ctx.setLineDash([\n                1,\n                9\n            ]);\n            ctx.lineWidth = 10;\n        }\n        ctx.beginPath();\n        ctx.strokeStyle = \"#555\";\n        if (darkMode) ctx.strokeStyle = \"#ddd\";\n        // ctx.fillStyle = \"#eee\"\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI);\n        // ctx.fill()\n        ctx.stroke();\n        ctx.restore();\n    };\n    self.renderAt = function(newX, newY) {\n        const { ctx: ctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const { w: w } = voterShape.shape2;\n        // circle\n        ctx.beginPath();\n        ctx.strokeStyle = \"#555\";\n        if (darkMode) ctx.strokeStyle = \"#ddd\";\n        // ctx.fillStyle = \"#eee\"\n        ctx.arc(newX, newY, w * 0.5, 0, 2 * Math.PI);\n        // ctx.fill()\n        ctx.stroke();\n    };\n    self.renderCenterAt2 = function(newX, newY) {\n        const { ctx: ctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        // circle\n        ctx.beginPath();\n        ctx.fillStyle = \"#555\";\n        if (darkMode) ctx.fillStyle = \"#bbb\";\n        ctx.arc(newX, newY, 1, 0, 2 * Math.PI);\n        ctx.fill();\n    // ctx.stroke()\n    };\n}\n\n\nfunction $8260a04714b64e34$export$2e2bcd8739ae039(voterRendererList, candidateList, screen, screenMini, simOptions) {\n    const self = this;\n    const { dimensions: dimensions } = simOptions;\n    const VoterRenderer = dimensions === 1 ? (0, $94b65962391a66d0$export$2e2bcd8739ae039) : (0, $e18b7d24ec8943a8$export$2e2bcd8739ae039);\n    voterRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    const vizDistrictNoise = new (0, $65e2037c241d5a3c$export$2e2bcd8739ae039)(screen);\n    self.enter = ()=>{};\n    self.exit = ()=>{};\n    self.update = (districtElectionResults)=>{\n        vizDistrictNoise.update(districtElectionResults);\n    };\n    self.render = ()=>{\n        voterRendererList.render();\n        vizDistrictNoise.render();\n    };\n}\n\n\n/** @module */ /** @module */ // d3-voronoi\n// d3-select\n// d3-range\n\nfunction $25f487047721f1fc$export$2e2bcd8739ae039(voterGroup, candidateList, screen) {\n    const self = this;\n    let voronoi;\n    let canList;\n    self.update = function() {\n        canList = candidateList.getEntities();\n        if (canList === undefined) return;\n        const points = canList.map((e)=>[\n                e.shape1.x,\n                0\n            ]);\n        const delaunay = (0, $d0f7a2297bbeda8e$export$2e2bcd8739ae039).from(points);\n        voronoi = delaunay.voronoi([\n            0,\n            0,\n            screen.width,\n            screen.height\n        ]);\n    };\n    self.render = function() {\n        if (canList === undefined) return;\n        const { ctx: ctx } = screen;\n        const { x: x, w: w, densityProfile: densityProfile } = voterGroup.shape1;\n        const h = 100;\n        ctx.save();\n        // clip the voronoi diagram\n        // http://jsfiddle.net/jimrhoskins/dDUC3/1/\n        // https://dustinpfister.github.io/2019/10/08/canvas-clip/\n        ctx.beginPath();\n        doPath();\n        // ctx.closePath()\n        ctx.clip();\n        const n = canList.length;\n        for(let i = 0; i < n; i++){\n            ctx.beginPath();\n            voronoi.renderCell(i, ctx);\n            ctx.fillStyle = canList[i].color;\n            ctx.fill();\n            ctx.stroke();\n        }\n        ctx.beginPath();\n        doPath();\n        ctx.stroke();\n        ctx.restore();\n        function doPath() {\n            if (densityProfile === \"gaussian\") gaussianPath();\n            else rectanglePath();\n        }\n        function gaussianPath() {\n            const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n            ;\n            const amp = h;\n            const bottom = 150 + h * 0.5;\n            // start bottom left\n            ctx.moveTo(0, bottom);\n            const pa = [];\n            for(let i = 0; i <= screen.width; i += 1){\n                const xp = 0.5 * ((i - x) / sigma) ** 2;\n                const y = bottom - amp * Math.exp(-xp);\n                pa.push(y);\n                ctx.lineTo(i, y);\n            }\n            // end bottom right\n            ctx.lineTo(screen.width, bottom);\n            ctx.lineTo(0, bottom);\n        // ctx.closePath()\n        }\n        function rectanglePath() {\n            ctx.rect(x - w * 0.5, 150 - h * 0.5, w, h);\n        }\n    };\n}\n\n\n/** @module */ // d3-voronoi\n// d3-select\n// d3-range\n\nfunction $f593194ce2071873$export$2e2bcd8739ae039(voterGroup, candidateList, screen) {\n    const self = this;\n    let voronoi;\n    let canList;\n    self.update = function() {\n        canList = candidateList.getEntities();\n        const points = canList.map((e)=>[\n                e.shape2.x,\n                e.shape2.y\n            ]);\n        const delaunay = (0, $d0f7a2297bbeda8e$export$2e2bcd8739ae039).from(points);\n        voronoi = delaunay.voronoi([\n            0,\n            0,\n            screen.width,\n            screen.height\n        ]);\n    };\n    self.render = function() {\n        const { ctx: ctx } = screen;\n        const { x: x, y: y, w: w } = voterGroup.shape2;\n        ctx.save();\n        // draw circle clip\n        // http://jsfiddle.net/jimrhoskins/dDUC3/1/\n        // https://dustinpfister.github.io/2019/10/08/canvas-clip/\n        ctx.beginPath();\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI);\n        // ctx.closePath()\n        ctx.clip();\n        const n = canList.length;\n        for(let i = 0; i < n; i++){\n            ctx.beginPath();\n            voronoi.renderCell(i, ctx);\n            ctx.fillStyle = canList[i].color;\n            ctx.fill();\n            ctx.stroke();\n        }\n        ctx.beginPath();\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.restore();\n    };\n}\n\n\nfunction $27954d0c7f46c245$export$2e2bcd8739ae039(voterRendererList, candidateList, screen, screenMini, simOptions) {\n    const self = this;\n    // renderer factory //\n    const { dimensions: dimensions } = simOptions;\n    const Voronoi = dimensions === 1 ? (0, $25f487047721f1fc$export$2e2bcd8739ae039) : (0, $f593194ce2071873$export$2e2bcd8739ae039);\n    const rendererMaker = (voterShape)=>new Voronoi(voterShape, candidateList, screen);\n    voterRendererList.setRenderer(rendererMaker);\n    self.enter = ()=>{};\n    self.exit = ()=>{};\n    self.update = function(phaseResults) {\n        const { error: error } = phaseResults;\n        if (error !== undefined) return;\n        voterRendererList.updateGraphic();\n    };\n    self.render = function() {\n        voterRendererList.render();\n    };\n}\n\n\n/** @module */ /** @module */ \nfunction $36952e7b69eb6a10$export$2e2bcd8739ae039(f, value, low, high, tol) {\n    if (value > f(high)) {\n        console.log(\"out of bounds\");\n        return high;\n    }\n    if (value < f(low)) {\n        console.log(\"out of bounds\");\n        return low;\n    }\n    let c = 0;\n    let mid;\n    while(low <= high && c < 30){\n        c = c + 1;\n        mid = (low + high) * .5;\n        const fmid = f(mid);\n        if (value + tol < fmid) high = mid;\n        else if (value - tol > fmid) low = mid;\n        else break;\n    }\n    return mid;\n}\n\n\nconst $0ecfd5c036a78a35$var$invPi = 1 / Math.PI;\nfunction $0ecfd5c036a78a35$export$2e2bcd8739ae039(x, m, r) {\n    let z = (x - m) / r;\n    if (z > 1) return 1;\n    else if (z < -1) return 0;\n    const areaFromCenter = z * Math.sqrt(1 - z * z) + Math.asin(z);\n    return areaFromCenter * $0ecfd5c036a78a35$var$invPi + .5;\n}\n\n\n\nconst $3c6bca54e10f6fd1$var$invSqrt8 = 1 / Math.sqrt(8);\nfunction $3c6bca54e10f6fd1$export$2e2bcd8739ae039(ms, w, d, ma, p) {\n    // const q = quantile2(v,w,d,m,p) {\n    // console.log({ms,rs,d,ma,q})\n    const n = ms.length;\n    const sma = $3c6bca54e10f6fd1$var$sum(ma);\n    const cdf = (x)=>{\n        let s = 0;\n        for(let i = 0; i < n; i++)if (d[i] === 2) s = s + (0, $a13bab49ccd6d247$export$e94e7ee3b047a94d)(x, ms[i], w[i] * $3c6bca54e10f6fd1$var$invSqrt8) * ma[i];\n        else s = s + (0, $0ecfd5c036a78a35$export$2e2bcd8739ae039)(x, ms[i], w[i] * .5) * ma[i];\n        return s / sma;\n    };\n    const highs = $3c6bca54e10f6fd1$var$range(n).map((i)=>ms[i] + w[i] * $3c6bca54e10f6fd1$var$invSqrt8 * 3);\n    const lows = $3c6bca54e10f6fd1$var$range(n).map((i)=>ms[i] - w[i] * $3c6bca54e10f6fd1$var$invSqrt8 * 3);\n    const high = Math.max(...highs);\n    const low = Math.min(...lows);\n    // console.log({low,high})\n    const tol = .001;\n    const q = (0, $36952e7b69eb6a10$export$2e2bcd8739ae039)(cdf, p, low, high, tol);\n    // console.log(p,cdf(q))\n    return q;\n}\nfunction $3c6bca54e10f6fd1$var$range(n) {\n    return [\n        ...Array(n).keys()\n    ];\n}\nfunction $3c6bca54e10f6fd1$var$sum(a) {\n    const n = a.length;\n    let s = 0;\n    for(let i = 0; i < n; i++)s = s + a[i];\n    return s;\n}\n\n\nfunction $8a3183ca0c57c967$export$2e2bcd8739ae039(vx, vy, d, w, m, cx, cy, p) {\n    const N = 200;\n    // N points for pn probabilities\n    const pn = p.length;\n    const cn = cx.length;\n    const vn = vx.length;\n    const bm = {\n        x: $8a3183ca0c57c967$var$create3DArray(cn, pn, N),\n        y: $8a3183ca0c57c967$var$create3DArray(cn, pn, N)\n    };\n    for(let i = 0; i < N; i++){\n        const angle = i / N * Math.PI * 2;\n        const dx = Math.cos(angle);\n        const dy = Math.sin(angle);\n        const v = new Array(vn);\n        // reuse projection for all cans\n        for(let j = 0; j < vn; j++)v[j] = dx * vx[j] + dy * vy[j];\n        for(let j = 0; j < pn; j++){\n            const q = (0, $3c6bca54e10f6fd1$export$2e2bcd8739ae039)(v, w, d, m, p[j]);\n            for(let k = 0; k < cn; k++){\n                const c = dx * cx[k] + dy * cy[k];\n                const dist = 2 * Math.min(0, q - c);\n                bm.x[k][j][i] = cx[k] + dx * dist;\n                bm.y[k][j][i] = cy[k] + dy * dist;\n            }\n        }\n    }\n    return bm;\n}\nfunction $8a3183ca0c57c967$var$create2DArray(m, n) {\n    return Array.from(Array(m), ()=>new Array(n));\n}\nfunction $8a3183ca0c57c967$var$create3DArray(m, n, p) {\n    return Array.from(Array(m), ()=>$8a3183ca0c57c967$var$create2DArray(n, p));\n}\n\n\nfunction $40f8c5dff983c3f4$export$2e2bcd8739ae039() {\n    const self = this;\n    let beatMap;\n    let colorStrings;\n    const p = [\n        .1,\n        .2,\n        .3,\n        .4,\n        .5,\n        .6,\n        .7,\n        .8,\n        .9\n    ];\n    // const p = [.5]\n    self.update = function(phaseResults, canList) {\n        colorStrings = canList.map((can)=>(0, $421104df84ecbab8$export$e00a895b09ec9a57)(can.colorRGBA));\n        const cx = canList.map((can)=>can.shape2.x);\n        const cy = canList.map((can)=>can.shape2.y);\n        const { voterGeoms: voterGeoms } = phaseResults.geometry;\n        const x = voterGeoms.map((v)=>v.x);\n        const y = voterGeoms.map((v)=>v.y);\n        const w = voterGeoms.map((v)=>v.w);\n        const densityDecoder = {\n            \"step\": 1,\n            \"gaussian\": 2\n        };\n        const d = voterGeoms.map((v)=>densityDecoder[v.densityProfile]);\n        const m = voterGeoms.map((v)=>v.densityMax);\n        // console.log({x,y,d,w,m,cx,cy,p})\n        beatMap = (0, $8a3183ca0c57c967$export$2e2bcd8739ae039)(x, y, d, w, m, cx, cy, p);\n    };\n    self.render = function(ctx) {\n        const cn = beatMap.x.length;\n        ctx.save();\n        ctx.fillStyle = `rgb(0 0 0)`;\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.restore();\n        for(let j = 0; j < p.length; j++){\n            ctx.save();\n            ctx.lineWidth = 1;\n            const shade = Math.round(p[j] * 255);\n            ctx.fillStyle = `rgb(${shade} ${shade} ${shade})`;\n            for(let k = 0; k < cn; k++){\n                const x = beatMap.x[k][j];\n                const y = beatMap.y[k][j];\n                const bc = new Path2D();\n                bc.moveTo(x[0], y[0]);\n                for(let i = 1; i < x.length; i++)bc.lineTo(x[i], y[i]);\n                bc.closePath();\n                ctx.clip(bc);\n            }\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            ctx.restore();\n        }\n    };\n}\n\n\n/** @module */ \n\nfunction $8ea42eea754b2200$export$2e2bcd8739ae039(voterGroup, candidateList, screen) {\n    const self = this;\n    let canList;\n    let colors;\n    let intervals;\n    self.update = function(votesForGeom) {\n        // calculate colors\n        let { rankings: rankings } = votesForGeom;\n        let { intervalBorders: intervalBorders } = votesForGeom;\n        if (rankings === undefined || intervalBorders === undefined) {\n            canList = candidateList.getEntities();\n            const canPoints = canList.map((can)=>can.shape1.x);\n            const cd = (0, $a69ca38f385d346d$export$2e2bcd8739ae039)(canPoints);\n            rankings = cd.rankings;\n            intervalBorders = cd.intervalBorders;\n        }\n        canList = candidateList.getEntities();\n        const n = canList.length;\n        const colorList = canList.map((can)=>can.colorRGBA);\n        const ni = intervalBorders.length - 1;\n        intervals = Array(ni);\n        colors = Array(ni);\n        for(let i = 0; i < ni; i++){\n            intervals[i] = [\n                intervalBorders[i],\n                intervalBorders[i + 1]\n            ];\n            const bordaScores = rankings[i].map((r)=>n - r);\n            colors[i] = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)(bordaScores, colorList));\n        }\n    };\n    self.render = function() {\n        const { ctx: ctx } = screen;\n        const { x: x, w: w, densityProfile: densityProfile } = voterGroup.shape1;\n        const h = 100;\n        ctx.save();\n        // clip the voronoi diagram\n        // http://jsfiddle.net/jimrhoskins/dDUC3/1/\n        // https://dustinpfister.github.io/2019/10/08/canvas-clip/\n        ctx.beginPath();\n        doPath();\n        // ctx.closePath()\n        ctx.clip();\n        const n = intervals.length;\n        for(let i = 0; i < n; i++)$8ea42eea754b2200$var$renderInterval(intervals[i], colors[i], ctx, screen);\n        ctx.beginPath();\n        doPath();\n        ctx.stroke();\n        ctx.restore();\n        function doPath() {\n            if (densityProfile === \"gaussian\") gaussianPath();\n            else rectanglePath();\n        }\n        function gaussianPath() {\n            const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n            ;\n            const amp = h;\n            const bottom = 150 + h * 0.5;\n            // start bottom left\n            ctx.moveTo(0, bottom);\n            const pa = [];\n            for(let i = 0; i <= screen.width; i += 1){\n                const xp = 0.5 * ((i - x) / sigma) ** 2;\n                const y = bottom - amp * Math.exp(-xp);\n                pa.push(y);\n                ctx.lineTo(i, y);\n            }\n            // end bottom right\n            ctx.lineTo(screen.width, bottom);\n            ctx.lineTo(0, bottom);\n        // ctx.closePath()\n        }\n        function rectanglePath() {\n            ctx.rect(x - w * 0.5, 150 - h * 0.5, w, h);\n        }\n    };\n}\nfunction $8ea42eea754b2200$var$renderInterval(interval, color, ctx, screen) {\n    const x = Math.max(0, interval[0]);\n    const x2 = Math.min(screen.width, interval[1]);\n    const w = x2 - x;\n    const y = 0;\n    const h = screen.height;\n    ctx.beginPath();\n    ctx.rect(x, y, w, h);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.stroke();\n}\n\n\n/** @module */ \n\nfunction $9560e66c8a92f291$export$2e2bcd8739ae039(voterGroup, candidateList, screen) {\n    const self = this;\n    let canList;\n    let colors;\n    let cells;\n    self.update = function(votesForGeom) {\n        // calculate colors\n        let { rankings: rankings } = votesForGeom;\n        cells = votesForGeom.cells;\n        if (rankings === undefined || cells === undefined) {\n            canList = candidateList.getEntities();\n            const canPoints = canList.map((can)=>[\n                    can.shape2.x,\n                    can.shape2.y\n                ]);\n            const voterGeom = voterGroup.shape2;\n            const verbosity = 3;\n            const cd = (0, $8ac03c9189b50120$export$2e2bcd8739ae039)(voterGeom, canPoints, verbosity);\n            rankings = cd.rankings;\n            cells = cd.cells;\n        }\n        canList = candidateList.getEntities();\n        const n = canList.length;\n        const cn = cells.length;\n        colors = Array(cn);\n        const colorList = canList.map((can)=>can.colorRGBA);\n        for(let i = 0; i < cn; i++){\n            const bordaScores = rankings[i].map((r)=>n - r);\n            colors[i] = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)(bordaScores, colorList));\n        }\n    };\n    self.render = function() {\n        const { ctx: ctx } = screen;\n        const { x: x, y: y, w: w } = voterGroup.shape2;\n        ctx.save();\n        const cn = cells.length;\n        for(let i = 0; i < cn; i++){\n            ctx.beginPath();\n            $9560e66c8a92f291$var$cellPath(ctx, cells[i]);\n            ctx.fillStyle = colors[i];\n            ctx.strokeStyle = colors[i];\n            ctx.fill();\n            ctx.stroke();\n        }\n        // border\n        ctx.strokeStyle = \"#222\";\n        ctx.beginPath();\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.restore();\n    };\n}\nfunction $9560e66c8a92f291$var$cellPath(ctx, cell) {\n    const cc = cell.length;\n    const first = cell[cc - 1];\n    ctx.moveTo(first[0], first[1]);\n    for(let i = 0; i < cc; i++){\n        const coord = cell[i];\n        ctx.lineTo(coord[0], coord[1]);\n    }\n}\n\n\nfunction $ab815f816145f3cc$export$2e2bcd8739ae039(voterRendererList, candidateList, screen, screenMini, simOptions) {\n    const self = this;\n    // renderer factory //\n    const { dimensions: dimensions } = simOptions;\n    const VoronoiRanking = dimensions === 1 ? (0, $8ea42eea754b2200$export$2e2bcd8739ae039) : (0, $9560e66c8a92f291$export$2e2bcd8739ae039);\n    const rendererMaker = (voterShape)=>new VoronoiRanking(voterShape, candidateList, screen);\n    voterRendererList.setRenderer(rendererMaker);\n    const beatMap = new (0, $40f8c5dff983c3f4$export$2e2bcd8739ae039)();\n    let doBeatMap;\n    self.enter = ()=>{};\n    self.exit = ()=>{};\n    self.update = function(phaseResults) {\n        const { error: error } = phaseResults;\n        if (error !== undefined) return;\n        const { votesByGeom: votesByGeom } = phaseResults.votes;\n        voterRendererList.updateGraphic(votesByGeom);\n        // if (phaseResults.)\n        const { socialChoiceMethod: socialChoiceMethod } = phaseResults.electionOptions;\n        doBeatMap = socialChoiceMethod === \"minimax\";\n        if (doBeatMap) {\n            const canList = candidateList.getEntities();\n            beatMap.update(phaseResults, canList);\n        }\n    };\n    self.render = function() {\n        if (doBeatMap) {\n            const { ctx: ctx } = screen;\n            beatMap.render(ctx);\n        }\n        voterRendererList.render();\n    };\n}\n\n\n/** @module */ \n/** @module */ \n/** get a fractional candidate tally from a grid vote */ function $a11003c4c3220fc7$export$2e2bcd8739ae039(vote) {\n    if (vote.scoreVote) return \"scoreVote\";\n    if (vote.bordaFractions) return \"bordaFractions\";\n    if (vote.pluralityAllocation) return \"pluralityAllocation\";\n    return null;\n}\n\n\nfunction $0b9ea52e4c5c8e83$export$2e2bcd8739ae039(candidateList, screen) {\n    const self = this;\n    const h = 200;\n    const center = 100;\n    let votesForGeom;\n    let canList;\n    self.update = (votesForGeom0)=>{\n        votesForGeom = votesForGeom0;\n        canList = candidateList.getEntities();\n    };\n    self.renderBackground = function() {\n        const { ctx: ctx } = screen;\n        ctx.save();\n        ctx.globalAlpha = 0.7;\n        // draw each can separately\n        const nCans = canList.length;\n        for(let i = 0; i < nCans; i++){\n            ctx.strokeStyle = \"#dddddd\";\n            // ctx.strokeStyle = '#333333'\n            ctx.beginPath();\n            shapePath(ctx, i, true);\n            ctx.stroke();\n        }\n        ctx.restore();\n    };\n    self.render = function() {\n        const { ctx: ctx } = screen;\n        ctx.save();\n        ctx.globalAlpha = 0.7;\n        const nCans = canList.length;\n        for(let i = 0; i < nCans; i++){\n            // draw image\n            ctx.fillStyle = canList[i].color;\n            const { colorRGBA: colorRGBA } = canList[i];\n            ctx.strokeStyle = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)([\n                0.5,\n                0.5\n            ], [\n                colorRGBA,\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ]));\n            ctx.beginPath();\n            shapePath(ctx, i, false);\n            ctx.fill();\n            ctx.stroke();\n        }\n        ctx.restore();\n    };\n    function shapePath(ctx, iCan, drawOutline) {\n        const { grid: grid, voteSet: voteSet } = votesForGeom;\n        const { x: x, w: w, densityProfile: densityProfile } = grid.voterGeom;\n        const nCans = canList.length;\n        const isGauss = densityProfile === \"gaussian\";\n        const gridX = grid.x;\n        const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\n        ;\n        const amp = h / nCans;\n        const bottom = center + h * 0.5 - iCan * amp;\n        // start bottom left\n        // go outside of screen by one pixel\n        const left = Math.max(-1, gridX[0]);\n        ctx.moveTo(left, bottom);\n        const gl = gridX.length;\n        const tallyName = (0, $a11003c4c3220fc7$export$2e2bcd8739ae039)(voteSet[0]);\n        for(let i = 0; i < gl; i += 1){\n            const xg = gridX[i];\n            if (xg < -1) continue;\n            if (xg > screen.width) continue;\n            const voteMult = drawOutline ? 1 : voteSet[i][tallyName][iCan];\n            const shapeMult = isGauss ? Math.exp(-0.5 * ((xg - x) / sigma) ** 2) : 1;\n            const y = bottom - amp * shapeMult * voteMult;\n            ctx.lineTo(xg, y);\n        }\n        // end bottom right\n        const right = Math.min(screen.width, gridX[gl - 1]);\n        ctx.lineTo(right, bottom);\n        // close path\n        ctx.lineTo(left, bottom);\n    }\n}\n\n\n/** @module */ \n\nfunction $d7ff1390ec6a8560$export$2e2bcd8739ae039(candidateList, screenMain, screenMini) {\n    const self = this;\n    let votesForGeom;\n    let canList;\n    let singleCanvas;\n    const canvases = [];\n    // TODO: set up canvases before update?\n    self.update = (votesForGeom0)=>{\n        votesForGeom = votesForGeom0;\n        canList = candidateList.getEntities();\n        const { grid: grid, voteSet: voteSet } = votesForGeom;\n        const { densityProfile: densityProfile } = grid.voterGeom;\n        const nCans = canList.length;\n        const nHeight = Math.floor((nCans - 1) / 3) + 1;\n        screenMini.setHeight(nHeight * (1 / 3) * screenMini.common.height);\n        const isGauss = densityProfile === \"gaussian\";\n        fillDataSeparate();\n        fillDataBlend();\n        function fillDataSeparate() {\n            // make image data\n            const { nx: nx, ny: ny, density: density } = grid;\n            canvases.splice(0);\n            const tallyName = (0, $a11003c4c3220fc7$export$2e2bcd8739ae039)(voteSet[0]);\n            for(let i = 0; i < canList.length; i++){\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = nx;\n                canvas.height = ny;\n                const offCtx = canvas.getContext(\"2d\");\n                const imageData = offCtx.createImageData(nx, ny);\n                const { data: data } = imageData;\n                const { colorRGBA: colorRGBA } = canList[i];\n                const [r, g, b] = colorRGBA;\n                let k = 0;\n                for(let yp = 0; yp < ny; yp++)for(let xp = 0; xp < nx; xp++){\n                    const support = voteSet[k][tallyName][i];\n                    const a = support * (isGauss ? density[k] : 1) * 255;\n                    data[(xp + yp * nx) * 4 + 0] = r;\n                    data[(xp + yp * nx) * 4 + 1] = g;\n                    data[(xp + yp * nx) * 4 + 2] = b;\n                    data[(xp + yp * nx) * 4 + 3] = a;\n                    k += 1;\n                }\n                canvases.push(canvas);\n                offCtx.putImageData(imageData, 0, 0);\n            }\n        }\n        function fillDataBlend() {\n            // make image data\n            const { nx: nx, ny: ny, density: density } = grid;\n            const colorSet = canList.map((can)=>can.colorRGBA);\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = nx;\n            canvas.height = ny;\n            const offCtx = canvas.getContext(\"2d\");\n            const imageData = offCtx.createImageData(nx, ny);\n            const { data: data } = imageData;\n            const tallyName = (0, $a11003c4c3220fc7$export$2e2bcd8739ae039)(voteSet[0]);\n            let k = 0;\n            for(let yp = 0; yp < ny; yp++)for(let xp = 0; xp < nx; xp++){\n                const tallyFractions = voteSet[k][tallyName];\n                const [r, g, b] = (0, $421104df84ecbab8$export$2e2bcd8739ae039)(tallyFractions, colorSet);\n                const a = (isGauss ? density[k] : 1) * 255;\n                data[(xp + yp * nx) * 4 + 0] = r;\n                data[(xp + yp * nx) * 4 + 1] = g;\n                data[(xp + yp * nx) * 4 + 2] = b;\n                data[(xp + yp * nx) * 4 + 3] = a;\n                k += 1;\n            }\n            singleCanvas = canvas;\n            offCtx.putImageData(imageData, 0, 0);\n        }\n    };\n    self.render = function() {\n        const { width: width, voterGeom: voterGeom } = votesForGeom.grid;\n        const { x: x, y: y, w: w, densityProfile: densityProfile } = voterGeom;\n        drawBlend();\n        drawSeparate();\n        function drawSeparate() {\n            const { ctx: ctx } = screenMini;\n            const { darkMode: darkMode } = screenMini.common;\n            // draw each can separately\n            const nCans = canList.length;\n            for(let i = 0; i < nCans; i++){\n                // draw image\n                // transform is t\n                ctx.save();\n                // ctx.globalAlpha = 0.7\n                const t = {\n                    w: 1 / 3,\n                    h: 1 / 3,\n                    x: i % 3 * 100,\n                    y: Math.floor(i / 3) * 100\n                };\n                // shape\n                const sh = {\n                    x: x * t.w + t.x,\n                    y: y * t.h + t.y,\n                    r: w * t.w * 0.5\n                };\n                const clipShape = {\n                    x: x * t.w + t.x,\n                    y: y * t.h + t.y,\n                    r: width * t.w * 0.5\n                };\n                // clip outline of shape\n                ctx.beginPath();\n                ctx.arc(clipShape.x, clipShape.y, clipShape.r, 0, 2 * Math.PI);\n                ctx.clip();\n                ctx.beginPath();\n                ctx.rect(t.x, t.y, 100, 100);\n                ctx.clip();\n                const canvas = canvases[i];\n                const im = {\n                    x: x * t.w - width * t.w * 0.5 + t.x,\n                    y: y * t.w - width * t.w * 0.5 + t.y,\n                    w: width * t.w,\n                    h: width * t.h\n                };\n                ctx.drawImage(canvas, im.x, im.y, im.w, im.h);\n                // draw outline of shape\n                if (densityProfile === \"gaussian\") {\n                    ctx.setLineDash([\n                        1 / 3,\n                        3\n                    ]);\n                    ctx.lineWidth = 5 / 3;\n                }\n                ctx.strokeStyle = \"#555\";\n                if (darkMode) ctx.strokeStyle = \"#ddd\";\n                ctx.beginPath();\n                ctx.arc(sh.x, sh.y, sh.r, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.restore();\n            }\n        }\n        function drawBlend() {\n            const { ctx: ctx } = screenMain;\n            const { darkMode: darkMode } = screenMain.common;\n            ctx.save();\n            // ctx.globalAlpha = 0.7\n            // clip outline of shape\n            ctx.beginPath();\n            ctx.arc(x, y, width * 0.5, 0, 2 * Math.PI);\n            ctx.clip();\n            // draw image\n            // transform is t\n            const t = {\n                w: 1,\n                h: 1,\n                x: 0,\n                y: 0\n            };\n            const canvas = singleCanvas;\n            ctx.imageSmoothingEnabled = false;\n            const ov = {\n                x: x - width * 0.5 + t.x,\n                y: y - width * 0.5 + t.y,\n                w: width * t.w,\n                h: width * t.h\n            };\n            ctx.drawImage(canvas, ov.x, ov.y, ov.w, ov.h);\n            // draw outline of shape\n            if (densityProfile === \"gaussian\") {\n                ctx.setLineDash([\n                    1,\n                    9\n                ]);\n                ctx.lineWidth = 5;\n            }\n            ctx.strokeStyle = \"#555\";\n            if (darkMode) ctx.strokeStyle = \"#ddd\";\n            ctx.beginPath();\n            ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.restore();\n        }\n    };\n}\n\n\nfunction $996119eea3e44fbf$export$2e2bcd8739ae039(voterRendererList, candidateList, screenMain, screenMini, simOptions) {\n    const self = this;\n    // renderer factory //\n    const { dimensions: dimensions } = simOptions;\n    const Grid = dimensions === 1 ? (0, $0b9ea52e4c5c8e83$export$2e2bcd8739ae039) : (0, $d7ff1390ec6a8560$export$2e2bcd8739ae039);\n    const rendererMaker = ()=>new Grid(candidateList, screenMain, screenMini);\n    voterRendererList.setRenderer(rendererMaker);\n    const beatMap = new (0, $40f8c5dff983c3f4$export$2e2bcd8739ae039)();\n    let doBeatMap;\n    self.enter = function() {\n        if (dimensions === 2) screenMini.show();\n    };\n    self.exit = function() {\n        screenMini.hide();\n    };\n    self.update = function(phaseResults) {\n        const { error: error } = phaseResults;\n        if (error !== undefined) return;\n        const { votesByGeom: votesByGeom } = phaseResults.votes;\n        voterRendererList.updateGraphic(votesByGeom);\n        const { socialChoiceMethod: socialChoiceMethod } = phaseResults.electionOptions;\n        doBeatMap = socialChoiceMethod === \"minimax\";\n        if (doBeatMap) {\n            const canList = candidateList.getEntities();\n            beatMap.update(phaseResults, canList);\n        }\n    };\n    self.render = function() {\n        if (dimensions === 1) voterRendererList.renderBackground();\n        if (dimensions === 2) {\n            if (doBeatMap) {\n                const { ctx: ctx } = screenMain;\n                beatMap.render(ctx);\n            }\n        }\n        voterRendererList.render();\n    };\n}\n\n\n/** @module */ \n/** @module */ /**\r\n * Draggable Manager keeps a list of draggable objects on a canvas.\r\n * @constructor\r\n */ function $ee07af2b9c6cbd66$export$2e2bcd8739ae039() {\n    const self = this;\n    self.list = [] // intended to be accessed externally\n    ;\n    self.updateNewG = (g)=>{\n        self.add(g);\n    };\n    // add draggable objects\n    self.add = (s)=>{\n        const d = {};\n        if (s.voterShape) {\n            d.g = s.graphic.circle;\n            d.r = s.graphic;\n            d.o = s.voterShape;\n            d.p = {\n                isCircle: true\n            };\n        } else if (s.candidate) {\n            d.g = s.graphic.square;\n            d.r = s.graphic;\n            d.o = s.candidate;\n            d.p = {\n                isSquare: true\n            };\n        } else if (s.canDn) {\n            d.g = s.graphic.square;\n            d.r = s.graphic;\n            d.o = s.canDn;\n            d.p = {\n                isSquare: true\n            };\n        } else {\n            d.g = s.graphic.circle;\n            d.r = s.graphic;\n            d.o = s.testVoter;\n            d.p = {\n                isCircle: true\n            };\n        }\n        self.list.push(d);\n    };\n}\n\n\n/** @module */ \nfunction $2f7afdb36959c999$export$2e2bcd8739ae039(dragm, viewEntities, screen, changes, viewSettings) {\n    const self = this;\n    // private variables\n    let drag = {};\n    const draggables = dragm.list;\n    const grabCanvas = screen.tooltips;\n    // Mouse Listeners\n    // As a sidenote, it is interesting that we don't need to call model.update here\n    // because we are using a game loop that will call model.update.\n    const start = function(event) {\n        // don't interact with stuff underneath a tooltip\n        if (event.target.closest(\".tooltipBox\") !== null) return;\n        const mouse = getMouse(event);\n        const extra = event.isTouch ? 10 : 0;\n        const nd = draggables.length;\n        // We are in the hitboxes of these draggables.\n        const hitList = [];\n        for(let i = 0; i < nd; i++){\n            const d = draggables[i];\n            if ((d.o.exists || viewSettings.showGhosts) && hitTest(d, mouse, extra)) hitList.push(i);\n        }\n        if (hitList.length > 0) {\n            const distances2 = hitList.map((i)=>{\n                const d = draggables[i];\n                const offX = d.r.x - mouse.x;\n                const offY = d.r.y - mouse.y;\n                return offX ** 2 + offY ** 2;\n            });\n            // pick up\n            const iHitListClosest = (0, $e76ce676473ff390$export$e410eba367ce792b)(distances2);\n            const iDraggableClosest = hitList[iHitListClosest];\n            const d = draggables[iDraggableClosest];\n            drag.iDragging = iDraggableClosest;\n            drag.isDragging = true;\n            drag.offX = d.r.x - mouse.x;\n            drag.offY = d.r.y - mouse.y;\n            d.g.pickUp();\n            grabCanvas.dataset.cursor = \"grabbing\" // CSS data attribute\n            ;\n        }\n        startClickDetect(mouse);\n    };\n    const move = function(event) {\n        const mouse = getMouse(event);\n        if (drag.isDragging) {\n            if (event.isTouch) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            const dragging = draggables[drag.iDragging];\n            const w = screen.width;\n            const h = screen.height;\n            dragging.r.setXYView({\n                x: $2f7afdb36959c999$var$clamp(mouse.x + drag.offX, 0, w),\n                y: $2f7afdb36959c999$var$clamp(mouse.y + drag.offY, 0, h)\n            });\n            changes.add([\n                \"draggables\"\n            ]);\n        } else {\n            // see if we're hovering over something grabbable\n            // because we want the user to see if they can grab something\n            const nd = draggables.length;\n            for(let i = 0; i < nd; i++){\n                const d = draggables[i];\n                if ((viewSettings.showGhosts || d.o.exists) && hitTest(d, mouse, 0)) {\n                    grabCanvas.dataset.cursor = \"grab\";\n                    return;\n                }\n            }\n            grabCanvas.dataset.cursor = \"\" // nothing to grab\n            ;\n        }\n        moveClickDetect(mouse);\n    };\n    const end = function() {\n        endClickDetect();\n        if (drag.iDragging !== undefined) {\n            const dragging = draggables[drag.iDragging];\n            dragging.g.drop();\n        }\n        drag = {};\n    };\n    // Touch Listeners\n    const touchmove = (e)=>{\n        const pass = passTouch(e);\n        move(pass);\n    };\n    const touchstart = (e)=>{\n        const pass = passTouch(e);\n        start(pass);\n    };\n    const touchend = (e)=>{\n        const pass = passTouch(e);\n        move(pass);\n        end(pass);\n        // prevent mousedown from firing unless we're on a tooltip\n        if (e.target.closest(\".tooltipBox\") === null) e.preventDefault();\n    };\n    self.eventHandlers = {\n        start: start,\n        move: move,\n        end: end,\n        touchmove: touchmove,\n        touchstart: touchstart,\n        touchend: touchend\n    };\n    /**\r\n     * Make a touch event look like a mouse event, with a flag.\r\n     * @param {Event} e - The event from the DOM\r\n     * @returns {Event} - The same event it received, plus some added properties.\r\n     */ function passTouch(e) {\n        e.isTouch = true;\n        return e;\n    }\n    /** Fix position relative to parent\r\n     *  https://stackoverflow.com/questions/2614461/javascript-get-mouse-position-relative-to-parent-element\r\n     */ function getMouse(e) {\n        const rect = screen.wrap.getBoundingClientRect();\n        const c = e.isTouch ? e.changedTouches[0] : e;\n        const x = c.clientX - rect.left;\n        const y = c.clientY - rect.top;\n        const mouse = {\n            x: x,\n            y: y\n        };\n        return mouse;\n    }\n    /**\r\n     * Check whether m, e.g. a mouse, hits d, a draggable object.\r\n     * @param {Object} d - An entry in the draggables array.\r\n     * @param {Object} m - An object with properties x and y, e.g. a mouse.\r\n     * @param {Number} extra - Extra slack to catch touches outside of the hitbox.\r\n     * @returns {Boolean} - Whether m hits d.\r\n     */ function hitTest(d, m, extra) {\n        // Only drag an object if we're near it.\n        const x = d.r.x - m.x;\n        const y = d.r.y - m.y;\n        if (d.p.isCircle) {\n            const { r: r } = d.g;\n            const hit = x * x + y * y < (r + extra) * (r + extra);\n            return hit;\n        }\n        if (d.p.isSquare) {\n            const { w: w, h: h } = d.g;\n            const hit = Math.abs(x) < 0.5 * w + extra && Math.abs(y) < 0.5 * h + extra;\n            return hit;\n        }\n        return false;\n    }\n    // click detection //\n    let couldBeClick;\n    let startPos;\n    function startClickDetect(mouse) {\n        couldBeClick = true;\n        startPos = {\n            ...mouse\n        };\n    }\n    function moveClickDetect(mouse) {\n        if (couldBeClick) {\n            const xDist = Math.abs(startPos.x - mouse.x);\n            const yDist = Math.abs(startPos.y - mouse.y);\n            if (xDist > 5) couldBeClick = false;\n            if (yDist > 5) couldBeClick = false;\n        }\n    }\n    function endClickDetect() {\n        if (couldBeClick) {\n            couldBeClick = false;\n            if (drag.isDragging) {\n                const dragging = draggables[drag.iDragging];\n                dragging.r.click();\n            } else // We are not dragging anything, and we clicked,\n            // and we're inside the screen because this could be a click,\n            // so let's do the click action for blank space.\n            viewEntities.clickEmpty(startPos);\n        }\n    }\n}\n/** https://stackoverflow.com/a/24719569 */ function $2f7afdb36959c999$var$clamp(value, min, max) {\n    if (value < min) return min;\n    if (value > max) return max;\n    return value;\n}\n\n\nfunction $38e222933fe6ab29$export$2e2bcd8739ae039(screen, changes, viewSettings) {\n    const self = this;\n    self.dragm = new (0, $ee07af2b9c6cbd66$export$2e2bcd8739ae039)();\n    self.clickDrag = new (0, $2f7afdb36959c999$export$2e2bcd8739ae039)(self.dragm, self, screen, changes, viewSettings);\n    self.enter = ()=>{\n        screen.eventHandlers.set(self.clickDrag.eventHandlers);\n    };\n    self.exit = ()=>{};\n    self.update = ()=>{\n        if (changes.checkNone()) return;\n        screen.clear();\n        const [x, y] = [\n            150,\n            150\n        ];\n        (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)(\"Not Yet Implemented\", x, y, 20, 2, \"#222\", 1, screen.ctx);\n    };\n    self.render = ()=>{};\n    self.renderForeground = ()=>{};\n    self.testVoteView = ()=>null;\n}\n\n\n/** @module */ function $67949af908ec11a0$export$2e2bcd8739ae039(voterShape) {\n    const self = this;\n    self.voterShape = voterShape;\n    self.setRenderer = (rendererMaker)=>{\n        self.renderer = rendererMaker(voterShape);\n    };\n}\n\n\nfunction $3af4bd41fff726d7$export$2e2bcd8739ae039(voterShapeList) {\n    const self = this;\n    const list = [];\n    self.list = list;\n    self.rendererMaker = ()=>({\n            render: ()=>{}\n        });\n    // Subscribe to Sim //\n    voterShapeList.attachNewE(self);\n    self.updateNewE = (voterShape)=>{\n        self.newVoterShape(voterShape);\n    };\n    // Setters and Getters //\n    self.newVoterShape = function(voterShape) {\n        const voterRenderer = new (0, $67949af908ec11a0$export$2e2bcd8739ae039)(voterShape);\n        list.push(voterRenderer);\n        voterRenderer.setRenderer(self.rendererMaker);\n    };\n    self.getVoterShapes = ()=>list.filter((v)=>v.voterShape.exists).map((v)=>v.voterShape);\n    self.getVoterRenderers = ()=>list.filter((v)=>v.voterShape.exists);\n    // Update //\n    self.setRenderer = (rendererMaker)=>{\n        self.rendererMaker = rendererMaker;\n        list.forEach((v)=>v.setRenderer(rendererMaker));\n    };\n    self.updateGraphic = (data)=>{\n        const voterRenderersEx = self.getVoterRenderers();\n        if (data === undefined) voterRenderersEx.forEach((v)=>v.renderer.update());\n        else voterRenderersEx.forEach((v, i)=>v.renderer.update(data[i]));\n    };\n    // Render //\n    self.render = ()=>{\n        list.forEach((v)=>{\n            if (v.voterShape.exists) v.renderer.render();\n        });\n    };\n    self.renderBackground = ()=>{\n        list.forEach((v)=>{\n            if (v.voterShape.exists) v.renderer.renderBackground();\n        });\n    };\n}\n\n\n\nfunction $379842311498b12e$export$2e2bcd8739ae039(voterStrategyList) {\n    return voterStrategyList.some((v)=>v.strategy.some((a)=>a.actionName !== \"closest\" && a.actionWeight !== 0));\n}\n\n\nfunction $c0a12b19c269f517$export$2e2bcd8739ae039(optionsBag, voterShapeList, simOptions) {\n    const { sequenceOptions: sequenceOptions } = optionsBag;\n    const { sequenceName: sequenceName } = optionsBag.sequenceOptions;\n    const { resultsPhaseBySeq: resultsPhaseBySeq } = simOptions;\n    const resultsPhaseName = resultsPhaseBySeq[sequenceName];\n    const voterStrategyListByPhase = voterShapeList.getVoterStrategyListByPhase(sequenceOptions);\n    const voterStrategyList = voterStrategyListByPhase[resultsPhaseName];\n    let someStrategy;\n    if (sequenceName === \"closedPrimary\") {\n        const { resultsPartyBySeq: resultsPartyBySeq } = simOptions;\n        const resultsParty = resultsPartyBySeq[resultsPhaseName];\n        const voterStrategyListForParty = voterStrategyList.filter((v)=>v.party === resultsParty) // not right. need to use party index.\n        ;\n        // todo: consider party. Maybe one primary has no strategic votes and another has some\n        someStrategy = (0, $379842311498b12e$export$2e2bcd8739ae039)(voterStrategyListForParty);\n    } else someStrategy = (0, $379842311498b12e$export$2e2bcd8739ae039)(voterStrategyList);\n    return someStrategy;\n}\n\n\n\nfunction $f643266df7ac597d$export$2e2bcd8739ae039(entities, screenMain, screenMini, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings) {\n    const self = this;\n    viewMode.viewModes.one.attach(self);\n    (0, $38e222933fe6ab29$export$2e2bcd8739ae039).call(self, screenMain, changes, viewSettings);\n    const { candidateList: candidateList, voterShapeList: voterShapeList } = entities;\n    // Entities //\n    const voterRendererList = new (0, $3af4bd41fff726d7$export$2e2bcd8739ae039)(voterShapeList);\n    // Strategies //\n    let vizOne;\n    function enterStrategy() {\n        const optionsBag = electionOptionsMan.getOptions();\n        const resultsPhaseOptions = (0, $31295da368957eb6$export$2e2bcd8739ae039)(optionsBag, simOptions);\n        const { voteCasterName: voteCasterName } = resultsPhaseOptions;\n        const { dimensions: dimensions } = simOptions;\n        const voterGeoms = voterShapeList.getGeoms(dimensions);\n        const someGaussian2D = voterGeoms.some((v)=>v.densityProfile === \"gaussian\") && dimensions === 2;\n        const someStrategy = (0, $c0a12b19c269f517$export$2e2bcd8739ae039)(optionsBag, voterShapeList, simOptions);\n        const doGrid = someGaussian2D || someStrategy || voteCasterName === \"score\" || voteCasterName === \"scoreFull\";\n        const doRanking = voteCasterName === \"ranking\" || voteCasterName === \"pairwise\";\n        const VizOneVoronoiGeneral = doRanking ? (0, $ab815f816145f3cc$export$2e2bcd8739ae039) : (0, $27954d0c7f46c245$export$2e2bcd8739ae039);\n        const VizNoDistricts = doGrid ? (0, $996119eea3e44fbf$export$2e2bcd8739ae039) : VizOneVoronoiGeneral;\n        const VizOne = optionsBag.useGeography === true ? (0, $8260a04714b64e34$export$2e2bcd8739ae039) : VizNoDistricts;\n        vizOne = new VizOne(voterRendererList, candidateList, screenMain, screenMini, simOptions);\n    }\n    enterStrategy();\n    // Main State Machine Functions //\n    self.enter = ()=>{\n        enterStrategy();\n        vizOne.enter();\n    };\n    self.exit = ()=>{\n        vizOne.exit();\n    };\n    self.update = (simData)=>{\n        if (changes.checkNone()) return;\n        const changeList = [\n            \"numDistricts\",\n            \"numTracts\",\n            \"dimensions\",\n            \"socialChoiceMethod\",\n            \"densityProfile\",\n            \"strategyRules\",\n            \"resultsPhase\",\n            \"resultsParty\",\n            \"sequenceName\"\n        ];\n        if (changes.check(changeList)) {\n            self.exit();\n            self.enter();\n        }\n        const optionsBag = electionOptionsMan.getOptions();\n        if (optionsBag.useGeography === true) {\n            const { geoResults: geoResults } = simData;\n            vizOne.update(geoResults);\n        } else {\n            const sequenceResults = simData.geoResults.scResultsByDistrict[0];\n            const phaseResults = (0, $2d400110e848f7b3$export$2e2bcd8739ae039)(sequenceResults, simOptions);\n            vizOne.update(phaseResults);\n        }\n        self.clear();\n        self.render();\n    };\n    self.render = ()=>{\n        vizOne.render();\n    };\n    self.clear = ()=>{\n        screenMain.clear();\n        screenMini.clear();\n    };\n}\n\n\n/** @module */ /** @module */ \n\nfunction $95179699f1a63c1c$export$2e2bcd8739ae039(voterRendererList, canDnRendererList, screen, changes, simOptions) {\n    const self = this;\n    // Candidates //\n    // buffer canvas\n    const canvas2 = document.createElement(\"canvas\");\n    canvas2.width = screen.width;\n    canvas2.height = screen.height;\n    const context2 = canvas2.getContext(\"2d\");\n    const { dimensions: dimensions } = simOptions;\n    // voter renderer factory //\n    const VoterRenderer = dimensions === 1 ? (0, $94b65962391a66d0$export$2e2bcd8739ae039) : (0, $e18b7d24ec8943a8$export$2e2bcd8739ae039);\n    voterRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    canDnRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    self.update = function(samplingResult) {\n        if (changes.checkAny()) self.start();\n        const { pointsChanged: pointsChanged, samplingPointsList: samplingPointsList, samplingPointsCount: samplingPointsCount } = samplingResult;\n        if (pointsChanged) {\n            // newPoints are jittered\n            const newPoints = addNewPoints(samplingPointsList, samplingPointsCount);\n            renderToBuffer(newPoints);\n        }\n    };\n    self.start = function() {\n        clearBuffer();\n    };\n    /** Add points with jitter */ function addNewPoints(samplingPointsList, samplingPointsCount) {\n        const jitterSize = 10;\n        const newPoints = [];\n        for(let i = 0; i < samplingPointsList.length; i++){\n            const point = samplingPointsList[i];\n            const count = samplingPointsCount[i];\n            const [x, y] = point;\n            for(let m = 0; m < count; m++){\n                // add jitter\n                let winPoint;\n                if (m === 0) winPoint = [\n                    x,\n                    y\n                ];\n                else if (dimensions === 1) winPoint = [\n                    x + (Math.random() - 0.5) * jitterSize\n                ];\n                else winPoint = [\n                    x + (Math.random() - 0.5) * jitterSize,\n                    y + (Math.random() - 0.5) * jitterSize\n                ];\n                self.points.push(winPoint);\n                newPoints.push(winPoint);\n            }\n        }\n        return newPoints;\n    }\n    self.render = ()=>{\n        self.renderCans();\n        voterRendererList.render();\n        canDnRendererList.render();\n    };\n    self.renderCans = function() {\n        if (screen.noBuffers) noBufferRender();\n        else bufferRender();\n    };\n    function clearBuffer() {\n        context2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    function renderToBuffer(newPoints) {\n        const ctx = context2;\n        renderPoints(ctx, newPoints);\n    }\n    function renderPoints(ctx, newPoints) {\n        ctx.fillStyle = \"grey\";\n        const n = newPoints.length;\n        for(let i = 0; i < n; i++){\n            const [x, y0] = newPoints[i];\n            // dot\n            ctx.beginPath();\n            const y = dimensions === 1 ? Math.random() * 100 + 0 : y0;\n            ctx.arc(x, y, 2, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n    }\n    function bufferRender() {\n        const { ctx: ctx } = screen;\n        ctx.drawImage(canvas2, 0, 0);\n    }\n    // use this if we want to export to an SVG\n    function noBufferRender() {\n        const { ctx: ctx } = screen;\n        renderPoints(ctx, self.points);\n    }\n}\n\n\n/** @module */ \n\nfunction $eb0fab33c96b3c15$export$2e2bcd8739ae039(voterRendererList, canDnRendererList, screen, changes, simOptions) {\n    const self = this;\n    // adjustable visual parameters\n    const kw = 20;\n    const ikw = 1 / kw;\n    // sum and total density\n    const { width: width } = screen;\n    const sum = Array(width).fill(0);\n    let total = 0;\n    const { dimensions: dimensions } = simOptions;\n    // voter renderer factory //\n    const VoterRenderer = dimensions === 1 ? (0, $94b65962391a66d0$export$2e2bcd8739ae039) : (0, $e18b7d24ec8943a8$export$2e2bcd8739ae039);\n    voterRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    canDnRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    self.update = function(samplingResult) {\n        if (changes.checkAny()) start();\n        const { pointsChanged: pointsChanged, samplingPointsList: samplingPointsList, samplingPointsCount: samplingPointsCount } = samplingResult;\n        if (pointsChanged) updatePoints(samplingPointsList, samplingPointsCount);\n    };\n    function start() {\n        sum.fill(0);\n        total = 0;\n    }\n    const kernelsize = 4 / 3;\n    function updatePoints(samplingPointsList, samplingPointsCount) {\n        // add to sum for each point\n        const nk = samplingPointsList.length;\n        for(let k = 0; k < nk; k++){\n            const x = samplingPointsList[k][0];\n            const count = samplingPointsCount[k];\n            for(let i = 0; i < width; i++)sum[i] += kernel(i - x) * count;\n            total += kernelsize * count;\n        }\n    }\n    function kernel(x) {\n        if (x > kw || x < -kw) return 0;\n        return (1 - (x * ikw) ** 2) * ikw;\n    }\n    self.render = ()=>{\n        renderCans();\n        voterRendererList.render();\n        canDnRendererList.render();\n    };\n    function renderCans() {\n        const { ctx: ctx } = screen;\n        ctx.save();\n        ctx.beginPath();\n        doPath(ctx);\n        ctx.strokeStyle = \"#ccc\";\n        ctx.stroke();\n        ctx.fillStyle = \"#ccc\";\n        ctx.fill();\n        ctx.restore();\n    }\n    const h = 100;\n    const middle = 150;\n    function doPath(ctx) {\n        const norm = 1 / total;\n        const amp = h * 100;\n        const bottom = middle + h * 0.5;\n        // start bottom left\n        ctx.moveTo(0, bottom);\n        const pa = [];\n        for(let i = 0; i <= width; i += 1){\n            const y = bottom - amp * sum[i] * norm;\n            pa.push(y);\n            ctx.lineTo(i, y);\n        }\n        // end bottom right\n        ctx.lineTo(screen.width, bottom);\n        ctx.lineTo(0, bottom);\n    }\n}\n\n\n/** @module */ \nfunction $15b11d3f8c621b55$export$2e2bcd8739ae039(values, valueof) {\n    let max;\n    if (valueof === undefined) {\n        for (const value of values)if (value != null && (max < value || max === undefined && value >= value)) max = value;\n    } else {\n        let index = -1;\n        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) max = value;\n    }\n    return max;\n}\n\nconst $487dd0f9cbab3b32$var$e10 = Math.sqrt(50), $487dd0f9cbab3b32$var$e5 = Math.sqrt(10), $487dd0f9cbab3b32$var$e2 = Math.sqrt(2);\nfunction $487dd0f9cbab3b32$var$tickSpec(start, stop, count) {\n    const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= $487dd0f9cbab3b32$var$e10 ? 10 : error >= $487dd0f9cbab3b32$var$e5 ? 5 : error >= $487dd0f9cbab3b32$var$e2 ? 2 : 1;\n    let i1, i2, inc;\n    if (power < 0) {\n        inc = Math.pow(10, -power) / factor;\n        i1 = Math.round(start * inc);\n        i2 = Math.round(stop * inc);\n        if (i1 / inc < start) ++i1;\n        if (i2 / inc > stop) --i2;\n        inc = -inc;\n    } else {\n        inc = Math.pow(10, power) * factor;\n        i1 = Math.round(start / inc);\n        i2 = Math.round(stop / inc);\n        if (i1 * inc < start) ++i1;\n        if (i2 * inc > stop) --i2;\n    }\n    if (i2 < i1 && 0.5 <= count && count < 2) return $487dd0f9cbab3b32$var$tickSpec(start, stop, count * 2);\n    return [\n        i1,\n        i2,\n        inc\n    ];\n}\nfunction $487dd0f9cbab3b32$export$2e2bcd8739ae039(start, stop, count) {\n    stop = +stop, start = +start, count = +count;\n    if (!(count > 0)) return [];\n    if (start === stop) return [\n        start\n    ];\n    const reverse = stop < start, [i1, i2, inc] = reverse ? $487dd0f9cbab3b32$var$tickSpec(stop, start, count) : $487dd0f9cbab3b32$var$tickSpec(start, stop, count);\n    if (!(i2 >= i1)) return [];\n    const n = i2 - i1 + 1, ticks = new Array(n);\n    if (reverse) {\n        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) / -inc;\n        else for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) * inc;\n    } else {\n        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) / -inc;\n        else for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) * inc;\n    }\n    return ticks;\n}\nfunction $487dd0f9cbab3b32$export$bc64d00cc98e7e95(start, stop, count) {\n    stop = +stop, start = +start, count = +count;\n    return $487dd0f9cbab3b32$var$tickSpec(start, stop, count)[2];\n}\nfunction $487dd0f9cbab3b32$export$81087d9b915d4ede(start, stop, count) {\n    stop = +stop, start = +start, count = +count;\n    const reverse = stop < start, inc = reverse ? $487dd0f9cbab3b32$export$bc64d00cc98e7e95(stop, start, count) : $487dd0f9cbab3b32$export$bc64d00cc98e7e95(start, stop, count);\n    return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n\n\nvar $2c4f6d534fad065c$var$array = Array.prototype;\nvar $2c4f6d534fad065c$export$58adb3bec8346d0f = $2c4f6d534fad065c$var$array.slice;\n\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nfunction $6bcd7857347ef156$export$d6b6c69cb5897b44(source, target, r) {\n    var n = source.width, m = source.height, w = (r << 1) + 1;\n    for(var j = 0; j < m; ++j)for(var i = 0, sr = 0; i < n + r; ++i){\n        if (i < n) sr += source.data[i + j * n];\n        if (i >= r) {\n            if (i >= w) sr -= source.data[i - w + j * n];\n            target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n        }\n    }\n}\nfunction $6bcd7857347ef156$export$96ba1179f8344c4b(source, target, r) {\n    var n = source.width, m = source.height, w = (r << 1) + 1;\n    for(var i = 0; i < n; ++i)for(var j = 0, sr = 0; j < m + r; ++j){\n        if (j < m) sr += source.data[i + j * n];\n        if (j >= r) {\n            if (j >= w) sr -= source.data[i + (j - w) * n];\n            target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n        }\n    }\n}\n\n\nvar $0cb759b1a7cd07a6$export$2e2bcd8739ae039 = (x)=>()=>x;\n\n\nfunction $ef085f926875ebfd$export$2e2bcd8739ae039(values, valueof) {\n    let min;\n    let max;\n    if (valueof === undefined) {\n        for (const value of values)if (value != null) {\n            if (min === undefined) {\n                if (value >= value) min = max = value;\n            } else {\n                if (min > value) min = value;\n                if (max < value) max = value;\n            }\n        }\n    } else {\n        let index = -1;\n        for (let value of values)if ((value = valueof(value, ++index, values)) != null) {\n            if (min === undefined) {\n                if (value >= value) min = max = value;\n            } else {\n                if (min > value) min = value;\n                if (max < value) max = value;\n            }\n        }\n    }\n    return [\n        min,\n        max\n    ];\n}\n\nfunction $da7a44857f23db86$export$2e2bcd8739ae039(values, valueof) {\n    let count = 0;\n    if (valueof === undefined) {\n        for (let value of values)if (value != null && (value = +value) >= value) ++count;\n    } else {\n        let index = -1;\n        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count;\n    }\n    return count;\n}\n\n\nfunction $26e3fe1f2046d711$export$2e2bcd8739ae039(values) {\n    return Math.max(1, Math.ceil(Math.log((0, $da7a44857f23db86$export$2e2bcd8739ae039)(values)) / Math.LN2) + 1);\n}\n\n\n\nfunction $5ca01d25a009fe4e$export$2e2bcd8739ae039(a, b) {\n    return a - b;\n}\n\n\nfunction $acd05d25fda90a83$export$2e2bcd8739ae039(ring) {\n    var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n    while(++i < n)area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n    return area;\n}\n\n\n\nfunction $ede27fb7dc44c2de$export$2e2bcd8739ae039(ring, hole) {\n    var i = -1, n = hole.length, c;\n    while(++i < n)if (c = $ede27fb7dc44c2de$var$ringContains(ring, hole[i])) return c;\n    return 0;\n}\nfunction $ede27fb7dc44c2de$var$ringContains(ring, point) {\n    var x = point[0], y = point[1], contains = -1;\n    for(var i = 0, n = ring.length, j = n - 1; i < n; j = i++){\n        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n        if ($ede27fb7dc44c2de$var$segmentContains(pi, pj, point)) return 0;\n        if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;\n    }\n    return contains;\n}\nfunction $ede27fb7dc44c2de$var$segmentContains(a, b, c) {\n    var i;\n    return $ede27fb7dc44c2de$var$collinear(a, b, c) && $ede27fb7dc44c2de$var$within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\nfunction $ede27fb7dc44c2de$var$collinear(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\nfunction $ede27fb7dc44c2de$var$within(p, q, r) {\n    return p <= q && q <= r || r <= q && q <= p;\n}\n\n\nfunction $cab3ef4358a431fa$export$2e2bcd8739ae039() {}\n\n\nvar $b90b07a45fb6f5c3$var$cases = [\n    [],\n    [\n        [\n            [\n                1.0,\n                1.5\n            ],\n            [\n                0.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.5,\n                1.0\n            ],\n            [\n                1.0,\n                1.5\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.5,\n                1.0\n            ],\n            [\n                0.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.0,\n                0.5\n            ],\n            [\n                1.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.0,\n                1.5\n            ],\n            [\n                0.5,\n                1.0\n            ]\n        ],\n        [\n            [\n                1.0,\n                0.5\n            ],\n            [\n                1.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.0,\n                0.5\n            ],\n            [\n                1.0,\n                1.5\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.0,\n                0.5\n            ],\n            [\n                0.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                0.5,\n                1.0\n            ],\n            [\n                1.0,\n                0.5\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.0,\n                1.5\n            ],\n            [\n                1.0,\n                0.5\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                0.5,\n                1.0\n            ],\n            [\n                1.0,\n                0.5\n            ]\n        ],\n        [\n            [\n                1.5,\n                1.0\n            ],\n            [\n                1.0,\n                1.5\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.5,\n                1.0\n            ],\n            [\n                1.0,\n                0.5\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                0.5,\n                1.0\n            ],\n            [\n                1.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                1.0,\n                1.5\n            ],\n            [\n                1.5,\n                1.0\n            ]\n        ]\n    ],\n    [\n        [\n            [\n                0.5,\n                1.0\n            ],\n            [\n                1.0,\n                1.5\n            ]\n        ]\n    ],\n    []\n];\nfunction $b90b07a45fb6f5c3$export$2e2bcd8739ae039() {\n    var dx = 1, dy = 1, threshold = (0, $26e3fe1f2046d711$export$2e2bcd8739ae039), smooth = smoothLinear;\n    function contours(values) {\n        var tz = threshold(values);\n        // Convert number of thresholds into uniform thresholds.\n        if (!Array.isArray(tz)) {\n            const e = (0, $ef085f926875ebfd$export$2e2bcd8739ae039)(values), ts = (0, $487dd0f9cbab3b32$export$81087d9b915d4ede)(e[0], e[1], tz);\n            tz = (0, $487dd0f9cbab3b32$export$2e2bcd8739ae039)(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);\n        } else tz = tz.slice().sort((0, $5ca01d25a009fe4e$export$2e2bcd8739ae039));\n        return tz.map((value)=>contour(values, value));\n    }\n    // Accumulate, smooth contour rings, assign holes to exterior rings.\n    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n    function contour(values, value) {\n        var polygons = [], holes = [];\n        isorings(values, value, function(ring) {\n            smooth(ring, values, value);\n            if ((0, $acd05d25fda90a83$export$2e2bcd8739ae039)(ring) > 0) polygons.push([\n                ring\n            ]);\n            else holes.push(ring);\n        });\n        holes.forEach(function(hole) {\n            for(var i = 0, n = polygons.length, polygon; i < n; ++i)if ((0, $ede27fb7dc44c2de$export$2e2bcd8739ae039)((polygon = polygons[i])[0], hole) !== -1) {\n                polygon.push(hole);\n                return;\n            }\n        });\n        return {\n            type: \"MultiPolygon\",\n            value: value,\n            coordinates: polygons\n        };\n    }\n    // Marching squares with isolines stitched into rings.\n    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n    function isorings(values, value, callback) {\n        var fragmentByStart = new Array, fragmentByEnd = new Array, x, y, t0, t1, t2, t3;\n        // Special case for the first row (y = -1, t2 = t3 = 0).\n        x = y = -1;\n        t1 = values[0] >= value;\n        $b90b07a45fb6f5c3$var$cases[t1 << 1].forEach(stitch);\n        while(++x < dx - 1){\n            t0 = t1, t1 = values[x + 1] >= value;\n            $b90b07a45fb6f5c3$var$cases[t0 | t1 << 1].forEach(stitch);\n        }\n        $b90b07a45fb6f5c3$var$cases[t1 << 0].forEach(stitch);\n        // General case for the intermediate rows.\n        while(++y < dy - 1){\n            x = -1;\n            t1 = values[y * dx + dx] >= value;\n            t2 = values[y * dx] >= value;\n            $b90b07a45fb6f5c3$var$cases[t1 << 1 | t2 << 2].forEach(stitch);\n            while(++x < dx - 1){\n                t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n                t3 = t2, t2 = values[y * dx + x + 1] >= value;\n                $b90b07a45fb6f5c3$var$cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n            }\n            $b90b07a45fb6f5c3$var$cases[t1 | t2 << 3].forEach(stitch);\n        }\n        // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n        x = -1;\n        t2 = values[y * dx] >= value;\n        $b90b07a45fb6f5c3$var$cases[t2 << 2].forEach(stitch);\n        while(++x < dx - 1){\n            t3 = t2, t2 = values[y * dx + x + 1] >= value;\n            $b90b07a45fb6f5c3$var$cases[t2 << 2 | t3 << 3].forEach(stitch);\n        }\n        $b90b07a45fb6f5c3$var$cases[t2 << 3].forEach(stitch);\n        function stitch(line) {\n            var start = [\n                line[0][0] + x,\n                line[0][1] + y\n            ], end = [\n                line[1][0] + x,\n                line[1][1] + y\n            ], startIndex = index(start), endIndex = index(end), f, g;\n            if (f = fragmentByEnd[startIndex]) {\n                if (g = fragmentByStart[endIndex]) {\n                    delete fragmentByEnd[f.end];\n                    delete fragmentByStart[g.start];\n                    if (f === g) {\n                        f.ring.push(end);\n                        callback(f.ring);\n                    } else fragmentByStart[f.start] = fragmentByEnd[g.end] = {\n                        start: f.start,\n                        end: g.end,\n                        ring: f.ring.concat(g.ring)\n                    };\n                } else {\n                    delete fragmentByEnd[f.end];\n                    f.ring.push(end);\n                    fragmentByEnd[f.end = endIndex] = f;\n                }\n            } else if (f = fragmentByStart[endIndex]) {\n                if (g = fragmentByEnd[startIndex]) {\n                    delete fragmentByStart[f.start];\n                    delete fragmentByEnd[g.end];\n                    if (f === g) {\n                        f.ring.push(end);\n                        callback(f.ring);\n                    } else fragmentByStart[g.start] = fragmentByEnd[f.end] = {\n                        start: g.start,\n                        end: f.end,\n                        ring: g.ring.concat(f.ring)\n                    };\n                } else {\n                    delete fragmentByStart[f.start];\n                    f.ring.unshift(start);\n                    fragmentByStart[f.start = startIndex] = f;\n                }\n            } else fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {\n                start: startIndex,\n                end: endIndex,\n                ring: [\n                    start,\n                    end\n                ]\n            };\n        }\n    }\n    function index(point) {\n        return point[0] * 2 + point[1] * (dx + 1) * 4;\n    }\n    function smoothLinear(ring, values, value) {\n        ring.forEach(function(point) {\n            var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v0, v1 = values[yt * dx + xt];\n            if (x > 0 && x < dx && xt === x) {\n                v0 = values[yt * dx + xt - 1];\n                point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n            }\n            if (y > 0 && y < dy && yt === y) {\n                v0 = values[(yt - 1) * dx + xt];\n                point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n            }\n        });\n    }\n    contours.contour = contour;\n    contours.size = function(_) {\n        if (!arguments.length) return [\n            dx,\n            dy\n        ];\n        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);\n        if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n        return dx = _0, dy = _1, contours;\n    };\n    contours.thresholds = function(_) {\n        return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)((0, $2c4f6d534fad065c$export$58adb3bec8346d0f).call(_)) : (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)(_), contours) : threshold;\n    };\n    contours.smooth = function(_) {\n        return arguments.length ? (smooth = _ ? smoothLinear : (0, $cab3ef4358a431fa$export$2e2bcd8739ae039), contours) : smooth === smoothLinear;\n    };\n    return contours;\n}\n\n\nfunction $32fc6ddad2582b2c$var$defaultX(d) {\n    return d[0];\n}\nfunction $32fc6ddad2582b2c$var$defaultY(d) {\n    return d[1];\n}\nfunction $32fc6ddad2582b2c$var$defaultWeight() {\n    return 1;\n}\nfunction $32fc6ddad2582b2c$export$2e2bcd8739ae039() {\n    var x = $32fc6ddad2582b2c$var$defaultX, y = $32fc6ddad2582b2c$var$defaultY, weight = $32fc6ddad2582b2c$var$defaultWeight, dx = 960, dy = 500, r = 20, k = 2, o = r * 3, n = dx + o * 2 >> k, m = dy + o * 2 >> k, threshold = (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)(20);\n    function grid(data) {\n        var values0 = new Float32Array(n * m), values1 = new Float32Array(n * m), pow2k = Math.pow(2, -k);\n        data.forEach(function(d, i, data) {\n            var xi = (x(d, i, data) + o) * pow2k, yi = (y(d, i, data) + o) * pow2k, wi = +weight(d, i, data);\n            if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n                var x0 = Math.floor(xi), y0 = Math.floor(yi), xt = xi - x0 - 0.5, yt = yi - y0 - 0.5;\n                values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n                values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n                values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n                values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n            }\n        });\n        // TODO Optimize.\n        (0, $6bcd7857347ef156$export$d6b6c69cb5897b44)({\n            width: n,\n            height: m,\n            data: values0\n        }, {\n            width: n,\n            height: m,\n            data: values1\n        }, r >> k);\n        (0, $6bcd7857347ef156$export$96ba1179f8344c4b)({\n            width: n,\n            height: m,\n            data: values1\n        }, {\n            width: n,\n            height: m,\n            data: values0\n        }, r >> k);\n        (0, $6bcd7857347ef156$export$d6b6c69cb5897b44)({\n            width: n,\n            height: m,\n            data: values0\n        }, {\n            width: n,\n            height: m,\n            data: values1\n        }, r >> k);\n        (0, $6bcd7857347ef156$export$96ba1179f8344c4b)({\n            width: n,\n            height: m,\n            data: values1\n        }, {\n            width: n,\n            height: m,\n            data: values0\n        }, r >> k);\n        (0, $6bcd7857347ef156$export$d6b6c69cb5897b44)({\n            width: n,\n            height: m,\n            data: values0\n        }, {\n            width: n,\n            height: m,\n            data: values1\n        }, r >> k);\n        (0, $6bcd7857347ef156$export$96ba1179f8344c4b)({\n            width: n,\n            height: m,\n            data: values1\n        }, {\n            width: n,\n            height: m,\n            data: values0\n        }, r >> k);\n        return values0;\n    }\n    function density(data) {\n        var values = grid(data), tz = threshold(values), pow4k = Math.pow(2, 2 * k);\n        // Convert number of thresholds into uniform thresholds.\n        if (!Array.isArray(tz)) tz = (0, $487dd0f9cbab3b32$export$2e2bcd8739ae039)(Number.MIN_VALUE, (0, $15b11d3f8c621b55$export$2e2bcd8739ae039)(values) / pow4k, tz);\n        return (0, $b90b07a45fb6f5c3$export$2e2bcd8739ae039)().size([\n            n,\n            m\n        ]).thresholds(tz.map((d)=>d * pow4k))(values).map((c, i)=>(c.value = +tz[i], transform(c)));\n    }\n    density.contours = function(data) {\n        var values = grid(data), contours = (0, $b90b07a45fb6f5c3$export$2e2bcd8739ae039)().size([\n            n,\n            m\n        ]), pow4k = Math.pow(2, 2 * k), contour = (value)=>{\n            value = +value;\n            var c = transform(contours.contour(values, value * pow4k));\n            c.value = value; // preserve exact threshold value\n            return c;\n        };\n        Object.defineProperty(contour, \"max\", {\n            get: ()=>(0, $15b11d3f8c621b55$export$2e2bcd8739ae039)(values) / pow4k\n        });\n        return contour;\n    };\n    function transform(geometry) {\n        geometry.coordinates.forEach(transformPolygon);\n        return geometry;\n    }\n    function transformPolygon(coordinates) {\n        coordinates.forEach(transformRing);\n    }\n    function transformRing(coordinates) {\n        coordinates.forEach(transformPoint);\n    }\n    // TODO Optimize.\n    function transformPoint(coordinates) {\n        coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n        coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n    }\n    function resize() {\n        o = r * 3;\n        n = dx + o * 2 >> k;\n        m = dy + o * 2 >> k;\n        return density;\n    }\n    density.x = function(_) {\n        return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)(+_), density) : x;\n    };\n    density.y = function(_) {\n        return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)(+_), density) : y;\n    };\n    density.weight = function(_) {\n        return arguments.length ? (weight = typeof _ === \"function\" ? _ : (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)(+_), density) : weight;\n    };\n    density.size = function(_) {\n        if (!arguments.length) return [\n            dx,\n            dy\n        ];\n        var _0 = +_[0], _1 = +_[1];\n        if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n        return dx = _0, dy = _1, resize();\n    };\n    density.cellSize = function(_) {\n        if (!arguments.length) return 1 << k;\n        if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n        return k = Math.floor(Math.log(_) / Math.LN2), resize();\n    };\n    density.thresholds = function(_) {\n        return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)((0, $2c4f6d534fad065c$export$58adb3bec8346d0f).call(_)) : (0, $0cb759b1a7cd07a6$export$2e2bcd8739ae039)(_), density) : threshold;\n    };\n    density.bandwidth = function(_) {\n        if (!arguments.length) return Math.sqrt(r * (r + 1));\n        if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n        return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n    };\n    return density;\n}\n\n\nvar $12ca6452a9242546$export$2e2bcd8739ae039 = (x)=>x;\n\n\nfunction $a9c4f90c46b9891b$var$streamGeometry(geometry, stream) {\n    if (geometry && $a9c4f90c46b9891b$var$streamGeometryType.hasOwnProperty(geometry.type)) $a9c4f90c46b9891b$var$streamGeometryType[geometry.type](geometry, stream);\n}\nvar $a9c4f90c46b9891b$var$streamObjectType = {\n    Feature: function(object, stream) {\n        $a9c4f90c46b9891b$var$streamGeometry(object.geometry, stream);\n    },\n    FeatureCollection: function(object, stream) {\n        var features = object.features, i = -1, n = features.length;\n        while(++i < n)$a9c4f90c46b9891b$var$streamGeometry(features[i].geometry, stream);\n    }\n};\nvar $a9c4f90c46b9891b$var$streamGeometryType = {\n    Sphere: function(object, stream) {\n        stream.sphere();\n    },\n    Point: function(object, stream) {\n        object = object.coordinates;\n        stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, stream) {\n        var coordinates = object.coordinates, i = -1, n = coordinates.length;\n        while(++i < n)object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, stream) {\n        $a9c4f90c46b9891b$var$streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function(object, stream) {\n        var coordinates = object.coordinates, i = -1, n = coordinates.length;\n        while(++i < n)$a9c4f90c46b9891b$var$streamLine(coordinates[i], stream, 0);\n    },\n    Polygon: function(object, stream) {\n        $a9c4f90c46b9891b$var$streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function(object, stream) {\n        var coordinates = object.coordinates, i = -1, n = coordinates.length;\n        while(++i < n)$a9c4f90c46b9891b$var$streamPolygon(coordinates[i], stream);\n    },\n    GeometryCollection: function(object, stream) {\n        var geometries = object.geometries, i = -1, n = geometries.length;\n        while(++i < n)$a9c4f90c46b9891b$var$streamGeometry(geometries[i], stream);\n    }\n};\nfunction $a9c4f90c46b9891b$var$streamLine(coordinates, stream, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    stream.lineStart();\n    while(++i < n)coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n    stream.lineEnd();\n}\nfunction $a9c4f90c46b9891b$var$streamPolygon(coordinates, stream) {\n    var i = -1, n = coordinates.length;\n    stream.polygonStart();\n    while(++i < n)$a9c4f90c46b9891b$var$streamLine(coordinates[i], stream, 1);\n    stream.polygonEnd();\n}\nfunction $a9c4f90c46b9891b$export$2e2bcd8739ae039(object, stream) {\n    if (object && $a9c4f90c46b9891b$var$streamObjectType.hasOwnProperty(object.type)) $a9c4f90c46b9891b$var$streamObjectType[object.type](object, stream);\n    else $a9c4f90c46b9891b$var$streamGeometry(object, stream);\n}\n\n\n// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nclass $6ec05ae0eb260f21$export$bda7ba77fb86c375 {\n    constructor(){\n        this._partials = new Float64Array(32);\n        this._n = 0;\n    }\n    add(x) {\n        const p = this._partials;\n        let i = 0;\n        for(let j = 0; j < this._n && j < 32; j++){\n            const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n            if (lo) p[i++] = lo;\n            x = hi;\n        }\n        p[i] = x;\n        this._n = i + 1;\n        return this;\n    }\n    valueOf() {\n        const p = this._partials;\n        let n = this._n, x, y, lo, hi = 0;\n        if (n > 0) {\n            hi = p[--n];\n            while(n > 0){\n                x = hi;\n                y = p[--n];\n                hi = x + y;\n                lo = y - (hi - x);\n                if (lo) break;\n            }\n            if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {\n                y = lo * 2;\n                x = hi + y;\n                if (y == x - hi) hi = x;\n            }\n        }\n        return hi;\n    }\n}\nfunction $6ec05ae0eb260f21$export$61cb83f1a93e9fae(values, valueof) {\n    const adder = new $6ec05ae0eb260f21$export$bda7ba77fb86c375();\n    if (valueof === undefined) {\n        for (let value of values)if (value = +value) adder.add(value);\n    } else {\n        let index = -1;\n        for (let value of values)if (value = +valueof(value, ++index, values)) adder.add(value);\n    }\n    return +adder;\n}\nfunction $6ec05ae0eb260f21$export$5a6391da70c130da(values, valueof) {\n    const adder = new $6ec05ae0eb260f21$export$bda7ba77fb86c375();\n    let index = -1;\n    return Float64Array.from(values, valueof === undefined ? (v)=>adder.add(+v || 0) : (v)=>adder.add(+valueof(v, ++index, values) || 0));\n}\n\n\nvar $57fa69a7e776893c$export$6c421550c66a327d = 1e-6;\nvar $57fa69a7e776893c$export$92c06fba281fe81b = 1e-12;\nvar $57fa69a7e776893c$export$18c7bea995a110f = Math.PI;\nvar $57fa69a7e776893c$export$e51408a300e8929a = $57fa69a7e776893c$export$18c7bea995a110f / 2;\nvar $57fa69a7e776893c$export$c39a5cba78ea0fc2 = $57fa69a7e776893c$export$18c7bea995a110f / 4;\nvar $57fa69a7e776893c$export$a4b4b4d4d776fe92 = $57fa69a7e776893c$export$18c7bea995a110f * 2;\nvar $57fa69a7e776893c$export$41fc368e1a942b97 = 180 / $57fa69a7e776893c$export$18c7bea995a110f;\nvar $57fa69a7e776893c$export$8449e153fbd325fc = $57fa69a7e776893c$export$18c7bea995a110f / 180;\nvar $57fa69a7e776893c$export$2335f513bbd82c6d = Math.abs;\nvar $57fa69a7e776893c$export$628dc4eed22b0fbd = Math.atan;\nvar $57fa69a7e776893c$export$b8b770ee6a0d9760 = Math.atan2;\nvar $57fa69a7e776893c$export$50d414a77b60d802 = Math.cos;\nvar $57fa69a7e776893c$export$803ce6b71a0a94b2 = Math.ceil;\nvar $57fa69a7e776893c$export$b310ec824aaee37f = Math.exp;\nvar $57fa69a7e776893c$export$a3fe094919f356fd = Math.floor;\nvar $57fa69a7e776893c$export$f95c7888b62f8e9a = Math.hypot;\nvar $57fa69a7e776893c$export$bef1f36f5486a6a3 = Math.log;\nvar $57fa69a7e776893c$export$9c297f60e22e3389 = Math.pow;\nvar $57fa69a7e776893c$export$5de3937cb4b592ed = Math.sin;\nvar $57fa69a7e776893c$export$c5552dfdbc7cec71 = Math.sign || function(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nvar $57fa69a7e776893c$export$eba8049fb5020b81 = Math.sqrt;\nvar $57fa69a7e776893c$export$fcdd3b0b3246a325 = Math.tan;\nfunction $57fa69a7e776893c$export$fd6306be3fde5b04(x) {\n    return x > 1 ? 0 : x < -1 ? $57fa69a7e776893c$export$18c7bea995a110f : Math.acos(x);\n}\nfunction $57fa69a7e776893c$export$41726bdb1fc63f(x) {\n    return x > 1 ? $57fa69a7e776893c$export$e51408a300e8929a : x < -1 ? -$57fa69a7e776893c$export$e51408a300e8929a : Math.asin(x);\n}\nfunction $57fa69a7e776893c$export$e808712c2966e662(x) {\n    return (x = $57fa69a7e776893c$export$5de3937cb4b592ed(x / 2)) * x;\n}\n\n\nfunction $b28aa413bde10d03$export$2e2bcd8739ae039() {}\n\n\nvar $5df02d2f69cce112$var$areaSum = new (0, $6ec05ae0eb260f21$export$bda7ba77fb86c375)(), $5df02d2f69cce112$var$areaRingSum = new (0, $6ec05ae0eb260f21$export$bda7ba77fb86c375)(), $5df02d2f69cce112$var$x00, $5df02d2f69cce112$var$y00, $5df02d2f69cce112$var$x0, $5df02d2f69cce112$var$y0;\nvar $5df02d2f69cce112$var$areaStream = {\n    point: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    lineStart: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    lineEnd: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    polygonStart: function() {\n        $5df02d2f69cce112$var$areaStream.lineStart = $5df02d2f69cce112$var$areaRingStart;\n        $5df02d2f69cce112$var$areaStream.lineEnd = $5df02d2f69cce112$var$areaRingEnd;\n    },\n    polygonEnd: function() {\n        $5df02d2f69cce112$var$areaStream.lineStart = $5df02d2f69cce112$var$areaStream.lineEnd = $5df02d2f69cce112$var$areaStream.point = (0, $b28aa413bde10d03$export$2e2bcd8739ae039);\n        $5df02d2f69cce112$var$areaSum.add((0, $57fa69a7e776893c$export$2335f513bbd82c6d)($5df02d2f69cce112$var$areaRingSum));\n        $5df02d2f69cce112$var$areaRingSum = new (0, $6ec05ae0eb260f21$export$bda7ba77fb86c375)();\n    },\n    result: function() {\n        var area = $5df02d2f69cce112$var$areaSum / 2;\n        $5df02d2f69cce112$var$areaSum = new (0, $6ec05ae0eb260f21$export$bda7ba77fb86c375)();\n        return area;\n    }\n};\nfunction $5df02d2f69cce112$var$areaRingStart() {\n    $5df02d2f69cce112$var$areaStream.point = $5df02d2f69cce112$var$areaPointFirst;\n}\nfunction $5df02d2f69cce112$var$areaPointFirst(x, y) {\n    $5df02d2f69cce112$var$areaStream.point = $5df02d2f69cce112$var$areaPoint;\n    $5df02d2f69cce112$var$x00 = $5df02d2f69cce112$var$x0 = x, $5df02d2f69cce112$var$y00 = $5df02d2f69cce112$var$y0 = y;\n}\nfunction $5df02d2f69cce112$var$areaPoint(x, y) {\n    $5df02d2f69cce112$var$areaRingSum.add($5df02d2f69cce112$var$y0 * x - $5df02d2f69cce112$var$x0 * y);\n    $5df02d2f69cce112$var$x0 = x, $5df02d2f69cce112$var$y0 = y;\n}\nfunction $5df02d2f69cce112$var$areaRingEnd() {\n    $5df02d2f69cce112$var$areaPoint($5df02d2f69cce112$var$x00, $5df02d2f69cce112$var$y00);\n}\nvar $5df02d2f69cce112$export$2e2bcd8739ae039 = $5df02d2f69cce112$var$areaStream;\n\n\n\nvar $d0d3ed45b07b0be3$var$x0 = Infinity, $d0d3ed45b07b0be3$var$y0 = $d0d3ed45b07b0be3$var$x0, $d0d3ed45b07b0be3$var$x1 = -$d0d3ed45b07b0be3$var$x0, $d0d3ed45b07b0be3$var$y1 = $d0d3ed45b07b0be3$var$x1;\nvar $d0d3ed45b07b0be3$var$boundsStream = {\n    point: $d0d3ed45b07b0be3$var$boundsPoint,\n    lineStart: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    lineEnd: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    polygonStart: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    polygonEnd: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    result: function() {\n        var bounds = [\n            [\n                $d0d3ed45b07b0be3$var$x0,\n                $d0d3ed45b07b0be3$var$y0\n            ],\n            [\n                $d0d3ed45b07b0be3$var$x1,\n                $d0d3ed45b07b0be3$var$y1\n            ]\n        ];\n        $d0d3ed45b07b0be3$var$x1 = $d0d3ed45b07b0be3$var$y1 = -($d0d3ed45b07b0be3$var$y0 = $d0d3ed45b07b0be3$var$x0 = Infinity);\n        return bounds;\n    }\n};\nfunction $d0d3ed45b07b0be3$var$boundsPoint(x, y) {\n    if (x < $d0d3ed45b07b0be3$var$x0) $d0d3ed45b07b0be3$var$x0 = x;\n    if (x > $d0d3ed45b07b0be3$var$x1) $d0d3ed45b07b0be3$var$x1 = x;\n    if (y < $d0d3ed45b07b0be3$var$y0) $d0d3ed45b07b0be3$var$y0 = y;\n    if (y > $d0d3ed45b07b0be3$var$y1) $d0d3ed45b07b0be3$var$y1 = y;\n}\nvar $d0d3ed45b07b0be3$export$2e2bcd8739ae039 = $d0d3ed45b07b0be3$var$boundsStream;\n\n\n\n// TODO Enforce positive area for exterior, negative area for interior?\nvar $df73b5500e7eacc3$var$X0 = 0, $df73b5500e7eacc3$var$Y0 = 0, $df73b5500e7eacc3$var$Z0 = 0, $df73b5500e7eacc3$var$X1 = 0, $df73b5500e7eacc3$var$Y1 = 0, $df73b5500e7eacc3$var$Z1 = 0, $df73b5500e7eacc3$var$X2 = 0, $df73b5500e7eacc3$var$Y2 = 0, $df73b5500e7eacc3$var$Z2 = 0, $df73b5500e7eacc3$var$x00, $df73b5500e7eacc3$var$y00, $df73b5500e7eacc3$var$x0, $df73b5500e7eacc3$var$y0;\nvar $df73b5500e7eacc3$var$centroidStream = {\n    point: $df73b5500e7eacc3$var$centroidPoint,\n    lineStart: $df73b5500e7eacc3$var$centroidLineStart,\n    lineEnd: $df73b5500e7eacc3$var$centroidLineEnd,\n    polygonStart: function() {\n        $df73b5500e7eacc3$var$centroidStream.lineStart = $df73b5500e7eacc3$var$centroidRingStart;\n        $df73b5500e7eacc3$var$centroidStream.lineEnd = $df73b5500e7eacc3$var$centroidRingEnd;\n    },\n    polygonEnd: function() {\n        $df73b5500e7eacc3$var$centroidStream.point = $df73b5500e7eacc3$var$centroidPoint;\n        $df73b5500e7eacc3$var$centroidStream.lineStart = $df73b5500e7eacc3$var$centroidLineStart;\n        $df73b5500e7eacc3$var$centroidStream.lineEnd = $df73b5500e7eacc3$var$centroidLineEnd;\n    },\n    result: function() {\n        var centroid = $df73b5500e7eacc3$var$Z2 ? [\n            $df73b5500e7eacc3$var$X2 / $df73b5500e7eacc3$var$Z2,\n            $df73b5500e7eacc3$var$Y2 / $df73b5500e7eacc3$var$Z2\n        ] : $df73b5500e7eacc3$var$Z1 ? [\n            $df73b5500e7eacc3$var$X1 / $df73b5500e7eacc3$var$Z1,\n            $df73b5500e7eacc3$var$Y1 / $df73b5500e7eacc3$var$Z1\n        ] : $df73b5500e7eacc3$var$Z0 ? [\n            $df73b5500e7eacc3$var$X0 / $df73b5500e7eacc3$var$Z0,\n            $df73b5500e7eacc3$var$Y0 / $df73b5500e7eacc3$var$Z0\n        ] : [\n            NaN,\n            NaN\n        ];\n        $df73b5500e7eacc3$var$X0 = $df73b5500e7eacc3$var$Y0 = $df73b5500e7eacc3$var$Z0 = $df73b5500e7eacc3$var$X1 = $df73b5500e7eacc3$var$Y1 = $df73b5500e7eacc3$var$Z1 = $df73b5500e7eacc3$var$X2 = $df73b5500e7eacc3$var$Y2 = $df73b5500e7eacc3$var$Z2 = 0;\n        return centroid;\n    }\n};\nfunction $df73b5500e7eacc3$var$centroidPoint(x, y) {\n    $df73b5500e7eacc3$var$X0 += x;\n    $df73b5500e7eacc3$var$Y0 += y;\n    ++$df73b5500e7eacc3$var$Z0;\n}\nfunction $df73b5500e7eacc3$var$centroidLineStart() {\n    $df73b5500e7eacc3$var$centroidStream.point = $df73b5500e7eacc3$var$centroidPointFirstLine;\n}\nfunction $df73b5500e7eacc3$var$centroidPointFirstLine(x, y) {\n    $df73b5500e7eacc3$var$centroidStream.point = $df73b5500e7eacc3$var$centroidPointLine;\n    $df73b5500e7eacc3$var$centroidPoint($df73b5500e7eacc3$var$x0 = x, $df73b5500e7eacc3$var$y0 = y);\n}\nfunction $df73b5500e7eacc3$var$centroidPointLine(x, y) {\n    var dx = x - $df73b5500e7eacc3$var$x0, dy = y - $df73b5500e7eacc3$var$y0, z = (0, $57fa69a7e776893c$export$eba8049fb5020b81)(dx * dx + dy * dy);\n    $df73b5500e7eacc3$var$X1 += z * ($df73b5500e7eacc3$var$x0 + x) / 2;\n    $df73b5500e7eacc3$var$Y1 += z * ($df73b5500e7eacc3$var$y0 + y) / 2;\n    $df73b5500e7eacc3$var$Z1 += z;\n    $df73b5500e7eacc3$var$centroidPoint($df73b5500e7eacc3$var$x0 = x, $df73b5500e7eacc3$var$y0 = y);\n}\nfunction $df73b5500e7eacc3$var$centroidLineEnd() {\n    $df73b5500e7eacc3$var$centroidStream.point = $df73b5500e7eacc3$var$centroidPoint;\n}\nfunction $df73b5500e7eacc3$var$centroidRingStart() {\n    $df73b5500e7eacc3$var$centroidStream.point = $df73b5500e7eacc3$var$centroidPointFirstRing;\n}\nfunction $df73b5500e7eacc3$var$centroidRingEnd() {\n    $df73b5500e7eacc3$var$centroidPointRing($df73b5500e7eacc3$var$x00, $df73b5500e7eacc3$var$y00);\n}\nfunction $df73b5500e7eacc3$var$centroidPointFirstRing(x, y) {\n    $df73b5500e7eacc3$var$centroidStream.point = $df73b5500e7eacc3$var$centroidPointRing;\n    $df73b5500e7eacc3$var$centroidPoint($df73b5500e7eacc3$var$x00 = $df73b5500e7eacc3$var$x0 = x, $df73b5500e7eacc3$var$y00 = $df73b5500e7eacc3$var$y0 = y);\n}\nfunction $df73b5500e7eacc3$var$centroidPointRing(x, y) {\n    var dx = x - $df73b5500e7eacc3$var$x0, dy = y - $df73b5500e7eacc3$var$y0, z = (0, $57fa69a7e776893c$export$eba8049fb5020b81)(dx * dx + dy * dy);\n    $df73b5500e7eacc3$var$X1 += z * ($df73b5500e7eacc3$var$x0 + x) / 2;\n    $df73b5500e7eacc3$var$Y1 += z * ($df73b5500e7eacc3$var$y0 + y) / 2;\n    $df73b5500e7eacc3$var$Z1 += z;\n    z = $df73b5500e7eacc3$var$y0 * x - $df73b5500e7eacc3$var$x0 * y;\n    $df73b5500e7eacc3$var$X2 += z * ($df73b5500e7eacc3$var$x0 + x);\n    $df73b5500e7eacc3$var$Y2 += z * ($df73b5500e7eacc3$var$y0 + y);\n    $df73b5500e7eacc3$var$Z2 += z * 3;\n    $df73b5500e7eacc3$var$centroidPoint($df73b5500e7eacc3$var$x0 = x, $df73b5500e7eacc3$var$y0 = y);\n}\nvar $df73b5500e7eacc3$export$2e2bcd8739ae039 = $df73b5500e7eacc3$var$centroidStream;\n\n\n\n\nfunction $85c4323c793ebcf2$export$2e2bcd8739ae039(context) {\n    this._context = context;\n}\n$85c4323c793ebcf2$export$2e2bcd8739ae039.prototype = {\n    _radius: 4.5,\n    pointRadius: function(_) {\n        return this._radius = _, this;\n    },\n    polygonStart: function() {\n        this._line = 0;\n    },\n    polygonEnd: function() {\n        this._line = NaN;\n    },\n    lineStart: function() {\n        this._point = 0;\n    },\n    lineEnd: function() {\n        if (this._line === 0) this._context.closePath();\n        this._point = NaN;\n    },\n    point: function(x, y) {\n        switch(this._point){\n            case 0:\n                this._context.moveTo(x, y);\n                this._point = 1;\n                break;\n            case 1:\n                this._context.lineTo(x, y);\n                break;\n            default:\n                this._context.moveTo(x + this._radius, y);\n                this._context.arc(x, y, this._radius, 0, (0, $57fa69a7e776893c$export$a4b4b4d4d776fe92));\n                break;\n        }\n    },\n    result: (0, $b28aa413bde10d03$export$2e2bcd8739ae039)\n};\n\n\n\n\n\nvar $c9fc6c8cc8776d8d$var$lengthSum = new (0, $6ec05ae0eb260f21$export$bda7ba77fb86c375)(), $c9fc6c8cc8776d8d$var$lengthRing, $c9fc6c8cc8776d8d$var$x00, $c9fc6c8cc8776d8d$var$y00, $c9fc6c8cc8776d8d$var$x0, $c9fc6c8cc8776d8d$var$y0;\nvar $c9fc6c8cc8776d8d$var$lengthStream = {\n    point: (0, $b28aa413bde10d03$export$2e2bcd8739ae039),\n    lineStart: function() {\n        $c9fc6c8cc8776d8d$var$lengthStream.point = $c9fc6c8cc8776d8d$var$lengthPointFirst;\n    },\n    lineEnd: function() {\n        if ($c9fc6c8cc8776d8d$var$lengthRing) $c9fc6c8cc8776d8d$var$lengthPoint($c9fc6c8cc8776d8d$var$x00, $c9fc6c8cc8776d8d$var$y00);\n        $c9fc6c8cc8776d8d$var$lengthStream.point = (0, $b28aa413bde10d03$export$2e2bcd8739ae039);\n    },\n    polygonStart: function() {\n        $c9fc6c8cc8776d8d$var$lengthRing = true;\n    },\n    polygonEnd: function() {\n        $c9fc6c8cc8776d8d$var$lengthRing = null;\n    },\n    result: function() {\n        var length = +$c9fc6c8cc8776d8d$var$lengthSum;\n        $c9fc6c8cc8776d8d$var$lengthSum = new (0, $6ec05ae0eb260f21$export$bda7ba77fb86c375)();\n        return length;\n    }\n};\nfunction $c9fc6c8cc8776d8d$var$lengthPointFirst(x, y) {\n    $c9fc6c8cc8776d8d$var$lengthStream.point = $c9fc6c8cc8776d8d$var$lengthPoint;\n    $c9fc6c8cc8776d8d$var$x00 = $c9fc6c8cc8776d8d$var$x0 = x, $c9fc6c8cc8776d8d$var$y00 = $c9fc6c8cc8776d8d$var$y0 = y;\n}\nfunction $c9fc6c8cc8776d8d$var$lengthPoint(x, y) {\n    $c9fc6c8cc8776d8d$var$x0 -= x, $c9fc6c8cc8776d8d$var$y0 -= y;\n    $c9fc6c8cc8776d8d$var$lengthSum.add((0, $57fa69a7e776893c$export$eba8049fb5020b81)($c9fc6c8cc8776d8d$var$x0 * $c9fc6c8cc8776d8d$var$x0 + $c9fc6c8cc8776d8d$var$y0 * $c9fc6c8cc8776d8d$var$y0));\n    $c9fc6c8cc8776d8d$var$x0 = x, $c9fc6c8cc8776d8d$var$y0 = y;\n}\nvar $c9fc6c8cc8776d8d$export$2e2bcd8739ae039 = $c9fc6c8cc8776d8d$var$lengthStream;\n\n\n// Simple caching for constant-radius points.\nlet $bcdac7a19792d2c9$var$cacheDigits, $bcdac7a19792d2c9$var$cacheAppend, $bcdac7a19792d2c9$var$cacheRadius, $bcdac7a19792d2c9$var$cacheCircle;\nclass $bcdac7a19792d2c9$export$2e2bcd8739ae039 {\n    constructor(digits){\n        this._append = digits == null ? $bcdac7a19792d2c9$var$append : $bcdac7a19792d2c9$var$appendRound(digits);\n        this._radius = 4.5;\n        this._ = \"\";\n    }\n    pointRadius(_) {\n        this._radius = +_;\n        return this;\n    }\n    polygonStart() {\n        this._line = 0;\n    }\n    polygonEnd() {\n        this._line = NaN;\n    }\n    lineStart() {\n        this._point = 0;\n    }\n    lineEnd() {\n        if (this._line === 0) this._ += \"Z\";\n        this._point = NaN;\n    }\n    point(x, y) {\n        switch(this._point){\n            case 0:\n                this._append`M${x},${y}`;\n                this._point = 1;\n                break;\n            case 1:\n                this._append`L${x},${y}`;\n                break;\n            default:\n                this._append`M${x},${y}`;\n                if (this._radius !== $bcdac7a19792d2c9$var$cacheRadius || this._append !== $bcdac7a19792d2c9$var$cacheAppend) {\n                    const r = this._radius;\n                    const s = this._;\n                    this._ = \"\"; // stash the old string so we can cache the circle path fragment\n                    this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;\n                    $bcdac7a19792d2c9$var$cacheRadius = r;\n                    $bcdac7a19792d2c9$var$cacheAppend = this._append;\n                    $bcdac7a19792d2c9$var$cacheCircle = this._;\n                    this._ = s;\n                }\n                this._ += $bcdac7a19792d2c9$var$cacheCircle;\n                break;\n        }\n    }\n    result() {\n        const result = this._;\n        this._ = \"\";\n        return result.length ? result : null;\n    }\n}\nfunction $bcdac7a19792d2c9$var$append(strings) {\n    let i = 1;\n    this._ += strings[0];\n    for(const j = strings.length; i < j; ++i)this._ += arguments[i] + strings[i];\n}\nfunction $bcdac7a19792d2c9$var$appendRound(digits) {\n    const d = Math.floor(digits);\n    if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);\n    if (d > 15) return $bcdac7a19792d2c9$var$append;\n    if (d !== $bcdac7a19792d2c9$var$cacheDigits) {\n        const k = 10 ** d;\n        $bcdac7a19792d2c9$var$cacheDigits = d;\n        $bcdac7a19792d2c9$var$cacheAppend = function append(strings) {\n            let i = 1;\n            this._ += strings[0];\n            for(const j = strings.length; i < j; ++i)this._ += Math.round(arguments[i] * k) / k + strings[i];\n        };\n    }\n    return $bcdac7a19792d2c9$var$cacheAppend;\n}\n\n\nfunction $6bf13192c901061f$export$2e2bcd8739ae039(projection, context) {\n    let digits = 3, pointRadius = 4.5, projectionStream, contextStream;\n    function path(object) {\n        if (object) {\n            if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n            (0, $a9c4f90c46b9891b$export$2e2bcd8739ae039)(object, projectionStream(contextStream));\n        }\n        return contextStream.result();\n    }\n    path.area = function(object) {\n        (0, $a9c4f90c46b9891b$export$2e2bcd8739ae039)(object, projectionStream((0, $5df02d2f69cce112$export$2e2bcd8739ae039)));\n        return (0, $5df02d2f69cce112$export$2e2bcd8739ae039).result();\n    };\n    path.measure = function(object) {\n        (0, $a9c4f90c46b9891b$export$2e2bcd8739ae039)(object, projectionStream((0, $c9fc6c8cc8776d8d$export$2e2bcd8739ae039)));\n        return (0, $c9fc6c8cc8776d8d$export$2e2bcd8739ae039).result();\n    };\n    path.bounds = function(object) {\n        (0, $a9c4f90c46b9891b$export$2e2bcd8739ae039)(object, projectionStream((0, $d0d3ed45b07b0be3$export$2e2bcd8739ae039)));\n        return (0, $d0d3ed45b07b0be3$export$2e2bcd8739ae039).result();\n    };\n    path.centroid = function(object) {\n        (0, $a9c4f90c46b9891b$export$2e2bcd8739ae039)(object, projectionStream((0, $df73b5500e7eacc3$export$2e2bcd8739ae039)));\n        return (0, $df73b5500e7eacc3$export$2e2bcd8739ae039).result();\n    };\n    path.projection = function(_) {\n        if (!arguments.length) return projection;\n        projectionStream = _ == null ? (projection = null, $12ca6452a9242546$export$2e2bcd8739ae039) : (projection = _).stream;\n        return path;\n    };\n    path.context = function(_) {\n        if (!arguments.length) return context;\n        contextStream = _ == null ? (context = null, new (0, $bcdac7a19792d2c9$export$2e2bcd8739ae039)(digits)) : new (0, $85c4323c793ebcf2$export$2e2bcd8739ae039)(context = _);\n        if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n        return path;\n    };\n    path.pointRadius = function(_) {\n        if (!arguments.length) return pointRadius;\n        pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n        return path;\n    };\n    path.digits = function(_) {\n        if (!arguments.length) return digits;\n        if (_ == null) digits = null;\n        else {\n            const d = Math.floor(_);\n            if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);\n            digits = d;\n        }\n        if (context === null) contextStream = new (0, $bcdac7a19792d2c9$export$2e2bcd8739ae039)(digits);\n        return path;\n    };\n    return path.projection(projection).digits(digits).context(context);\n}\n\n\n\n\nfunction $c6ff1f262edf842d$export$2e2bcd8739ae039(voterRendererList, canDnRendererList, screen, changes, simOptions) {\n    const self = this;\n    // Candidates //\n    const { dimensions: dimensions } = simOptions;\n    // voter renderer factory //\n    const VoterRenderer = dimensions === 1 ? (0, $94b65962391a66d0$export$2e2bcd8739ae039) : (0, $e18b7d24ec8943a8$export$2e2bcd8739ae039);\n    voterRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    canDnRendererList.setRenderer((voterShape)=>new VoterRenderer(voterShape, screen));\n    const pointsList = [];\n    const pointCounts = [];\n    let totalCount;\n    self.update = function(samplingResult) {\n        if (changes.checkAny()) start();\n        const { pointsChanged: pointsChanged, samplingPointsList: samplingPointsList, samplingPointsCount: samplingPointsCount } = samplingResult;\n        if (pointsChanged) {\n            self.updatePoints(samplingPointsList, samplingPointsCount);\n            self.updateDensity();\n        }\n    };\n    function start() {\n        pointsList.splice(0, pointsList.length);\n        pointCounts.splice(0, pointCounts.length);\n        totalCount = 0;\n    }\n    self.render = ()=>{\n        self.renderCans();\n        voterRendererList.render();\n        canDnRendererList.render();\n    };\n    self.updatePoints = function(samplingPointsList, samplingPointsCount) {\n        for(let i = 0; i < samplingPointsList.length; i++){\n            const point = samplingPointsList[i];\n            const count = samplingPointsCount[i];\n            pointsList.push(point);\n            pointCounts.push(count);\n            totalCount += count;\n        }\n    };\n    const nThresholds = 20;\n    let densityData;\n    self.updateDensity = ()=>{\n        const btw = totalCount / 10000;\n        const thresholds = (0, $c9cda941ee132d98$export$d02631cccf789723)(nThresholds).map((x)=>x * btw);\n        const cd = (0, $32fc6ddad2582b2c$export$2e2bcd8739ae039)().x((d)=>d[0]).y((d)=>d[1]).weight((d, i)=>pointCounts[i]).bandwidth(10).thresholds(thresholds);\n        densityData = cd(pointsList);\n    };\n    self.renderCans = ()=>{\n        const { ctx: ctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const gg = (0, $6bf13192c901061f$export$2e2bcd8739ae039)().context(ctx);\n        ctx.save();\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = \"#aaa\";\n        const alpha = 1;\n        const nd = densityData.length;\n        for(let i = 0; i < nd; i++){\n            const col = 255 - i * (200 / nThresholds);\n            // 33 is #222, otherwise there is noise TODO: fix this workaround. Try to take out 33.\n            const co = darkMode ? 255 - col + 33 : col;\n            ctx.fillStyle = `rgba(${co},${co},${co}, ${alpha})`;\n            ctx.beginPath();\n            gg(densityData[i]);\n            // ctx.stroke()\n            ctx.fill();\n        }\n        ctx.restore();\n    };\n}\n\n\n\n\n/** @module */ function $01e88f6a1853bce9$export$2e2bcd8739ae039(candidateDn) {\n    const self = this;\n    self.canDn = candidateDn;\n    self.setRenderer = (rendererMaker)=>{\n        self.renderer = rendererMaker(candidateDn);\n    };\n}\n\n\nfunction $490ef50da749debd$export$2e2bcd8739ae039(candidateDnList) {\n    const self = this;\n    const list = [];\n    self.rendererMaker = ()=>({\n            render: ()=>{}\n        });\n    // Subscribe to Sim //\n    candidateDnList.attachNewE(self);\n    self.updateNewE = (candidateDn)=>{\n        self.newCandidateDn(candidateDn);\n    };\n    // Data Setters and Getters //\n    self.newCandidateDn = function(candidateDn) {\n        const canDnRenderer = new (0, $01e88f6a1853bce9$export$2e2bcd8739ae039)(candidateDn);\n        list.push(canDnRenderer);\n        canDnRenderer.setRenderer(self.rendererMaker);\n    };\n    // get sim entities that exist\n    self.getCanDnRenderers = ()=>{\n        const a = list.filter((canDnRenderer)=>canDnRenderer.canDn.exists);\n        return a;\n    };\n    // get the underlying entities of the above\n    self.getCandidateDistributions = ()=>{\n        const canDnRenderersEx = self.getCanDnRenderers();\n        return canDnRenderersEx.map((canDnRenderer)=>canDnRenderer.canDn);\n    };\n    self.getCandidateDistributionsAll = ()=>list.map((canDnRenderer)=>canDnRenderer.canDn);\n    // Update //\n    self.setRenderer = (rendererMaker)=>{\n        self.rendererMaker = rendererMaker;\n        list.forEach((canDnRenderer)=>canDnRenderer.setRenderer(rendererMaker));\n    };\n    // Render //\n    self.render = ()=>{\n        list.forEach((canDnRenderer)=>{\n            if (canDnRenderer.canDn.exists) canDnRenderer.renderer.render();\n        });\n    };\n}\n\n\nfunction $54465968db0c2722$export$2e2bcd8739ae039(entities, screen, menu, changes, simOptions, viewMode, viewSettings) {\n    const self = this;\n    viewMode.viewModes.sample.attach(self);\n    (0, $38e222933fe6ab29$export$2e2bcd8739ae039).call(self, screen, changes, viewSettings);\n    // Entities //\n    const { candidateDnList: candidateDnList, voterShapeList: voterShapeList } = entities;\n    const voterRendererList = new (0, $3af4bd41fff726d7$export$2e2bcd8739ae039)(voterShapeList);\n    const canDnRendererList = new (0, $490ef50da749debd$export$2e2bcd8739ae039)(candidateDnList);\n    // Strategies //\n    let vizSample;\n    function enterStrategy() {\n        const doDensity = true // TODO : make into an option, perhaps\n        ;\n        const { dimensions: dimensions } = simOptions;\n        const VizSampleDensity = dimensions === 1 ? (0, $eb0fab33c96b3c15$export$2e2bcd8739ae039) : (0, $c6ff1f262edf842d$export$2e2bcd8739ae039);\n        const VizSampleStrat = doDensity ? VizSampleDensity : (0, $95179699f1a63c1c$export$2e2bcd8739ae039);\n        vizSample = new VizSampleStrat(voterRendererList, canDnRendererList, screen, changes, simOptions);\n    }\n    enterStrategy();\n    // Main State Machine Functions //\n    self.enter = ()=>{\n        enterStrategy();\n    };\n    self.exit = ()=>{};\n    self.update = (simData)=>{\n        if (changes.check([\n            \"dimensions\"\n        ])) {\n            self.exit();\n            self.enter();\n        }\n        // Update players. Run an election. Get result. Visualize result.\n        // The election handles any changes.\n        // The samplingResult communicates how to visualize the election.\n        const { samplingResult: samplingResult } = simData;\n        vizSample.update(samplingResult);\n        const { pointsChanged: pointsChanged } = samplingResult;\n        if (pointsChanged) {\n            self.clear();\n            self.render();\n        }\n    };\n    self.render = ()=>{\n        vizSample.render();\n    };\n    self.clear = ()=>{\n        screen.clear();\n    };\n}\n\n\n/** @module */ \n/** @module */ /** @module */ \nfunction $3edb90b7f49fddac$export$2e2bcd8739ae039(screen) {\n    const self = this;\n    /**\r\n     * Define district lines and count demographics.\r\n     * @param {Number} nx - number of voter cells in x\r\n     * @param {Number} ny - number of voter cells in y\r\n     * @param {Number} nd - number of districts.\r\n     */ /**\r\n     * Draw Voronoi cell boundaries.\r\n     * @param {Number} districtMapWidth - width of image\r\n     * @param {Number} districtMapHeight - height of image\r\n     */ self.renderVoronoi = (districtMap, districtMapWidth, districtMapHeight)=>{\n        self.renderVoronoiGeneral(districtMap, 0, 0, districtMapWidth, districtMapHeight, null, renderAreaText);\n    };\n    self.renderVoronoiColors = (districtMap, x, y, districtMapWidth, districtMapHeight, colors)=>{\n        self.renderVoronoiGeneral(districtMap, x, y, districtMapWidth, districtMapHeight, colors, undefined);\n    };\n    /**\r\n     * Draw a Voronoi Diagram\r\n     * @param {Number} x - translate image\r\n     * @param {Number} y - translate image\r\n     * @param {Number} districtMapWidth - width of image\r\n     * @param {Number} districtMapHeight - height of image\r\n     * @param {string[]} colors - an option, say \"null\" if do not want colors\r\n     * @param {Function} textFunction - an option, defaults to undefined\r\n     */ self.renderVoronoiGeneral = (districtMap, x, y, districtMapWidth, districtMapHeight, colors, textFunction)=>{\n        const { ctx: ctx } = screen;\n        const { voronoi: voronoi, nd: nd } = districtMap;\n        ctx.save();\n        const scaleX = districtMapWidth;\n        const scaleY = districtMapHeight;\n        ctx.translate(x, y);\n        ctx.scale(scaleX, scaleY);\n        for(let i = 0; i < nd; i++){\n            ctx.beginPath();\n            ctx.strokeStyle = \"#333\";\n            ctx.lineWidth = 1 / scaleX;\n            voronoi.renderCell(i, ctx);\n            if (colors !== null) {\n                ctx.fillStyle = colors[i];\n                ctx.fill();\n            }\n            ctx.stroke();\n            if (textFunction !== undefined) textFunction(districtMap, i) // option\n            ;\n        }\n        ctx.restore();\n    };\n    function renderAreaText(districtMap, i) {\n        const { ctx: ctx } = screen;\n        const { centroids: centroids, polygonAreas: polygonAreas } = districtMap;\n        const c = centroids[i];\n        const textHeight = 0.1;\n        // const areaText = textPercent(polygonAreas[i] / (districtMap.totalArea))\n        const area = polygonAreas[i];\n        const area1000 = area * 1000;\n        const areaText = area1000.toFixed(0);\n        (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)(areaText, c[0], c[1] + textHeight * 0.5, textHeight, 0.2, \"#222\", 1, ctx);\n    }\n}\n\n\n/** @module */ \n\nfunction $4342a141612da03a$export$2e2bcd8739ae039(winFractionPairwise) {\n    const nk = winFractionPairwise.length;\n    const minimaxScore = [];\n    for(let k = 0; k < nk; k++){\n        const pairs = winFractionPairwise[k];\n        let min = 1;\n        for(let i = 0; i < nk; i++){\n            if (i === k) continue;\n            const p = pairs[i];\n            if (p < min) min = p;\n        }\n        minimaxScore.push(min);\n    }\n    return minimaxScore;\n}\n\n\nfunction $96e1eb8626c55622$export$2e2bcd8739ae039(votes, socialChoiceMethod) {\n    const { candidateTallies: candidateTallies } = votes;\n    if (candidateTallies.bordaFractionAverageByCan) {\n        if (socialChoiceMethod === \"minimax\") {\n            const { winFractionPairwise: winFractionPairwise } = votes.pairwiseTallies;\n            const minimaxScore = (0, $4342a141612da03a$export$2e2bcd8739ae039)(winFractionPairwise);\n            return minimaxScore;\n        }\n        return candidateTallies.bordaFractionAverageByCan;\n    }\n    if (candidateTallies.voteFractionsByCan) return candidateTallies.voteFractionsByCan;\n    if (candidateTallies.firstPreferenceFractions) return candidateTallies.firstPreferenceFractions;\n    if (candidateTallies.scoreFractionAverageByCan) return candidateTallies.scoreFractionAverageByCan;\n    return null;\n}\n\n\nfunction $f76b7d8523210943$export$2e2bcd8739ae039(districtElectionResults, candidateList, optionsBag, simOptions) {\n    const { votesByTract: votesByTract, votesByDistrict: votesByDistrict, scResultsByDistrict: scResultsByDistrict } = districtElectionResults;\n    const canList = candidateList.getEntities();\n    const colorByTract = $f76b7d8523210943$var$colorTracts(votesByTract, canList);\n    const colorOfWinsByDistrict = $f76b7d8523210943$var$colorDistrictWins(scResultsByDistrict, canList, optionsBag, simOptions);\n    const colorOfVoteByDistrict = $f76b7d8523210943$var$colorDistrictVote(votesByDistrict, canList);\n    const gc = {\n        colorByTract: colorByTract,\n        colorOfVoteByDistrict: colorOfVoteByDistrict,\n        colorOfWinsByDistrict: colorOfWinsByDistrict\n    };\n    return gc;\n}\nfunction $f76b7d8523210943$var$colorTracts(votesByTract, canList) {\n    // get color\n    const colorSet = canList.map((can)=>can.colorRGBA);\n    const colorByTract = votesByTract.map((row)=>row.map((votes)=>{\n            const tallyFractions = (0, $96e1eb8626c55622$export$2e2bcd8739ae039)(votes);\n            const color = (0, $421104df84ecbab8$export$2e2bcd8739ae039)(tallyFractions, colorSet);\n            return color;\n        }));\n    return colorByTract;\n}\nfunction $f76b7d8523210943$var$colorDistrictWins(scResultsByDistrict, canList, optionsBag, simOptions) {\n    // calculate color for win map\n    let colorOfWinsByDistrict;\n    const resultsPhaseOptions = (0, $31295da368957eb6$export$2e2bcd8739ae039)(optionsBag, simOptions);\n    const { socialChoiceType: socialChoiceType } = resultsPhaseOptions;\n    if (socialChoiceType === \"singleWinner\") colorOfWinsByDistrict = scResultsByDistrict.map((socialChoiceResults)=>canList[socialChoiceResults.iWinner].color);\n    else {\n        const colorSet = canList.map((can)=>can.colorRGBA);\n        colorOfWinsByDistrict = scResultsByDistrict.map((socialChoiceResults)=>{\n            const { allocation: allocation } = socialChoiceResults;\n            const sum = allocation.reduce((p, c)=>p + c);\n            const fractions = allocation.map((x)=>x / sum);\n            const color = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)(fractions, colorSet));\n            return color;\n        });\n    }\n    return colorOfWinsByDistrict;\n}\n/**\r\n * Update color for each district, based on votes for each candidate.\r\n * Blend candidate colors in proportion to their votes.\r\n * @param {Candidate[]} canList - An array of Candidate objects.\r\n * @returns {String[]} - List of color strings indexed by district.\r\n */ function $f76b7d8523210943$var$colorDistrictVote(votesByDistrict, canList) {\n    const colorOfVoteByDistrict = votesByDistrict.map((votes)=>{\n        const tallyFractions = (0, $96e1eb8626c55622$export$2e2bcd8739ae039)(votes);\n        const colorSet = canList.map((can)=>can.colorRGBA);\n        const color = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)(tallyFractions, colorSet));\n        return color;\n    });\n    return colorOfVoteByDistrict;\n}\n\n\n/** @module */ /**\r\n * Draws a map of the geographical tracts, or anything really.\r\n * @param {Number} nx - Width in pixels\r\n * @param {Number} ny - Height in pixels\r\n * @param {Screen} screen - Draw here.\r\n * @constructor\r\n */ function $3d875fa9828b9751$export$2e2bcd8739ae039(nx, ny, screen) {\n    const self = this;\n    /*\r\n        Makes your pixel manip on an off-screen canvas\r\n        Returns the off-screen canvas\r\n        */ const canvas = document.createElement(\"canvas\");\n    canvas.width = nx;\n    canvas.height = ny;\n    const offCtx = canvas.getContext(\"2d\");\n    const imageData = offCtx.createImageData(nx, ny);\n    // not used anymore\n    self.load = (sn)=>{\n        const { data: data } = imageData;\n        for(let x = 0; x < nx; x++)for(let y = 0; y < ny; y++){\n            const r = sn[x][y][0] + 0.5;\n            const g = sn[x][y][1] + 0.5;\n            data[(x + y * nx) * 4 + 0] = r * 255;\n            data[(x + y * nx) * 4 + 1] = (r + g) * 200;\n            data[(x + y * nx) * 4 + 2] = g * 200;\n            data[(x + y * nx) * 4 + 3] = 255;\n        }\n        offCtx.putImageData(imageData, 0, 0);\n    };\n    self.loadColors = (colors)=>{\n        const { data: data } = imageData;\n        for(let y = 0; y < ny; y++)for(let x = 0; x < nx; x++){\n            const color = colors[x][y];\n            const [r, g, b] = color;\n            data[(x + y * nx) * 4 + 0] = r;\n            data[(x + y * nx) * 4 + 1] = g;\n            data[(x + y * nx) * 4 + 2] = b;\n            data[(x + y * nx) * 4 + 3] = 255;\n        }\n        offCtx.putImageData(imageData, 0, 0);\n    };\n    self.render = (renderWidth, renderHeight)=>{\n        const { ctx: ctx } = screen;\n        ctx.save();\n        ctx.imageSmoothingEnabled = false;\n        ctx.drawImage(canvas, 0, 0, renderWidth, renderHeight);\n        ctx.restore();\n    };\n// Draw simplex noise\n// https://codepen.io/jwagner/pen/BNmpdm/?editors=0010\n// Scale image\n// https://stackoverflow.com/a/48858621\n}\n\n\nfunction $a864792a6d7ef385$export$2e2bcd8739ae039(candidateList, screen, electionOptionsMan, simOptions, changes) {\n    const self = this;\n    let districtMap;\n    // Update //\n    self.update = (districtElectionResults)=>{\n        const { geography: geography } = districtElectionResults.geometry;\n        districtMap = geography.districtMap;\n        // todo: make this only run when we have new districts\n        if (self.districtDraw === undefined || changes.check([\n            \"numTracts\"\n        ])) {\n            self.districtDraw = new (0, $3edb90b7f49fddac$export$2e2bcd8739ae039)(screen);\n            // Code that handles making images of geographic noise.\n            self.mapOfTracts = new (0, $3d875fa9828b9751$export$2e2bcd8739ae039)(geography.nx, geography.ny, screen);\n        }\n        const optionsBag = electionOptionsMan.getOptions();\n        const gc = (0, $f76b7d8523210943$export$2e2bcd8739ae039)(districtElectionResults, candidateList, optionsBag, simOptions);\n        const { colorByTract: colorByTract, colorOfVoteByDistrict: colorOfVoteByDistrict, colorOfWinsByDistrict: colorOfWinsByDistrict } = gc;\n        self.colorOfVoteByDistrict = colorOfVoteByDistrict;\n        self.winnerColors = colorOfWinsByDistrict;\n        self.mapOfTracts.loadColors(colorByTract);\n    };\n    // Display //\n    const districtMapWidth = 100;\n    const districtMapHeight = 100;\n    // screen.setMapsHeight((1 / 3) * screen.height)\n    /** Render all maps and  */ self.render = ()=>{\n        self.renderTractVotes();\n        self.renderDistrictWins();\n        self.renderDistrictVotes();\n    };\n    // Render census tract votes.\n    self.renderTractVotes = ()=>{\n        self.mapOfTracts.render(districtMapWidth, districtMapHeight);\n        self.districtDraw.renderVoronoi(districtMap, districtMapWidth, districtMapHeight);\n    };\n    // Render district wins.\n    self.renderDistrictWins = ()=>{\n        const { renderVoronoiColors: renderVoronoiColors } = self.districtDraw;\n        renderVoronoiColors(districtMap, 200, 0, districtMapWidth, districtMapHeight, self.winnerColors);\n    };\n    // render district votes.\n    self.renderDistrictVotes = ()=>{\n        const { renderVoronoiColors: renderVoronoiColors } = self.districtDraw;\n        renderVoronoiColors(districtMap, 100, 0, districtMapWidth, districtMapHeight, self.colorOfVoteByDistrict);\n    };\n}\n\n\nfunction $33663a9a11823002$export$2e2bcd8739ae039(entities, screenCommon, layout, changes, simOptions, electionOptionsMan, viewMode) {\n    const self = this;\n    viewMode.viewModes.one.attach(self);\n    const screen = new (0, $6f4e9b5281dd3fb8$export$2e2bcd8739ae039)(screenCommon, viewMode, layout, \"maps\");\n    const { height: height } = screenCommon;\n    screen.setHeight(height / 3);\n    screen.hide();\n    const districtMapViz = new (0, $a864792a6d7ef385$export$2e2bcd8739ae039)(entities.candidateList, screen, electionOptionsMan, simOptions, changes);\n    let flagNoRender = false;\n    self.enter = ()=>{\n        const optionsBag = electionOptionsMan.getOptions();\n        if (optionsBag.useGeography) screen.show();\n    };\n    self.exit = ()=>{\n        screen.hide();\n    };\n    self.update = function(simData) {\n        const optionsBag = electionOptionsMan.getOptions();\n        if (changes.check([\n            \"numDistricts\",\n            \"numTracts\"\n        ])) {\n            if (optionsBag.useGeography) screen.show();\n            else screen.hide();\n        }\n        const sequenceResults = simData.geoResults.scResultsByDistrict[0];\n        const { error: error } = sequenceResults;\n        if (error !== undefined) {\n            flagNoRender = true;\n            return;\n        }\n        flagNoRender = false;\n        if (optionsBag.useGeography) {\n            districtMapViz.update(simData.geoResults);\n            self.clear();\n            self.render();\n        }\n    };\n    self.render = function() {\n        if (flagNoRender) return;\n        const optionsBag = electionOptionsMan.getOptions();\n        if (optionsBag.useGeography) districtMapViz.render();\n    };\n    self.clear = ()=>{\n        screen.clear();\n    };\n    self.draw = ()=>{\n        self.clear();\n        self.render();\n    };\n}\n\n\n/** @module */ \n\n/** @module */ /** @module */ \n\n\nfunction $cff5521001a27159$export$2e2bcd8739ae039(element, hide) {\n    const isVisible = (elem)=>!!elem && !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n    const outsideClickListener = (event)=>{\n        if (!element.contains(event.target) && isVisible(element)) {\n            // or use: event.target.closest(selector) === null\n            const success = hide();\n            // eslint-disable-next-line no-use-before-define\n            if (success) removeClickListener();\n        }\n    };\n    const removeClickListener = ()=>{\n        document.removeEventListener(\"mousedown\", outsideClickListener);\n        document.removeEventListener(\"touchstart\", outsideClickListener);\n    };\n    document.addEventListener(\"mousedown\", outsideClickListener);\n    document.addEventListener(\"touchstart\", outsideClickListener);\n}\n\n\nfunction $8aec77aa9c33e1fa$export$2e2bcd8739ae039(graphic, screen) {\n    const box = document.createElement(\"div\");\n    box.className = \"tooltipBox\";\n    box.style.position = \"absolute\";\n    function update() {\n        const { x: x, y: y } = graphic;\n        if (x > screen.width * 0.5) {\n            box.style.right = `${screen.width - x}px`;\n            box.style.left = \"unset\";\n        } else {\n            box.style.left = `${x}px`;\n            box.style.right = \"unset\";\n        }\n        if (y > screen.height * 0.5) {\n            box.style.bottom = `${screen.height - y}px`;\n            box.style.top = \"unset\";\n        } else {\n            box.style.top = `${y}px`;\n            box.style.bottom = \"unset\";\n        }\n    }\n    update();\n    // box.style.width = '10px'\n    // box.style.height = '10px'\n    box.style.border = screen.common.darkMode ? \"1px solid white\" : \"1px solid black\";\n    box.style.padding = \"8px\";\n    box.style.background = screen.common.darkMode ? \"#222\" : \"white\";\n    let pinned = false;\n    /**\r\n     * Set pinned to true or false, to keep the box persistent.\r\n     * @param {Boolean} b\r\n     */ const setPin = (b)=>{\n        pinned = b;\n    };\n    const hidebox = ()=>{\n        // box.style.display = 'none'\n        if (!pinned) {\n            box.remove();\n            return true;\n        }\n        return false;\n    };\n    (0, $cff5521001a27159$export$2e2bcd8739ae039)(box, hidebox);\n    return {\n        box: box,\n        update: update,\n        setPin: setPin\n    };\n}\n\n\nfunction $c3b719420f02de85$export$2e2bcd8739ae039(graphic, entity, screen, viewSettings, simOptions, electionOptionsMan) {\n    // make a html box appear\n    const tbox = (0, $8aec77aa9c33e1fa$export$2e2bcd8739ae039)(graphic, screen);\n    const { box: box } = tbox;\n    box.innerText = \"- Properties -\";\n    // Items //\n    const items = {};\n    items.exists = new $c3b719420f02de85$var$Item(\"checkbox\", \"Exists\", \"Exists: \", (val)=>entity.doSetCommand.exists(val ? 1 : 0), entity.exists === 1);\n    box.appendChild(items.exists.div);\n    const { dimensions: dimensions } = simOptions;\n    if (dimensions === 1) {\n        if (entity.shape1.w) {\n            items.w1 = new $c3b719420f02de85$var$Item(\"range\", \"Width\", \"Width: \", (val)=>entity.doSetCommand.shape1w(val), entity.shape1.w);\n            box.appendChild(items.w1.div);\n        }\n        if (entity.shape1.densityProfile) {\n            items.densityProfile1 = new $c3b719420f02de85$var$Item(\"select\", \"Density Profile\", \"Density Profile: \", (val)=>entity.doSetCommand.shape1densityProfile(val), entity.shape1.densityProfile, {\n                choices: [\n                    \"step\",\n                    \"gaussian\"\n                ]\n            });\n            box.appendChild(items.densityProfile1.div);\n        }\n    } else {\n        if (entity.shape2.w) {\n            items.w2 = new $c3b719420f02de85$var$Item(\"range\", \"Width\", \"Width: \", (val)=>entity.doSetCommand.shape2w(val), entity.shape2.w);\n            box.appendChild(items.w2.div);\n        }\n        if (entity.shape2.densityProfile) {\n            items.densityProfile2 = new $c3b719420f02de85$var$Item(\"select\", \"Density Profile\", \"Density Profile: \", (val)=>entity.doSetCommand.shape2densityProfile(val), entity.shape2.densityProfile, {\n                choices: [\n                    \"step\",\n                    \"gaussian\"\n                ]\n            });\n            box.appendChild(items.densityProfile2.div);\n        }\n    }\n    if (entity.doSetCommand.color !== undefined) {\n        items.color = new $c3b719420f02de85$var$Item(\"color\", \"Color\", \"Color: \", (val)=>entity.doSetCommand.color(val), entity.color);\n        box.appendChild(items.color.div);\n    }\n    if (entity.doSetCommand.party !== undefined) {\n        items.party = new $c3b719420f02de85$var$Item(\"select\", \"Party\", \"Party: \", (val)=>entity.doSetCommand.party([\n                Number(val)\n            ]), entity.party, {\n            choices: [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9\n            ]\n        });\n        box.appendChild(items.party.div);\n    }\n    if (entity.doSetCommand.strategy !== undefined) {\n        // for each phase, we need to set properties of the strategy\n        const { sequenceName: sequenceName, sequences: sequences } = electionOptionsMan.getOptions().sequenceOptions;\n        const { phases: phases } = sequences[sequenceName];\n        items.strategyByPhase = {};\n        Object.keys(phases).forEach((phaseName)=>{\n            const phase = phases[phaseName];\n            const { voteCasterName: voteCasterName } = phase;\n            const itemsForPhase = {};\n            items.strategyByPhase[phaseName] = itemsForPhase;\n            const strategyList = (0, $4709d2c6afa23527$export$dbbdbaaddf7acf8a)(entity.strategyRules, voteCasterName, phaseName);\n            const onlyOneStrategy = strategyList.length === 1;\n            if (onlyOneStrategy) return;\n            itemsForPhase.actionPDF1 = new $c3b719420f02de85$var$Item(\"range\", \"Action PDF 1\", \"\", (val)=>{\n                const a0 = Number(val);\n                const a1 = 1 - a0;\n                itemsForPhase.actionPDF1.input.value = a0;\n                itemsForPhase.actionPDF2.input.value = a1;\n                const actionPDF = [\n                    a0,\n                    a1\n                ];\n                const strategyRules = (0, $912c109451e3e417$export$88483c833f74f910)(entity.strategyRules);\n                const strategy = (0, $4709d2c6afa23527$export$dbbdbaaddf7acf8a)(strategyRules, voteCasterName);\n                for(let i = 0; i < actionPDF.length; i += 1)strategy[i].actionWeight = actionPDF[i];\n                entity.doSetCommand.actionWeight(strategyRules);\n            }, strategyList[0].actionWeight, {\n                min: 0,\n                max: 1,\n                step: 0.01\n            });\n            itemsForPhase.actionPDF2 = new $c3b719420f02de85$var$Item(\"range\", \"Action PDF 2\", \"\", (val)=>{\n                const a1 = Number(val);\n                const a0 = 1 - a1;\n                itemsForPhase.actionPDF1.input.value = a0;\n                itemsForPhase.actionPDF2.input.value = a1;\n                const actionPDF = [\n                    a0,\n                    a1\n                ];\n                const strategyRules = (0, $912c109451e3e417$export$88483c833f74f910)(entity.strategyRules);\n                const strategy = (0, $4709d2c6afa23527$export$dbbdbaaddf7acf8a)(strategyRules, voteCasterName);\n                for(let i = 0; i < actionPDF.length; i += 1)strategy[i].actionWeight = actionPDF[i];\n                entity.doSetCommand.actionWeight(strategyRules);\n            }, strategyList[1].actionWeight, {\n                min: 0,\n                max: 1,\n                step: 0.01\n            });\n            const choices = voteCasterName === \"score\" ? [\n                \"normalize\",\n                \"normalizeOverFrontrunners\"\n            ] : [\n                \"closest\",\n                \"lesserEvil\"\n            ];\n            itemsForPhase.actionName1 = new $c3b719420f02de85$var$Item(\"select\", \"Action 1\", `${phaseName}: Strategy 1: `, (val)=>{\n                const strategyRules = (0, $912c109451e3e417$export$88483c833f74f910)(entity.strategyRules);\n                const strategy = (0, $4709d2c6afa23527$export$dbbdbaaddf7acf8a)(strategyRules, voteCasterName);\n                strategy[0].actionName = val;\n                entity.doSetCommand.strategy(strategyRules);\n            }, strategyList[0].actionName, {\n                choices: choices\n            });\n            itemsForPhase.actionName2 = new $c3b719420f02de85$var$Item(\"select\", \"Action 2\", `${phaseName}: Strategy 2: `, (val)=>{\n                const strategyRules = (0, $912c109451e3e417$export$88483c833f74f910)(entity.strategyRules);\n                const strategy = (0, $4709d2c6afa23527$export$dbbdbaaddf7acf8a)(strategyRules, voteCasterName);\n                strategy[1].actionName = val;\n                entity.doSetCommand.strategy(strategyRules);\n            }, strategyList[1].actionName, {\n                choices: choices\n            });\n            itemsForPhase.actionOptionThreshold = new $c3b719420f02de85$var$Item(\"range\", \"Threshold\", `${phaseName}: Threshold: `, (val)=>{\n                const strategyRules = (0, $912c109451e3e417$export$88483c833f74f910)(entity.strategyRules);\n                const strategy = (0, $4709d2c6afa23527$export$dbbdbaaddf7acf8a)(strategyRules, voteCasterName);\n                strategy[0].actionOptions.threshold.mean = Number(val);\n                strategy[1].actionOptions.threshold.mean = Number(val);\n                entity.doSetCommand.actionOptionThreshold(strategyRules);\n            }, strategyList[0].actionOptions.threshold.mean, {\n                min: 0,\n                max: 1,\n                step: 0.01\n            });\n            box.appendChild(itemsForPhase.actionName1.div);\n            box.appendChild(itemsForPhase.actionPDF1.div);\n            box.appendChild(itemsForPhase.actionName2.div);\n            box.appendChild(itemsForPhase.actionPDF2.div);\n            box.appendChild(itemsForPhase.actionOptionThreshold.div);\n        });\n    }\n    items.showGhosts = new $c3b719420f02de85$var$Item(\"checkbox\", \"Show Ghosts\", \"Show Ghosts: \", (val)=>viewSettings.setShowNonExistingEntities(val), viewSettings.showGhosts);\n    box.appendChild(items.showGhosts.div);\n    // Append //\n    screen.tooltips.appendChild(box);\n}\nfunction $c3b719420f02de85$var$Item(type, name, text, onChange, defaultValue, options) {\n    const self = this;\n    self.div = document.createElement(\"div\");\n    if (type === \"select\") {\n        self.input = document.createElement(\"select\");\n        const { choices: choices } = options;\n        for(let i = 0; i < choices.length; i++){\n            const option = document.createElement(\"option\");\n            option.value = choices[i];\n            option.innerText = choices[i];\n            self.input.appendChild(option);\n        }\n        self.input.value = defaultValue;\n        self.input.addEventListener(\"input\", ()=>onChange(self.input.value));\n    } else {\n        self.input = document.createElement(\"input\");\n        self.input.type = type;\n        self.input.id = name;\n        self.input.name = name;\n        if (type === \"checkbox\") {\n            if (defaultValue) self.input.checked = true;\n            self.input.addEventListener(\"change\", ()=>onChange(self.input.checked));\n        } else if (type === \"range\") {\n            self.input.min = 1;\n            self.input.max = 300;\n            self.input.step = 1;\n            if (options !== undefined) {\n                if (options.min !== undefined) self.input.min = options.min;\n                if (options.max !== undefined) self.input.max = options.max;\n                if (options.step !== undefined) self.input.step = options.step;\n            }\n            self.input.value = defaultValue;\n            self.input.addEventListener(\"input\", ()=>onChange(self.input.value));\n        } else if (type === \"color\") {\n            self.input.value = defaultValue;\n            self.input.addEventListener(\"input\", ()=>onChange(self.input.value));\n        }\n    }\n    self.label = document.createElement(\"label\");\n    self.label.for = name;\n    self.label.innerText = text;\n    self.label.style[\"margin-right\"] = \"4px\";\n    self.div.appendChild(self.label);\n    self.div.appendChild(self.input);\n}\n\n\nfunction $f18fab46b9b6b951$export$2e2bcd8739ae039(entity, simOptions) {\n    const self = this;\n    // View sets model\n    self.setXYView = (p)=>{\n        const { dimensions: dimensions } = simOptions;\n        if (dimensions === 1) entity.doSetCommand.shape1x(p.x);\n        else entity.doSetCommand.shape2p(p);\n        self.updateViewXY();\n    };\n    /** Model sets view position when entering a view mode */ self.updateViewXY = ()=>{\n        const { dimensions: dimensions } = simOptions;\n        if (dimensions === 1) {\n            self.x = entity.shape1.x;\n            self.y = 250;\n        } else {\n            self.x = entity.shape2.x;\n            self.y = entity.shape2.y;\n        }\n    };\n}\n\n\n/** @module */ \nvar $79Zf3 = parcelRequire(\"79Zf3\");\nfunction $b0ac9ae255f3d74d$export$2e2bcd8739ae039(parent, entity, w, h, screen) {\n    const self = this;\n    self.w = w // display width, because we're going to make animations with it\n    ;\n    self.h = h;\n    self.trueW = w // true width, because we want to return to this width after animating.\n    ;\n    self.trueH = h;\n    self.angleFraction = 0;\n    self.pickUp = function() {\n        self.tweenSq = new (0, $79Zf3.Tween)(self, screen.tweenGroup);\n        self.tweenSq.to({\n            w: self.trueW + 10,\n            h: self.trueH + 10\n        }, 100);\n        self.tweenSq.start();\n    };\n    self.drop = function() {\n        self.tweenSq = new (0, $79Zf3.Tween)(self, screen.tweenGroup);\n        self.tweenSq.to({\n            w: self.trueW,\n            h: self.trueH\n        }, 100);\n        self.tweenSq.start();\n    };\n    self.win = function() {\n        self.tweenSq = new (0, $79Zf3.Tween)(self, screen.tweenGroup);\n        self.tweenSq.to({\n            angleFraction: 0.25\n        }, 300);\n        self.tweenSq.start();\n    };\n    self.lose = function() {\n        self.tweenSq = new (0, $79Zf3.Tween)(self, screen.tweenGroup);\n        self.tweenSq.to({\n            angleFraction: -0.25\n        }, 300);\n        self.tweenSq.start();\n    };\n    // Graphics component\n    self.render = function() {\n        const { fctx: fctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        fctx.save();\n        if (self.tweenSq) self.tweenSq.update();\n        if (entity.exists === 0) fctx.globalAlpha = 0.2;\n        if (self.angleFraction !== 0) {\n            fctx.translate(parent.x, parent.y);\n            fctx.rotate(self.angleFraction * Math.PI * 2);\n            fctx.translate(-parent.x, -parent.y);\n        }\n        fctx.beginPath();\n        fctx.fillStyle = entity.color;\n        if (darkMode && entity.darkModeColor) fctx.fillStyle = entity.darkModeColor;\n        if (darkMode) fctx.strokeStyle = \"white\";\n        fctx.rect(parent.x - 0.5 * self.w - 0.5, parent.y - 0.5 * self.h - 0.5, self.w + 1, self.h + 1);\n        fctx.fill();\n        fctx.stroke();\n        fctx.restore();\n    };\n}\n\n\n\nfunction $e85b1b41a733362a$export$2e2bcd8739ae039(candidate, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\n    const self = this;\n    const square = new (0, $b0ac9ae255f3d74d$export$2e2bcd8739ae039)(self, candidate, wHandle, hHandle, screen);\n    self.square = square;\n    (0, $f18fab46b9b6b951$export$2e2bcd8739ae039).call(self, candidate, simOptions);\n    self.fraction = 0;\n    self.setFraction = function(fraction) {\n        self.fraction = fraction;\n    };\n    self.wins = 0;\n    self.setWins = (wins)=>{\n        // animate the win or loss.\n        if (self.wins !== wins) {\n            if (wins > self.wins) square.win();\n            else if (self.wins > wins) square.lose();\n        }\n        self.wins = wins;\n    };\n    self.renderForeground = function() {\n        square.render();\n        const { exists: exists, party: party } = candidate;\n        const { x: x, y: y } = self;\n        const { fctx: fctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const color = darkMode ? \"#fff\" : \"#222\";\n        // show minimal graphics when rendering as a ghost.\n        if (exists === 0) return;\n        const y1 = y - square.h * 0.5 - 2;\n        (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)((0, $2589a02a34d546fb$export$120cfc2a1d7ff906)(self.fraction), x, y1, 20, 2, color, 1, fctx);\n        if (self.wins !== undefined) {\n            const y2 = y + square.h * 0.5 + 20 + 2;\n            (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)(self.wins, x, y2, 20, 2, color, 1, fctx);\n        }\n        const optionsBag = electionOptionsMan.getOptions();\n        const resultsPhaseOptions = (0, $31295da368957eb6$export$2e2bcd8739ae039)(optionsBag, simOptions);\n        const { socialChoiceMethod: socialChoiceMethod } = resultsPhaseOptions;\n        if (socialChoiceMethod === \"olprA\") {\n            const x3 = x + square.w * 0.1;\n            const y3 = y + 8;\n            (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)(`p${party}`, x3, y3, 13, 2, color, 1, fctx);\n        }\n    };\n    // Click Handler\n    self.click = ()=>{\n        (0, $c3b719420f02de85$export$2e2bcd8739ae039)(self, candidate, screen, viewSettings, simOptions);\n    };\n}\n\n\nfunction $52e270625a69677a$export$2e2bcd8739ae039(candidate, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\n    const self = this;\n    self.candidate = candidate;\n    self.graphic = new (0, $e85b1b41a733362a$export$2e2bcd8739ae039)(candidate, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan);\n}\n\n\nfunction $4c0e458dd52263e5$export$2e2bcd8739ae039(viewSettings, candidateList, screen, simOptions, electionOptionsMan) {\n    const self = this;\n    const canViews = [];\n    // Publish to DraggableManager //\n    const observers = [];\n    self.attachNewG = (o)=>{\n        observers.push(o);\n    };\n    const updateObservers = (g)=>{\n        observers.forEach((o)=>o.updateNewG(g));\n    };\n    // Subscribe to Sim //\n    candidateList.attachNewE(self);\n    self.updateNewE = (candidate)=>{\n        self.newCandidate(candidate);\n    };\n    // Data Setters and Getters //\n    self.newCandidate = function(candidate) {\n        const canView = new (0, $52e270625a69677a$export$2e2bcd8739ae039)(candidate, screen, 21, 21, viewSettings, simOptions, electionOptionsMan);\n        canViews.push(canView);\n        updateObservers(canView);\n    };\n    self.getCanViews = ()=>canViews.filter((canView)=>canView.candidate.exists);\n    self.getCandidates = ()=>{\n        const canViewsEx = self.getCanViews();\n        return canViewsEx.map((canView)=>canView.candidate);\n    };\n    self.getCandidatesAll = ()=>canViews.map((canView)=>canView.candidate);\n    // Update //\n    self.setCandidateFractions = (fractions)=>{\n        const canViewsEx = self.getCanViews();\n        canViewsEx.forEach((canView, index)=>{\n            const fraction = fractions[index];\n            canView.graphic.setFraction(fraction);\n        });\n    };\n    self.setCandidateWins = (winsByCandidate)=>{\n        const canViewsEx = self.getCanViews();\n        canViewsEx.forEach((canView, index)=>{\n            const win = winsByCandidate[index];\n            canView.graphic.setWins(win);\n        });\n    };\n    self.unsetCandidateWins = ()=>{\n        const nk = canViews.length;\n        const fillUndefined = Array(nk).fill(undefined);\n        self.setCandidateWins(fillUndefined);\n    };\n    self.updateViewXY = ()=>{\n        canViews.forEach((canView)=>canView.graphic.updateViewXY());\n    };\n    // Render //\n    self.renderForeground = ()=>{\n        if (viewSettings.showGhosts) self.renderForegroundAll();\n        else self.renderForegroundExisting();\n    };\n    self.renderForegroundExisting = ()=>{\n        const canViewsEx = self.getCanViews();\n        canViewsEx.forEach((canView)=>canView.graphic.renderForeground());\n    };\n    self.renderForegroundAll = ()=>{\n        canViews.forEach((canView)=>canView.graphic.renderForeground());\n    };\n}\n\n\n/** @module */ /** @module */ \n/** @module */ \nvar $79Zf3 = parcelRequire(\"79Zf3\");\nfunction $b62842d2558eb2a5$export$2e2bcd8739ae039(parent, entity, r, screen) {\n    const self = this;\n    self.r = r;\n    self.trueR = r;\n    self.pickUp = function() {\n        self.tween = new (0, $79Zf3.Tween)(self, screen.tweenGroup);\n        self.tween.to({\n            r: self.trueR * 2\n        }, 100);\n        self.tween.start();\n    };\n    self.drop = function() {\n        self.tween = new (0, $79Zf3.Tween)(self, screen.tweenGroup);\n        self.tween.to({\n            r: self.trueR\n        }, 100);\n        self.tween.start();\n    };\n    // Graphics component\n    self.render = function() {\n        const { fctx: fctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const { color: color } = entity;\n        fctx.save();\n        if (self.tween) self.tween.update();\n        // handle\n        if (entity.exists === 0) fctx.globalAlpha = 0.2;\n        fctx.beginPath();\n        fctx.fillStyle = color;\n        if (darkMode) fctx.strokeStyle = \"white\";\n        fctx.arc(parent.x, parent.y, self.r, 0, 2 * Math.PI);\n        fctx.fill();\n        fctx.stroke();\n        fctx.restore();\n    };\n}\n\n\n\nfunction $da240c675ca5a64e$export$2e2bcd8739ae039(voterShape, screen, viewSettings, simOptions, electionOptionsMan) {\n    const self = this;\n    const circle = new (0, $b62842d2558eb2a5$export$2e2bcd8739ae039)(self, voterShape, 13, screen);\n    self.circle = circle;\n    (0, $f18fab46b9b6b951$export$2e2bcd8739ae039).call(self, voterShape, simOptions);\n    self.renderForeground = ()=>{\n        // handle\n        circle.render();\n    };\n    self.setRenderer = (rendererMaker)=>{\n        self.renderer = rendererMaker(voterShape);\n    };\n    // Click Handler\n    self.click = ()=>{\n        (0, $c3b719420f02de85$export$2e2bcd8739ae039)(self, voterShape, screen, viewSettings, simOptions, electionOptionsMan);\n    };\n}\n\n\nfunction $edc934b1d1c9c6e6$export$2e2bcd8739ae039(voterShape, screen, viewSettings, simOptions, electionOptionsMan) {\n    const self = this;\n    self.voterShape = voterShape;\n    self.graphic = new (0, $da240c675ca5a64e$export$2e2bcd8739ae039)(voterShape, screen, viewSettings, simOptions, electionOptionsMan);\n}\n\n\nfunction $fffb6c00e5df0852$export$2e2bcd8739ae039(viewSettings, voterShapeList, screen, simOptions, electionOptionsMan) {\n    const self = this;\n    const list = [];\n    self.list = list;\n    // Publish to DraggableManager //\n    const observers = [];\n    self.attachNewG = (o)=>{\n        observers.push(o);\n    };\n    const updateObservers = (g)=>{\n        observers.forEach((o)=>o.updateNewG(g));\n    };\n    // Subscribe to Sim //\n    voterShapeList.attachNewE(self);\n    self.updateNewE = (voterShape)=>{\n        self.newVoterShape(voterShape);\n    };\n    // Setters and Getters //\n    self.newVoterShape = function(voterShape) {\n        const voterView = new (0, $edc934b1d1c9c6e6$export$2e2bcd8739ae039)(voterShape, screen, viewSettings, simOptions, electionOptionsMan);\n        list.push(voterView);\n        updateObservers(voterView);\n    };\n    self.getVoterShapes = ()=>list.filter((v)=>v.voterShape.exists).map((v)=>v.voterShape);\n    self.getVoterViews = ()=>list.filter((v)=>v.voterShape.exists);\n    // Update //\n    self.updateViewXY = ()=>{\n        list.forEach((v)=>v.graphic.updateViewXY());\n    };\n    // Render //\n    self.renderForeground = ()=>{\n        if (viewSettings.showGhosts) self.renderForegroundAll();\n        else self.renderForegroundExisting();\n    };\n    self.renderForegroundExisting = ()=>{\n        list.forEach((v)=>{\n            if (v.voterShape.exists) v.graphic.renderForeground();\n        });\n    };\n    self.renderForegroundAll = ()=>{\n        list.forEach((v)=>{\n            v.graphic.renderForeground();\n        });\n    };\n}\n\n\n\n\n\n\n\n\nfunction $7c31fa2c205e6eb7$export$2e2bcd8739ae039(box) {\n    const self = this;\n    const voteText = document.createElement(\"div\");\n    box.append(voteText);\n    self.update = (vote, colorSet)=>{\n        // box.style.backgroundColor = color\n        // const makeSpan = (c) => `<span style=\"background-color:${c};\">&#9638;</span>`\n        const makeSpan = (c)=>`<span style=\"color:${c};\">&#9632;</span>` // crosshatch: &#9638; square: &#9632; large black square: &#11035;\n        ;\n        if (vote.ranking) voteText.innerHTML = vote.ranking.map((c, i)=>makeSpan(colorSet[i]) + c).join(\"<br />\");\n        else {\n            const tallyName = (0, $a11003c4c3220fc7$export$2e2bcd8739ae039)(vote);\n            const tallyFractions = vote[tallyName];\n            voteText.innerHTML = tallyFractions.map((0, $2589a02a34d546fb$export$120cfc2a1d7ff906)).map((c, i)=>makeSpan(colorSet[i]) + c).join(\"<br />\");\n        }\n    };\n}\n\n\nfunction $f15ffaad0f5ccfd2$export$2e2bcd8739ae039(testVoterGraphic, testVoter, screen) {\n    // make a html box appear\n    const tbox = (0, $8aec77aa9c33e1fa$export$2e2bcd8739ae039)(testVoterGraphic, screen);\n    const { box: box, setPin: setPin } = tbox;\n    box.innerText = \"Vote\";\n    box.style[\"min-width\"] = \"100px\";\n    const button = document.createElement(\"button\");\n    // button.className = 'button2'\n    button.style[\"min-width\"] = \"35px\";\n    button.style.float = \"right\";\n    button.style.clear = \"right\";\n    button.onclick = ()=>{\n        togglePin();\n    };\n    let pinned = true;\n    function togglePin() {\n        pinned = !pinned;\n        setPin(pinned);\n        // button.innerText = (pinned) ? 'Pinned' : 'Pin'\n        button.innerHTML = pinned ? \"&#x1F6AB;\" : \"&#x1F4CC;\";\n    }\n    togglePin();\n    const button2 = document.createElement(\"button\");\n    // button2.className = 'button2'\n    button2.style.float = \"right\";\n    button2.style[\"min-width\"] = \"35px\";\n    button2.style[\"font-size\"] = \"10px\";\n    button2.innerHTML = \"&#x2573;\";\n    button2.onclick = ()=>{\n        box.remove();\n        testVoter.doSetCommand.exists(0);\n    };\n    box.appendChild(button2);\n    box.appendChild(button);\n    const tooltipVoteText = new (0, $7c31fa2c205e6eb7$export$2e2bcd8739ae039)(box);\n    // box.style['pointer-events'] = 'none'\n    screen.tooltips.appendChild(box);\n    function update(vote, color, colorSet) {\n        tbox.update();\n        tooltipVoteText.update(vote, color, colorSet);\n    }\n    return {\n        box: box,\n        update: update\n    };\n}\n\n\n\n\n\nfunction $d5747dc43de0bea5$export$2e2bcd8739ae039(testVoter, screen, simOptions, viewEntitiesOne, viewSettings) {\n    const self = this;\n    // Start displaying testvoter\n    self.start = (p)=>{\n        testVoter.doSetCommand.exists(1);\n        self.setXYView(p);\n        (0, $cff5521001a27159$export$2e2bcd8739ae039)(screen.wrap, removeTestPoint);\n    };\n    function removeTestPoint() {\n        testVoter.doSetCommand.exists(0);\n    }\n    // Dragging\n    const circle = new (0, $b62842d2558eb2a5$export$2e2bcd8739ae039)(self, testVoter, 9, screen);\n    self.circle = circle;\n    (0, $f18fab46b9b6b951$export$2e2bcd8739ae039).call(self, testVoter, simOptions);\n    // Rendering\n    let tooltip = {};\n    self.update = (vote, candidateList)=>{\n        // who would this test point vote for?\n        if (vote === undefined) return null;\n        const canList = candidateList.getEntities();\n        const colorSet = canList.map((can)=>can.color);\n        const colorSetRGBA = canList.map((can)=>can.colorRGBA);\n        self.colorSet = colorSet;\n        const tallyName = (0, $a11003c4c3220fc7$export$2e2bcd8739ae039)(vote);\n        const tallyFractions = vote[tallyName];\n        const color = (0, $421104df84ecbab8$export$e00a895b09ec9a57)((0, $421104df84ecbab8$export$2e2bcd8739ae039)(tallyFractions, colorSetRGBA));\n        testVoter.doSetCommand.color(color);\n        if (tooltip.box) tooltip.update(vote, self.colorSet);\n        return vote;\n    };\n    self.click = ()=>{\n        const vote = viewEntitiesOne.testVoteView();\n        if (vote === null) return;\n        if (tooltip.box) tooltip.box.remove();\n        tooltip = (0, $f15ffaad0f5ccfd2$export$2e2bcd8739ae039)(self, testVoter, screen);\n        tooltip.update(vote, self.colorSet);\n    };\n    self.renderForeground = ()=>{\n        // handle\n        if (testVoter.exists || viewSettings.showGhosts) circle.render();\n    };\n}\n\n\nfunction $daad1e0f0c649531$export$2e2bcd8739ae039(viewEntitiesOne) {\n    const self = this;\n    // State //\n    self.shape1 = {};\n    self.shape2 = {};\n    self.setAction = {\n        exists (e) {\n            self.exists = e;\n        },\n        shape2p (p) {\n            self.shape2.x = p.x;\n            self.shape2.y = p.y;\n            viewEntitiesOne.testVoteView();\n        // todo: maybe add a change\n        },\n        shape1x (x) {\n            self.shape1.x = x;\n            viewEntitiesOne.testVoteView();\n        },\n        color (newColor) {\n            self.color = newColor;\n        }\n    };\n    // Make Commands //\n    self.doSetCommand = self.setAction;\n    // Initialize\n    self.doSetCommand.shape1x(0);\n    self.doSetCommand.shape2p({\n        x: 0,\n        y: 0\n    });\n    self.doSetCommand.color(\"#999\");\n}\n\n\nfunction $01899a42ff19bbc4$export$2e2bcd8739ae039(screen, simOptions, viewEntitiesOne, viewSettings) {\n    const self = this;\n    self.testVoter = new (0, $daad1e0f0c649531$export$2e2bcd8739ae039)(viewEntitiesOne);\n    self.graphic = new (0, $d5747dc43de0bea5$export$2e2bcd8739ae039)(self.testVoter, screen, simOptions, viewEntitiesOne, viewSettings);\n    viewEntitiesOne.dragm.add(self);\n}\n\n\n\n\n\n\n/** @module */ \nfunction $070d1ef646bbba0d$export$2e2bcd8739ae039(electionResults) {\n    const { socialChoiceResults: socialChoiceResults, votes: votes } = electionResults;\n    const { allocation: allocation } = socialChoiceResults;\n    if (allocation !== undefined) return allocation;\n    // else\n    const tallyFractions = (0, $96e1eb8626c55622$export$2e2bcd8739ae039)(votes);\n    const { iWinner: iWinner } = socialChoiceResults;\n    const nk = tallyFractions.length;\n    const wins = Array(nk).fill(0);\n    wins[iWinner] = 1;\n    return wins;\n}\n\n\nfunction $523b4d65af495ac2$export$2e2bcd8739ae039(candidateViewList, simData, simOptions, optionsBag) {\n    const { geoResults: geoResults } = simData;\n    if (geoResults.error) return;\n    const phaseResults = $523b4d65af495ac2$var$phaseResultsDistrictPatch(geoResults, simOptions, optionsBag);\n    if (phaseResults.error) return;\n    const numCans = geoResults.geometry.canPoints.length;\n    const tf = Array(numCans);\n    const al = Array(numCans);\n    const allocation = (0, $070d1ef646bbba0d$export$2e2bcd8739ae039)(phaseResults);\n    const { votes: votes } = phaseResults;\n    const { socialChoiceMethod: socialChoiceMethod } = phaseResults.electionOptions;\n    const tallyFractions = (0, $96e1eb8626c55622$export$2e2bcd8739ae039)(votes, socialChoiceMethod);\n    // map results to original candidate indices\n    const canLabels = $523b4d65af495ac2$var$canLabelsDistrictPatch(phaseResults, optionsBag);\n    for(let i = 0; i < canLabels.length; i++){\n        const index = canLabels[i];\n        tf[index] = tallyFractions[i];\n        al[index] = allocation[i];\n    }\n    candidateViewList.setCandidateFractions(tf);\n    candidateViewList.setCandidateWins(al);\n}\nfunction $523b4d65af495ac2$var$phaseResultsDistrictPatch(geoResults, simOptions, optionsBag) {\n    if (optionsBag.useGeography === true) return geoResults;\n    return (0, $2d400110e848f7b3$export$2e2bcd8739ae039)(geoResults.scResultsByDistrict[0], simOptions);\n}\nfunction $523b4d65af495ac2$var$canLabelsDistrictPatch(phaseResults, optionsBag) {\n    if (optionsBag.useGeography === true) {\n        const numCans = phaseResults.geometry.canPoints.length;\n        return (0, $c9cda941ee132d98$export$d02631cccf789723)(numCans);\n    }\n    return phaseResults.geometry.canLabels;\n}\n\n\nfunction $100052672cd0bb56$export$2e2bcd8739ae039(entities, screen, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings, viewChanges) {\n    const self = this;\n    viewMode.viewModes.one.attach(self);\n    (0, $38e222933fe6ab29$export$2e2bcd8739ae039).call(self, screen, changes, viewSettings);\n    const { candidateList: candidateList, voterShapeList: voterShapeList } = entities;\n    // Entities //\n    const candidateViewList = new (0, $4c0e458dd52263e5$export$2e2bcd8739ae039)(viewSettings, candidateList, screen, simOptions, electionOptionsMan);\n    const voterViewList = new (0, $fffb6c00e5df0852$export$2e2bcd8739ae039)(viewSettings, voterShapeList, screen, simOptions, electionOptionsMan);\n    candidateViewList.attachNewG(self.dragm);\n    voterViewList.attachNewG(self.dragm);\n    self.testVoterView = new (0, $01899a42ff19bbc4$export$2e2bcd8739ae039)(screen, simOptions, self, viewSettings);\n    // Main State Machine Functions //\n    self.exit = ()=>{\n        candidateViewList.unsetCandidateWins();\n        self.testVoterView.testVoter.doSetCommand.exists(0);\n    };\n    self.update = (simData)=>{\n        if (changes.checkNone()) return;\n        if (changes.check([\n            \"dimensions\"\n        ])) {\n            self.exit();\n            self.enter();\n        }\n        if (changes.check([\n            \"draggables\",\n            \"dimensions\",\n            \"mode\"\n        ])) {\n            voterViewList.updateViewXY();\n            candidateViewList.updateViewXY();\n            self.testVoterView.graphic.updateViewXY();\n        }\n        const optionsBag = electionOptionsMan.getOptions();\n        (0, $523b4d65af495ac2$export$2e2bcd8739ae039)(candidateViewList, simData, simOptions, optionsBag);\n        self.testVoteView();\n        self.clearForeground();\n        self.renderForeground();\n    };\n    // Test Point\n    self.clickEmpty = (p)=>{\n        self.testVoterView.graphic.start(p);\n    };\n    self.testVoteView = ()=>{\n        const optionsBag = electionOptionsMan.getOptions();\n        const resultsPhaseOptions = (0, $31295da368957eb6$export$2e2bcd8739ae039)(optionsBag, simOptions);\n        const { voteCasterName: voteCasterName } = resultsPhaseOptions;\n        // todo: check this to see if it is correct. I'm not sure if a closed primary would work well here.\n        const testGeometry = (0, $e52cf6111afdcaa2$export$2e2bcd8739ae039)(self.testVoterView.testVoter, candidateList, simOptions);\n        const { canPoints: canPoints, voterPoint: voterPoint, dimensions: dimensions } = testGeometry;\n        const verbosity = 3;\n        const vote = (0, $5378ef2dbac38c7f$export$2e2bcd8739ae039)[voteCasterName].castPoint(canPoints, voterPoint, dimensions, verbosity);\n        self.testVoterView.graphic.update(vote, candidateList);\n        viewChanges.add([\n            \"testVote\"\n        ]);\n        return vote;\n    };\n    self.renderForeground = ()=>{\n        voterViewList.renderForeground();\n        candidateViewList.renderForeground();\n        self.testVoterView.graphic.renderForeground();\n    };\n    self.clearForeground = ()=>{\n        screen.clearForeground();\n    };\n}\n\n\n/** @module */ /** @module */ /** @module */ \n\n\n\n\nfunction $2441a92fca464983$export$2e2bcd8739ae039(candidateDn, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\n    const self = this;\n    const square = new (0, $b0ac9ae255f3d74d$export$2e2bcd8739ae039)(self, candidateDn, wHandle, hHandle, screen);\n    self.square = square;\n    (0, $f18fab46b9b6b951$export$2e2bcd8739ae039).call(self, candidateDn, simOptions);\n    self.setWinFraction = (winFraction)=>{\n        // animate the win or loss.\n        if (self.winFraction !== winFraction) {\n            if (winFraction > self.winFraction) square.win();\n            else if (self.winFraction > winFraction) square.lose();\n        }\n        self.winFraction = winFraction;\n    };\n    self.renderForeground = ()=>{\n        square.render();\n        const { party: party } = candidateDn;\n        const { x: x, y: y } = self;\n        const { fctx: fctx } = screen;\n        const { darkMode: darkMode } = screen.common;\n        const color = darkMode ? \"#fff\" : \"#222\";\n        const optionsBag = electionOptionsMan.getOptions();\n        const resultsPhaseOptions = (0, $31295da368957eb6$export$2e2bcd8739ae039)(optionsBag, simOptions);\n        const { socialChoiceMethod: socialChoiceMethod } = resultsPhaseOptions;\n        if (socialChoiceMethod === \"olprA\") {\n            const x3 = x + square.w * 0.1;\n            const y3 = y + 8;\n            (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)(`p${party}`, x3, y3, 13, 2, color, 1, fctx);\n        }\n        if (self.winFraction !== undefined) {\n            const y2 = y + square.h * 0.5 + 20 + 2;\n            (0, $2589a02a34d546fb$export$a2f18a0619b13ed4)((0, $2589a02a34d546fb$export$120cfc2a1d7ff906)(self.winFraction), x, y2, 20, 2, color, 1, fctx);\n        }\n    };\n    self.setRenderer = (rendererMaker)=>{\n        self.renderer = rendererMaker(candidateDn);\n    };\n    // Click Handler\n    self.click = ()=>{\n        (0, $c3b719420f02de85$export$2e2bcd8739ae039)(self, candidateDn, screen, viewSettings, simOptions);\n    };\n}\n\n\nfunction $f9d4fa36f78cc466$export$2e2bcd8739ae039(canDn, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\n    const self = this;\n    self.canDn = canDn;\n    self.graphic = new (0, $2441a92fca464983$export$2e2bcd8739ae039)(canDn, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan);\n}\n\n\nfunction $51075ebf4a3429fd$export$2e2bcd8739ae039(viewSettings, candidateDnList, screen, simOptions, electionOptionsMan) {\n    const self = this;\n    const canDnViews = [];\n    self.rendererMaker = ()=>({\n            render: ()=>{}\n        });\n    // Publish to DraggableManager //\n    const observers = [];\n    self.attachNewG = (o)=>{\n        observers.push(o);\n    };\n    const updateObservers = (g)=>{\n        observers.forEach((o)=>o.updateNewG(g));\n    };\n    // Subscribe to Sim //\n    candidateDnList.attachNewE(self);\n    self.updateNewE = (candidateDn)=>{\n        self.newCandidateDn(candidateDn);\n    };\n    // Data Setters and Getters //\n    self.newCandidateDn = function(candidateDn) {\n        const canDnView = new (0, $f9d4fa36f78cc466$export$2e2bcd8739ae039)(candidateDn, screen, 21, 21, viewSettings, simOptions, electionOptionsMan);\n        canDnViews.push(canDnView);\n        canDnView.graphic.setRenderer(self.rendererMaker);\n        updateObservers(canDnView);\n    };\n    // get sim entities that exist\n    self.getCanDnViews = ()=>{\n        const a = canDnViews.filter((canDnView)=>canDnView.canDn.exists);\n        return a;\n    };\n    // get the underlying entities of the above\n    self.getCandidateDistributions = ()=>{\n        const canDnViewsEx = self.getCanDnViews();\n        return canDnViewsEx.map((canDnView)=>canDnView.canDn);\n    };\n    self.getCandidateDistributionsAll = ()=>canDnViews.map((canDnView)=>canDnView.canDn);\n    // Update //\n    self.setCandidateDnWins = (partyWinFraction)=>{\n        const canDnViewsExisting = self.getCanDnViews();\n        if (canDnViewsExisting.length > 1) canDnViewsExisting.forEach((canDnView)=>{\n            const party0 = canDnView.canDn.party[0];\n            const winFraction = partyWinFraction[party0];\n            canDnView.graphic.setWinFraction(winFraction);\n        });\n    };\n    self.updateViewXY = ()=>{\n        canDnViews.forEach((canDnView)=>canDnView.graphic.updateViewXY());\n    };\n    // Render //\n    self.render = ()=>{\n        canDnViews.forEach((canDnView)=>{\n            if (canDnView.canDn.exists) canDnView.graphic.renderer.render();\n        });\n    };\n    self.setRenderer = (rendererMaker)=>{\n        self.rendererMaker = rendererMaker;\n        canDnViews.forEach((canDnView)=>canDnView.graphic.setRenderer(rendererMaker));\n    };\n    self.renderForeground = ()=>{\n        if (viewSettings.showGhosts) self.renderForegroundAll();\n        else self.renderForegroundExisting();\n    };\n    self.renderForegroundExisting = ()=>{\n        canDnViews.forEach((canDnView)=>{\n            if (canDnView.canDn.exists) canDnView.graphic.renderForeground();\n        });\n    };\n    self.renderForegroundAll = ()=>{\n        canDnViews.forEach((canDnView)=>canDnView.graphic.renderForeground());\n    };\n}\n\n\n\n\nfunction $1fc9a95f71fdd883$export$2e2bcd8739ae039(entities, screen, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings) {\n    const self = this;\n    viewMode.viewModes.sample.attach(self);\n    (0, $38e222933fe6ab29$export$2e2bcd8739ae039).call(self, screen, changes, viewSettings);\n    // Entities //\n    const { candidateDnList: candidateDnList, voterShapeList: voterShapeList } = entities;\n    // eslint-disable-next-line max-len\n    const candidateDnViewList = new (0, $51075ebf4a3429fd$export$2e2bcd8739ae039)(viewSettings, candidateDnList, screen, simOptions, electionOptionsMan);\n    const voterViewList = new (0, $fffb6c00e5df0852$export$2e2bcd8739ae039)(viewSettings, voterShapeList, screen, simOptions, electionOptionsMan);\n    candidateDnViewList.attachNewG(self.dragm);\n    voterViewList.attachNewG(self.dragm);\n    // Main State Machine Functions //\n    self.update = (simData)=>{\n        const { samplingResult: samplingResult } = simData;\n        // Update players. Run an election. Get result. Visualize result.\n        // The election handles any changes.\n        // The samplingResult communicates how to visualize the election.\n        if (changes.check([\n            \"draggables\",\n            \"dimensions\",\n            \"mode\"\n        ])) {\n            voterViewList.updateViewXY();\n            candidateDnViewList.updateViewXY();\n        }\n        const { pointsChanged: pointsChanged, partyWinFraction: partyWinFraction } = samplingResult;\n        if (pointsChanged) candidateDnViewList.setCandidateDnWins(partyWinFraction);\n        self.clearForeground();\n        self.renderForeground();\n    };\n    self.clickEmpty = ()=>{};\n    self.testVoteView = ()=>null;\n    self.renderForeground = ()=>{\n        voterViewList.renderForeground();\n        candidateDnViewList.renderForeground();\n    };\n    self.clearForeground = ()=>{\n        screen.clearForeground();\n    };\n}\n\n\n/**\r\n * Some common properties for all screens.\r\n * A detail here is that we have browser pixels and device pixels.\r\n * Broswer pixels feel about the same size on any device (visual arc length).\r\n * Device pixels can be much smaller for high-dpi devices.\r\n * @param {Number} w - width in browser pixels of the canvas.\r\n * @param {Number} h - height in browser pixels of the canvas.\r\n */ function $4f7ed0f9de00f61e$export$2e2bcd8739ae039(w, h) {\n    const self = this;\n    // Publisher\n    const observers = [];\n    self.attach = (observer)=>{\n        observers.push(observer);\n    };\n    self.width = w // measured in browser pixels\n    ;\n    self.height = h;\n    // dark mode\n    self.darkMode = false;\n    self.setDarkMode = (val)=>{\n        self.darkMode = val;\n        const [add, remove] = val ? [\n            \"darkMode\",\n            \"lightMode\"\n        ] : [\n            \"lightMode\",\n            \"darkMode\"\n        ];\n        const body = document.getElementsByTagName(\"html\")[0];\n        body.classList.remove(remove);\n        body.classList.add(add);\n        observers.forEach((o)=>{\n            o.setDarkMode(val);\n        });\n    // https://stackoverflow.com/a/71001410\n    };\n    self.setDarkMode(window.matchMedia(\"(prefers-color-scheme: dark)\").matches);\n    self.showDownloadScreenLink = false;\n    self.setShowDownloadScreenLink = (val)=>{\n        self.showDownloadScreenLink = val;\n        observers.forEach((o)=>{\n            o.setShowDownloadScreenLink(val);\n        });\n    };\n    self.svgMode = false;\n    self.setSvgMode = (val)=>{\n        self.svgMode = val;\n        observers.forEach((o)=>{\n            o.setSvgMode(val);\n        });\n    };\n}\n\n\n\n\nfunction $8be873910a225725$export$2e2bcd8739ae039(screenCommon, layout, viewMode) {\n    const choose = new (0, $adbab3d2c863fd3e$export$2e2bcd8739ae039)({\n        label: \"Drawing Mode:\",\n        width: (0, $28e93f854ff6d0d3$export$aba002ef70684916)(3),\n        data: [\n            {\n                name: \"Canvas\",\n                value: false\n            },\n            {\n                name: \"SVG\",\n                value: true\n            }\n        ],\n        onChoose: (data)=>{\n            screenCommon.setSvgMode(data.value);\n            viewMode.rerender();\n        }\n    });\n    choose.highlight(\"value\", screenCommon.svgMode);\n    layout.newElement(\"svgSwitch\", choose.dom);\n}\n\n\n\n\nfunction $a0b66e6837888be8$export$2e2bcd8739ae039(screenCommon, layout) {\n    const choose = new (0, $adbab3d2c863fd3e$export$2e2bcd8739ae039)({\n        label: \"Show Link to Download Screen Image/SVG:\",\n        width: (0, $28e93f854ff6d0d3$export$aba002ef70684916)(3),\n        data: [\n            {\n                name: \"Yes\",\n                value: true\n            },\n            {\n                name: \"No\",\n                value: false\n            }\n        ],\n        onChoose: (data)=>{\n            screenCommon.setShowDownloadScreenLink(data.value);\n        }\n    });\n    choose.highlight(\"value\", screenCommon.svgMode);\n    layout.newElement(\"showDownloadScreenLink\", choose.dom);\n}\n\n\nfunction $f6694c15466e1e4f$export$2e2bcd8739ae039(sim, viewMode, layout, viewChanges, menu) {\n    const { entities: entities, simOptions: simOptions, electionOptionsMan: electionOptionsMan, changes: changes } = sim;\n    const screenCommon = new (0, $4f7ed0f9de00f61e$export$2e2bcd8739ae039)(300, 300);\n    const screenMain = new (0, $6f4e9b5281dd3fb8$export$2e2bcd8739ae039)(screenCommon, viewMode, layout, \"viz\");\n    const screenMini = new (0, $6f4e9b5281dd3fb8$export$2e2bcd8739ae039)(screenCommon, viewMode, layout, \"vizMini\");\n    screenMini.setHeight(screenCommon.height / 3);\n    screenMini.hide();\n    (0, $8be873910a225725$export$2e2bcd8739ae039)(screenCommon, layout, viewMode);\n    (0, $a0b66e6837888be8$export$2e2bcd8739ae039)(screenCommon, layout);\n    (0, $c12a719bb56287b7$export$2e2bcd8739ae039)(screenCommon, layout, viewMode);\n    const viewSettings = new (0, $fe33e11ec59c2627$export$2e2bcd8739ae039)(changes);\n    new (0, $100052672cd0bb56$export$2e2bcd8739ae039)(entities, screenMain, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings, viewChanges);\n    new (0, $1fc9a95f71fdd883$export$2e2bcd8739ae039)(entities, screenMain, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings);\n    new (0, $f643266df7ac597d$export$2e2bcd8739ae039)(entities, screenMain, screenMini, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings);\n    new (0, $54465968db0c2722$export$2e2bcd8739ae039)(entities, screenMain, menu, changes, simOptions, viewMode, viewSettings);\n    new (0, $3467d21e4791d697$export$2e2bcd8739ae039)(screenCommon, layout, menu, changes, simOptions, electionOptionsMan, viewMode);\n    new (0, $33663a9a11823002$export$2e2bcd8739ae039)(entities, screenCommon, layout, changes, simOptions, electionOptionsMan, viewMode);\n    return {\n        screenMain: screenMain\n    };\n}\n\n\nfunction $21e0c9114ab3a323$export$2e2bcd8739ae039(menu, simOptions) {\n    menu.addMenuItem({\n        label: \"Sampling Seed:\",\n        explain: \"The sampling seed can either be constant or random. Setting the seed to random means every time the sampler starts, it will choose a random sampling seed. The seed is used to sample the same candidates each time, no matter if the other settings change. The only way things would be different is if the size of the candidate distributions change or if the number of candidate distributions change.\",\n        options: [\n            {\n                name: \"Random\",\n                value: true,\n                explain: \"New seed for each sampling run.\"\n            },\n            {\n                name: \"Constant\",\n                value: false,\n                explain: \"Same seed for each sampling run.\"\n            }\n        ],\n        changeList: [\n            \"seedRandom\"\n        ],\n        getValue: ()=>simOptions.seedRandom,\n        onChoose: (o)=>{\n            simOptions.setSeedRandom(o.value);\n        }\n    });\n}\n\n\nfunction $34318bd2428225f5$export$2e2bcd8739ae039(simOptions, menu) {\n    menu.addMenuItem({\n        label: \"Mode:\",\n        explain: \"The simulation mode chooses the kind of analysis to do. Either do one election and see more detail or many and get summary stats.\",\n        options: [\n            {\n                name: \"Election\",\n                value: \"one\",\n                explain: \"See the votes from one election.\"\n            },\n            {\n                name: \"Win Density\",\n                value: \"sample\",\n                explain: \"See the winning candidates as a density over many elections. The prospective candidates come from a distribution.\"\n            }\n        ],\n        changeList: [\n            \"mode\"\n        ],\n        getValue: ()=>simOptions.mode,\n        onChoose: (o)=>{\n            simOptions.setMode(o.value);\n        }\n    });\n    menu.addMenuItem({\n        label: \"Dimensions:\",\n        explain: \"Set the number of dimensions for policy space. Policy space is where voters make decisions on which candidates to elect. Voters like candidates closer to them. Also, the way this simulation is organized, the 1D position of a candidate or voter is independent from their 2D position. This sim uses just one or the other.\",\n        options: [\n            {\n                name: \"1D\",\n                value: 1,\n                explain: \"Use only one axis for policy space.\"\n            },\n            {\n                name: \"2D\",\n                value: 2,\n                explain: \"Use two axes for policy space.\"\n            }\n        ],\n        changeList: [\n            \"dimensions\"\n        ],\n        getValue: ()=>simOptions.dimensions,\n        onChoose: (o)=>{\n            simOptions.setDimensions(o.value);\n        }\n    });\n    (0, $21e0c9114ab3a323$export$2e2bcd8739ae039)(menu, simOptions);\n}\n\n\n\nfunction $18d1d7cb5f3bd0fe$export$2e2bcd8739ae039(sequenceName, phaseName, phaseNameTitle, electionOptionsMan, menu) {\n    menu.addMenuItem({\n        label: `Social Choice Method for ${phaseNameTitle} Phase:`,\n        explain: \"The method of choosing winners from a set of prospective candidates.\",\n        options: (0, $ef45c1fe8cec5d24$export$ac6cb01020bcb950).map(({ shortName: shortName, functionName: functionName, name: name, explain: explain })=>({\n                name: shortName,\n                value: functionName,\n                explain: explain || name\n            })),\n        changeList: [\n            \"socialChoiceMethod\"\n        ],\n        getValue: ()=>electionOptionsMan.sequenceOptionsMan.sequences[sequenceName].phases[phaseName].getOptions().socialChoiceMethod,\n        onChoose: (o)=>{\n            electionOptionsMan.sequenceOptionsMan.sequences[sequenceName].phases[phaseName].setSocialChoiceMethod(o.value);\n        },\n        checkShow: ()=>sequenceName === electionOptionsMan.getOptions().sequenceOptions.sequenceName\n    });\n}\n\n\nfunction $b38242352e1fa037$export$2e2bcd8739ae039(electionOptionsMan, menu) {\n    menu.addMenuItem({\n        label: \"Number of Census Tracts:\",\n        explain: \"Tracts add some geography into the election. Tracts are the pixels of the geography. Voters live in tracts. In each tract, the voters are moved in policy space according to a random algorithm called simplex noise. The main feature is that neighboring tracts are similar to each other. This options sets the number of tracts along one axis. \",\n        options: [\n            {\n                name: \"1\",\n                value: 1\n            },\n            {\n                name: \"9\",\n                value: 9\n            }\n        ],\n        changeList: [\n            \"numTracts\"\n        ],\n        getValue: ()=>electionOptionsMan.getOptions().numTracts,\n        onChoose: (o)=>{\n            electionOptionsMan.setNumTracts(o.value);\n        }\n    });\n    menu.addMenuItem({\n        label: \"Number of Districts:\",\n        explain: \"Districts are one way to try to introduce proprtionality into an election. Districts are drawn across tracts. Elections results are summed across the districts. Each district has one or more winners. \",\n        options: [\n            {\n                name: \"1\",\n                value: 1\n            },\n            {\n                name: \"9\",\n                value: 9\n            }\n        ],\n        changeList: [\n            \"numDistricts\"\n        ],\n        getValue: ()=>electionOptionsMan.getOptions().numDistricts,\n        onChoose: (o)=>{\n            electionOptionsMan.setNumDistricts(o.value);\n        }\n    });\n    menu.addMenuItem({\n        label: \"Election Sequence:\",\n        explain: \"An election may be composed of phases of casting votes and determining winners. A primary may be closed or open. A closed primary only allows voters of a party to vote. A nonpartisan open primary allows any voter to vote for any candidate. A general follows the primary. \",\n        options: [\n            {\n                name: \"General\",\n                value: \"general\",\n                explain: \"One general phase.\"\n            },\n            {\n                name: \"Closed P\",\n                value: \"closedPrimary\",\n                explain: \"A closed primary followed by a general phase.\"\n            },\n            {\n                name: \"Nonp Open P\",\n                value: \"nonpartisanOpenPrimary\",\n                explain: \"A nonpartisan open primary followed by a general phase.\"\n            }\n        ],\n        changeList: [\n            \"sequenceName\"\n        ],\n        getValue: ()=>electionOptionsMan.sequenceOptionsMan.getOptions().sequenceName,\n        onChoose: (o)=>{\n            electionOptionsMan.sequenceOptionsMan.setSequenceName(o.value);\n        }\n    });\n    (0, $18d1d7cb5f3bd0fe$export$2e2bcd8739ae039)(\"general\", \"general\", \"General\", electionOptionsMan, menu);\n    (0, $18d1d7cb5f3bd0fe$export$2e2bcd8739ae039)(\"closedPrimary\", \"closedPrimary\", \"Closed Primary\", electionOptionsMan, menu);\n    (0, $18d1d7cb5f3bd0fe$export$2e2bcd8739ae039)(\"closedPrimary\", \"general\", \"General\", electionOptionsMan, menu);\n    (0, $18d1d7cb5f3bd0fe$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", \"nonpartisanOpenPrimary\", \"Nonpartisan Open Primary\", electionOptionsMan, menu);\n    (0, $18d1d7cb5f3bd0fe$export$2e2bcd8739ae039)(\"nonpartisanOpenPrimary\", \"general\", \"General\", electionOptionsMan, menu);\n}\n\n\n/** @module */ /**\r\n * Add buttons to layout for undo and redo, and connect them to commander for functionality.\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */ function $13ffcf648d193fb0$export$2e2bcd8739ae039(layout, commander) {\n    const undoButton = document.createElement(\"button\");\n    const redoButton = document.createElement(\"button\");\n    undoButton.className = \"button2\";\n    redoButton.className = \"button2\";\n    undoButton.innerText = \"Undo\";\n    redoButton.innerText = \"Redo\";\n    undoButton.onclick = commander.undo;\n    redoButton.onclick = commander.redo;\n    layout.newElement(\"undo\", undoButton);\n    layout.newElement(\"redo\", redoButton);\n}\n\n\n/** Add a label for the sim controls */ function $cfbcc15cc93cfdcd$export$2e2bcd8739ae039(layout) {\n    const label = document.createElement(\"div\");\n    label.setAttribute(\"class\", \"button-group-label2\");\n    label.innerText = \"Sim Controls:\";\n    layout.newElement(\"simControlsLabel\", label);\n}\n\n\n/** @module */ /**\r\n * Add button to layout for adding a candidate\r\n * @param {Layout} layout\r\n * @param {Sim} canList\r\n */ function $3a1a8f2d04312497$export$2e2bcd8739ae039(viewMode, canList) {\n    const addCandidateButton = document.createElement(\"button\");\n    addCandidateButton.className = \"button2\";\n    addCandidateButton.innerText = \"Add Candidate\";\n    addCandidateButton.onclick = ()=>{\n        canList.addEntityPressed();\n    };\n    hide();\n    viewMode.viewModes.one.attach({\n        enter: show,\n        exit: hide,\n        update: ()=>{}\n    });\n    function show() {\n        addCandidateButton.hidden = false;\n    }\n    function hide() {\n        addCandidateButton.hidden = true;\n    }\n    return addCandidateButton;\n}\n\n\n/** @module */ /**\r\n * Add button to layout for adding a candidate\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */ function $2e4dbe3287c94dd9$export$2e2bcd8739ae039(viewMode, canDnList) {\n    const addCandidateDistributionButton = document.createElement(\"button\");\n    addCandidateDistributionButton.className = \"button2\";\n    addCandidateDistributionButton.innerText = \"Add Candidate Group\";\n    addCandidateDistributionButton.onclick = ()=>{\n        canDnList.addEntityPressed();\n    };\n    hide();\n    viewMode.viewModes.sample.attach({\n        enter: show,\n        exit: hide,\n        update: ()=>{}\n    });\n    function show() {\n        addCandidateDistributionButton.hidden = false;\n    }\n    function hide() {\n        addCandidateDistributionButton.hidden = true;\n    }\n    return addCandidateDistributionButton;\n}\n\n\n/** @module */ /**\r\n * Add buttons to layout for undo and redo, and connect them to commander for functionality.\r\n * @param {Layout} layout\r\n * @param {VoterShapeList} voterShapeList\r\n */ function $7ade43915b412fb3$export$2e2bcd8739ae039(voterShapeList) {\n    const addVoterButton = document.createElement(\"button\");\n    addVoterButton.innerText = \"Add Voter Group\";\n    addVoterButton.className = \"button2\";\n    addVoterButton.onclick = ()=>{\n        voterShapeList.addEntityPressed();\n    };\n    return addVoterButton;\n}\n\n\nfunction $089696bda1cdcaa1$export$2e2bcd8739ae039(viewMode, entities, layout) {\n    const can = (0, $3a1a8f2d04312497$export$2e2bcd8739ae039)(viewMode, entities.candidateList);\n    const candn = (0, $2e4dbe3287c94dd9$export$2e2bcd8739ae039)(viewMode, entities.candidateDnList);\n    const voter = (0, $7ade43915b412fb3$export$2e2bcd8739ae039)(entities.voterShapeList);\n    const addEntities = document.createElement(\"div\");\n    addEntities.append(voter);\n    addEntities.append(can);\n    addEntities.append(candn);\n    layout.newElement(\"addEntities\", addEntities);\n}\n\n\n/** @module */ \nfunction $3b953dc201d486cc$export$2e2bcd8739ae039(pub, changes, layout) {\n    const self = this;\n    self.divMenu = document.createElement(\"div\");\n    layout.newElement(\"menu\", self.divMenu);\n    self.addMenuItem = function(choice) {\n        // eslint-disable-next-line max-len\n        const menuItem = new (0, $28e93f854ff6d0d3$export$2e2bcd8739ae039)(pub, changes, choice);\n        menuItem.select();\n        self.divMenu.appendChild(menuItem.choose.dom);\n    };\n}\n\n\n\n\n\nfunction $90c2f2a69ce38576$export$2e2bcd8739ae039(simOptions, pub, layout, changes, electionOptionsMan) {\n    // make two selectors, one for each sequence with a primary\n    const choose1 = $90c2f2a69ce38576$var$addResultsPhaseSelectorForSequence(\"closedPrimary\", simOptions, pub, layout, electionOptionsMan);\n    const chooseParty = $90c2f2a69ce38576$var$addResultsPartySelector(\"closedPrimary\", simOptions, pub, layout, electionOptionsMan);\n    const choose2 = $90c2f2a69ce38576$var$addResultsPhaseSelectorForSequence(\"nonpartisanOpenPrimary\", simOptions, pub, layout, electionOptionsMan);\n    const div = document.createElement(\"div\");\n    div.appendChild(choose1.dom);\n    div.appendChild(chooseParty.dom);\n    div.appendChild(choose2.dom);\n    layout.newElement(\"resultsPhaseSelector\", div);\n}\nfunction $90c2f2a69ce38576$var$addResultsPhaseSelectorForSequence(sequenceName, simOptions, pub, layout, electionOptionsMan) {\n    const choose = new (0, $adbab3d2c863fd3e$export$2e2bcd8739ae039)({\n        label: \"Phase of Results to Display:\",\n        width: (0, $28e93f854ff6d0d3$export$aba002ef70684916)(3),\n        data: [\n            {\n                name: \"Primary\",\n                value: sequenceName\n            },\n            // shortcut: using sequenceName, which happens to be the primary phase name\n            {\n                name: \"General\",\n                value: \"general\"\n            }\n        ],\n        onChoose: (data)=>{\n            simOptions.setResultsPhase(sequenceName, data.value);\n        }\n    });\n    pub.attach({\n        update: update\n    });\n    function update() {\n        const show = sequenceName === electionOptionsMan.getOptions().sequenceOptions.sequenceName;\n        if (show) choose.dom.hidden = false;\n        else choose.dom.hidden = true;\n    }\n    choose.highlight(\"value\", simOptions.resultsPhaseBySeq[sequenceName]);\n    return choose;\n}\nfunction $90c2f2a69ce38576$var$addResultsPartySelector(sequenceName, simOptions, pub, layout, electionOptionsMan) {\n    const choose = new (0, $adbab3d2c863fd3e$export$2e2bcd8739ae039)({\n        label: \"Party of Results to Display:\",\n        width: (0, $28e93f854ff6d0d3$export$aba002ef70684916)(10),\n        data: (0, $c9cda941ee132d98$export$d02631cccf789723)(10).map((i)=>({\n                name: i,\n                value: i\n            })),\n        onChoose: (data)=>{\n            simOptions.setResultsParty(sequenceName, data.value);\n        }\n    });\n    pub.attach({\n        update: update\n    });\n    function update() {\n        const optSeqName = electionOptionsMan.getOptions().sequenceOptions.sequenceName;\n        const show1 = sequenceName === optSeqName;\n        const show2 = simOptions.resultsPhaseBySeq[optSeqName] !== \"general\";\n        const show = show1 && show2;\n        if (show) choose.dom.hidden = false;\n        else choose.dom.hidden = true;\n    }\n    choose.highlight(\"value\", simOptions.resultsPartyBySeq[sequenceName]);\n    return choose;\n}\n\n\nfunction $fc7fa21060878200$export$2e2bcd8739ae039(electionOptionsMan, viewMode, layout) {\n    const message = \"Elections with both geographic components and sequence components are not yet implemented. Change number of districts to 1 and number of tracts to 1 or change election sequence to general.\";\n    const div = document.createElement(\"div\");\n    div.className = \"warning\";\n    div.innerText = message;\n    hide();\n    const observer = {\n        enter: ()=>{},\n        exit: ()=>{},\n        update: ()=>{\n            const optionsBag = electionOptionsMan.getOptions();\n            const sayWarning = optionsBag.useGeography === true && optionsBag.sequenceOptions.sequenceName !== \"general\";\n            if (sayWarning) show();\n            else hide();\n        }\n    };\n    viewMode.viewModes.one.attach(observer);\n    viewMode.viewModes.sample.attach(observer);\n    function show() {\n        div.hidden = false;\n    }\n    function hide() {\n        div.hidden = true;\n    }\n    layout.newElement(\"warning\", div);\n}\n\n\nfunction $ddc1b1b41893a253$export$2e2bcd8739ae039(sim, layout, viewMode) {\n    const { commander: commander, simOptions: simOptions, electionOptionsMan: electionOptionsMan, entities: entities, changes: changes, pub: pub } = sim;\n    const menu = new (0, $3b953dc201d486cc$export$2e2bcd8739ae039)(pub, changes, layout);\n    (0, $34318bd2428225f5$export$2e2bcd8739ae039)(simOptions, menu);\n    (0, $b38242352e1fa037$export$2e2bcd8739ae039)(electionOptionsMan, menu);\n    (0, $90c2f2a69ce38576$export$2e2bcd8739ae039)(simOptions, pub, layout, changes, electionOptionsMan);\n    (0, $13ffcf648d193fb0$export$2e2bcd8739ae039)(layout, commander);\n    (0, $cfbcc15cc93cfdcd$export$2e2bcd8739ae039)(layout);\n    (0, $089696bda1cdcaa1$export$2e2bcd8739ae039)(viewMode, entities, layout);\n    (0, $fc7fa21060878200$export$2e2bcd8739ae039)(electionOptionsMan, viewMode, layout);\n    return {\n        menu: menu\n    };\n}\n\n\n/** @module */ function $a8db0a660e5b197f$export$2e2bcd8739ae039(params) {\n    const encoded = params.get(\"a\");\n    const string = decodeURIComponent(encoded);\n    const config = JSON.parse(string);\n    return config;\n}\n\n\nconst $a46318dd1b71d871$var$ajaxLite = {} // https://stackoverflow.com/a/18078705\n;\n$a46318dd1b71d871$var$ajaxLite.x = function() {\n    if (typeof XMLHttpRequest !== \"undefined\") return new XMLHttpRequest();\n    const versions = [\n        \"MSXML2.XmlHttp.6.0\",\n        \"MSXML2.XmlHttp.5.0\",\n        \"MSXML2.XmlHttp.4.0\",\n        \"MSXML2.XmlHttp.3.0\",\n        \"MSXML2.XmlHttp.2.0\",\n        \"Microsoft.XmlHttp\"\n    ];\n    let xhr;\n    for(let i = 0; i < versions.length; i++)try {\n        // eslint-disable-next-line no-undef\n        xhr = new ActiveXObject(versions[i]);\n        break;\n    } catch (e) {\n    // nothing\n    }\n    return xhr;\n};\n$a46318dd1b71d871$var$ajaxLite.send = function(url, callback, method, data, asyncOpt) {\n    let async = asyncOpt;\n    if (async === undefined) async = true;\n    const x = $a46318dd1b71d871$var$ajaxLite.x();\n    x.open(method, url, async);\n    x.onreadystatechange = function() {\n        if (x.readyState === 4) callback(x.responseText);\n    };\n    if (method === \"POST\") x.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    x.send(data);\n};\n$a46318dd1b71d871$var$ajaxLite.get = function(url, data, callback, async) {\n    const query = [];\n    const keys = Object.keys(data);\n    for(let i = 0; i < keys.length; i++){\n        const key = keys[i];\n        query.push(`${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`);\n    }\n    $a46318dd1b71d871$var$ajaxLite.send(url + (query.length ? `?${query.join(\"&\")}` : \"\"), callback, \"GET\", null, async);\n};\nvar $a46318dd1b71d871$export$2e2bcd8739ae039 = $a46318dd1b71d871$var$ajaxLite;\n\n\n\n// reference for url shortener:\n// https://medium.com/@dmccoy/how-to-submit-an-html-form-to-google-sheets-without-google-forms-b833952cc175\nconst $c3a0bcc3a54dc577$var$shortLinkDatabaseUrl = \"https://script.google.com/macros/s/AKfycbw_t8aLSdKGRFVhAenhPu56Gl-N9fEucx6Ic-H9jtfb55g_1flmiFK7WsHfsx1Dg2LSuQ/exec\";\nvar $c3a0bcc3a54dc577$export$2e2bcd8739ae039 = $c3a0bcc3a54dc577$var$shortLinkDatabaseUrl;\n\n\nfunction $7377ccb85fb22985$export$2e2bcd8739ae039(shortcode, checkURLCallback) {\n    (0, $a46318dd1b71d871$export$2e2bcd8739ae039).get((0, $c3a0bcc3a54dc577$export$2e2bcd8739ae039), {\n        shortcode: shortcode,\n        link: \"getTable\"\n    }, (res)=>{\n        // do the load config again, basically\n        const resObj = JSON.parse(res);\n        const { link: link } = resObj;\n        const url = new URL(link);\n        const { search: search } = url;\n        const params = new URLSearchParams(search);\n        const config = (0, $a8db0a660e5b197f$export$2e2bcd8739ae039)(params);\n        checkURLCallback({\n            yes: true,\n            config: config\n        });\n    });\n}\n\n\nfunction $26fe257bae0c8396$export$2e2bcd8739ae039(configURL, nameInput, checkUrlCallback) {\n    const { search: search } = configURL;\n    const params = new URLSearchParams(search);\n    const name = params.get(\"name\");\n    if (name !== null) nameInput.set(name);\n    const a = params.has(\"a\");\n    const b = params.has(\"b\");\n    const yes = a || b;\n    if (a) {\n        const config = (0, $a8db0a660e5b197f$export$2e2bcd8739ae039)(params);\n        checkUrlCallback({\n            yes: yes,\n            config: config\n        });\n        return;\n    }\n    if (b) {\n        const shortcode = params.get(\"b\");\n        (0, $7377ccb85fb22985$export$2e2bcd8739ae039)(shortcode, checkUrlCallback);\n        return;\n    }\n    const config = {};\n    checkUrlCallback({\n        yes: yes,\n        config: config\n    });\n}\n\n\nfunction $ae988ce85ac378d0$export$2e2bcd8739ae039(configURL, targetConfig, init, nameInput) {\n    (0, $26fe257bae0c8396$export$2e2bcd8739ae039)(configURL, nameInput, checkUrlCallback);\n    function checkUrlCallback(cu) {\n        const config = cu.yes ? cu.config : targetConfig;\n        init(config);\n    }\n}\n\n\n/**\r\n * Check if we are in a jupyter notebook.\r\n * Send any simData to votekitData variable in python.\r\n * @param {Object} simData - any object with keys to send to python\r\n */ const $64c45c66513aa78c$var$usingIPython = window.IPython !== undefined;\n// const usingJupyterLab = (window._JUPYTERLAB !== undefined)\nif ($64c45c66513aa78c$var$usingIPython) {\n    window.votekitStore = {};\n    window.getVotekitStore = ()=>{\n        if ($64c45c66513aa78c$var$usingIPython) {\n            const ex = (command)=>window.IPython.notebook.kernel.execute(command);\n            ex(`votekitData = '${JSON.stringify(window.votekitStore)}'`);\n        }\n    };\n}\nfunction $64c45c66513aa78c$export$2e2bcd8739ae039(simData) {\n    if ($64c45c66513aa78c$var$usingIPython) {\n        Object.assign(window.votekitStore, simData);\n        // hook to run at every update\n        // only runs if someone defines it elsewhere, like in a python notebook\n        if (window.votekitUpdate !== undefined) window.votekitUpdate(window.votekitStore, simData);\n    }\n}\nfunction $64c45c66513aa78c$export$f8c1cbdc752d1bf3() {\n    window.votekitStore = {};\n}\n\n\nfunction $b23e710988ee2e33$export$2e2bcd8739ae039(pub, changes) {\n    pub.attach({\n        update: (simData)=>{\n            if (changes.checkNone()) return;\n            (0, $64c45c66513aa78c$export$f8c1cbdc752d1bf3)();\n            (0, $64c45c66513aa78c$export$2e2bcd8739ae039)(simData);\n        }\n    });\n}\n\n\n/** @module */ function $6ac7add0bf8ff367$export$2e2bcd8739ae039() {\n    const self = this;\n    self.div = document.createElement(\"div\");\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.style.margin = \"4px\";\n    self.div.append(downloadLink);\n    const hideLink = document.createElement(\"button\");\n    hideLink.className = \"button2\";\n    hideLink.innerText = \"X\";\n    hideLink.onclick = ()=>{\n        self.hide();\n    };\n    self.div.append(hideLink);\n    self.show = ()=>{\n        downloadLink.hidden = false;\n        hideLink.hidden = false;\n    };\n    self.hide = ()=>{\n        downloadLink.hidden = true;\n        hideLink.hidden = true;\n    };\n    self.setUrl = (url)=>{\n        downloadLink.href = url;\n    };\n    self.setFileName = (fn)=>{\n        downloadLink.innerText = fn;\n        downloadLink.download = fn;\n    };\n    self.setFileName(\"download\");\n}\n\n\nfunction $bb869f82bd71d020$export$2e2bcd8739ae039() {\n    const self = this;\n    self.value = \"\";\n    self.div = document.createElement(\"div\");\n    const text = document.createElement(\"textarea\");\n    text.style.margin = \"4px\";\n    self.div.append(text);\n    const hideLink = document.createElement(\"button\");\n    hideLink.className = \"button2\";\n    hideLink.innerText = \"X\";\n    hideLink.onclick = ()=>{\n        self.hide();\n    };\n    self.div.append(hideLink);\n    self.show = ()=>{\n        text.hidden = false;\n        hideLink.hidden = false;\n    };\n    self.hide = ()=>{\n        text.hidden = true;\n        hideLink.hidden = true;\n    };\n    self.setText = (t)=>{\n        text.value = t;\n        self.value = t;\n    };\n}\n\n\nfunction $c7e60aaa60caf2ba$export$2e2bcd8739ae039(obj) {\n    return JSON.stringify($c7e60aaa60caf2ba$var$sortObjByKey(obj), null, \"\t\");\n}\n/** https://stackoverflow.com/a/35810961 */ function $c7e60aaa60caf2ba$var$sortObjByKey(value) {\n    // eslint-disable-next-line no-nested-ternary\n    return typeof value === \"object\" ? Array.isArray(value) ? value.map($c7e60aaa60caf2ba$var$sortObjByKey) : Object.keys(value).sort().reduce((o, key)=>{\n        const v = value[key];\n        // eslint-disable-next-line no-param-reassign\n        o[key] = $c7e60aaa60caf2ba$var$sortObjByKey(v);\n        return o;\n    }, {}) : value;\n}\n\n\nfunction $ea9d84d756d03b3a$export$2e2bcd8739ae039(layout, commander, nameInput) {\n    const button = document.createElement(\"button\");\n    button.className = \"button2\";\n    button.innerText = \"Show Config\";\n    const button2 = document.createElement(\"button\");\n    button2.className = \"button2\";\n    button2.innerText = \"Download Config\";\n    const dLink = new (0, $6ac7add0bf8ff367$export$2e2bcd8739ae039)();\n    dLink.setFileName(\"config.json\");\n    dLink.hide();\n    const text = new (0, $bb869f82bd71d020$export$2e2bcd8739ae039)();\n    text.hide();\n    button.onclick = ()=>{\n        text.show();\n        const config = commander.getConfig();\n        const jsonText = (0, $c7e60aaa60caf2ba$export$2e2bcd8739ae039)(config);\n        text.setText(jsonText);\n    };\n    button2.onclick = ()=>{\n        button.onclick();\n        const url = `data:text/json;charset=utf-8,${encodeURIComponent(text.value)}`;\n        dLink.setUrl(url);\n        const name = nameInput.value;\n        if (name !== \"\") dLink.setFileName(`${name}.json`);\n        dLink.show();\n    };\n    const clearDiv = document.createElement(\"div\");\n    const div = document.createElement(\"div\");\n    div.appendChild(button);\n    div.appendChild(button2);\n    div.appendChild(dLink.div);\n    div.appendChild(clearDiv);\n    div.appendChild(text.div);\n    layout.newElement(\"saveConfigToText\", div);\n}\n\n\n/** @module */ function $272242693040e9c7$export$2e2bcd8739ae039(uploadCallback, nameInput) {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".json\";\n    input.onchange = ()=>{\n        const file = input.files[0];\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", uploadCallback);\n        reader.readAsText(file);\n        const { name: name } = file;\n        const nameWithoutExtension = name.split(\".\").slice(0, -1).join(\".\");\n        nameInput.set(nameWithoutExtension);\n    };\n    const button = document.createElement(\"button\");\n    button.className = \"button2\";\n    button.innerText = \"Upload Config\";\n    button.onclick = ()=>{\n        input.click();\n    };\n    return button;\n}\n\n\nfunction $cd6c85e60f8aa8a9$export$2e2bcd8739ae039(layout, commander, nameInput) {\n    const button = document.createElement(\"button\");\n    button.className = \"button2\";\n    button.innerText = \"Load Pasted Config\";\n    const text = document.createElement(\"textarea\");\n    button.onclick = ()=>{\n        if (text.value === \"\") return;\n        const config = JSON.parse(text.value);\n        commander.loadConfig(config);\n    };\n    const upload = (0, $272242693040e9c7$export$2e2bcd8739ae039)(uploadCallback, nameInput);\n    function uploadCallback(event) {\n        const { result: result } = event.target;\n        const config = JSON.parse(result);\n        commander.loadConfig(config);\n    }\n    const clearDiv = document.createElement(\"div\");\n    const div = document.createElement(\"div\");\n    div.appendChild(button);\n    div.appendChild(upload);\n    div.appendChild(clearDiv);\n    div.appendChild(text);\n    layout.newElement(\"loadConfigText\", div);\n}\n\n\n/** @module */ function $8f9da01fb5fff854$export$2e2bcd8739ae039(params, sandboxPath) {\n    const search = $8f9da01fb5fff854$var$urlSearchString(params);\n    const currentUrlFolder = $8f9da01fb5fff854$var$getFolder();\n    const link = `${currentUrlFolder}/${sandboxPath}?${search}`;\n    return link;\n}\nfunction $8f9da01fb5fff854$var$urlSearchString(params) {\n    const urlParams = new URLSearchParams(params);\n    const search = urlParams.toString();\n    return search;\n}\nfunction $8f9da01fb5fff854$var$getFolder() {\n    const sp = document.location.href.split(\"/\");\n    const sl = sp.slice(0, sp.length - 1);\n    const folder = sl.join(\"/\");\n    return folder;\n}\n\n\nfunction $ff5d9465695c9047$export$2e2bcd8739ae039(config, sandboxPath, nameInput) {\n    const string = JSON.stringify(config);\n    const encoded = encodeURIComponent(string);\n    const a = encoded;\n    const name = nameInput.value;\n    const params = name === \"\" ? {\n        a: a\n    } : {\n        a: a,\n        name: name\n    };\n    const link = (0, $8f9da01fb5fff854$export$2e2bcd8739ae039)(params, sandboxPath);\n    return link;\n}\n\n\n\nfunction $24352ace2ac39fb7$export$2e2bcd8739ae039(layout, commander, sandboxPath, nameInput) {\n    const button = document.createElement(\"button\");\n    button.className = \"button2\";\n    button.innerText = \"Save Long Link\";\n    const button2 = document.createElement(\"button\");\n    button2.className = \"button2\";\n    button2.innerText = \"Copy\";\n    const text = new (0, $bb869f82bd71d020$export$2e2bcd8739ae039)();\n    text.hide();\n    button.onclick = ()=>{\n        text.show();\n        const config = commander.getConfig();\n        const link = (0, $ff5d9465695c9047$export$2e2bcd8739ae039)(config, sandboxPath, nameInput);\n        text.setText(link);\n    };\n    button2.onclick = ()=>{\n        button.onclick();\n        navigator.clipboard.writeText(text.value);\n    };\n    const clearDiv = document.createElement(\"div\");\n    const div = document.createElement(\"div\");\n    div.appendChild(button);\n    div.appendChild(button2);\n    div.appendChild(clearDiv);\n    div.appendChild(text.div);\n    layout.newElement(\"saveConfigToLink\", div);\n}\n\n\n/** @module */ \n\n\n\n\nfunction $6152ab91c2b03ae4$export$2e2bcd8739ae039(config, sandboxPath, nameInput, afterPublish) {\n    const link = (0, $ff5d9465695c9047$export$2e2bcd8739ae039)(config, sandboxPath, nameInput);\n    const configString = (0, $c7e60aaa60caf2ba$export$2e2bcd8739ae039)(config);\n    const shortcode = $6152ab91c2b03ae4$export$d41d9ab3de2def3d(configString);\n    (0, $a46318dd1b71d871$export$2e2bcd8739ae039).get((0, $c3a0bcc3a54dc577$export$2e2bcd8739ae039), {\n        shortcode: shortcode,\n        link: link\n    }, (res)=>{\n        if (res !== \"\") {\n            const resObj = JSON.parse(res);\n            if (resObj.result === \"success\") {\n                const name = nameInput.value;\n                const b = shortcode;\n                const params = name === \"\" ? {\n                    b: b\n                } : {\n                    b: b,\n                    name: name\n                };\n                const shortLink = (0, $8f9da01fb5fff854$export$2e2bcd8739ae039)(params, sandboxPath);\n                afterPublish(shortLink);\n                return;\n            }\n        }\n        const shortLink = \"Bad. The link didn't publish. The short link won't work.\";\n        afterPublish(shortLink);\n    });\n}\nfunction $6152ab91c2b03ae4$export$d41d9ab3de2def3d(s) {\n    let hash = 0;\n    let i;\n    let chr;\n    for(i = 0; i < s.length; i++){\n        chr = s.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0 // Convert to 32bit integer\n        ;\n    }\n    // I will only use non-negative integers because it might be easier.\n    // So basically, I'm setting the first bit to 0.\n    const half = 2147483648;\n    return (hash + half) % half;\n}\n\n\n\nfunction $d66286cf65f83349$export$2e2bcd8739ae039(layout, commander, sandboxPath, nameInput) {\n    const button = document.createElement(\"button\");\n    button.className = \"button2\";\n    button.innerText = \"Publish Short Link\";\n    const button2 = document.createElement(\"button\");\n    button2.className = \"button2\";\n    button2.innerText = \"Copy\";\n    const text = new (0, $bb869f82bd71d020$export$2e2bcd8739ae039)();\n    text.hide();\n    const requesting = \"requesting short link...\";\n    button.onclick = ()=>{\n        text.show();\n        const config = commander.getConfig();\n        text.setText(requesting);\n        (0, $6152ab91c2b03ae4$export$2e2bcd8739ae039)(config, sandboxPath, nameInput, (link)=>{\n            text.setText(link);\n        });\n    };\n    button2.onclick = ()=>{\n        text.show();\n        const config = commander.getConfig();\n        text.setText(requesting);\n        (0, $6152ab91c2b03ae4$export$2e2bcd8739ae039)(config, sandboxPath, nameInput, (link)=>{\n            navigator.clipboard.writeText(link);\n        });\n    };\n    const clearDiv = document.createElement(\"div\");\n    const div = document.createElement(\"div\");\n    div.appendChild(button);\n    div.appendChild(button2);\n    div.appendChild(clearDiv);\n    div.appendChild(text.div);\n    layout.newElement(\"saveConfigToShortLink\", div);\n}\n\n\nfunction $9d172173fc202277$export$2e2bcd8739ae039(layout) {\n    const label = document.createElement(\"label\");\n    label.className = \"button-group-label2\";\n    label.innerText = \"Name: \";\n    const input = document.createElement(\"input\");\n    input.type = \"text\";\n    input.placeholder = \"\";\n    input.set = (n)=>{\n        input.value = n;\n    };\n    const div = document.createElement(\"div\");\n    div.appendChild(label);\n    div.appendChild(input);\n    layout.newElement(\"name\", div);\n    return input;\n}\n\n\n/** @module */ \n\n\nfunction $ffbea7ab5447574f$export$2e2bcd8739ae039(layout, nameInput, viewDownload) {\n    const button = document.createElement(\"button\");\n    button.className = \"button2\";\n    button.innerText = \"Show Data\";\n    const button2 = document.createElement(\"button\");\n    button2.className = \"button2\";\n    button2.innerText = \"Download Data\";\n    const dLink = new (0, $6ac7add0bf8ff367$export$2e2bcd8739ae039)();\n    dLink.setFileName(\"data.json\");\n    dLink.hide();\n    const text = new (0, $bb869f82bd71d020$export$2e2bcd8739ae039)();\n    text.hide();\n    button.onclick = ()=>{\n        text.show();\n        const { dataStore: dataStore } = viewDownload;\n        const jsonText = (0, $c7e60aaa60caf2ba$export$2e2bcd8739ae039)(dataStore);\n        text.setText(jsonText);\n    };\n    button2.onclick = ()=>{\n        button.onclick();\n        const url = `data:text/json;charset=utf-8,${encodeURIComponent(text.value)}`;\n        dLink.setUrl(url);\n        const name = nameInput.value;\n        if (name !== \"\") dLink.setFileName(`${name}_data.json`);\n        dLink.show();\n    };\n    const clearDiv = document.createElement(\"div\");\n    const div = document.createElement(\"div\");\n    div.appendChild(button);\n    div.appendChild(button2);\n    div.appendChild(dLink.div);\n    div.appendChild(clearDiv);\n    div.appendChild(text.div);\n    layout.newElement(\"saveData\", div);\n}\n\n\n/**\r\n * Store Data for later download.\r\n * @param {Publisher} pub\r\n * @param {Changes} changes\r\n */ function $6ea632b5c3b5e633$export$2e2bcd8739ae039(pub, changes) {\n    const self = this;\n    pub.attach(self);\n    self.dataStore = {};\n    self.update = (simData)=>{\n        if (changes.checkNone()) return;\n        self.dataStore = simData;\n    };\n}\n\n\nfunction $27a88c686644d6b7$export$2e2bcd8739ae039(sim, layout, sandboxPath) {\n    const { commander: commander, changes: changes, pub: pub } = sim;\n    const nameInput = (0, $9d172173fc202277$export$2e2bcd8739ae039)(layout);\n    (0, $24352ace2ac39fb7$export$2e2bcd8739ae039)(layout, commander, sandboxPath, nameInput);\n    (0, $d66286cf65f83349$export$2e2bcd8739ae039)(layout, commander, sandboxPath, nameInput);\n    (0, $ea9d84d756d03b3a$export$2e2bcd8739ae039)(layout, commander, nameInput);\n    (0, $cd6c85e60f8aa8a9$export$2e2bcd8739ae039)(layout, commander, nameInput);\n    const viewDownload = new (0, $6ea632b5c3b5e633$export$2e2bcd8739ae039)(pub, changes);\n    (0, $ffbea7ab5447574f$export$2e2bcd8739ae039)(layout, nameInput, viewDownload);\n    return {\n        nameInput: nameInput\n    };\n}\n\n\nfunction $4ee537a4fc2875e5$export$2e2bcd8739ae039(sim, sandboxPath) {\n    const { changes: changes, simOptions: simOptions, pub: pub, update: update, init: init } = sim;\n    const viewMode = new (0, $6c551221973b5c3e$export$2e2bcd8739ae039)(pub, simOptions, changes);\n    const viewChanges = new (0, $c15271acf3d28b91$export$2e2bcd8739ae039)();\n    const layout = new (0, $12ee2d67b2ed26c8$export$2e2bcd8739ae039)((0, $79691b908ced9edf$export$2e2bcd8739ae039));\n    const { menu: menu } = (0, $ddc1b1b41893a253$export$2e2bcd8739ae039)(sim, layout, viewMode);\n    const { nameInput: nameInput } = (0, $27a88c686644d6b7$export$2e2bcd8739ae039)(sim, layout, sandboxPath);\n    const { screenMain: screenMain } = (0, $f6694c15466e1e4f$export$2e2bcd8739ae039)(sim, viewMode, layout, viewChanges, menu);\n    (0, $b23e710988ee2e33$export$2e2bcd8739ae039)(pub, changes);\n    function load(configURL, targetConfig) {\n        (0, $ae988ce85ac378d0$export$2e2bcd8739ae039)(configURL, targetConfig, init, nameInput);\n    }\n    window.requestAnimationFrame(viewLoop);\n    function viewLoop() {\n        update();\n        drawForeground();\n        window.requestAnimationFrame(viewLoop);\n    }\n    function drawForeground() {\n        if (viewChanges.checkNone() && screenMain.tweenGroup.getAll().length === 0) return;\n        screenMain.tweenGroup.update();\n        viewMode.clearForeground();\n        viewMode.renderForeground();\n        viewChanges.clear();\n    }\n    const div = layout.makeComponent();\n    return {\n        div: div,\n        load: load\n    };\n}\n\n\nfunction $1e211df273e64683$export$2e2bcd8739ae039(configURL, targetConfig, sandboxPath, comMessenger) {\n    const sim = (0, $42d022d2d0b7b2ca$export$2e2bcd8739ae039)(comMessenger);\n    const view = (0, $4ee537a4fc2875e5$export$2e2bcd8739ae039)(sim, sandboxPath);\n    const { div: div, load: load } = view;\n    load(configURL, targetConfig);\n    return div;\n}\n\n\nfunction $6b70d294cd0f8945$export$2e2bcd8739ae039(targetConfig, sandboxPath) {\n    const comMessenger = new (0, $c1a641038cdfa870$export$2e2bcd8739ae039)();\n    const divLink = document.createElement(\"button\");\n    divLink.className = \"button2\";\n    divLink.innerText = \"linked\";\n    divLink.style[\"vertical-align\"] = \"middle\";\n    divLink.style[\"min-width\"] = \"70px\";\n    divLink.style.margin = \"5px\";\n    const toggle = ()=>{\n        if (divLink.innerText === \"linked\") {\n            divLink.innerText = \"unlinked\";\n            comMessenger.setLinked(false);\n        } else {\n            divLink.innerText = \"linked\";\n            comMessenger.setLinked(true);\n        }\n    };\n    divLink.onclick = toggle;\n    const configURL = window.location;\n    const div1 = (0, $1e211df273e64683$export$2e2bcd8739ae039)(configURL, targetConfig, sandboxPath, comMessenger);\n    const div2 = (0, $1e211df273e64683$export$2e2bcd8739ae039)(configURL, targetConfig, sandboxPath, comMessenger);\n    div1.style.display = \"inline-block\";\n    div2.style.display = \"inline-block\";\n    div1.style[\"vertical-align\"] = \"top\";\n    div2.style[\"vertical-align\"] = \"top\";\n    const div = document.createElement(\"div\");\n    div.appendChild(div1);\n    div.appendChild(divLink);\n    div.appendChild(div2);\n    return div;\n}\n\n\nfunction $e2f6a1c4b27d5805$export$2e2bcd8739ae039() {\n    const targets = Array.from(document.getElementsByClassName(\"double_sandbox\"));\n    targets.forEach((target)=>{\n        const hasConfig = target.dataset.config !== undefined;\n        const targetConfig = hasConfig ? JSON.parse(target.dataset.config) : {};\n        const hasSandboxURL = target.dataset.sandboxurl !== undefined;\n        const sandboxPath = hasSandboxURL ? target.dataset.sandboxurl : \"\";\n        const div = (0, $6b70d294cd0f8945$export$2e2bcd8739ae039)(targetConfig, sandboxPath);\n        const parent = target.parentNode;\n        parent.appendChild(div);\n    });\n}\n\n\n/** @module */ \nfunction $fc8a485197a2007f$export$2e2bcd8739ae039() {\n    const targets = Array.from(document.getElementsByClassName(\"sandbox\"));\n    targets.forEach((target)=>{\n        const hasConfig = target.dataset.config !== undefined;\n        const targetConfig = hasConfig ? JSON.parse(target.dataset.config) : {};\n        const hasSandboxURL = target.dataset.sandboxurl !== undefined;\n        const sandboxPath = hasSandboxURL ? target.dataset.sandboxurl : \"\";\n        const configURL = window.location;\n        const div = (0, $1e211df273e64683$export$2e2bcd8739ae039)(configURL, targetConfig, sandboxPath);\n        const parent = target.parentNode;\n        parent.appendChild(div);\n    });\n}\n\n\n(0, $fc8a485197a2007f$export$2e2bcd8739ae039)();\n(0, $e2f6a1c4b27d5805$export$2e2bcd8739ae039)();\n\n\n\n})();\n//# sourceMappingURL=demo.js.map\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","\"use strict\";","/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */\nvar Easing = {\n    Linear: {\n        None: function (amount) {\n            return amount;\n        },\n    },\n    Quadratic: {\n        In: function (amount) {\n            return amount * amount;\n        },\n        Out: function (amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount;\n            }\n            return -0.5 * (--amount * (amount - 2) - 1);\n        },\n    },\n    Cubic: {\n        In: function (amount) {\n            return amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        },\n    },\n    Quartic: {\n        In: function (amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount;\n            }\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        },\n    },\n    Quintic: {\n        In: function (amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        },\n    },\n    Sinusoidal: {\n        In: function (amount) {\n            return 1 - Math.cos((amount * Math.PI) / 2);\n        },\n        Out: function (amount) {\n            return Math.sin((amount * Math.PI) / 2);\n        },\n        InOut: function (amount) {\n            return 0.5 * (1 - Math.cos(Math.PI * amount));\n        },\n    },\n    Exponential: {\n        In: function (amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function (amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            if ((amount *= 2) < 1) {\n                return 0.5 * Math.pow(1024, amount - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        },\n    },\n    Circular: {\n        In: function (amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function (amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        },\n    },\n    Elastic: {\n        In: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            amount *= 2;\n            if (amount < 1) {\n                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        },\n    },\n    Back: {\n        In: function (amount) {\n            var s = 1.70158;\n            return amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function (amount) {\n            var s = 1.70158;\n            return --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function (amount) {\n            var s = 1.70158 * 1.525;\n            if ((amount *= 2) < 1) {\n                return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            }\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        },\n    },\n    Bounce: {\n        In: function (amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function (amount) {\n            if (amount < 1 / 2.75) {\n                return 7.5625 * amount * amount;\n            }\n            else if (amount < 2 / 2.75) {\n                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            }\n            else if (amount < 2.5 / 2.75) {\n                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            }\n            else {\n                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n            }\n        },\n        InOut: function (amount) {\n            if (amount < 0.5) {\n                return Easing.Bounce.In(amount * 2) * 0.5;\n            }\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        },\n    },\n};\n\nvar now;\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\n// eslint-disable-next-line\n// @ts-ignore\nif (typeof self === 'undefined' && typeof process !== 'undefined' && process.hrtime) {\n    now = function () {\n        // eslint-disable-next-line\n        // @ts-ignore\n        var time = process.hrtime();\n        // Convert [seconds, nanoseconds] to milliseconds.\n        return time[0] * 1000 + time[1] / 1000000;\n    };\n}\n// In a browser, use self.performance.now if it is available.\nelse if (typeof self !== 'undefined' && self.performance !== undefined && self.performance.now !== undefined) {\n    // This must be bound, because directly assigning this function\n    // leads to an invocation exception in Chrome.\n    now = self.performance.now.bind(self.performance);\n}\n// Use Date.now if it is available.\nelse if (Date.now !== undefined) {\n    now = Date.now;\n}\n// Otherwise, use 'new Date().getTime()'.\nelse {\n    now = function () {\n        return new Date().getTime();\n    };\n}\nvar now$1 = now;\n\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */\nvar Group = /** @class */ (function () {\n    function Group() {\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n    }\n    Group.prototype.getAll = function () {\n        var _this = this;\n        return Object.keys(this._tweens).map(function (tweenId) {\n            return _this._tweens[tweenId];\n        });\n    };\n    Group.prototype.removeAll = function () {\n        this._tweens = {};\n    };\n    Group.prototype.add = function (tween) {\n        this._tweens[tween.getId()] = tween;\n        this._tweensAddedDuringUpdate[tween.getId()] = tween;\n    };\n    Group.prototype.remove = function (tween) {\n        delete this._tweens[tween.getId()];\n        delete this._tweensAddedDuringUpdate[tween.getId()];\n    };\n    Group.prototype.update = function (time, preserve) {\n        if (time === void 0) { time = now$1(); }\n        if (preserve === void 0) { preserve = false; }\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0) {\n            return false;\n        }\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while (tweenIds.length > 0) {\n            this._tweensAddedDuringUpdate = {};\n            for (var i = 0; i < tweenIds.length; i++) {\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve) {\n                    delete this._tweens[tweenIds[i]];\n                }\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n        return true;\n    };\n    return Group;\n}());\n\n/**\n *\n */\nvar Interpolation = {\n    Linear: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function (v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for (var i = 0; i <= n; i++) {\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor((f = m * (1 + k)));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        }\n        else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function (p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function (n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: (function () {\n            var a = [1];\n            return function (n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for (var i = n; i > 1; i--) {\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        })(),\n        CatmullRom: function (p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        },\n    },\n};\n\n/**\n * Utils\n */\nvar Sequence = /** @class */ (function () {\n    function Sequence() {\n    }\n    Sequence.nextId = function () {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}());\n\nvar mainGroup = new Group();\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar Tween = /** @class */ (function () {\n    function Tween(_object, _group) {\n        if (_group === void 0) { _group = mainGroup; }\n        this._object = _object;\n        this._group = _group;\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._goToEnd = false;\n    }\n    Tween.prototype.getId = function () {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function () {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function () {\n        return this._isPaused;\n    };\n    Tween.prototype.to = function (properties, duration) {\n        // TODO? restore this, then update the 07_dynamic_to example to set fox\n        // tween's to on each update. That way the behavior is opt-in (there's\n        // currently no opt-out).\n        // for (const prop in properties) this._valuesEnd[prop] = properties[prop]\n        this._valuesEnd = Object.create(properties);\n        if (duration !== undefined) {\n            this._duration = duration;\n        }\n        return this;\n    };\n    Tween.prototype.duration = function (d) {\n        this._duration = d;\n        return this;\n    };\n    Tween.prototype.start = function (time) {\n        if (this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for (var property in this._valuesStartRepeat) {\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time !== undefined ? (typeof time === 'string' ? now$1() + parseFloat(time) : time) : now$1();\n        this._startTime += this._delayTime;\n        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);\n        return this;\n    };\n    Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {\n        for (var property in _valuesEnd) {\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? 'array' : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === 'undefined' || propType === 'function') {\n                continue;\n            }\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) {\n                    continue;\n                }\n                // handle an array of relative values\n                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));\n                // Create a local copy of the Array with the start value at the front\n                _valuesEnd[property] = [startValue].concat(endValues);\n            }\n            // handle the deepness of the values\n            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                // eslint-disable-next-line\n                for (var prop in startValue) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property][prop] = startValue[prop];\n                }\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {}; // TODO? repeat nested values? And yoyo? And array values?\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);\n            }\n            else {\n                // Save the starting value, but only once.\n                if (typeof _valuesStart[property] === 'undefined') {\n                    _valuesStart[property] = startValue;\n                }\n                if (!startValueIsArray) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                }\n                if (isInterpolationList) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                }\n                else {\n                    _valuesStartRepeat[property] = _valuesStart[property] || 0;\n                }\n            }\n        }\n    };\n    Tween.prototype.stop = function () {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) {\n            this._onStopCallback(this._object);\n        }\n        return this;\n    };\n    Tween.prototype.end = function () {\n        this._goToEnd = true;\n        this.update(Infinity);\n        return this;\n    };\n    Tween.prototype.pause = function (time) {\n        if (time === void 0) { time = now$1(); }\n        if (this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = true;\n        this._pauseStart = time;\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        return this;\n    };\n    Tween.prototype.resume = function (time) {\n        if (time === void 0) { time = now$1(); }\n        if (!this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function () {\n        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n            this._chainedTweens[i].stop();\n        }\n        return this;\n    };\n    Tween.prototype.group = function (group) {\n        this._group = group;\n        return this;\n    };\n    Tween.prototype.delay = function (amount) {\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function (times) {\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function (amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function (yoyo) {\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function (easingFunction) {\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function (interpolationFunction) {\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    Tween.prototype.chain = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function (callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function (callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function (callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function (callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function (callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     */\n    Tween.prototype.update = function (time, autoStart) {\n        if (time === void 0) { time = now$1(); }\n        if (autoStart === void 0) { autoStart = true; }\n        if (this._isPaused)\n            return true;\n        var property;\n        var elapsed;\n        var endTime = this._startTime + this._duration;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (time > endTime)\n                return false;\n            if (autoStart)\n                this.start(time);\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) {\n            return true;\n        }\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) {\n                this._onStartCallback(this._object);\n            }\n            this._onStartCallbackFired = true;\n        }\n        elapsed = (time - this._startTime) / this._duration;\n        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) {\n            this._onUpdateCallback(this._object, elapsed);\n        }\n        if (elapsed === 1) {\n            if (this._repeat > 0) {\n                if (isFinite(this._repeat)) {\n                    this._repeat--;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for (property in this._valuesStartRepeat) {\n                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {\n                        this._valuesStartRepeat[property] =\n                            // eslint-disable-next-line\n                            // @ts-ignore FIXME?\n                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    }\n                    if (this._yoyo) {\n                        this._swapEndStartRepeatValues(property);\n                    }\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) {\n                    this._reversed = !this._reversed;\n                }\n                if (this._repeatDelayTime !== undefined) {\n                    this._startTime = time + this._repeatDelayTime;\n                }\n                else {\n                    this._startTime = time + this._delayTime;\n                }\n                if (this._onRepeatCallback) {\n                    this._onRepeatCallback(this._object);\n                }\n                return true;\n            }\n            else {\n                if (this._onCompleteCallback) {\n                    this._onCompleteCallback(this._object);\n                }\n                for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    this._chainedTweens[i].start(this._startTime + this._duration);\n                }\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {\n        for (var property in _valuesEnd) {\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) {\n                _object[property] = this._interpolationFunction(end, value);\n            }\n            else if (typeof end === 'object' && end) {\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._updateProperties(_object[property], start, end, value);\n            }\n            else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === 'number') {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function (start, end) {\n        if (typeof end !== 'string') {\n            return end;\n        }\n        if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n            return start + parseFloat(end);\n        }\n        else {\n            return parseFloat(end);\n        }\n    };\n    Tween.prototype._swapEndStartRepeatValues = function (property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === 'string') {\n            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        }\n        else {\n            this._valuesStartRepeat[property] = this._valuesEnd[property];\n        }\n        this._valuesEnd[property] = tmp;\n    };\n    return Tween;\n}());\n\nvar VERSION = '18.6.4';\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */\nvar TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\nvar getAll = TWEEN.getAll.bind(TWEEN);\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\nvar add = TWEEN.add.bind(TWEEN);\nvar remove = TWEEN.remove.bind(TWEEN);\nvar update = TWEEN.update.bind(TWEEN);\nvar exports = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now$1,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    getAll: getAll,\n    removeAll: removeAll,\n    add: add,\n    remove: remove,\n    update: update,\n};\n\nexport default exports;\nexport { Easing, Group, Interpolation, Sequence, Tween, VERSION, add, getAll, nextId, now$1 as now, remove, removeAll, update };\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import '@paretoman/votekit-add-sandboxes'\r\n","import addDoubleSandboxes from './addDoubleSandboxes.js'\r\nimport addSingleSandboxes from './addSingleSandboxes.js'\r\n\r\naddSingleSandboxes()\r\naddDoubleSandboxes()\r\n","/** @module */\r\n\r\nimport doubleSandbox from './doubleSandbox.js'\r\n\r\n/** Find all the divs of class \"double_sandbox\".\r\n * Add the double_sandbox as a neighbor under the same parent. */\r\nexport default function addDoubleSandboxes() {\r\n    const targets = Array.from(document.getElementsByClassName('double_sandbox'))\r\n    targets.forEach((target) => {\r\n        const hasConfig = target.dataset.config !== undefined\r\n        const targetConfig = (hasConfig) ? JSON.parse(target.dataset.config) : {}\r\n\r\n        const hasSandboxURL = target.dataset.sandboxurl !== undefined\r\n        const sandboxPath = hasSandboxURL ? target.dataset.sandboxurl : ''\r\n\r\n        const div = doubleSandbox(targetConfig, sandboxPath)\r\n        const parent = target.parentNode\r\n        parent.appendChild(div)\r\n    })\r\n}\r\n","/** @module */\r\n\r\nimport { ComMessenger } from '@paretoman/votekit-sim'\r\nimport sandbox from './sandbox.js'\r\n\r\n/**\r\n * Makes Two sandboxes and links their commands together.\r\n * @param {Object} config - To pass to commander to set the initial configuration of the sim.\r\n * @param {String} sandboxPath - String to add to the current url directory to get to the sandbox.\r\n * @returns {HTMLElement} - div containing the two sandboxes.\r\n */\r\nexport default function doubleSandbox(targetConfig, sandboxPath) {\r\n    const comMessenger = new ComMessenger()\r\n\r\n    const divLink = document.createElement('button')\r\n    divLink.className = 'button2'\r\n    divLink.innerText = 'linked'\r\n    divLink.style['vertical-align'] = 'middle'\r\n    divLink.style['min-width'] = '70px'\r\n    divLink.style.margin = '5px'\r\n    const toggle = () => {\r\n        if (divLink.innerText === 'linked') {\r\n            divLink.innerText = 'unlinked'\r\n            comMessenger.setLinked(false)\r\n        } else {\r\n            divLink.innerText = 'linked'\r\n            comMessenger.setLinked(true)\r\n        }\r\n    }\r\n    divLink.onclick = toggle\r\n\r\n    const configURL = window.location\r\n    const div1 = sandbox(configURL, targetConfig, sandboxPath, comMessenger)\r\n    const div2 = sandbox(configURL, targetConfig, sandboxPath, comMessenger)\r\n    div1.style.display = 'inline-block'\r\n    div2.style.display = 'inline-block'\r\n\r\n    div1.style['vertical-align'] = 'top'\r\n    div2.style['vertical-align'] = 'top'\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(div1)\r\n    div.appendChild(divLink)\r\n    div.appendChild(div2)\r\n    return div\r\n}\r\n","import Sim from './sim/Sim.js'\r\nimport Changes from './sim/Changes.js'\r\nimport ComMessenger from './command/ComMessenger.js'\r\nimport getTestGeometry from './geometry/getTestGeometry.js'\r\nimport { getStrategy } from './voters/VoterShapeList.js'\r\n\r\nexport default Sim\r\nexport {\r\n    Changes,\r\n    ComMessenger,\r\n    getTestGeometry,\r\n    getStrategy,\r\n}\r\n","import Changes from './Changes.js'\r\nimport Commander from '../command/Commander.js'\r\nimport SimOptions from '../options/SimOptions.js'\r\nimport ElectionOptionsMan from '../options/ElectionOptionsMan.js'\r\nimport Entities from '../entities/Entities.js'\r\nimport SimMode from '../modes/SimMode.js'\r\nimport addDefaultEntities from '../entities/addDefaultEntities.js'\r\nimport Publisher from './Publisher.js'\r\nimport Districts from '../geometry/Districts.js'\r\n\r\nexport default function Sim(comMessenger) {\r\n    const changes = new Changes()\r\n\r\n    const commander = new Commander(comMessenger)\r\n\r\n    const simOptions = new SimOptions(changes, commander)\r\n    const electionOptionsMan = new ElectionOptionsMan(changes, simOptions, commander)\r\n\r\n    const entities = new Entities(changes, commander)\r\n    const districts = new Districts(entities.voterShapeList, changes, electionOptionsMan, simOptions)\r\n    const pub = new Publisher()\r\n    const simMode = new SimMode(pub, entities, districts, changes, simOptions, electionOptionsMan)\r\n\r\n    function init(config) {\r\n        addDefaultEntities(entities)\r\n\r\n        commander.loadConfig(config)\r\n        commander.clearHistory()\r\n    }\r\n\r\n    function update() {\r\n        simMode.update()\r\n    }\r\n\r\n    return {\r\n        changes, commander, simOptions, electionOptionsMan, entities, districts, simMode, pub, init, update,\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { jcopy } from '@paretoman/votekit-utilities'\r\n\r\n/**\r\n * Keep track of changes that occur to a simulation's configuration.\r\n * Manage dependent calculations because we only want to do calculations if we need to.\r\n * @constructor\r\n */\r\nexport default function Changes() {\r\n    const self = this\r\n\r\n    const changes = ['init']\r\n\r\n    self.add = (changeList) => {\r\n        changeList.forEach(\r\n            (c) => changes.push(c),\r\n        )\r\n    }\r\n    self.check = (changeList) => {\r\n        let n = 0\r\n        changeList.forEach(\r\n            (c) => { n += changes.includes(c) ? 1 : 0 },\r\n        )\r\n        return n > 0\r\n    }\r\n    self.checkNone = () => (changes.length === 0)\r\n    self.checkAny = () => (changes.length !== 0)\r\n    self.clear = () => {\r\n        changes.splice(0, changes.length)\r\n    }\r\n    self.numChanges = () => changes.length\r\n    self.getChanges = () => jcopy(changes) // debugging\r\n}\r\n","/**\r\n * Javascript Utilities.\r\n * Just a few helpful functions that are self-contained and don't need much context.\r\n * @module */\r\n\r\nimport makeCandidateDistributionCDF from './makeCandidateDistributionCDF.js'\r\n\r\nexport { makeCandidateDistributionCDF }\r\nexport * from './math.js'\r\nexport * from './statistics.js'\r\nexport * from './minmax.js'\r\nexport * from './copy.js'\r\n","/** @module */\r\n\r\nimport { getCDF } from './statistics.js'\r\n\r\nexport default function makeCandidateDistributionCDF(canDnGeoms, dimensions) {\r\n    const proportion = (dimensions === 1) ? canDnGeoms.map((cd) => cd.w) : canDnGeoms.map((cd) => cd.w ** 2)\r\n    const canDnCDF = getCDF(proportion)\r\n    return canDnCDF\r\n}\r\n","/** @module */\r\n\r\nconst coefInvSqrt2Pi = 1 / (Math.sqrt(2 * Math.PI))\r\n\r\nexport function normPDF(x, mean, sd) {\r\n    const coef = coefInvSqrt2Pi / sd\r\n    return coef * Math.exp(-0.5 * ((x - mean) / sd) ** 2)\r\n}\r\n\r\nexport function normCDF(x, mean, sd) {\r\n    if (x === Infinity) {\r\n        return 1\r\n    } if (x === -Infinity) {\r\n        return 0\r\n    }\r\n    return 0.5 * erf((x - mean) / (sd * Math.sqrt(2))) + 0.5\r\n}\r\n\r\nfunction erf(x) {\r\n    const ERF_A = 0.147\r\n    const x2 = x ** 2\r\n    const down = 1 + ERF_A * x2\r\n    const up = 4 / Math.PI + ERF_A * x2\r\n    const ratio = -(up / down) * x2\r\n    const expofun = Math.exp(ratio)\r\n    const radical = Math.sqrt(1 - expofun)\r\n    const z = radical * Math.sign(x)\r\n    return z\r\n}\r\n\r\n/**\r\n * Make a cumulative distribution function CDF for a set of proportions.\r\n * @param {number[]} proportion - Doesn't have to add to 1. Will normalize.\r\n * @returns {number[]} cdf - Use with randomIndexFromCDF\r\n */\r\nexport function getCDF(proportion) {\r\n    // probability mass function\r\n    const pmf = normalizePDF(proportion)\r\n\r\n    // https://stackoverflow.com/a/20477613\r\n    // [5, 10, 3, 2];\r\n    // [5, 15, 18, 20]\r\n    // cumulative distribution function\r\n    const cdf = []\r\n    pmf.reduce((p, c, i) => {\r\n        const a = p + c\r\n        cdf[i] = a\r\n        return a\r\n    }, 0)\r\n\r\n    return cdf\r\n}\r\n\r\nexport function normalizePDF(pdf) {\r\n    const sum = pdf.reduce((p, c) => p + c)\r\n    return pdf.map((p) => p / sum)\r\n}\r\n\r\nexport function pdfFromCdf(a) {\r\n    return a.map((x, i) => {\r\n        if (i === 0) {\r\n            return x\r\n        }\r\n        return x - a[i - 1]\r\n    })\r\n}\r\n\r\nexport function randomIndexFromCDF(cdf, rng) {\r\n    // sample from distribution\r\n    // pick a random number from 0 to 1\r\n    const random1 = rng()\r\n    const index = cdf.findIndex((x) => x >= random1)\r\n    return index\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * List the indices of an array of length n.\r\n * @param {number} n - length of array\r\n * @returns {number[]} - A number array from 0 to n-1.\r\n */\r\nexport function range(n) {\r\n    const a = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        a[i] = i\r\n    }\r\n    return a\r\n}\r\n\r\nexport function sumArray(a) {\r\n    return a.reduce((p, c) => p + c)\r\n}\r\n\r\nexport function last(a) {\r\n    const n = a.length\r\n    return a[n - 1]\r\n}\r\n","/** @module */\r\n\r\nexport function minIndex(a) {\r\n    let min = Infinity\r\n    let iClosest = null\r\n    for (let i = 0; i < a.length; i++) {\r\n        const d = a[i]\r\n        if (d < min) {\r\n            min = d\r\n            iClosest = i\r\n        }\r\n    }\r\n    return iClosest\r\n}\r\n\r\nexport function maxIndex(a) {\r\n    let max = -Infinity\r\n    let iMax = null\r\n    for (let i = 0; i < a.length; i++) {\r\n        const d = a[i]\r\n        if (d > max) {\r\n            max = d\r\n            iMax = i\r\n        }\r\n    }\r\n    return iMax\r\n}\r\n\r\nexport function minMax(a) {\r\n    let min = a[0]\r\n    let max = a[0]\r\n    for (let i = 0; i < a.length; i++) {\r\n        const d = a[i]\r\n        if (d < min) {\r\n            min = d\r\n        }\r\n        if (d > max) {\r\n            max = d\r\n        }\r\n    }\r\n    return [min, max]\r\n}","/** @module */\r\n\r\n/**\r\n * Try to deepcopy an object.\r\n * @param {object} a - an object to copy.\r\n * @returns {object} A copy of a.\r\n */\r\nexport function jcopy(a) {\r\n    return JSON.parse(JSON.stringify(a))\r\n}\r\n\r\nexport function copyArrayShallow(a) {\r\n    const n = a.length\r\n    const b = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        b[i] = a[i]\r\n    }\r\n    return b\r\n}\r\n\r\nexport function copyArrayShallow2(a) {\r\n    const n = a.length\r\n    const b = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const m = a[i].length\r\n        b[i] = Array(m)\r\n        for (let k = 0; k < m; k++) {\r\n            b[i][k] = a[i][k]\r\n        }\r\n    }\r\n    return b\r\n}\r\n","/** @module */\r\n\r\nimport CommandStore from './CommandStore.js'\r\nimport ComMessenger from './ComMessenger.js'\r\nimport ConfigKeeper from './ConfigKeeper.js'\r\nimport History from './History.js'\r\n\r\n/**\r\n * Both the command pattern and the memento pattern are used here.\r\n * Commands are performed to make changes to the mementos.\r\n *\r\n * Memento Pattern:\r\n *  Caretaker: ConfigKeeper class. It keeps config as a list of mementos.\r\n *  Originator: sender returned by CommandStore.addSender, used by menuItem, Candidate, Voter, etc\r\n *  Mementos: Config is a list of mementos. It's not a strict pattern.\r\n *  Also, the way we are storing commands is like storing mementos of a commands (not strictly).\r\n *\r\n * Command Pattern:\r\n * * Client: a CandidateCommander, VoterCommander, MenuItem, etc\r\n * * Command: Here, a command is a memento of a way to make a command.\r\n *     CommandStore stores lists of ways to make commands.\r\n *     mostly with a name and an action.\r\n *     Also, History stores a list of commands.\r\n *  Sender: A sender is returned by CommandStore.addSender.\r\n *  Receiver: a property of a Candidate, Voter, MenuItem, etc.\r\n *  For example, Candidate.setXY calls CandidateCommander.setXYSenderForList.go(id, value),\r\n *    which then calls Candidate.setXYAction to set Candidate.x and Candidate.y\r\n *\r\n * This isn't exactly either pattern.\r\n * Instead of commands with execute functions,\r\n * we use CommandStore, a class that stores lists of ways to make commands, given parameters.\r\n * Instead of mementos, the lists of ways to make commands act as mementos.\r\n *\r\n * Initially, the three component classes here were part of one larger class,\r\n * but hopefully it is easier to read code that is shorter and sticks to one context.\r\n * This class is similar to the mediator in the mediator pattern.\r\n *\r\n * References:\r\n * * [Command Pattern on refactoring.guru](https://refactoring.guru/design-patterns/command)\r\n * * [Memento Pattern on refactoring.guru](https://refactoring.guru/design-patterns/memento)\r\n * * [Mediator Pattern on refactoring.guru](https://refactoring.guru/design-patterns/mediator)\r\n * @constructor\r\n */\r\nexport default function Commander(optComMessenger) {\r\n    const self = this\r\n\r\n    const commandStore = new CommandStore(self)\r\n    const configKeeper = new ConfigKeeper(self)\r\n    const history = new History(self)\r\n    const comMessenger = optComMessenger || new ComMessenger()\r\n    comMessenger.addCommander(self)\r\n\r\n    /**\r\n     * A menu item or other object can add an action that it wants to execute with a value.\r\n     * The action can be performed by calling commander.do(command),\r\n     * where command has a name and value.\r\n     * @param {Object} args - argument catchall\r\n     * @param {String} args.name - The name of the action.\r\n     * @param {Function} args.action - The action function itself, which is called with a value.\r\n     */\r\n\r\n    // make a sender with a command and a way to do the command\r\n    self.addSender = (args) => {\r\n        configKeeper.addSender(args)\r\n        const sender = commandStore.addSender(args)\r\n        return sender\r\n    }\r\n\r\n    /** Say we want to change a value for the nth candidate.\r\n     * And say the nth candidate doesn't exist.\r\n     * Then we have to use an action which acts on the list of candidates,\r\n     * rather than the candidate itself.\r\n     */\r\n\r\n    /**\r\n     * Make a sender with a command and a way to do the command.\r\n     * This type of sender deals with lists.\r\n     * @param {Object} args\r\n     * @returns {Object} - methods command(id,value) and go(id,value)\r\n     */\r\n    self.addSenderForList = (args) => {\r\n        const sender = commandStore.addSenderForList(args)\r\n        sender.getCurrentValue = configKeeper.addSenderForList(args)\r\n        return sender\r\n    }\r\n\r\n    /**\r\n     * Actually execute the action.\r\n     * @param {Object} command -\r\n     */\r\n    self.execute = (command) => {\r\n        configKeeper.execute(command)\r\n        commandStore.execute(command)\r\n    }\r\n\r\n    // ConfigKeeper functions\r\n\r\n    self.makeUndo = configKeeper.makeUndo\r\n    self.passLoadConfig = configKeeper.passLoadConfig\r\n    self.passLoadCommands = configKeeper.passLoadCommands\r\n    self.getConfig = configKeeper.getConfig\r\n\r\n    self.loadConfig = (newConfig) => {\r\n        // the broadcast will call passLoadConfig\r\n        comMessenger.broadcastLoadConfig(newConfig, self)\r\n    }\r\n\r\n    self.loadCommands = (commands) => {\r\n        // the broadcast will call passLoadComands\r\n        comMessenger.broadCastLoadCommands(commands, self)\r\n    }\r\n\r\n    // History functions\r\n\r\n    /**\r\n     * Put a commandMessenger in the middle,\r\n     * between the command being asked for and the command being done.\r\n     * @param {Object} command - a command to do. See passDo.\r\n     */\r\n    self.do = (command) => {\r\n        // the broadcast will call passDo\r\n        comMessenger.broadcastDo(command, self)\r\n    }\r\n\r\n    self.doCommands = (commands) => {\r\n        // the broadcast will call passDoCommands\r\n        comMessenger.broadcastDoCommands(commands, self)\r\n    }\r\n\r\n    self.passDo = history.passDo\r\n    self.passDoCommands = history.passDoCommands\r\n    self.undo = history.undo\r\n    self.redo = history.redo\r\n    self.clearHistory = history.clearHistory\r\n}\r\n","/**\r\n * Keep a\r\n * @param {Commander} commander  */\r\nexport default function CommandStore(commander) {\r\n    const self = this\r\n\r\n    // A list of actions we can execute (for sender)\r\n    const actions = []\r\n\r\n    /**\r\n     * A menu item or other object can add an action that it wants to execute with a value.\r\n     * The action can be performed by calling commander.do(command),\r\n     * where command has a name and value.\r\n     * @param {String} name - The name of the action.\r\n     * @param {Function} action - The action function itself, which is called with a value.\r\n     */\r\n    self.addSender = (args) => {\r\n        const {\r\n            name, action, props,\r\n        } = args\r\n\r\n        actions[name] = action\r\n        const command = (value) => ({ name, value, props })\r\n        const go = (value) => commander.do(command(value))\r\n        const load = (value) => commander.loadCommands([command(value)])\r\n        const sender = { command, go, load }\r\n        return sender\r\n    }\r\n\r\n    /**\r\n     * Make a sender with a command and a way to do the command.\r\n     * This type of sender deals with lists.\r\n     *\r\n     * Say we want to change a value for the nth candidate.\r\n     * And say the nth candidate doesn't exist.\r\n     * Then we have to use an action which acts on the list of candidates,\r\n     * rather than the candidate itself.\r\n     *\r\n     * @param {Object} args\r\n     * @returns {Object} - methods command(id,value) and go(id,value)\r\n     */\r\n    self.addSenderForList = (args) => {\r\n        const {\r\n            name, action, props,\r\n        } = args\r\n\r\n        actions[name] = action\r\n        const command = (id, value, currentValue) => ({\r\n            name, id, value, props, currentValue,\r\n        })\r\n        const go = (id, value, currentValue) => commander.do(command(id, value, currentValue))\r\n        const load = (id, value, currentValue) => commander.loadCommands([command(id, value, currentValue)])\r\n        const sender = { command, go, load }\r\n        return sender\r\n    }\r\n\r\n    /**\r\n     * Actually execute the action.\r\n     * @param {Object} command -\r\n     */\r\n    self.execute = (command) => {\r\n        const { name, id, value } = command\r\n        const action = actions[name]\r\n        if (id !== undefined) {\r\n            action(id, value)\r\n        } else {\r\n            action(value)\r\n        }\r\n    }\r\n}\r\n","/** @module */\r\n\r\n/** Connect two sandboxes by passing messages between their commanders.\r\n * This is kind of like a mediator pattern, but also maybe an observer pattern. */\r\nexport default class ComMessenger {\r\n    /** Make sure broadcasted commands don't trigger broadcasts */\r\n\r\n    // All variables are intended to be private.\r\n\r\n    constructor() {\r\n        this.linked = true\r\n        this.commanders = []\r\n        this.protect = false\r\n    }\r\n\r\n    setLinked(value) {\r\n        this.linked = value\r\n    }\r\n\r\n    addCommander(commander) {\r\n        this.commanders.push(commander)\r\n    }\r\n\r\n    broadcastDo(command, originCommander) {\r\n        if (this.linked && this.protect === false) {\r\n            this.protect = true\r\n            this.commanders.forEach((com) => com.passDo(command))\r\n            this.protect = false\r\n        } else {\r\n            originCommander.passDo(command)\r\n        }\r\n    }\r\n\r\n    broadcastDoCommands(commands, originCommander) {\r\n        if (this.linked && this.protect === false) {\r\n            this.protect = true\r\n            this.commanders.forEach(\r\n                (com) => com.passDoCommands(commands),\r\n            )\r\n            this.protect = false\r\n        } else {\r\n            originCommander.passDoCommands(commands)\r\n        }\r\n    }\r\n\r\n    broadcastLoadConfig(newConfig, originCommander) {\r\n        if (this.linked && this.protect === false) {\r\n            this.protect = true\r\n            this.commanders.forEach(\r\n                (com) => com.passLoadConfig(newConfig),\r\n            )\r\n            this.protect = false\r\n        } else {\r\n            originCommander.passLoadConfig(newConfig)\r\n        }\r\n    }\r\n\r\n    broadCastLoadCommands(commands, originCommander) {\r\n        if (this.linked && this.protect === false) {\r\n            this.protect = true\r\n            this.commanders.forEach(\r\n                (com) => com.passLoadCommands(commands),\r\n            )\r\n            this.protect = false\r\n        } else {\r\n            originCommander.passLoadCommands(commands)\r\n        }\r\n    }\r\n}\r\n","/** Handle the Config */\r\nexport default function ConfigKeeper(commander) {\r\n    const self = this\r\n\r\n    // The list of all mementos\r\n    const config = {}\r\n\r\n    const firstActions = []\r\n\r\n    /**\r\n     * A menu item or other object can add an action that it wants to execute with a value.\r\n     * The action can be performed by calling commander.do(command),\r\n     * where command has a name and value.\r\n     * @param {String} name - The name of the action.\r\n     * @param {Function} action - The action function itself, which is called with a value.\r\n     */\r\n    self.addSender = (args) => {\r\n        const { name, currentValue, props } = args\r\n        if (props !== undefined && props.isFirstAction) {\r\n            firstActions[name] = true\r\n        }\r\n        config[name] = currentValue\r\n    }\r\n\r\n    /**\r\n     * Make a sender with a command and a way to do the command.\r\n     * This type of sender deals with lists.\r\n     *\r\n     * Say we want to change a value for the nth candidate.\r\n     * And say the nth candidate doesn't exist.\r\n     * Then we have to use an action which acts on the list of candidates,\r\n     * rather than the candidate itself.\r\n     *\r\n     * @param {Object} args\r\n     * @returns {Function} - a method to get the current value at an id.\r\n     */\r\n    self.addSenderForList = (args) => {\r\n        const { name, props } = args\r\n        if (props !== undefined && props.isFirstAction) {\r\n            firstActions[name] = true\r\n        }\r\n        config[name] = []\r\n\r\n        const getCurrentValue = (id) => config[name][id]\r\n        return getCurrentValue\r\n    }\r\n\r\n    /**\r\n     * Update the config when executing a command.\r\n     * @param {Object} command -\r\n     */\r\n    self.execute = (command) => {\r\n        const { name, id, value } = command\r\n        if (id !== undefined) {\r\n            config[name][id] = value\r\n        } else {\r\n            config[name] = value\r\n        }\r\n    }\r\n\r\n    self.makeUndo = (command) => {\r\n        const { name, id, props } = command // command is {name, value, props}\r\n\r\n        // Store the current value so we can undo the command.\r\n        let currentValue\r\n        if (id === undefined) {\r\n            currentValue = config[name]\r\n        } else {\r\n            currentValue = config[name][id]\r\n            if (currentValue === undefined) {\r\n                currentValue = command.currentValue\r\n            }\r\n        }\r\n\r\n        // Store how to undo the command.\r\n        const undoCommand = {\r\n            name, id, value: currentValue, props,\r\n        }\r\n\r\n        return undoCommand\r\n    }\r\n\r\n    self.passLoadConfig = (newConfig) => {\r\n        // newConfig is a list of commands to execute.\r\n        self.loadConfigPriority(newConfig, 'high')\r\n        self.loadConfigPriority(newConfig, 'low')\r\n    }\r\n\r\n    self.loadConfigPriority = (newConfig, priority) => {\r\n        // newConfig is a list of commands to execute.\r\n        const names = Object.keys(newConfig)\r\n        names.forEach((name) => {\r\n            // Decide whether to process commands, based on their priority.\r\n            const isHigh = firstActions[name] !== undefined\r\n            if (priority === 'low' && isHigh) {\r\n                return\r\n            }\r\n            if (priority === 'high' && !isHigh) {\r\n                return\r\n            }\r\n\r\n            // if we have a list, then create commands for each item in the list\r\n            const valueArray = newConfig[name]\r\n            if (valueArray instanceof Array) {\r\n                valueArray.forEach((value, id) => {\r\n                    // const subValue = newConfig[name][id]\r\n                    const command = { name, id, value }\r\n                    commander.execute(command)\r\n                })\r\n            } else {\r\n                const value = valueArray\r\n                const command = { name, value }\r\n                commander.execute(command)\r\n            }\r\n        })\r\n    }\r\n\r\n    self.passLoadCommands = (commands) => {\r\n        // execute commands without adding to history\r\n        commands.forEach((command) => {\r\n            commander.execute(command)\r\n        })\r\n    }\r\n\r\n    self.getConfig = () => structuredClone(config)\r\n}\r\n","export default function History(commander) {\r\n    const self = this\r\n\r\n    // Keep commands and undos in history\r\n    const history = []\r\n    let head = -1 // Head is where we are in history, where our head is at.\r\n\r\n    self.clearHistory = () => {\r\n        history.splice(0, history.length)\r\n        head = -1\r\n    }\r\n\r\n    /**\r\n     * We want to do a command. We need to keep track of what we do so we can undo it.\r\n     * @param {Object} command\r\n     * @param {String} command.name\r\n     * @param {(String|Number|Boolean)} command.value\r\n     * @param {Object} command.props - a catchall for easier coding\r\n     */\r\n    self.passDo = (command) => {\r\n        const undoCommand = commander.makeUndo(command)\r\n\r\n        // remove future redos\r\n        // example: head:-1 means history will be cleared splice(0,length)\r\n        history.splice(head + 1, history.length - (head + 1))\r\n\r\n        // Actually preform the command.\r\n        commander.execute(command)\r\n\r\n        // Add command to history\r\n        if (command.props && command.props.combineWithCurrentCommand && head > -1) {\r\n            // combine with current command.\r\n            history[head].push({ command, undoCommand })\r\n        } else {\r\n            history.push([{ command, undoCommand }])\r\n            head += 1\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Do a set of commands together, so they have one history item.\r\n     * @param {Object[]} commands - a list of command objects\r\n     */\r\n    self.passDoCommands = (commands) => {\r\n        // remove future redos\r\n        // example: head:-1 means history will be cleared splice(0,length)\r\n        history.splice(head + 1, history.length - (head + 1))\r\n\r\n        const historyItem = []\r\n        commands.forEach((command) => {\r\n        // todo: make into one undo item\r\n\r\n            const undoCommand = commander.makeUndo(command)\r\n\r\n            // Store in one history item\r\n            historyItem.push({ command, undoCommand })\r\n\r\n            // Actually preform the command.\r\n            commander.execute(command)\r\n        })\r\n\r\n        // Add command to history\r\n        history.push(historyItem)\r\n        head += 1\r\n    }\r\n\r\n    // control the duration of the setXY undos with a timeout. Here's a default timeout.\r\n    const chainDuration = 30\r\n    let chainTimer = setTimeout(() => null, chainDuration)\r\n\r\n    self.undo = () => {\r\n        if (head === -1) return // There is no history\r\n\r\n        const last = history[head]\r\n        last.forEach((pair) => { commander.execute(pair.undoCommand) })\r\n\r\n        head -= 1 // Now we're in the past.\r\n\r\n        // If we're in a setXY chain, then continue with another undo after a pause.\r\n        const { undoCommand } = last[0]\r\n        if (undoCommand.props === undefined) return\r\n        if (undoCommand.props.isChain !== true) return\r\n        if (head === -1) return\r\n        const penUltimate = history[head][0]\r\n        if (penUltimate.undoCommand.props.isChain !== true) return\r\n        if (penUltimate.undoCommand.name !== undoCommand.name) return\r\n        if (undoCommand.id !== undefined && penUltimate.undoCommand.id !== undoCommand.id) return\r\n\r\n        // todo: make this only work for repeated setXY commands\r\n        // set timer and callback\r\n        clearTimeout(chainTimer)\r\n        chainTimer = setTimeout(self.undo, chainDuration)\r\n    }\r\n\r\n    self.redo = () => {\r\n        if (head === history.length - 1) return // Nothing to do\r\n\r\n        const next = history[head + 1]\r\n        next.forEach((pair) => commander.execute(pair.command))\r\n\r\n        head += 1 // Now we're in the future.\r\n\r\n        // If we're in a setXY chain, then continue with another redo after a pause.\r\n        const { command } = next[0]\r\n        if (command.props === undefined) return\r\n        if (command.props.isChain !== true) return\r\n        if (head === history.length - 1) return\r\n        const nextnext = history[head + 1][0]\r\n        if (nextnext.command.props.isChain !== true) return\r\n        if (nextnext.command.name !== command.name) return\r\n        if (command.id !== undefined && nextnext.command.id !== command.id) return\r\n\r\n        // todo: make this only work for repeated setXY commands\r\n        // set timer and callback\r\n        clearTimeout(chainTimer)\r\n        chainTimer = setTimeout(self.redo, chainDuration)\r\n    }\r\n}\r\n","/**\r\n * Add menu items to switch between types of sim modes.\r\n * @param {Menu} menu\r\n */\r\nexport default function SimOptions(changes, commander) {\r\n    const self = this\r\n\r\n    self.init = () => {\r\n        // Defaults\r\n        self.setMode('one')\r\n        self.setDimensions(2)\r\n        self.seeds = [0]\r\n        self.setSeedRandom(true)\r\n    }\r\n\r\n    self.setMode = commander.addSender({\r\n        name: 'mode',\r\n        currentValue: self.mode,\r\n        action(mode) {\r\n            self.mode = mode\r\n            changes.add(['mode'])\r\n        },\r\n    }).go\r\n\r\n    self.setDimensions = commander.addSender({\r\n        name: 'dimensions',\r\n        currentValue: self.dimensions,\r\n        action(dimensions) {\r\n            self.dimensions = dimensions\r\n            changes.add(['dimensions'])\r\n        },\r\n    }).go\r\n\r\n    self.setSeeds = commander.addSenderForList({\r\n        name: 'seeds',\r\n        action(i, seed) {\r\n            self.seeds[i] = seed\r\n            changes.add(['seeds'])\r\n        },\r\n        props: { combineWithCurrentCommand: true },\r\n    }).go\r\n\r\n    self.setSeedRandom = commander.addSender({\r\n        name: 'seedRandom',\r\n        currentValue: self.seedRandom,\r\n        action(seedRandom) {\r\n            self.seedRandom = seedRandom\r\n            changes.add(['seedRandom'])\r\n        },\r\n    }).go\r\n\r\n    self.resultsPhaseBySeq = {\r\n        general: 'general',\r\n        closedPrimary: 'general',\r\n        nonpartisanOpenPrimary: 'general',\r\n    }\r\n    self.setResultsPhase = (sequence, val) => {\r\n        self.resultsPhaseBySeq[sequence] = val\r\n        changes.add(['resultsPhase'])\r\n    }\r\n\r\n    self.resultsPartyBySeq = {\r\n        general: undefined,\r\n        closedPrimary: 0,\r\n        nonpartisanOpenPrimary: undefined,\r\n    }\r\n    self.setResultsParty = (sequence, val) => {\r\n        self.resultsPartyBySeq[sequence] = val\r\n        changes.add(['resultsParty'])\r\n    }\r\n\r\n    self.init()\r\n}\r\n","/** @module */\r\n\r\nimport CastOptionsMan from './CastOptionsMan.js'\r\nimport SequenceOptionsMan from './SequenceOptionsMan.js'\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport default function ElectionOptionsMan(changes, simOptions, commander) {\r\n    const self = this\r\n\r\n    const optionsBag = {\r\n        pollCount: 5,\r\n        numSampleCandidates: 5,\r\n    }\r\n    self.castOptionsMan = new CastOptionsMan(changes, simOptions, optionsBag)\r\n    self.sequenceOptionsMan = new SequenceOptionsMan(changes, commander)\r\n\r\n    self.init = () => {\r\n        // Defaults\r\n        self.sequenceOptionsMan.init()\r\n        self.setNumTracts(1)\r\n        self.setNumDistricts(1)\r\n    }\r\n\r\n    self.setNumDistricts = commander.addSender({\r\n        name: 'numDistricts',\r\n        currentValue: optionsBag.numDistricts,\r\n        action(n) {\r\n            optionsBag.numDistricts = n\r\n            const useDistricts = n > 1\r\n            const useTracts = optionsBag.numTracts > 1\r\n            optionsBag.useGeography = useTracts || useDistricts\r\n            changes.add(['numDistricts'])\r\n        },\r\n    }).go\r\n\r\n    self.setNumTracts = commander.addSender({\r\n        name: 'numTracts',\r\n        currentValue: optionsBag.numTracts,\r\n        action(n) {\r\n            optionsBag.numTracts = n\r\n            const useTracts = n > 1\r\n            const useDistricts = optionsBag.numDistricts > 1\r\n            optionsBag.useGeography = useTracts || useDistricts\r\n            changes.add(['numTracts'])\r\n        },\r\n    }).go\r\n\r\n    self.update = () => {\r\n        self.castOptionsMan.update()\r\n        self.sequenceOptionsMan.update()\r\n\r\n        if (changes.check(['socialChoiceMethod'])) {\r\n            const sequenceOptions = self.sequenceOptionsMan.getOptions()\r\n            const { sequenceName } = sequenceOptions\r\n            const { finalPhaseBySequence } = self.sequenceOptionsMan\r\n            const finalPhaseName = finalPhaseBySequence[sequenceName]\r\n\r\n            const { socialChoiceType } = sequenceOptions.sequences[sequenceName].phases[finalPhaseName]\r\n            if (socialChoiceType === 'allocation') {\r\n                optionsBag.numSampleCandidates = 10\r\n            } else if (socialChoiceType === 'multiWinner') {\r\n                optionsBag.numSampleCandidates = 10\r\n            } else { // 'singleWinner'\r\n                optionsBag.numSampleCandidates = 5\r\n            }\r\n        }\r\n    }\r\n\r\n    self.getOptions = () => {\r\n        const ob = { ...optionsBag }\r\n        ob.castOptions = self.castOptionsMan.getOptions()\r\n        ob.sequenceOptions = self.sequenceOptionsMan.getOptions()\r\n        return ob\r\n    }\r\n\r\n    self.init()\r\n}\r\n","export default function CastOptionsMan(changes, simOptions, optionsBag) {\r\n    const self = this\r\n\r\n    const castOptions = {\r\n        usr: 4,\r\n        verbosity: 2,\r\n    }\r\n\r\n    self.update = () => {\r\n        if (changes.check(['mode']) || changes.check(['numTracts'])) {\r\n            if (simOptions.mode === 'one') {\r\n                if (optionsBag.numTracts === 1) {\r\n                    castOptions.verbosity = 2\r\n                    castOptions.usr = 4\r\n                } else {\r\n                    castOptions.verbosity = 1\r\n                    castOptions.usr = 32\r\n                }\r\n            } else { // mode = \"sample\"\r\n                castOptions.verbosity = 0\r\n                if (optionsBag.numTracts === 1) {\r\n                    castOptions.usr = 16\r\n                } else {\r\n                    castOptions.usr = 32\r\n                }\r\n            }\r\n        }\r\n    }\r\n    self.getOptions = () => ({ ...castOptions })\r\n}\r\n","import PhaseOptionsMan from './PhaseOptionsMan.js'\r\n\r\nexport default function SequenceOptionsMan(changes, commander) {\r\n    const self = this\r\n\r\n    self.sequences = {\r\n        general: {\r\n            phases: {\r\n                general: new PhaseOptionsMan('general', 'general', changes, commander),\r\n            },\r\n        },\r\n        closedPrimary: {\r\n            phases: {\r\n                closedPrimary: new PhaseOptionsMan('closedPrimary', 'closedPrimary', changes, commander),\r\n                general: new PhaseOptionsMan('closedPrimary', 'general', changes, commander),\r\n            },\r\n        },\r\n        nonpartisanOpenPrimary: {\r\n            phases: {\r\n                nonpartisanOpenPrimary: new PhaseOptionsMan('nonpartisanOpenPrimary', 'nonpartisanOpenPrimary', changes, commander),\r\n                general: new PhaseOptionsMan('nonpartisanOpenPrimary', 'general', changes, commander),\r\n            },\r\n        },\r\n    }\r\n\r\n    self.finalPhaseBySequence = {\r\n        general: 'general',\r\n        closedPrimary: 'general',\r\n        nonpartisanOpenPrimary: 'general',\r\n    }\r\n\r\n    const phaseOptionsManList = []\r\n    Object.keys(self.sequences).forEach((sequenceName) => {\r\n        const { phases } = self.sequences[sequenceName]\r\n        Object.keys(phases).forEach((phaseName) => {\r\n            phaseOptionsManList.push(phases[phaseName])\r\n        })\r\n    })\r\n\r\n    const sequenceOptions = {}\r\n\r\n    self.init = () => {\r\n        self.setSequenceName('general')\r\n        phaseOptionsManList.forEach((phaseOptionsMan) => {\r\n            phaseOptionsMan.init()\r\n        })\r\n    }\r\n\r\n    self.setSequenceName = commander.addSender({\r\n        name: 'sequenceName',\r\n        currentValue: sequenceOptions.sequenceName,\r\n        action(n) {\r\n            sequenceOptions.sequenceName = n\r\n            changes.add(['sequenceName'])\r\n        },\r\n    }).go\r\n\r\n    self.update = () => {\r\n        phaseOptionsManList.forEach((phaseOptionsMan) => {\r\n            phaseOptionsMan.update()\r\n        })\r\n    }\r\n    self.getOptions = () => {\r\n        const s = { ...sequenceOptions }\r\n        s.sequences = {}\r\n        Object.keys(self.sequences).forEach((sequenceName) => {\r\n            s.sequences[sequenceName] = { phases: {} }\r\n            const { phases } = self.sequences[sequenceName]\r\n            Object.keys(phases).forEach((phaseName) => {\r\n                s.sequences[sequenceName].phases[phaseName] = self.sequences[sequenceName].phases[phaseName].getOptions()\r\n            })\r\n        })\r\n        return s\r\n    }\r\n}\r\n","import { socialChoiceMethodMetadataByFunctionName } from '@paretoman/votekit-social-choice-methods'\r\nimport SocialChoiceOptionsMan from './SocialChoiceOptionsMan.js'\r\n\r\nexport default function PhaseOptionsMan(sequenceName, phaseName, changes, commander) {\r\n    const self = this\r\n\r\n    const phaseOptions = {\r\n        socialChoiceMethod: 'plurality',\r\n        voteCasterName: 'plurality',\r\n        socialChoiceType: 'singleWinner',\r\n        socialChoiceOptions: {\r\n            seats: 1,\r\n            threshold: 0.1,\r\n        },\r\n    }\r\n\r\n    self.socialChoiceOptionsMan = new SocialChoiceOptionsMan(changes, phaseOptions)\r\n\r\n    self.setSocialChoiceMethod = commander.addSender({\r\n        name: `socialChoiceMethod-sequence-${sequenceName}-phase-${phaseName}`,\r\n        currentValue: phaseOptions.socialChoiceMethod,\r\n        action(functionName) {\r\n            phaseOptions.socialChoiceMethod = functionName\r\n            const metadata = socialChoiceMethodMetadataByFunctionName[functionName]\r\n            phaseOptions.voteCasterName = metadata.voteCasterName\r\n            phaseOptions.socialChoiceType = metadata.socialChoiceType\r\n            changes.add(['socialChoiceMethod'])\r\n        },\r\n    }).go\r\n\r\n    self.init = () => {\r\n        self.setSocialChoiceMethod('plurality')\r\n    }\r\n    self.update = () => {\r\n        self.socialChoiceOptionsMan.update()\r\n        phaseOptions.socialChoiceOptions = self.socialChoiceOptionsMan.getOptions()\r\n    }\r\n    self.getOptions = () => {\r\n        const po = { ...phaseOptions }\r\n        po.socialChoiceOptions = self.socialChoiceOptionsMan.getOptions()\r\n\r\n        return po\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { pluralityMetadata } from './plurality.js'\r\nimport { randomCandidateMetadata } from './randomCandidate.js'\r\nimport { huntingtonHillMetadata } from './huntingtonHill.js'\r\nimport { scoreMetadata } from './score.js'\r\nimport { stvMetadata } from './stv.js'\r\nimport { minimaxMetadata } from './minimax.js'\r\nimport { olprAMetadata } from './olprA.js'\r\nimport { dHondtMetadata } from './dHondt.js'\r\nimport { sainteLagueMetadata } from './sainteLague.js'\r\nimport { allocatedScoreMetadata } from './allocatedScore.js'\r\nimport { methodOfEqualSharesMetadata } from './methodOfEqualShares.js'\r\nimport { randomVoterMetadata } from './randomVoter.js'\r\nimport { sntvMetadata } from './sntv.js'\r\n\r\n/** a collection of social choice methods in some order\r\n *  */\r\nexport const socialChoiceMethodMetadata = [\r\n    pluralityMetadata,\r\n    randomCandidateMetadata,\r\n    huntingtonHillMetadata,\r\n    scoreMetadata,\r\n    stvMetadata,\r\n    minimaxMetadata,\r\n    olprAMetadata,\r\n    dHondtMetadata,\r\n    sainteLagueMetadata,\r\n    allocatedScoreMetadata,\r\n    methodOfEqualSharesMetadata,\r\n    randomVoterMetadata,\r\n    sntvMetadata,\r\n]\r\n\r\nconst socialChoiceMethods = {}\r\nexport const socialChoiceMethodMetadataByFunctionName = {}\r\n\r\nsocialChoiceMethodMetadata.forEach((x) => {\r\n    socialChoiceMethods[x.functionName] = x.elect\r\n    socialChoiceMethodMetadataByFunctionName[x.functionName] = x\r\n})\r\n\r\nexport default socialChoiceMethods\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport { maxIndex } from '@paretoman/votekit-utilities'\r\n\r\n/**\r\n * the candidate with the highest tally wins\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function plurality(votes) {\r\n    const { voteFractionsByCan } = votes.candidateTallies\r\n    const iWinner = maxIndex(voteFractionsByCan)\r\n\r\n    const socialChoiceResults = { iWinner }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const pluralityMetadata = {\r\n    name: 'Plurality',\r\n    shortName: 'Plurality',\r\n    functionName: 'plurality',\r\n    voteCasterName: 'plurality',\r\n    socialChoiceType: 'singleWinner',\r\n    elect: plurality,\r\n}\r\n","export * as typesCanBorders from './typesCanBorders.js'\r\nexport * as typesCast from './typesCast.js'\r\nexport * as typesGeometry from './typesGeometry.js'\r\nexport * as typesGeoms from './typesGeoms.js'\r\nexport * as typesGrid from './typesGrid.js'\r\nexport * as typesMath from './typesMath.js'\r\nexport * as typesPoints from './typesPoints.js'\r\nexport * as typesSocialChoice from './typesSocialChoice.js'\r\nexport * as typesVote from './typesVote.js'\r\nexport * as typesVoteArrays from './typesVoteArrays.js'\r\nexport * as typesVotes from './typesVotes.js'\r\nexport * as typesVotesForGeom from './typesVotesForGeom.js'\r\nexport * as typesVotesForGeomGrid from './typesVotesForGeomGrid.js'\r\n","import * as typesMath from './typesMath.js'\r\n\r\n/**\r\n * @namespace typesCanBorders\r\n */\r\n\r\n/**\r\n * @typedef {object} canBorders\r\n * @property {pairwiseIntervals1D} [pairwiseIntervals1D]\r\n * @property {voronoiIntervals1D} [voronoiIntervals1D]\r\n * @property {voronoiLines2D} [voronoiLines2D]\r\n * @property {rankingIntervals1D} [rankingIntervals1D]\r\n * @memberof typesCanBorders\r\n */\r\n\r\n/**\r\n * @typedef {object} pairwiseIntervals1D\r\n * @property {number[][]} midpoints - midpoint for every pair of candidates\r\n * @property {number[][]} iLower - true if first candidate of pair is lower in x coordinate than second.\r\n * @memberof typesCanBorders\r\n */\r\n/**\r\n * @typedef {object} voronoiIntervals1D\r\n * @memberof typesCanBorders\r\n */\r\n/**\r\n * @typedef {typesMath.lineHomogeneous[]} voronoiLines2D\r\n * @memberof typesCanBorders\r\n */\r\n/**\r\n * @typedef {object} rankingIntervals1D\r\n * @memberof typesCanBorders\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesMath\r\n */\r\n/**\r\n * @typedef {number[]} lineHomogeneous - line in homogeneous coordinates, [ax, ay, b],\r\n * ax * x + ay * y = b\r\n * @memberof typesMath\r\n */\r\n/**\r\n * @typedef {object} vector2D\r\n * @property {number} x\r\n * @property {number} y\r\n * @memberof typesMath\r\n */\r\n\r\nexport default {}\r\n","// How exporting types works:\r\n// https://stackoverflow.com/a/73232942\r\n/**\r\n * @namespace typesCast\r\n */\r\n\r\n/**\r\n * @typedef {object} castOptions - options for how to cast votes.\r\n * @property {number} usr - undersampling ratio. Sample grid points faster by reducing resolution in each dimension by this factor.\r\n * @property {number} verbosity - how much to store in votes data structure.\r\n * @memberof typesCast\r\n */\r\n\r\nexport default {}\r\n","import * as geoms from './typesGeoms.js'\r\nimport * as typesPoints from './typesPoints.js'\r\n\r\n// How exporting types works:\r\n// https://stackoverflow.com/a/73232942\r\n/**\r\n * @namespace typesGeometry\r\n */\r\n/**\r\n * @typedef {object} geometry - geometry for casting votes\r\n * @property {geoms.canPoints} canPoints\r\n * @property {geoms.voterGeoms} voterGeoms\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @property {string} [strategySeed]\r\n * @property {object} [voterStrategyList]\r\n * @memberof typesGeometry\r\n */\r\n\r\n/**\r\n * @typedef {object} parties - describes parties each candidate belongs to.\r\n * @property {number[]} partiesByCan - each candidate has party.\r\n * @property {number} numParties - total number of parties.\r\n * @memberof typesGeometry\r\n */\r\n\r\n/**\r\n * @typedef {object} testGeometry -geometry for casting one vote\r\n * @property {typesPoints.points} canPoints\r\n * @property {typesPoints.points} voterPoints\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @memberof typesGeometry\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesGeoms\r\n */\r\n/**\r\n * @typedef {canPoint1D[] | canPoint2D[]} canPoints - geometries for a number of candidates.\r\n * For 2D, an array of objects: {x,y}. For 1D, an array of objects: {x}.\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {voterGeom1D[] | voterGeom2D[]} voterGeoms - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {voterGeom1D | voterGeom2D} voterGeom - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {number} canPoint1D - the point where a candidate sits in 1D - x position\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {number[]} canPoint2D - the point where a candidate sits in 2D- [x,y] position\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {object} voterGeom1D - the geometry of a voter distribution in 1D\r\n * @property {number} x - x position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {object} voterGeom2D - the geometry of a voter distribution in 2D\r\n * @property {number} x - x position\r\n * @property {number} y - y position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesPoints\r\n */\r\n\r\n/**\r\n * @typedef {point[]} points - For 2D, an array of objects: {x,y,w}. For 1D, an array of objects: {x,w,densityProfile}.\r\n */\r\n/**\r\n * @typedef {point1D | point2D} point\r\n */\r\n/**\r\n * @typedef {number} point1D - a point in 1D, x coordinate in policy space.\r\n * @memberof typesPoints\r\n */\r\n/**\r\n * @typedef {number[]} point2D - a point in 2D, [x,y] coordinates in policy space.\r\n * @memberof typesPoints\r\n */\r\n\r\nexport default {}\r\n","import * as typesGeoms from './typesGeoms.js'\r\nimport * as typesPoints from './typesPoints.js'\r\n\r\n/**\r\n * @namespace typesGrid\r\n */\r\n/**\r\n * @typedef {grid1D | grid2D} grid - data for points on a grid\r\n */\r\n/**\r\n * @typedef {object} grid1D - data for points on a 1D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {typesGeoms.voterGeom1D} voterGeom - the geometry of a voter distribution in 1D\r\n * @memberof typesGrid\r\n */\r\n/**\r\n* @typedef {object} gridX\r\n* @property {number[]} gridX - x coordinates for grid points\r\n* @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n* @property {number} gridPointLength - size of grid point's region in policy space. density * length = count.\r\n * @memberof typesGrid\r\n */\r\n\r\n/**\r\n * @typedef {object} grid2D - data for points on a 2D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} y - y coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number} nx - number of x coordinates\r\n * @property {number} ny - number of y coordinates\r\n * @property {number} width - width and height of grid in pixels. grid is square.\r\n * @property {typesPoints.point2D[]} voterPoints - grid points in point2D format\r\n * @property {typesGeoms.voterGeom2D} voterGeom - the geometry of a voter distribution in 2D\r\n * @memberof typesGrid\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesSocialChoice\r\n */\r\n\r\n/**\r\n * @typedef {object} socialChoiceOptions - options to specify a social choice function.\r\n * @property {number} [seats] - Number of candidates to elect.\r\n * @property {number[]} [seatLimits] - Upper limit of number of candidates to elect from each party, useful for OLPR.\r\n * @property {number} [threshold] - The minimum fraction of voters that a party needs to be eligible for a seat.\r\n * @memberof typesSocialChoice\r\n */\r\n\r\n/**\r\n * @typedef {object} socialChoiceResults - the results returned from a social choice function.\r\n * @property {number} [iWinner]\r\n * @property {number[]} [allocation] - says whether each candidate is elected (1) or not (0).\r\n * Allocation also applies to parties. It says how many seats were allocated to each party.\r\n * @memberof typesSocialChoice\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesVote\r\n */\r\n\r\n/**\r\n * @typedef rankingVote - a rank for each candidate.\r\n * @property {number[]} cansByRank - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[][]} [netWinsPairwise] - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */\r\n\r\n/**\r\n * @typedef pairwiseVote - how candidates compare head-to-head.\r\n * @property {number[][]} netWinsPairwise - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [cansByRank] - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */\r\n\r\n/**\r\n * @typedef pluralityVote - a choice of a candidate.\r\n * @property {number} pluralityVote - the chosen candidate.\r\n * A candidate is represented as an integer from 0 to a max.\r\n * The max is the number of candidates minus 1.\r\n * @property {number[]} [pluralityAllocation] - an array of 0's except for a 1 for the chosen candidate.\r\n * @memberof typesVote\r\n */\r\n\r\n/**\r\n * @typedef scoreVote - a score for each candidate.\r\n * @property {number[]} scoreVote - an array of scores, indexed by candidate\r\n * A score is a number between 0 and 1.\r\n * In the future, maybe integers between 0 and a maximum score.\r\n * @memberof typesVote\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesVoteArrays\r\n */\r\n/**\r\n * @typedef {object[][]} scoreVotes - Each preference has a score for each candidate.\r\n * @memberof typesVoteArrays\r\n */\r\n/**\r\n * @typedef {object[][]} rankings - Each preference has a rank for each candidate.\r\n * @memberof typesVoteArrays\r\n */\r\n/**\r\n * @typedef {number[][][]} cansByRankList - Each preference is a list indexed by ranking.\r\n * A list of candidates is at each ranking.\r\n * The first index is a group of voters who share the same ranking.\r\n * The second index is the rank number.\r\n * The third index is for a list of candidates at that rank.\r\n * @memberof typesVoteArrays\r\n */\r\nexport default {}\r\n","import * as typesVotesForGeom from './typesVotesForGeom.js'\r\nimport * as typesGeometry from './typesGeometry.js'\r\nimport * as typesVoteArrays from './typesVoteArrays.js'\r\n\r\n/**\r\n * @namespace typesVotes\r\n */\r\n/**\r\n * @typedef {object} votes - The vote a data structure that contains the information needed to elect, explain, and visualize.\r\n * @property {preferenceLists} [preferenceLists] - Lists of preferences.\r\n * @property {preferenceTallies} [preferenceTallies] - How many votes have a listed preference.\r\n * @property {candidateTallies} [candidateTallies] - vote tallies indexed by candidate\r\n * @property {pairwiseTallies} [pairwiseTallies] - pairwise tallies\r\n * @property {typesVotesForGeom.votesForGeom[]} [votesByGeom] - Vote data for each voter geometry. A list of votesForGeom.\r\n * @property {typesGeometry.parties} [parties] - describes parties each candidate belongs to.\r\n * @property {number} numCans - the number of candidates, comes in handy.\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} preferenceLists - Lists of preferences.\r\n * @property {typesVoteArrays.scoreVotes} [scoreVotes]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} [cansByRankList]\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} preferenceTallies - How many votes have a listed preference.\r\n * @property {number[]} voteFractions - The fraction of voters who share the same preference.\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} candidateTallies - vote tallies indexed by candidate\r\n * @property {number[]} [voteFractionsByCan] - The fraction of plurality votes for each candidate.\r\n * @property {number[]} [scoreFractionAverageByCan] - the average fractional score for each candidate.\r\n * @property {number[]} [firstPreferenceFractions] - A list of fractions of voters\r\n * who ranked a candidate first, indexed by candidate.\r\n * @property {number[]} [bordaFractionAverageByCan] - The average fractional borda score for a candidate.\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} pairwiseTallies - pairwise tallies\r\n * @property {number[][]} winFractionPairwise - The fraction of wins for the first of a pair of candidates.\r\n * who preferred candidate i over k, indexed by [i][k].\r\n * @memberof typesVotes\r\n */\r\n\r\nexport default {}\r\n","import * as typesVoteArrays from './typesVoteArrays.js'\r\nimport * as typesVotesForGeomGrid from './typesVotesForGeomGrid.js'\r\n\r\n/**\r\n * @namespace typesVotesForGeom\r\n */\r\n/**\r\n * @typedef {typesVotesForGeomGrid.votesForGeomGrid | votesForGeomCells | votesForGeomIntervals | votesForGeomPlurality} votesForGeom\r\n */\r\n\r\n/**\r\n * @typedef {object} votesForGeomCells - Vote data for just one voter geometry in the form of 2D cells.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @property {number[]} voteCounts - number of votes for each cell\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */\r\n/**\r\n * @typedef {object} rankingPolygons2D - calculated cells of 2D policy space where voters share the same ranking.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @memberof typesVotesForGeom\r\n */\r\n\r\n/**\r\n * @typedef {object} votesForGeomIntervals - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} voteCounts - number of votes for each interval\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */\r\n/**\r\n * @typedef {object} rankingIntervals1D - calculated intervals of 1D policy space where voters share the same ranking.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */\r\n\r\n/**\r\n * @typedef {object} votesForGeomPlurality - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {number[]} countByCan - The number of plurality votes for a candidate.\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */\r\n\r\nexport default {}\r\n","import * as typesGrid from './typesGrid.js'\r\nimport * as typesVote from './typesVote.js'\r\nimport * as typesVoteArrays from './typesVoteArrays.js'\r\nimport * as typesGeoms from './typesGeoms.js'\r\n\r\n/**\r\n * @namespace typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {votesForGeomGridRanking | votesForGeomGridPairwise | votesForGeomGridPlurality | votesForGeomGridScore} votesForGeomGrid - Vote data for just one voter geometry in the form of a grid, 1D or 2D.\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridRanking\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.rankingVote[]} [voteSet] - a vote for each grid point\r\n * @property {number[]} voteCounts\r\n * @property {number} totalVotes\r\n * @property {number[]} [bordaFractionAverageByCan]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridPairwise\r\n * @property {typesGrid.grid} grid - data for points on a grid\r\n * @property {typesVote.rankingVote[]} voteSet - a vote for each grid point\r\n * @property {number} totalVotes\r\n * @property {number[]} bordaFractionAverageByCan\r\n * @property {number[][]} winsPairwise -  The number of wins for the first of a pair of candidates.\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridPlurality\r\n * @property {number[]} countByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.pluralityVote[]} [voteSet] - a vote for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridScore\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.scoreVote[]} [voteSet] - a vote for each grid point\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridScoreFull\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {number[]} voteCounts\r\n * @property {typesVote.scoreVote[]} voteSet - a vote for each grid point\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n\r\nexport default {}\r\n","/** @module */\r\nimport * as types from '@paretoman/votekit-types'\r\n/**\r\n * pick a random candidate as the winner\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function randomCandidate(votes) {\r\n    const { voteFractionsByCan } = votes.candidateTallies\r\n    const nk = voteFractionsByCan.length\r\n    const iWinner = Math.floor(Math.random() * nk)\r\n    const socialChoiceResults = { iWinner }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const randomCandidateMetadata = {\r\n    name: 'Random Candidate',\r\n    shortName: 'Rand Cand',\r\n    functionName: 'randomCandidate',\r\n    voteCasterName: 'plurality',\r\n    socialChoiceType: 'singleWinner',\r\n    elect: randomCandidate,\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport divisorGeneral from './divisorGeneral.js'\r\n\r\n/**\r\n * Run the Huntington-Hill method of apportionment and return an allocation of seats.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\n\r\nexport default function huntingtonHill(votes, socialChoiceOptions) {\r\n    const typeOfDivisor = 'huntingtonHill'\r\n    const socialChoiceResults = divisorGeneral(votes, socialChoiceOptions, typeOfDivisor)\r\n\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const huntingtonHillMetadata = {\r\n    name: 'Huntington Hill',\r\n    shortName: 'Huntington',\r\n    functionName: 'huntingtonHill',\r\n    voteCasterName: 'plurality', // for input\r\n    socialChoiceType: 'allocation', // for output\r\n    elect: huntingtonHill,\r\n}\r\n","/** @module */\r\n\r\nimport { copyArrayShallow, range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * Run a general divisor method of apportionment and return an allocation of seats.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\n\r\nexport default function divisorGeneral(votes, socialChoiceOptions, typeOfDivisor) {\r\n    const { seats, threshold, seatLimits } = socialChoiceOptions\r\n    const { voteFractionsByCan } = votes.candidateTallies\r\n\r\n    // find out how many parties pass the threshold\r\n    let populations = voteFractionsByCan.map(\r\n        (p) => ((p < threshold) ? 0 : p),\r\n    )\r\n    let positivePopulations = Array(populations.length)\r\n    for (let i = 0; i < populations.length; i++) {\r\n        positivePopulations[i] = ((populations[i] === 0) ? 0 : 1)\r\n    }\r\n\r\n    let nPositiveParties = positivePopulations.reduce(\r\n        (p, c) => p + c,\r\n    )\r\n\r\n    let makeAdjustment = nPositiveParties === 0\r\n\r\n    // Do we have limits to how many candidates are available in a party?\r\n    if (seatLimits !== undefined) {\r\n        // count how many candidates are available to fill seats\r\n        const candidatesAvailable = positivePopulations.map(\r\n            (p, i) => p * seatLimits[i],\r\n        ).reduce(\r\n            (p, c) => p + c,\r\n        )\r\n        if (candidatesAvailable < seats) {\r\n            makeAdjustment = true\r\n        }\r\n    }\r\n\r\n    // Make an adjustment.\r\n    // Remove the threshold if there are no parties past the threshold.\r\n    // Count the number of parties with positive populations.\r\n    if (makeAdjustment) {\r\n        populations = copyArrayShallow(voteFractionsByCan)\r\n        positivePopulations = populations.map(\r\n            (p) => ((p === 0) ? 0 : 1),\r\n        )\r\n        nPositiveParties = positivePopulations.reduce(\r\n            (p, c) => p + c,\r\n        )\r\n    }\r\n\r\n    // When there are more parties above the threshold than seats,\r\n    // we have to give each party a seat in order\r\n    // instead of continuing with the algorithm.\r\n    // This is because Huntington Hill has the first signpost at 0.\r\n    // This is just sntv.\r\n    // Also, in the edge case where no votes are cast for any parties,\r\n    // Just assign a default order however javascript sorts the list of presumably 0s.\r\n    if (typeOfDivisor === 'Huntington-Hill' && (nPositiveParties > seats || nPositiveParties === 0)) {\r\n        // sort parties by population\r\n        // sort decreasing\r\n        const populationsSorted = [...populations].sort(\r\n            (a, b) => b - a,\r\n        )\r\n        const minPopulation = populationsSorted[seats - 1]\r\n        const pops2 = voteFractionsByCan\r\n\r\n        // todo: consider ties\r\n        const allocation = pops2.map(\r\n            (p) => ((p >= minPopulation) ? 1 : 0),\r\n        )\r\n        const socialChoiceResults = { allocation }\r\n        return socialChoiceResults\r\n    }\r\n\r\n    // make a list of break points / divisors, independent of vote totals\r\n    let genDivisors\r\n    if (typeOfDivisor === 'huntingtonHill') {\r\n        genDivisors = (_, i) => Math.sqrt((i) * (i + 1))\r\n    } else if (typeOfDivisor === 'sainteLague') {\r\n        genDivisors = (_, i) => i + 0.5\r\n    } else if (typeOfDivisor === 'dHondt') {\r\n        genDivisors = (_, i) => i + 1\r\n    }\r\n    const divisorPattern = Array(seats).fill().map(genDivisors)\r\n\r\n    // Scale the divisor pattern for each party.\r\n    // Call them signposts, like Balinski and Young.\r\n    // Ref: Balinski and Young 1982, pages 60-66, Chapter 7, Overview of Methods.\r\n    // Really, these are the divisors for each party.\r\n    // They are also a ratio of the representatives to the population\r\n    // except that the divisorPattern is used to substitute a slightly different number\r\n    // than the number of respresentatives.\r\n\r\n    const signposts = []\r\n    const ids = []\r\n    let o = 0\r\n    for (let i = 0; i < populations.length; i++) {\r\n        const pop = populations[i]\r\n        if (pop === 0) continue\r\n\r\n        const numPosts = (seatLimits === undefined) ? seats : Math.min(seatLimits[i], seats)\r\n        for (let k = 0; k < numPosts; k++) {\r\n            signposts[o] = divisorPattern[k] / pop\r\n            ids[o] = i\r\n            o += 1\r\n        }\r\n    }\r\n\r\n    const doOld = false\r\n    if (doOld) {\r\n        return oldWay(seats, populations, signposts)\r\n    }\r\n\r\n    const order = range(ids.length).sort(\r\n        (a, b) => signposts[a] - signposts[b],\r\n    )\r\n\r\n    const allocation = Array(populations.length).fill(0)\r\n    for (let i = 0; i < seats; i++) {\r\n        const iId = order[i]\r\n        const iCan = ids[iId]\r\n        allocation[iCan] += 1\r\n    }\r\n\r\n    // Todo: consider if there is a tie.\r\n    // Right now, we give extra seats to all the tied parties if there is a tie.\r\n    const socialChoiceResults = { allocation }\r\n    return socialChoiceResults\r\n}\r\n\r\nfunction oldWay(seats, populations, signposts) {\r\n    // find last signpost to fill all seats\r\n    // sort increasing\r\n    const sortedSignposts = signposts.sort(\r\n        (a, b) => a - b,\r\n    )\r\n\r\n    const tolerance = 0.00000001 // add a little bit of tolerance for machine-accuracy\r\n    // hopefully there will not be any exact ties.\r\n    const lastSignpost = sortedSignposts[seats - 1] + tolerance\r\n\r\n    // In the jargon:\r\n    //   Divide by populations by the divisors to get the quotients.\r\n    // Or, more clearly:\r\n    //   Count how many signposts each party has passed.\r\n\r\n    // lastSignpost = d/p\r\n    // d = p * lastSignpost\r\n    // sqrt(i*(i+1)) = d\r\n    // i=0 is one seat\r\n    // n = i + 1\r\n    // sqrt(n*(n-1)) = d\r\n    // n**2 - n = d**2\r\n    // n = (-b + sqrt(b-4ac) ) / 2a\r\n    // a = 1, b = -1, c = -d**2\r\n    // n = (1 + sqrt(1+4d**2) ) / 2\r\n    const quotients = populations.map(\r\n        (p) => ((p === 0) ? 0 : (1 + Math.sqrt(1 + 4 * (p * lastSignpost) ** 2)) * 0.5),\r\n    )\r\n    const allocation = quotients.map(\r\n        (p) => Math.floor(p),\r\n    )\r\n    const socialChoiceResults = { allocation }\r\n    return socialChoiceResults\r\n}\r\n","/** @module */\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * the candidate with the highest tally wins\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function score(votes) {\r\n    const { scoreFractionAverageByCan } = votes.candidateTallies\r\n    const max = Math.max(...scoreFractionAverageByCan)\r\n    const iWinner = scoreFractionAverageByCan.indexOf(max)\r\n\r\n    const results = { iWinner }\r\n    return results\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const scoreMetadata = {\r\n    name: 'Score',\r\n    shortName: 'Score',\r\n    functionName: 'score',\r\n    voteCasterName: 'score', // for input\r\n    socialChoiceType: 'singleWinner',\r\n    elect: score,\r\n}\r\n","/** @module */\r\n\r\nimport { copyArrayShallow, maxIndex, minIndex, range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * Single Transferable Vote\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function stv(votes, socialChoiceOptions) {\r\n    const { firstPreferenceFractions } = votes.candidateTallies\r\n    const { voteFractions } = votes.preferenceTallies\r\n    const { cansByRankList } = votes.preferenceLists\r\n    const { seats } = socialChoiceOptions\r\n\r\n    const nk = firstPreferenceFractions.length\r\n    const nr = voteFractions.length\r\n\r\n    if (seats >= nk) {\r\n        // more seats than candidates, so elect all candidates\r\n        const allocation = Array(nk).fill(1)\r\n        const socialChoiceResults = { allocation }\r\n        return socialChoiceResults\r\n    }\r\n\r\n    // Candidates must have more votes than quota to be elected, as a fraction of total votes.\r\n    const quota = 1 / (seats + 1)\r\n\r\n    // start round\r\n    let resolved = false\r\n    // round (starts at 0)\r\n    let r = 0\r\n    // Count the number of candidates elected\r\n    const elected = []\r\n    // the current tally of first preferences among candidates still remaining\r\n    let tally = copyArrayShallow(firstPreferenceFractions)\r\n    // is the candidate still in the running? Alternatively, they have been eliminated.\r\n    const stillIn = Array(nk).fill(true)\r\n    let canInTally = range(nk)\r\n    // Which rank is currently being added to the tally?\r\n    const activeRank = Array(nr).fill(0)\r\n    // What is the weight of each group of voters?\r\n    const weight = Array(nr).fill(1)\r\n    // has the ballot been exhausted?\r\n    const exhausted = Array(nr).fill(false)\r\n\r\n    while (!resolved && r < nk) {\r\n        if (r !== 0) {\r\n            // tally top preferences\r\n            tally = Array(nk).fill(0)\r\n            for (let i = 0; i < cansByRankList.length; i++) {\r\n                if (exhausted[i]) continue\r\n                const ar = activeRank[i]\r\n                const canArs = cansByRankList[i][ar]\r\n                // candidates in the same rank each get full support\r\n                for (let k = 0; k < canArs.length; k++) {\r\n                    const canAr = canArs[k]\r\n                    tally[canAr] += voteFractions[i] * weight[i]\r\n                }\r\n            }\r\n            tally = tally.filter((_, i) => stillIn[i])\r\n            canInTally = range(nk).filter((i) => stillIn[i]) // candidate corresponding to tally\r\n        }\r\n\r\n        // either eliminate or elect\r\n        const siWinner = maxIndex(tally)\r\n        const iWinner = canInTally[siWinner]\r\n        const votesForWinner = tally[siWinner]\r\n        const elect = votesForWinner >= quota\r\n        let reweight = 1\r\n        let iEliminate\r\n        if (elect) {\r\n            // remove winning candidate\r\n            iEliminate = iWinner\r\n\r\n            // reweight and move activeRank forward\r\n            reweight = 1 - quota / votesForWinner\r\n\r\n            // is the counting done? Did we elect enough candidates?\r\n            elected.push(iWinner)\r\n            resolved = elected.length === seats\r\n        } else {\r\n            // remove losing candidate\r\n            const siLoser = minIndex(tally)\r\n            const iLoser = canInTally[siLoser]\r\n            iEliminate = iLoser\r\n        }\r\n\r\n        // eliminate a candidate and reweight if needed\r\n        stillIn[iEliminate] = false\r\n        for (let i = 0; i < cansByRankList.length; i++) {\r\n            if (exhausted[i]) continue\r\n            const ar = activeRank[i]\r\n            const canArs = cansByRankList[i][ar]\r\n            if (canArs.includes(iEliminate)) {\r\n                if (reweight !== 1) {\r\n                    weight[i] *= reweight // reweight if voter selected winner\r\n                }\r\n                // move activeRank forward\r\n                // while the current activeRank is not still in the running\r\n                // and while the ballot is not exhausted\r\n                let moveForward = !exhausted[i]\r\n                while (moveForward) {\r\n                    activeRank[i] += 1\r\n                    const arf = activeRank[i]\r\n\r\n                    // is ballot exhausted? then stop counting this ballot.\r\n                    if (arf === nk) {\r\n                        exhausted[i] = true\r\n                        break\r\n                    }\r\n\r\n                    const canArfs = cansByRankList[i][arf]\r\n\r\n                    // Only move forward if none of the candidates in this rank are still in.\r\n                    for (let k = 0; k < canArfs.length; k++) {\r\n                        const can = canArfs[k]\r\n                        moveForward = moveForward && !stillIn[can]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // increment round\r\n        r += 1\r\n    }\r\n\r\n    // sanity check\r\n    // We eliminated all the candidates, r == nk, but didn't get enough winners\r\n    if (!resolved) {\r\n        // eslint-disable-next-line no-console\r\n        console.warn('warning: STV ran over - eliminated all candidates.')\r\n    }\r\n\r\n    const allocation = Array(nk).fill(0)\r\n    for (let i = 0; i < elected.length; i++) {\r\n        const iWinner = elected[i]\r\n        allocation[iWinner] += 1\r\n    }\r\n    const socialChoiceResults = { allocation }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const stvMetadata = {\r\n    name: 'Single Transferable Vote',\r\n    shortName: 'STV',\r\n    functionName: 'stv',\r\n    voteCasterName: 'ranking', // for input\r\n    socialChoiceType: 'multiWinner',\r\n    elect: stv,\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * Disregard the weakest pairwise defeat until one candidate is unbeaten.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function minimax(votes) {\r\n    const { winFractionPairwise } = votes.pairwiseTallies\r\n    const n = winFractionPairwise.length\r\n\r\n    // make a list of number of losses\r\n    const losses = Array(n).fill(0)\r\n    const np = 0.5 * n * (n - 1)\r\n    const lossDegree = Array(n)\r\n    const loser = Array(np)\r\n    let o = 0\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let k = i + 1; k < n; k++) {\r\n            const iOverK = winFractionPairwise[i][k] - winFractionPairwise[k][i]\r\n            lossDegree[o] = Math.abs(iOverK)\r\n            // add a loss for each member of the pair\r\n            // ties go to i\r\n            const iLost = iOverK < 0\r\n            losses[i] += (iLost) ? 1 : 0\r\n            losses[k] += (!iLost) ? 1 : 0\r\n            loser[o] = (iLost) ? i : k\r\n            o += 1\r\n        }\r\n    }\r\n    // i lost to k by an amount\r\n\r\n    // sort the losses\r\n    const pSorted = range(np).sort((a, b) => lossDegree[a] - lossDegree[b])\r\n\r\n    // eliminate the smallest loss until one is undefeated\r\n    let iWinner = losses.findIndex((x) => x === 0)\r\n    let iNext = 0 // next pair to eliminate (sorted)\r\n    while (iWinner === -1) {\r\n        // find the index of the next loser whose loss will be eliminated.\r\n        const pLeast = pSorted[iNext]\r\n        const loserLeast = loser[pLeast]\r\n        // reduce the loss tally\r\n        losses[loserLeast] -= 1\r\n        // see if a candidate has no remaining losses.\r\n        iWinner = losses.findIndex((x) => x === 0)\r\n        iNext += 1\r\n    }\r\n\r\n    const socialChoiceResults = { iWinner }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const minimaxMetadata = {\r\n    name: 'Minimax',\r\n    shortName: 'Minimax',\r\n    functionName: 'minimax',\r\n    voteCasterName: 'pairwise', // for input\r\n    socialChoiceType: 'singleWinner',\r\n    elect: minimax,\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport sainteLague from './sainteLague.js'\r\nimport sntv from './sntv.js'\r\n\r\n/**\r\n * Run an Open List Proportional Representation method. Call this variant by the name \"A\".\r\n * Return a list of winning candidates and a list of allocated seats to parties.\r\n * A voter votes for a candidate. Party lists help candidates pool their votes.\r\n * Party lists are allocated seats. The most popular candidates in a party are elected.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\n\r\nexport default function olprA(votes, socialChoiceOptions) {\r\n    // Make a tally for each party.\r\n\r\n    // TODO: provide these variables in votes\r\n    const { voteFractionsByCan } = votes.candidateTallies\r\n    const { parties } = votes\r\n    const { partiesByCan, numParties } = parties\r\n    const numCans = voteFractionsByCan.length\r\n    const partyVotes = Array(numParties).fill(0)\r\n    const seatLimits = Array(numParties).fill(0)\r\n    for (let i = 0; i < numCans; i++) {\r\n        // Find which party the candidate belongs to - index of party.\r\n        const iParty = partiesByCan[i]\r\n        // Add tally to party.\r\n        partyVotes[iParty] += voteFractionsByCan[i]\r\n        seatLimits[iParty] += 1\r\n    }\r\n\r\n    // Find out how many seats each party gets.\r\n    // todo: change method\r\n    const socialChoiceOptions3 = { ...socialChoiceOptions }\r\n    socialChoiceOptions3.seatLimits = seatLimits\r\n    const votes3 = { candidateTallies: { voteFractionsByCan: partyVotes }, numCans }\r\n    const partyResults = sainteLague(votes3, socialChoiceOptions3)\r\n    const partyAllocation = partyResults.allocation\r\n\r\n    // Which candidates get the seats?\r\n    // Find the highest-scoring candidates.\r\n    const allocation = Array(numCans).fill(0)\r\n    for (let i = 0; i < numParties; i++) {\r\n        // Set inputs for SNTV.\r\n        const socialChoiceOptions2 = { seats: partyAllocation[i] }\r\n        const cansInParty = range(numCans).filter((k) => partiesByCan[k] === i)\r\n        const tfWithinParty = cansInParty.map((k) => voteFractionsByCan[k])\r\n        const totalTFInParty = tfWithinParty.reduce((p, c) => p + c, 0)\r\n        const fractionTfWithinParty = tfWithinParty.map((x) => x / totalTFInParty)\r\n        // Run sntv.\r\n        const votes2 = { candidateTallies: { voteFractionsByCan: fractionTfWithinParty }, numCans }\r\n        const socialChoiceInParty = sntv(votes2, socialChoiceOptions2)\r\n        const allocationInParty = socialChoiceInParty.allocation\r\n        // Store sntv results in allocation list for all candidates.\r\n        for (let k = 0; k < cansInParty.length; k++) {\r\n            const iCan = cansInParty[k]\r\n            allocation[iCan] = allocationInParty[k]\r\n        }\r\n    }\r\n\r\n    // Todo: consider if there is a tie.\r\n    const socialChoiceResults = { allocation }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const olprAMetadata = {\r\n    name: 'Open List Proportional Representation',\r\n    shortName: 'OLPR A',\r\n    functionName: 'olprA',\r\n    voteCasterName: 'plurality', // for input\r\n    socialChoiceType: 'multiWinner',\r\n    elect: olprA,\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport divisorGeneral from './divisorGeneral.js'\r\n\r\n/**\r\n * Run the Sainte-Lague / Webster method of apportionment and return an allocation of seats.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\n\r\nexport default function sainteLague(votes, socialChoiceOptions) {\r\n    const typeOfDivisor = 'sainteLague'\r\n    const socialChoiceResults = divisorGeneral(votes, socialChoiceOptions, typeOfDivisor)\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const sainteLagueMetadata = {\r\n    name: 'Sainte-Lague',\r\n    shortName: 'Sainte-Lague',\r\n    functionName: 'sainteLague',\r\n    voteCasterName: 'plurality', // for input\r\n    socialChoiceType: 'allocation',\r\n    elect: sainteLague,\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * Single Non-Transferable Vote\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function sntv(votes, socialChoiceOptions) {\r\n    const { voteFractionsByCan } = votes.candidateTallies\r\n    const { seats } = socialChoiceOptions\r\n\r\n    const nk = voteFractionsByCan.length\r\n\r\n    if (seats >= nk) {\r\n        // more seats than candidates, so elect all candidates\r\n        const allocation = Array(nk).fill(1)\r\n        const socialChoiceResults = { allocation }\r\n        return socialChoiceResults\r\n    }\r\n\r\n    // sort descending\r\n    const cansSorted = range(nk).sort((a, b) => voteFractionsByCan[b] - voteFractionsByCan[a])\r\n\r\n    const allocation = Array(nk).fill(0)\r\n    for (let r = 0; r < seats; r++) { // TODO: handle edge cases, like ties or zeros\r\n        const canI = cansSorted[r]\r\n        allocation[canI] = 1\r\n    }\r\n    const socialChoiceResults = { allocation }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const sntvMetadata = {\r\n    name: 'Single Non-Transferable Vote',\r\n    shortName: 'SNTV',\r\n    functionName: 'sntv',\r\n    voteCasterName: 'plurality',\r\n    socialChoiceType: 'multiWinner',\r\n    elect: sntv,\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport divisorGeneral from './divisorGeneral.js'\r\n\r\n/**\r\n * Run the d'Hondt / Jefferson method of apportionment and return an allocation of seats.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\n\r\nexport default function dHondt(votes, socialChoiceOptions) {\r\n    const typeOfDivisor = 'dHondt'\r\n    const socialChoiceResults = divisorGeneral(votes, socialChoiceOptions, typeOfDivisor)\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const dHondtMetadata = {\r\n    name: \"d'Hondt\",\r\n    shortName: \"d'Hondt\",\r\n    functionName: 'dHondt',\r\n    voteCasterName: 'plurality', // for input\r\n    socialChoiceType: 'allocation',\r\n    elect: dHondt,\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * This method has rounds.\r\n * Each round, the votes are weighted based on the previous round.\r\n * Weights start at 1.\r\n * Each round, the candidate with the highest weighted tally is selected.\r\n * Then the scores for the candidate are sorted.\r\n * The voters' weight is spent, starting from the top scores.\r\n * Weight is spent until the weight of voters included is equal to 1/seats, which is the quota.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function allocatedScore(votes, socialChoiceOptions) {\r\n    const { voteFractions } = votes.preferenceTallies\r\n    const { scoreVotes } = votes.preferenceLists\r\n\r\n    const { seats } = socialChoiceOptions\r\n\r\n    const nk = scoreVotes[0].length // number of candidates\r\n    const nv = scoreVotes.length // number of votes\r\n    const quota = 1 / seats // fraction of voters in a quota\r\n\r\n    const weight = Array(nv).fill(1)\r\n    const allocation = Array(nk).fill(0)\r\n\r\n    let nw = 0 // number of winners\r\n    for (let r = 0; r < nk; r++) {\r\n        if (nw >= seats) break\r\n\r\n        // Select Winner //\r\n        // add up number of votes for each candidate and choose the one with the most\r\n\r\n        const tally = Array(nk).fill(0)\r\n        for (let k = 0; k < nk; k++) {\r\n            if (allocation[k] === 1) continue // no clones\r\n            for (let i = 0; i < nv; i++) {\r\n                tally[k] += weight[i] * voteFractions[i] * scoreVotes[i][k]\r\n            }\r\n        }\r\n\r\n        const max = Math.max(...tally)\r\n        const iWinner = tally.indexOf(max)\r\n\r\n        allocation[iWinner] = 1\r\n        nw += 1\r\n\r\n        // Adjust Weight //\r\n\r\n        // sort scores for winner, find indices of sorted scores\r\n        // sort descending\r\n        const iSortVoters = range(nv).sort(\r\n            (a, b) => scoreVotes[b][iWinner] - scoreVotes[a][iWinner],\r\n        )\r\n\r\n        // add up to a quota\r\n        // remove weight from votes inside quota\r\n        // sumTop is the sum of the top scores that the winner received.\r\n        let sumTop = 0\r\n        for (let i = 0; i < nv; i++) {\r\n            const index = iSortVoters[i]\r\n            const score = scoreVotes[index][iWinner]\r\n            sumTop += score * weight[index] * voteFractions[i]\r\n            weight[index] = 0 // remove vote\r\n            if (sumTop >= quota) {\r\n                break\r\n            }\r\n        }\r\n        // Todo: deal with when scores are the same.\r\n        // Todo: deal with sumTop not exactly equal to quota.\r\n    }\r\n\r\n    const socialChoiceResults = { allocation }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const allocatedScoreMetadata = {\r\n    name: 'Allocated Score',\r\n    shortName: 'AllocScore',\r\n    functionName: 'allocatedScore',\r\n    voteCasterName: 'scoreFull', // for input\r\n    socialChoiceType: 'multiWinner',\r\n    elect: allocatedScore,\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * This method has rounds.\r\n * groupCost is 1/seats.\r\n * Add up scores.\r\n * Divide groupCost by total to get factor to multiply scores by.\r\n * For each voter, multiply scores by factor to get cost.\r\n * Subtract cost from budget.\r\n * If remaining budget is negative, add that amount to the deficit and set budget to 0.\r\n * Check deficit to see if there is more groupCost to spend.\r\n * Use this new groupCost like the old groupCost and do the steps above.\r\n * Do this 10 times. That should be enough, maybe.\r\n * If there is any deficit remaining, then subtract it from everybody.\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @param {types.typesSocialChoice.socialChoiceOptions} socialChoiceOptions - options to specify a social choice function.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function methodOfEqualShares(votes, socialChoiceOptions) {\r\n    const { voteFractions } = votes.preferenceTallies\r\n    const { scoreVotes } = votes.preferenceLists\r\n\r\n    const { seats } = socialChoiceOptions\r\n\r\n    const nk = scoreVotes[0].length // number of candidates\r\n    const nv = scoreVotes.length // number of votes\r\n    const groupCost = 1 / seats // fraction of voters in a groupCost\r\n\r\n    const budget = Array(nv).fill(1)\r\n    const allocation = Array(nk).fill(0)\r\n\r\n    const winnersByRound = []\r\n    const winnerMaxCostPerScoreByRound = []\r\n\r\n    const small = 10 ** -4\r\n\r\n    let nw = 0 // number of winners\r\n    for (let r = 0; r < nk; r++) {\r\n        if (nw >= seats) break\r\n\r\n        // Select Winner //\r\n        // add up number of votes for each candidate and choose the one with the most\r\n\r\n        // import math\r\n\r\n        // def leq(a, b):\r\n        //     return a < b or math.isclose(a, b)\r\n\r\n        // # N:     a list of voters.\r\n        // # C:     a list of projects (candidates).\r\n        // # cost:  a dictionary that assigns each project its cost.\r\n        // # b:     the total available budget.\r\n        // # u:     a dictionary; u[c][i] is the value that voter i assigns to candidate c.\r\n        // #        an empty entry means that the corresponding value u[c][i] equals 0.\r\n\r\n        // def complete_utilitarian(N, C, cost, u, b, W):\r\n        //     util = {c: sum([u[c][i] for i in N]) for c in C}\r\n        //     committee_cost = sum([cost[c] for c in W])\r\n        //     while True:\r\n        //         next_candidate = None\r\n        //         highest_util = float(\"-inf\")\r\n        //         for c in C.difference(W):\r\n        //             if leq(committee_cost + cost[c], b):\r\n        //                 if util[c] / cost[c] > highest_util:\r\n        //                     next_candidate = c\r\n        //                     highest_util = util[c] / cost[c]\r\n        //         if next_candidate is None:\r\n        //             break\r\n        //         W.add(next_candidate)\r\n        //         committee_cost += cost[next_candidate]\r\n        //     return W\r\n\r\n        // def method_of_equal_shares(N, C, cost, u, b):\r\n        //     W = set()\r\n        //     total_utility = {c: sum(u[c].values()) for c in C}\r\n\r\n        const tally = Array(nk).fill(0)\r\n        for (let k = 0; k < nk; k++) {\r\n            if (allocation[k] === 1) continue // no clones\r\n            for (let i = 0; i < nv; i++) {\r\n                tally[k] += voteFractions[i] * scoreVotes[i][k]\r\n            }\r\n        }\r\n\r\n        // put candidate indices in descending order from most points to least\r\n        const cansSorted = range(nk).sort((a, b) => tally[b] - tally[a])\r\n\r\n        // Sort the voters so we can add one voter at a time.\r\n        // Each voter has a maximum costPerScore that is within their budget.\r\n        // Start with the voter with the smallest maxCostPerScore,\r\n        // and calculate how much voters will spend if they all pay that costPerScore.\r\n\r\n        //     supporters = {c: set([i for i in N if u[c][i] > 0]) for c in C}\r\n        //     budget = {i: b / len(N) for i in N}\r\n        //     while True:\r\n        //         next_candidate = None\r\n        let bestCandidate = null\r\n        //         lowest_rho = float(\"inf\")\r\n        let lowestMaxCostPerScore = Infinity\r\n        //         for c in C.difference(W):\r\n        //             if leq(cost[c], sum([budget[i] for i in supporters[c]])):\r\n\r\n        for (let k = 0; k < nk; k++) {\r\n            const can = cansSorted[k]\r\n\r\n            if (allocation[can] === 1) continue // no clones\r\n\r\n            // check if candidate's lowest possible costPerScore is smaller than current lowest\r\n\r\n            // See if this candidate is within every voter's budget.\r\n            const groupCostPerScore = groupCost / tally[can]\r\n            let withinBudget = true\r\n            for (let i = 0; i < nv; i++) {\r\n                const score = scoreVotes[i][can]\r\n                if (budget[i] < groupCostPerScore * score) {\r\n                    withinBudget = false\r\n                    break\r\n                }\r\n            }\r\n\r\n            // If the candidate is within every voter's budget, then select the candidate.\r\n            if (withinBudget && groupCostPerScore < lowestMaxCostPerScore) {\r\n                lowestMaxCostPerScore = groupCostPerScore\r\n                bestCandidate = can\r\n                break\r\n            }\r\n\r\n            // If the candidate is outside of some voter's budget,\r\n            // then there might be a better choice of candidate.\r\n            // We will have to do the more complex process of \"masking\"\r\n            // the scores within the budget.\r\n\r\n            //                 supporters_sorted = sorted(supporters[c], key=lambda i: budget[i] / u[c][i])\r\n\r\n            const maxCostPerScore = []\r\n            let totalBudget = 0\r\n            const supporters = []\r\n            for (let i = 0, j = 0; i < nv; i++) {\r\n                const bud = budget[i]\r\n                const score = scoreVotes[i][can]\r\n                maxCostPerScore[i] = bud / score\r\n                if (score > 0) {\r\n                    totalBudget += bud * voteFractions[i]\r\n                    supporters[j] = i\r\n                    j += 1\r\n                }\r\n            }\r\n\r\n            // is there room in the budget for this candidate?\r\n            // within rounding error\r\n            if (totalBudget + small - groupCost < 0) {\r\n                continue\r\n            }\r\n\r\n            // ascending order\r\n            const supportersSorted = supporters.sort((a, b) => maxCostPerScore[a] - maxCostPerScore[b])\r\n            const ns = supportersSorted.length\r\n            //                 price = cost[c]\r\n            let costLeft = groupCost\r\n            //                 util = total_utility[c]\r\n            let scoreLeft = tally[can]\r\n            //                 for i in supporters_sorted:\r\n\r\n            // increase the max cost per score until the cost is met\r\n            let curMaxCostPerScore = null\r\n            for (let j = 0; j < ns; j++) {\r\n                const i = supportersSorted[j]\r\n                //                     if leq(price * u[c][i], budget[i] * util):\r\n                //                         break\r\n                //                     price -= budget[i]\r\n                //                     util -= u[c][i]\r\n\r\n                // maxCostPerScore = budget / score   for each voter\r\n                // console.log({costLeft,scoreLeft,maxCostPerScore[i]})\r\n                curMaxCostPerScore = maxCostPerScore[i]\r\n                if (costLeft < scoreLeft * curMaxCostPerScore) {\r\n                    break\r\n                }\r\n                // remove voter\r\n                costLeft -= voteFractions[i] * budget[i]\r\n                scoreLeft -= voteFractions[i] * scoreVotes[i][can]\r\n                // if (scoreLeft < 0) {\r\n                //     console.log(Math.round(scoreLeft * 100))\r\n                // }\r\n            }\r\n            // console.log(scoreLeft)\r\n            //                 rho = price / util \\\r\n            //                         if not math.isclose(util, 0) and not math.isclose(price, 0) \\\r\n            //                         else budget[supporters_sorted[-1]] / u[c][supporters_sorted[-1]]\r\n\r\n            // get a more accurate estimate, possibly, if there isn't an issue of rounding error\r\n            if (costLeft > small && scoreLeft > small) {\r\n                curMaxCostPerScore = costLeft / scoreLeft\r\n            }\r\n            // const curMaxCostPerScore = (nearZero(scoreLeft) || nearZero(costLeft))\r\n            //     ? budget[supportersSorted[ns - 1]] / scoreVotes[supportersSorted[ns - 1]][can]\r\n            //     : costLeft / scoreLeft\r\n\r\n            // const maxCostPerScore = price / util\r\n            //                 if rho < lowest_rho:\r\n            //                     next_candidate = c\r\n            //                     lowest_rho = rho\r\n            if (curMaxCostPerScore < lowestMaxCostPerScore) {\r\n                bestCandidate = can\r\n                lowestMaxCostPerScore = curMaxCostPerScore\r\n            }\r\n        }\r\n\r\n        // If no candidate is within the budget,\r\n        // pick the candidate with the highest score,\r\n        // and keep going until we have all the candidates selected.\r\n        if (bestCandidate === null) {\r\n            for (let k = 0; k < nk; k++) {\r\n                const can = cansSorted[k]\r\n\r\n                if (allocation[can] === 1) continue // no clones\r\n\r\n                allocation[can] = 1\r\n                nw += 1\r\n                if (nw >= seats) break\r\n            }\r\n            break\r\n        }\r\n\r\n        //         if next_candidate is None:\r\n        //             break\r\n        //         W.add(next_candidate)\r\n        allocation[bestCandidate] = 1\r\n        nw += 1\r\n        winnersByRound[r] = bestCandidate\r\n        winnerMaxCostPerScoreByRound[r] = lowestMaxCostPerScore\r\n\r\n        //         for i in N:\r\n        //             budget[i] -= min(budget[i], lowest_rho * u[next_candidate][i])\r\n        // console.log(lowestMaxCostPerScore)\r\n        for (let i = 0; i < nv; i++) {\r\n            const score = scoreVotes[i][bestCandidate]\r\n            const cost = lowestMaxCostPerScore * score\r\n            budget[i] = Math.max(0, budget[i] - cost)\r\n        }\r\n        //     return complete_utilitarian(N, C, cost, u, b, W)  # one of the possible completions\r\n    }\r\n\r\n    const explanation = { winnersByRound, winnerMaxCostPerScoreByRound, socialChoiceOptions }\r\n    const socialChoiceResults = { allocation, explanation }\r\n    return socialChoiceResults\r\n}\r\n\r\n// function nearZero(a) {\r\n//     return Math.abs(a) < 10 ** -7\r\n// }\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const methodOfEqualSharesMetadata = {\r\n    name: 'Method of Equal Shares',\r\n    shortName: 'MES',\r\n    functionName: 'methodOfEqualShares',\r\n    voteCasterName: 'scoreFull', // for input\r\n    socialChoiceType: 'multiWinner',\r\n    elect: methodOfEqualShares,\r\n}\r\n","/** @module */\r\n\r\nimport { getCDF, randomIndexFromCDF } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * pick a random voter to select the winner\r\n * @param {types.typesVotes.votes} votes - The object for vote data.\r\n * @returns {types.typesSocialChoice.socialChoiceResults} - the results returned from a social choice function.\r\n */\r\nexport default function randomVoter(votes) {\r\n    const { voteFractionsByCan } = votes.candidateTallies\r\n    const cdf = getCDF(voteFractionsByCan)\r\n    const iWinner = randomIndexFromCDF(cdf, Math.random)\r\n    const socialChoiceResults = { iWinner }\r\n    return socialChoiceResults\r\n}\r\n\r\n/** @constant {object} - an object: this function and descriptions of its name, input, and output */\r\nexport const randomVoterMetadata = {\r\n    name: 'Random Voter',\r\n    explain: 'Random Voter: Pick a voter and their choice is the winning candidate.',\r\n    shortName: 'Rand Vote',\r\n    functionName: 'randomVoter',\r\n    voteCasterName: 'plurality',\r\n    socialChoiceType: 'singleWinner',\r\n    elect: randomVoter,\r\n}\r\n","export default function SocialChoiceOptionsMan(changes, phaseOptions) {\r\n    const self = this\r\n\r\n    const socialChoiceOptions = {\r\n        seats: 1,\r\n        threshold: 0.1,\r\n    }\r\n\r\n    self.update = () => {\r\n        if (changes.check(['socialChoiceMethod'])) {\r\n            const { socialChoiceType } = phaseOptions\r\n            if (socialChoiceType === 'allocation') {\r\n                socialChoiceOptions.seats = 5\r\n            } else if (socialChoiceType === 'multiWinner') {\r\n                socialChoiceOptions.seats = 3\r\n            } else { // 'singleWinner'\r\n                socialChoiceOptions.seats = 1\r\n            }\r\n        }\r\n    }\r\n    self.getOptions = () => ({ ...socialChoiceOptions })\r\n}\r\n","/** @module */\r\nimport VoterShapeList from '../voters/VoterShapeList.js'\r\nimport CandidateList from '../candidates/CandidateList.js'\r\nimport CandidateDnList from '../candidateDns/CandidateDnList.js'\r\n\r\n/**\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {Commander} commander\r\n * @param {Layout} layout\r\n */\r\nexport default function Entities(changes, commander) {\r\n    const self = this\r\n\r\n    // Entities //\r\n    self.candidateList = new CandidateList(changes, commander, self)\r\n    self.voterShapeList = new VoterShapeList(changes, commander, self)\r\n    self.candidateDnList = new CandidateDnList(changes, commander, self)\r\n}\r\n","import { getCDF, normalizePDF } from '@paretoman/votekit-utilities'\r\nimport Registrar from '../entities/Registrar.js'\r\nimport VoterShape from './VoterShape.js'\r\nimport EntityCommander from '../entities/EntityCommander.js'\r\nimport EntityList from '../entities/EntityList.js'\r\nimport defaultStrategyRules from '../entities/defaultStrategyRules.js'\r\n\r\n/** A component of sim.js that deals with adding voters. */\r\nexport default function VoterShapeList(changes, commander) {\r\n    const self = this\r\n\r\n    // Add Entity //\r\n\r\n    const prefix = 'voters'\r\n    const voterSenderList = [\r\n        // key, configKey, isChain\r\n        ['exists', 'exists', false],\r\n        ['shape2p', 'shape2D-point', true],\r\n        ['shape1x', 'shape1D-x', true],\r\n        ['shape2w', 'shape2D-width', true],\r\n        ['shape1w', 'shape1D-width', true],\r\n        ['shape1densityProfile', 'shape1D-densityProfile', false],\r\n        ['shape2densityProfile', 'shape2D-densityProfile', false],\r\n        ['actionWeight', 'strategyRules', true],\r\n        ['strategy', 'strategyRules', false],\r\n        ['actionOptionThreshold', 'strategyRules', true],\r\n        ['party', 'party', false],\r\n    ]\r\n    const registrar = new Registrar()\r\n    EntityList.call(self, commander, prefix, registrar)\r\n\r\n    const voterCommander = new EntityCommander(registrar, commander, self, prefix, voterSenderList)\r\n    self.addVoterCircle = ({ shape2, shape1, strategyRules, doLoad }) => {\r\n        // eslint-disable-next-line max-len\r\n        const voterShape = new VoterShape(shape2, shape1, strategyRules, registrar, commander, changes, doLoad, voterCommander)\r\n        self.addEntity(voterShape)\r\n    }\r\n    self.addDefaultEntity = () => {\r\n        self.addVoterCircle({\r\n            shape2: { x: 50, y: 50, w: 200, densityProfile: 'step', densityMax: 1 },\r\n            shape1: { x: 50, w: 200, densityProfile: 'gaussian', densityMax: 1 },\r\n            strategyRules: defaultStrategyRules,\r\n            doLoad: false,\r\n        })\r\n    }\r\n\r\n    self.getVoterStrategyListByPhase = (sequenceOptions) => {\r\n        // for each phase, we need a voterStrategyList entry\r\n        const { sequenceName, sequences } = sequenceOptions\r\n        const { phases } = sequences[sequenceName]\r\n\r\n        const voterStrategyListByPhase = {}\r\n\r\n        Object.keys(phases).forEach((phaseName) => {\r\n            const phase = phases[phaseName]\r\n            const { voteCasterName } = phase\r\n            const voterStrategyList = getStrategyList(voteCasterName, phaseName)\r\n            voterStrategyListByPhase[phaseName] = voterStrategyList\r\n        })\r\n        return voterStrategyListByPhase\r\n    }\r\n    function getStrategyList(voteCasterName, phaseName) {\r\n        const voterStrategyList = []\r\n        const entities = self.getEntities()\r\n        for (let i = 0; i < entities.length; i += 1) {\r\n            const entity = entities[i]\r\n            const strategy = getStrategy(entity.strategyRules, voteCasterName, phaseName)\r\n            const actionPDF = normalizePDF(strategy.map((a) => a.actionWeight))\r\n            const strategyCDF = getCDF(actionPDF)\r\n            voterStrategyList.push({ strategy, strategyCDF })\r\n        }\r\n        return voterStrategyList\r\n    }\r\n\r\n    self.getParties = () => {\r\n        // TODO: consider more than one party for a voterShape.\r\n        const entities = self.getEntities()\r\n        const voterParties = entities.map((voter) => voter.party[0])\r\n        return voterParties\r\n    }\r\n}\r\n\r\n// find the strategy that matches all the conditions, if there are conditions.\r\nexport function getStrategy(strategyRules, voteCasterName, phaseName) {\r\n    for (let i = 0; i < strategyRules.length; i += 1) {\r\n        const s = strategyRules[i]\r\n        if (s.condition.phaseName !== undefined) {\r\n            if (s.condition.phaseName !== phaseName) {\r\n                continue\r\n            }\r\n        }\r\n        if (s.condition.voteCasterName !== undefined) {\r\n            if (s.condition.voteCasterName !== voteCasterName) {\r\n                continue\r\n            }\r\n        }\r\n        // the strategy rule applies if we got through the previous two checks\r\n        return s.strategy\r\n    }\r\n    return undefined\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Gives an id to an entity.\r\n * @constructor\r\n */\r\nexport default function Registrar() {\r\n    const self = this\r\n\r\n    const entities = []\r\n    let nextID = 0\r\n\r\n    self.new = function (entity) {\r\n        entities.push(entity)\r\n        const id = nextID\r\n        nextID += 1\r\n        return id\r\n    }\r\n    self.num = () => nextID\r\n    self.get = (id) => entities[id]\r\n    self.getList = () => entities\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * VoterShape class with Handle component to take care of dragging.\r\n * Voronoi2D component takes care of drawing votes.\r\n * @param {Object} shape2\r\n * @param {Object} shape1\r\n * @param {Screen} screen\r\n * @param {Registrar} voterRegistrar\r\n * @param {Commander} commander\r\n * @param {Changes} changes\r\n * @param {Boolean} doLoad - Should we add the voter without adding to the history?\r\n * @constructor\r\n */\r\nexport default function VoterShape(\r\n    shape2,\r\n    shape1,\r\n    strategyRules,\r\n    voterRegistrar,\r\n    commander,\r\n    changes,\r\n    doLoad,\r\n    voterCommander,\r\n) {\r\n    const self = this\r\n\r\n    // State //\r\n\r\n    self.shape1 = {}\r\n    self.shape2 = {}\r\n\r\n    self.color = '#88888888'\r\n    self.strategyRules = strategyRules\r\n    self.shape1.densityMax = 1\r\n    self.shape2.densityMax = 1\r\n\r\n    self.setAction = {\r\n        exists(e) {\r\n            self.exists = e\r\n            changes.add(['voters', 'draggables'])\r\n        },\r\n        shape2p(p) {\r\n            self.shape2.x = p.x\r\n            self.shape2.y = p.y\r\n            changes.add(['voters', 'draggables'])\r\n        },\r\n        shape1x(x) {\r\n            self.shape1.x = x\r\n            changes.add(['voters', 'draggables'])\r\n        },\r\n        shape2w(w) {\r\n            self.shape2.w = w\r\n            changes.add(['voters', 'width'])\r\n        },\r\n        shape1w(w) {\r\n            self.shape1.w = w\r\n            changes.add(['voters', 'width'])\r\n        },\r\n        shape1densityProfile(d) {\r\n            self.shape1.densityProfile = d\r\n            changes.add(['voters', 'densityProfile'])\r\n        },\r\n        shape2densityProfile(d) {\r\n            self.shape2.densityProfile = d\r\n            changes.add(['voters', 'densityProfile'])\r\n        },\r\n        strategy(a) {\r\n            setStrategyRules(a)\r\n        },\r\n        actionOptionThreshold(a) {\r\n            setStrategyRules(a)\r\n        },\r\n        actionWeight(a) {\r\n            setStrategyRules(a)\r\n        },\r\n        party(p) {\r\n            self.party = p\r\n            changes.add(['party'])\r\n        },\r\n\r\n    }\r\n    function setStrategyRules(a) {\r\n        self.strategyRules = a\r\n        changes.add(['voters', 'strategyRules'])\r\n    }\r\n\r\n    // Make Commands //\r\n\r\n    const id = voterRegistrar.new(self)\r\n\r\n    self.doSetCommand = {}\r\n    const actionKeys = Object.keys(self.setAction)\r\n    actionKeys.forEach((key) => {\r\n        self.doSetCommand[key] = (e) => {\r\n            const cur = voterCommander[key].getCurrentValue(id)\r\n            voterCommander[key].go(id, e, cur)\r\n        }\r\n    })\r\n\r\n    // Instantiation //\r\n\r\n    // use commands to instantiate variables\r\n    const shape2p = { x: shape2.x, y: shape2.y }\r\n\r\n    const commands = [\r\n        voterCommander.exists.command(id, 1, 0), // set alive flag\r\n        voterCommander.shape2p.command(id, shape2p, shape2p),\r\n        voterCommander.shape1x.command(id, shape1.x, shape1.x),\r\n        voterCommander.shape2w.command(id, shape2.w, shape2.w),\r\n        voterCommander.shape1w.command(id, shape1.w, shape1.w),\r\n        voterCommander.shape1densityProfile.command(id, shape1.densityProfile, shape1.densityProfile),\r\n        voterCommander.shape2densityProfile.command(id, shape2.densityProfile, shape2.densityProfile),\r\n        voterCommander.strategy.command(id, self.strategyRules, self.strategyRules),\r\n        voterCommander.party.command(id, [id], [id]),\r\n    ]\r\n    // Either load the commands because we don't want to create an item of history\r\n    // Or do the commands because want to store an item in history, so that we can undo.\r\n    if (doLoad) {\r\n        commander.loadCommands(commands)\r\n    } else {\r\n        commander.doCommands(commands)\r\n    }\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Register senders with the commander for setting entity values.\r\n * This is here because we need an action that takes an id.\r\n * @param {Registrar} registrar\r\n * @param {Commander} commander\r\n * @param {EntityList} entityList\r\n * @constructor\r\n */\r\nexport default function EntityCommander(registrar, commander, entityList, prefix, senderList) {\r\n    const self = this\r\n\r\n    // a object with senders that set parameters for lists of entities.\r\n    // Like if you want to set the exists property of the 2nd voter to 1.\r\n\r\n    senderList.forEach((x) => makeSender(...x))\r\n\r\n    function makeSender(key, configKey, isChain) {\r\n        self[key] = commander.addSenderForList({\r\n            action: (id, e) => {\r\n                entityList.setNumberEntities(id + 1)\r\n                const voter = registrar.get(id)\r\n                voter.setAction[key](e)\r\n            },\r\n            name: `${prefix}-${configKey}`,\r\n            props: { isChain },\r\n        })\r\n    }\r\n}\r\n","import getGeoms from './getGeoms.js'\r\nimport getPoints from './getPoints.js'\r\n\r\n/** A component of sim.js that deals with adding candidates. */\r\nexport default function EntityList(commander, prefix, registrar) {\r\n    const self = this\r\n\r\n    // Publish //\r\n\r\n    const observers = []\r\n    self.attachNewE = (observer) => { observers.push(observer) }\r\n    const updateObservers = (e) => { observers.forEach((o) => o.updateNewE(e)) }\r\n\r\n    // Add Entity //\r\n\r\n    self.addEntity = (entity) => {\r\n        updateObservers(entity)\r\n\r\n        const num = registrar.num()\r\n        self.setNumberEntities(num)\r\n    }\r\n    self.addEntityPressed = () => {\r\n        // really, we want to make a command to set numEntities to at least an amount\r\n        const num = registrar.num() + 1\r\n        self.setNumberEntities(num)\r\n    }\r\n    self.setNumberEntities = commander.addSender({\r\n        currentValue: 0,\r\n        name: `${prefix}-setNumberAtLeast`,\r\n        props: { isFirstAction: true },\r\n        action: (num) => {\r\n            while (registrar.num() < num) {\r\n                self.addDefaultEntity()\r\n            }\r\n        },\r\n        // load has no Undo. We can't undo creating an entity.\r\n        // We just set entity.exists to false.\r\n    }).load\r\n\r\n    // Getters //\r\n\r\n    self.getEntities = () => registrar.getList().filter((c) => c.exists)\r\n    self.getGeoms = (dimensions) => getGeoms(self.getEntities(), dimensions)\r\n    self.getPoints = (dimensions) => getPoints(self.getEntities(), dimensions)\r\n}\r\n","export default function getGeoms(entities, dimensions) {\r\n    if (dimensions === 1) {\r\n        return entities.map((ent) => (ent.shape1))\r\n    }\r\n    return entities.map((ent) => (ent.shape2))\r\n}\r\n","export default function getPoints(entities, dimensions) {\r\n    if (dimensions === 1) {\r\n        return entities.map((ent) => (ent.shape1.x))\r\n    }\r\n    return entities.map((ent) => ([ent.shape2.x, ent.shape2.y]))\r\n}\r\n","const defaultStrategyRules = [\r\n    {\r\n        condition: {\r\n            voteCasterName: 'score',\r\n        },\r\n        strategy:\r\n            [\r\n                {\r\n                    actionName: 'normalize',\r\n                    actionWeight: 1,\r\n                    actionOptions: {\r\n                        threshold: {\r\n                            type: 'step',\r\n                            mean: 0.5,\r\n                            radius: 0.1,\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    actionName: 'normalizeOverFrontrunners',\r\n                    actionWeight: 0,\r\n                    actionOptions: {\r\n                        threshold: {\r\n                            type: 'step',\r\n                            mean: 0.5,\r\n                            radius: 0.1,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n\r\n    },\r\n    {\r\n        condition: {\r\n            voteCasterName: 'plurality',\r\n        },\r\n        strategy:\r\n            [\r\n                {\r\n                    actionName: 'closest',\r\n                    actionWeight: 1,\r\n                    actionOptions: {\r\n                        threshold: {\r\n                            type: 'step',\r\n                            mean: 0.5,\r\n                            radius: 0.1,\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    actionName: 'lesserEvil',\r\n                    actionWeight: 0,\r\n                    actionOptions: {\r\n                        threshold: {\r\n                            type: 'step',\r\n                            mean: 0.5,\r\n                            radius: 0.1,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n\r\n    },\r\n    {\r\n        condition: {\r\n            voteCasterName: 'ranking',\r\n        },\r\n        strategy: [\r\n            {\r\n                actionName: 'closest',\r\n                actionWeight: 1,\r\n                actionOptions: {},\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        condition: {\r\n            voteCasterName: 'pairwise',\r\n        },\r\n        strategy: [\r\n            {\r\n                actionName: 'closest',\r\n                actionWeight: 1,\r\n                actionOptions: {},\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        condition: {\r\n            voteCasterName: 'scoreFull',\r\n        },\r\n        strategy: [\r\n            {\r\n                actionName: 'normalize',\r\n                actionWeight: 1,\r\n                actionOptions: {},\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default defaultStrategyRules\r\n","import { standardizeColor } from '@paretoman/votekit-graphics'\r\nimport Candidate from './Candidate.js'\r\nimport Registrar from '../entities/Registrar.js'\r\nimport EntityCommander from '../entities/EntityCommander.js'\r\nimport EntityList from '../entities/EntityList.js'\r\n\r\n/** A component of sim.js that deals with adding candidates. */\r\nexport default function CandidateList(changes, commander) {\r\n    const self = this\r\n\r\n    // Add Entity //\r\n\r\n    const prefix = 'candidates'\r\n    const canSenderList = [\r\n        // key, configKey, isChain\r\n        ['exists', 'exists', false],\r\n        ['shape2p', 'shape2D-point', true],\r\n        ['shape1x', 'shape1D-x', true],\r\n        ['color', 'color', false],\r\n        ['party', 'party', false],\r\n    ]\r\n    const registrar = new Registrar()\r\n    EntityList.call(self, commander, prefix, registrar)\r\n\r\n    const candidateCommander = new EntityCommander(registrar, commander, self, prefix, canSenderList)\r\n    self.addCandidate = ({ shape2, shape1, color, doLoad }) => {\r\n        // eslint-disable-next-line no-new, max-len\r\n        const candidate = new Candidate(shape2, shape1, color, registrar, commander, changes, doLoad, candidateCommander)\r\n        self.addEntity(candidate)\r\n    }\r\n    self.addDefaultEntity = () => {\r\n        self.addCandidate({\r\n            shape2: { x: 50, y: 50 },\r\n            shape1: { x: 50 },\r\n            color: standardizeColor('yellow'),\r\n            doLoad: false,\r\n        })\r\n    }\r\n\r\n    // Getters //\r\n\r\n    self.getParties = () => {\r\n        const canList = self.getEntities()\r\n        const partiesByCan = getPartyByCan(canList)\r\n        // TODO: figure out how to vary the number of parties, allow skipping etc.\r\n        const numParties = 10\r\n        const parties = { partiesByCan, numParties }\r\n        return parties\r\n    }\r\n\r\n    // TODO: consider more than one party for a candidate.\r\n    function getPartyByCan(canList) { return canList.map((can) => can.party[0]) }\r\n\r\n    self.getRGBAList = () => {\r\n        const canList = self.getEntities()\r\n        return canList.map((c) => c.colorRGBA)\r\n    }\r\n}\r\n","/**\r\n * Graphics Utilities\r\n * Just a few helpful functions that are self-contained and don't need much context.\r\n * @module */\r\n\r\nexport * from './colorBlendScript.js'\r\n\r\nexport function drawStrokedColor(text, x, y, textsize, lw, color, alpha, ctx, textAlign) {\r\n    ctx.save()\r\n    ctx.globalAlpha = alpha\r\n    ctx.textAlign = textAlign || 'center'\r\n    ctx.font = `${textsize}px Sans-serif`\r\n    ctx.lineWidth = lw\r\n    ctx.fillStyle = color\r\n    ctx.fillText(text, x, y)\r\n    ctx.restore()\r\n}\r\n\r\nexport function textPercent(f) {\r\n    if (f === undefined) return ''\r\n    const a = (100 * f).toFixed(0)\r\n    return a\r\n}\r\n\r\n/** https://stackoverflow.com/a/47355187 */\r\nexport function standardizeColor(str) {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n    ctx.fillStyle = str\r\n    const sColor = ctx.fillStyle\r\n    canvas.remove()\r\n    return sColor\r\n}\r\n","/* eslint-disable no-nested-ternary */\r\n// https://codepen.io/darsain/pen/XpgMGp\r\n\r\nconst r = Math.round\r\n\r\nexport function toRGBA(d1) {\r\n    const l = d1.length\r\n    const rgba = Array(4).fill()\r\n    if (d1.slice(0, 3).toLowerCase() === 'rgb') {\r\n        const d = d1.replace(' ', '').split(',')\r\n        rgba[0] = parseInt(d[0].slice(d[3].toLowerCase() === 'a' ? 5 : 4), 10)\r\n        rgba[1] = parseInt(d[1], 10)\r\n        rgba[2] = parseInt(d[2], 10)\r\n        rgba[3] = d[3] ? parseFloat(d[3]) : -1\r\n    } else {\r\n        let d\r\n        if (l < 6) d = parseInt(String(d1[1]) + d1[1] + d1[2] + d1[2] + d1[3] + d1[3] + (l > 4 ? String(d1[4]) + d1[4] : ''), 16)\r\n        else d = parseInt(d1.slice(1), 16)\r\n        rgba[0] = (d >> 16) & 255\r\n        rgba[1] = (d >> 8) & 255\r\n        rgba[2] = d & 255\r\n        rgba[3] = l === 9 || l === 5 ? r((((d >> 24) & 255) / 255) * 10000) / 10000 : -1\r\n    }\r\n    return rgba\r\n}\r\n\r\nexport function blend(from1, to1, p1 = 0.5) {\r\n    const from = from1.trim()\r\n    const to = to1.trim()\r\n    const b = p1 < 0\r\n    const p = b ? p1 * -1 : p1\r\n    const f = toRGBA(from)\r\n    const t = toRGBA(to)\r\n\r\n    if (to[0] === 'r') {\r\n        return `rgb${to[3] === 'a' ? 'a(' : '('\r\n        }${r(Math.sqrt(t[0] ** 2 * p + f[0] ** 2 * (1 - p)))},${\r\n            r(Math.sqrt(t[1] ** 2 * p + f[1] ** 2 * (1 - p)))},${\r\n            r(Math.sqrt(t[2] ** 2 * p + f[2] ** 2 * (1 - p)))\r\n        }${f[3] < 0 && t[3] < 0 ? '' : `,${\r\n            f[3] > -1 && t[3] > -1\r\n                ? r(Math.sqrt(t[3] ** 2 * p + f[3] ** 2 * (1 - p)) * 10000) / 10000\r\n                : t[3] < 0 ? f[3] : t[3]}`})`\r\n    }\r\n\r\n    return `#${(0x100000000 + ((\r\n        f[3] > -1 && t[3] > -1\r\n            ? r(Math.sqrt((t[3] ** 2 * p + f[3] ** 2 * (1 - p))) * 255)\r\n            : t[3] > -1 ? r(t[3] * 255) : f[3] > -1 ? r(f[3] * 255) : 255\r\n    ) * 0x1000000)\r\n    + (r(Math.sqrt(t[0] ** 2 * p + f[0] ** 2 * (1 - p))) * 0x10000)\r\n        + (r(Math.sqrt(t[1] ** 2 * p + f[1] ** 2 * (1 - p))) * 0x100)\r\n        + r(Math.sqrt(t[2] ** 2 * p + f[2] ** 2 * (1 - p)))\r\n    ).toString(16).slice(f[3] > -1 || t[3] > -1 ? 1 : 3)}`\r\n}\r\n","/** @module */\r\n\r\nimport { toRGBA } from '@paretoman/votekit-graphics'\r\n\r\n/**\r\n * Candidate class on top of handle.\r\n * Candidate adds candidate behavior on top of a draggable handle handle.\r\n * @param {Object} shape2\r\n * @param {Object} shape1\r\n * @param {String} color\r\n * @param {Screen} screen\r\n * @param {Registrar} candidateRegistrar\r\n * @param {Commander} commander\r\n * @param {Changes} changes\r\n * @param {Boolean} doLoad - Should we add the candidateDn without adding to the history?\r\n * @constructor\r\n */\r\nexport default function Candidate(\r\n    shape2,\r\n    shape1,\r\n    color,\r\n    candidateRegistrar,\r\n    commander,\r\n    changes,\r\n    doLoad,\r\n    candidateCommander,\r\n) {\r\n    const self = this\r\n\r\n    // State //\r\n\r\n    self.shape1 = {}\r\n    self.shape2 = {}\r\n\r\n    self.setAction = {\r\n        exists(e) {\r\n            self.exists = e\r\n            changes.add(['draggables'])\r\n        },\r\n        shape2p(p) {\r\n            self.shape2.x = p.x\r\n            self.shape2.y = p.y\r\n            changes.add(['draggables'])\r\n        },\r\n        shape1x(x) {\r\n            self.shape1.x = x\r\n            changes.add(['draggables'])\r\n        },\r\n        color(newColor) {\r\n            self.color = newColor\r\n            self.colorRGBA = toRGBA(newColor)\r\n            changes.add(['color'])\r\n        },\r\n        party(p) {\r\n            self.party = p\r\n            changes.add(['party'])\r\n        },\r\n    }\r\n\r\n    // Make Commands //\r\n\r\n    const id = candidateRegistrar.new(self)\r\n\r\n    self.doSetCommand = {}\r\n    const actionKeys = Object.keys(self.setAction)\r\n    actionKeys.forEach((key) => {\r\n        self.doSetCommand[key] = (e) => {\r\n            const cur = candidateCommander[key].getCurrentValue(id)\r\n            candidateCommander[key].go(id, e, cur)\r\n        }\r\n    })\r\n\r\n    // Instantiate Variables //\r\n\r\n    // use commands to instantiate variables\r\n    const shape2p = { x: shape2.x, y: shape2.y }\r\n    const commands = [\r\n        candidateCommander.exists.command(id, 1, 0), // set alive flag\r\n        candidateCommander.shape2p.command(id, shape2p, shape2p),\r\n        candidateCommander.shape1x.command(id, shape1.x, shape1.x),\r\n        candidateCommander.color.command(id, color, color),\r\n        candidateCommander.party.command(id, [id], [id]),\r\n    ]\r\n    // Either load the commands because we don't want to create an item of history\r\n    // Or do the commands because want to store an item in history, so that we can undo.\r\n    if (doLoad) {\r\n        commander.loadCommands(commands)\r\n    } else {\r\n        commander.doCommands(commands)\r\n    }\r\n}\r\n","import CandidateDn from './CandidateDn.js'\r\nimport Registrar from '../entities/Registrar.js'\r\nimport EntityCommander from '../entities/EntityCommander.js'\r\nimport EntityList from '../entities/EntityList.js'\r\n\r\n/** A component of sim.js that deals with adding candidate distributions. */\r\nexport default function CandidateDnList(changes, commander) {\r\n    const self = this\r\n\r\n    // Add Entity //\r\n\r\n    const prefix = 'candidateDns'\r\n    const canDnSenderList = [\r\n        // key, configKey, isChain\r\n        ['exists', 'exists', false],\r\n        ['shape2p', 'shape2D-point', true],\r\n        ['shape1x', 'shape1D-x', true],\r\n        ['shape2w', 'shape2D-width', true],\r\n        ['shape1w', 'shape1D-width', true],\r\n        ['shape1densityProfile', 'shape1D-densityProfile', false],\r\n        ['shape2densityProfile', 'shape2D-densityProfile', false],\r\n        ['party', 'party', false],\r\n    ]\r\n    const registrar = new Registrar()\r\n    EntityList.call(self, commander, prefix, registrar)\r\n\r\n    const candidateDnCommander = new EntityCommander(registrar, commander, self, prefix, canDnSenderList)\r\n    self.addCandidateDistribution = ({ shape2, shape1, doLoad }) => {\r\n        // eslint-disable-next-line no-new, max-len\r\n        const candidateDn = new CandidateDn(shape2, shape1, registrar, commander, changes, doLoad, candidateDnCommander)\r\n        self.addEntity(candidateDn)\r\n    }\r\n    self.addDefaultEntity = () => {\r\n        self.addCandidateDistribution({\r\n            shape2: { x: 50, y: 50, w: 200, densityProfile: 'step' },\r\n            shape1: { x: 50, w: 200, densityProfile: 'gaussian' },\r\n            doLoad: false,\r\n        })\r\n    }\r\n\r\n    // Getters //\r\n\r\n    self.getParties = () => {\r\n        const canList = self.getEntities()\r\n        const partiesByCan = getPartyByCan(canList)\r\n        // TODO: figure out how to vary the number of parties, allow skipping etc.\r\n        const numParties = 10\r\n        const parties = { partiesByCan, numParties }\r\n        return parties\r\n    }\r\n\r\n    // TODO: consider more than one party for a candidate.\r\n    function getPartyByCan(canList) { return canList.map((can) => can.party[0]) }\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * This represents a spatial distribution of candidates.\r\n * A draggable handle handle provides draggable behavior.\r\n * @param {Object} shape2\r\n * @param {Object} shape1\r\n * @param {Screen} screen\r\n * @param {Registrar} candidateDnRegistrar\r\n * @param {Commander} commander\r\n * @param {Changes} changes\r\n * @param {Boolean} doLoad - Should we add the candidateDn without adding to the history?\r\n * @constructor\r\n */\r\nexport default function CandidateDistribution(\r\n    shape2,\r\n    shape1,\r\n    candidateDnRegistrar,\r\n    commander,\r\n    changes,\r\n    doLoad,\r\n    candidateDnCommander,\r\n) {\r\n    const self = this\r\n\r\n    // State //\r\n\r\n    self.shape2 = {}\r\n    self.shape1 = {}\r\n\r\n    self.color = '#ccc'\r\n    self.darkModeColor = '#333'\r\n\r\n    self.setAction = {\r\n        exists(e) {\r\n            self.exists = e\r\n            changes.add(['draggables'])\r\n        },\r\n        shape2p(p) {\r\n            self.shape2.x = p.x\r\n            self.shape2.y = p.y\r\n            changes.add(['draggables'])\r\n        },\r\n        shape1x(x) {\r\n            self.shape1.x = x\r\n            changes.add(['draggables'])\r\n        },\r\n        shape2w(w) {\r\n            self.shape2.w = w\r\n            changes.add(['width'])\r\n        },\r\n        shape1w(w) {\r\n            self.shape1.w = w\r\n            changes.add(['width'])\r\n        },\r\n        shape1densityProfile(d) {\r\n            self.shape1.densityProfile = d\r\n            changes.add(['densityProfile'])\r\n        },\r\n        shape2densityProfile(d) {\r\n            self.shape2.densityProfile = d\r\n            changes.add(['densityProfile'])\r\n        },\r\n        party(p) {\r\n            self.party = p\r\n            changes.add(['party'])\r\n        },\r\n    }\r\n\r\n    // Make Commands //\r\n\r\n    const id = candidateDnRegistrar.new(self)\r\n\r\n    self.doSetCommand = {}\r\n    const actionKeys = Object.keys(self.setAction)\r\n    actionKeys.forEach((key) => {\r\n        self.doSetCommand[key] = (e) => {\r\n            const cur = candidateDnCommander[key].getCurrentValue(id)\r\n            candidateDnCommander[key].go(id, e, cur)\r\n        }\r\n    })\r\n\r\n    // Instantiation //\r\n\r\n    // use commands to instantiate variables\r\n    const shape2p = { x: shape2.x, y: shape2.y }\r\n\r\n    const commands = [\r\n        candidateDnCommander.exists.command(id, 1, 0), // set alive flag\r\n        candidateDnCommander.shape2p.command(id, shape2p, shape2p),\r\n        candidateDnCommander.shape1x.command(id, shape1.x, shape1.x),\r\n        candidateDnCommander.shape2w.command(id, shape2.w, shape2.w),\r\n        candidateDnCommander.shape1w.command(id, shape1.w, shape1.w),\r\n        candidateDnCommander.shape1densityProfile.command(id, shape1.densityProfile, shape1.densityProfile),\r\n        candidateDnCommander.shape2densityProfile.command(id, shape2.densityProfile, shape2.densityProfile),\r\n        candidateDnCommander.party.command(id, [id], [id]),\r\n    ]\r\n    // Either load the commands because we don't want to create an item of history\r\n    // Or do the commands because want to store an item in history, so that we can undo.\r\n    if (doLoad) {\r\n        commander.loadCommands(commands)\r\n    } else {\r\n        commander.doCommands(commands)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport SimModeSample from './SimModeSample.js'\r\nimport SimModeOne from './SimModeOne.js'\r\n\r\n/**\r\n * Simulation is the main task we're trying to accomplish in this program.\r\n * There are multiple states that the sim can be in.\r\n * Each state simulates something different.\r\n * @param {Screen} screen\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {Commander} commander\r\n */\r\nexport default function SimMode(pub, entities, districts, changes, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    self.modes = {\r\n        one: new SimModeOne(pub, entities, changes, districts, simOptions, electionOptionsMan),\r\n        sample: new SimModeSample(pub, entities, changes, districts, simOptions, electionOptionsMan),\r\n    }\r\n\r\n    self.update = () => {\r\n        self.modes[simOptions.mode].update()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport getSamplingGeometry from '../geometry/getSamplingGeometry.js'\r\nimport ElectionSampler from './ElectionSampler.js'\r\nimport updateSeeds from './updateSeeds.js'\r\n\r\n/**\r\n * Simulate many sample elections with\r\n *   candidates in random positions within a distribution, and\r\n *   voters in a distribution that will be summed over.\r\n * @constructor\r\n */\r\nexport default function SimModeSample(pub, entities, changes, districts, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const { candidateDnList, voterShapeList } = entities\r\n\r\n    const electionSampler = new ElectionSampler()\r\n\r\n    self.update = () => {\r\n        // Update players. Run an election. Get result.\r\n        // The election handles any changes.\r\n        // The samplingResult communicates how to visualize the election.\r\n\r\n        electionOptionsMan.update()\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        districts.update()\r\n        updateSeeds(simOptions, changes)\r\n\r\n        const samplingGeometry = getSamplingGeometry(voterShapeList, candidateDnList, simOptions, optionsBag, districts)\r\n\r\n        const samplingResult = electionSampler.update(samplingGeometry, changes, optionsBag)\r\n        const simData = { samplingResult }\r\n\r\n        if (samplingResult.pointsChanged === true || changes.checkAny()) {\r\n            pub.update(simData)\r\n        }\r\n        changes.clear()\r\n    }\r\n}\r\n","import { makeCandidateDistributionCDF } from '@paretoman/votekit-utilities'\r\nimport getUsePollsByPhase from './getUsePollsByPhase.js'\r\n\r\n/**\r\n * Get samplingGeometry inputs to sampleElection.\r\n * @param {*} voterShapeList\r\n * @param {*} candidateDnList\r\n * @param {*} simOptions\r\n * @param {*} districts\r\n * @returns {Object} samplingGeometry is input for sampleElection\r\n */\r\nexport default function getSamplingGeometry(voterShapeList, candidateDnList, simOptions, optionsBag, districts) {\r\n    const { dimensions, seeds } = simOptions\r\n    const { geography } = districts\r\n    const { sequenceOptions } = optionsBag\r\n\r\n    const voterGeoms = voterShapeList.getGeoms(dimensions)\r\n    const voterParties = voterShapeList.getParties()\r\n    const voterStrategyListByPhase = voterShapeList.getVoterStrategyListByPhase(sequenceOptions)\r\n    const usePollsByPhase = getUsePollsByPhase(voterStrategyListByPhase)\r\n\r\n    const canDnGeoms = candidateDnList.getGeoms(dimensions)\r\n    const parties = candidateDnList.getParties()\r\n\r\n    const canDnCDF = makeCandidateDistributionCDF(canDnGeoms, dimensions)\r\n\r\n    const samplingSeed = `apple${seeds[0]}`\r\n    const strategySeed = `pumpkin${seeds[0]}` // todo: use seeds[1] for strategySeed\r\n\r\n    const samplingGeometry = { voterGeoms, voterParties, canDnGeoms, parties, dimensions, geography, canDnCDF, samplingSeed, strategySeed, voterStrategyListByPhase, usePollsByPhase }\r\n    return samplingGeometry\r\n}\r\n","export default function getUsePollsByPhase(voterStrategyListByPhase) {\r\n    const usePollsByPhase = {}\r\n\r\n    Object.keys(voterStrategyListByPhase).forEach((phaseName) => {\r\n        const voterStrategyList = voterStrategyListByPhase[phaseName]\r\n        const usePolls = getUsePolls(voterStrategyList)\r\n\r\n        usePollsByPhase[phaseName] = usePolls\r\n    })\r\n    return usePollsByPhase\r\n}\r\n\r\nfunction getUsePolls(voterStrategyList) {\r\n    return voterStrategyList.some(\r\n        (v) => v.strategy.some(\r\n            (a) => (a.actionName !== 'closest' && a.actionWeight !== 0),\r\n        ),\r\n    )\r\n}\r\n","/** @module */\r\n\r\nimport sampleElection from '@paretoman/votekit-sample-election'\r\nimport seedrandom from 'seedrandom'\r\n\r\n/**\r\n * Simulate winners from many sampled elections.\r\n * Candidates are sampled from a distribution.\r\n * Winners are drawn as points.\r\n * The simulation is dynamic. More simulations are performed at each frame.\r\n * @constructor\r\n */\r\nexport default function ElectionSampler() {\r\n    const self = this\r\n\r\n    self.update = function (samplingGeometry, changes, optionsBag) {\r\n        if (changes.checkAny()) {\r\n            self.startSim(samplingGeometry)\r\n        }\r\n\r\n        const samplingResult = self.addSim(samplingGeometry, optionsBag)\r\n        return samplingResult\r\n    }\r\n\r\n    const maxPoints = 5000\r\n\r\n    let totalPartyWins\r\n    let totalPoints\r\n    let rng\r\n\r\n    self.startSim = function (samplingGeometry) {\r\n        totalPoints = 0\r\n        totalPartyWins = Array(10).fill(0) // TODO: Use number of parties\r\n\r\n        const seed = `watermelon${samplingGeometry.samplingSeed}`\r\n        rng = seedrandom(seed)\r\n    }\r\n\r\n    self.addSim = function (samplingGeometry, optionsBag) {\r\n        if (totalPoints > maxPoints) return { pointsChanged: false }\r\n\r\n        const numSamples = 1\r\n        const sampleResult = sampleElection(samplingGeometry, optionsBag, numSamples, rng)\r\n        const { samplingPointsList, samplingPointsCount, partyWins, error } = sampleResult\r\n\r\n        if (error !== undefined) return { pointsChanged: false }\r\n        if (sampleResult.pointsChanged === false) return { pointsChanged: false }\r\n\r\n        const numNewPoints = samplingPointsCount.reduce((p, c) => p + c)\r\n        totalPoints += numNewPoints\r\n\r\n        for (let i = 0; i < partyWins.length; i++) {\r\n            totalPartyWins[i] += partyWins[i]\r\n        }\r\n\r\n        const partyWinFraction = totalPartyWins.map((x) => x / totalPoints)\r\n\r\n        const pointsChanged = true\r\n        const samplingResult = { pointsChanged, samplingPointsList, samplingPointsCount, partyWinFraction }\r\n        return samplingResult\r\n    }\r\n}\r\n","import { randomIndexFromCDF } from '@paretoman/votekit-utilities'\r\nimport electionSequence from '@paretoman/votekit-election-sequence'\r\nimport sampleCanDnGeom from './sampleCanDnGeom.js'\r\n/**\r\n * Do a series of elections, differing in candidate positions with a shaped distribution.\r\n * Each election may be a sequence of elections and may include polls. A spatial election model is used.\r\n * @param {*} samplingGeometry\r\n * @param {*} optionsBag\r\n * @param {*} numSamples\r\n * @param {*} rng\r\n * @returns {*} sampleResult\r\n */\r\nexport default function sampleElection(samplingGeometry, optionsBag, numSamples, rng) {\r\n    const { voterGeoms, voterParties, canDnGeoms, dimensions, geography, canDnCDF, strategySeed, voterStrategyListByPhase, information, usePollsByPhase } = samplingGeometry\r\n    const { partiesByCan } = samplingGeometry.parties\r\n\r\n    if (voterGeoms.length === 0) return { pointsChanged: false }\r\n    if (canDnGeoms.length === 0) return { pointsChanged: false }\r\n\r\n    const samplingPointsList = []\r\n    const samplingPointsCount = []\r\n    const partyWins = Array(10).fill(0) // TODO: Use number of parties\r\n\r\n    for (let i = 0; i < numSamples; i++) {\r\n        // choose a number of candidates\r\n        const { numSampleCandidates } = optionsBag\r\n        const canPoints = []\r\n        const sParties = []\r\n        for (let k = 0; k < numSampleCandidates; k++) {\r\n            // sample a point from the distribution of candidates\r\n            const iDist = randomIndexFromCDF(canDnCDF, rng)\r\n            const party0 = partiesByCan[iDist]\r\n            const canDnGeom = canDnGeoms[iDist]\r\n            const canPoint = sampleCanDnGeom(canDnGeom, dimensions, rng)\r\n\r\n            // make a candidate\r\n            canPoints.push(canPoint)\r\n            sParties.push(party0)\r\n        }\r\n\r\n        const parties = { partiesByCan: sParties, numParties: 10 }\r\n        const geometry = { voterGeoms, voterParties, canPoints, parties, dimensions, geography, strategySeed, voterStrategyListByPhase, information, usePollsByPhase }\r\n\r\n        const sequenceResults = electionSequence(geometry, optionsBag)\r\n        const { allocation } = sequenceResults.socialChoiceResults\r\n\r\n        for (let k = 0; k < allocation.length; k++) {\r\n            const winCount = allocation[k]\r\n            if (winCount === 0) continue\r\n\r\n            const canPoint = canPoints[k]\r\n            const winPoint = (dimensions === 1) ? [canPoint] : canPoint\r\n            const winParty = sParties[k]\r\n\r\n            samplingPointsList.push(winPoint)\r\n            samplingPointsCount.push(winCount)\r\n            partyWins[winParty] += winCount\r\n        }\r\n    }\r\n    return { samplingPointsList, samplingPointsCount, partyWins }\r\n}\r\n","/** @module */\r\n\r\nimport electionClosedPrimary from './electionClosedPrimary.js'\r\nimport electionGeneral from './electionGeneral.js'\r\nimport electionNonpartisanPrimary from './electionNonPartisanPrimary.js'\r\nimport getGeometryForPhase from './getGeometryForPhase.js'\r\nimport optionsBag1 from './test/optionsBag1.js'\r\n\r\nexport { getGeometryForPhase, optionsBag1 }\r\n\r\n/**\r\n * Here we are in the context of an election sequence.\r\n * @param {*} geometry\r\n * @param {*} optionsBag\r\n * @returns {*} sequenceResults\r\n */\r\nexport default function electionSequence(geometry, optionsBag) {\r\n    const { canPoints, voterGeoms } = geometry\r\n    if (voterGeoms.length === 0) return { error: 'No Voters' }\r\n    if (canPoints.length === 0) return { error: 'No Candidates' }\r\n\r\n    const { sequenceName } = optionsBag.sequenceOptions\r\n    if (sequenceName === 'closedPrimary') {\r\n        return electionClosedPrimary(geometry, optionsBag)\r\n    }\r\n    if (sequenceName === 'nonpartisanOpenPrimary') {\r\n        return electionNonpartisanPrimary(geometry, optionsBag)\r\n    }\r\n    // sequence === 'general'\r\n    return electionGeneral(geometry, optionsBag)\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport electionPhase from '@paretoman/votekit-election-phase'\r\nimport getGeometryForPhase from './getGeometryForPhase.js'\r\nimport getElectionOptions from './getElectionOptions.js'\r\n\r\n/**\r\n * Here we are in the context of an election sequence.\r\n * Run a primary election for each party, then a general election.\r\n * @param {*} geometry\r\n * @param {*} optionsBag\r\n * @returns {*} sequenceResults\r\n */\r\nexport default function electionClosedPrimary(geometry, optionsBag) {\r\n    const { numParties } = geometry.parties\r\n\r\n    const primaryResults = []\r\n    const primaryPhaseOptions = getElectionOptions('closedPrimary', 'closedPrimary', optionsBag)\r\n    for (let i = 0; i < numParties; i++) {\r\n        const { primaryGeometry } = getPrimaryGeometry(geometry, i)\r\n        const { voterGeoms, canPoints } = primaryGeometry\r\n        // todo: think about this\r\n        if (voterGeoms.length === 0) continue\r\n        if (canPoints.length === 0) continue\r\n        const primaryResult = electionPhase(primaryGeometry, primaryPhaseOptions, optionsBag)\r\n        primaryResults[i] = primaryResult\r\n    }\r\n\r\n    const { generalGeometry, primaryWinners } = getGeneralGeometry(geometry, primaryResults, numParties)\r\n    const generalPhaseOptions = getElectionOptions('closedPrimary', 'general', optionsBag)\r\n    const general = electionPhase(generalGeometry, generalPhaseOptions, optionsBag)\r\n\r\n    const results = combineClosedPrimaryGeneral(primaryResults, general, primaryWinners, geometry, optionsBag)\r\n    return results\r\n}\r\n\r\n/**\r\n * Get the geometry for a primary election.\r\n * @param {*} geometry\r\n * @param {*} partyIndex\r\n * @returns {*} primaryGeometry\r\n */\r\nfunction getPrimaryGeometry(geometry, partyIndex) {\r\n    const g0 = getGeometryForPhase('closedPrimary', geometry)\r\n    const primaryGeometry = { ...g0 }\r\n\r\n    // voters\r\n    const { voterParties } = g0\r\n    primaryGeometry.voterGeoms = g0.voterGeoms.filter((v, i) => voterParties[i] === partyIndex)\r\n    primaryGeometry.voterStrategyList = g0.voterStrategyList.filter((v, i) => voterParties[i] === partyIndex)\r\n    primaryGeometry.voterParties = g0.voterParties.filter((v, i) => voterParties[i] === partyIndex)\r\n\r\n    // candidates\r\n    const { partiesByCan } = g0.parties\r\n    const allCanLabels = range(partiesByCan.length)\r\n    primaryGeometry.canLabels = allCanLabels.filter((c, i) => partiesByCan[i] === partyIndex)\r\n    primaryGeometry.canPoints = g0.canPoints.filter((c, i) => partiesByCan[i] === partyIndex)\r\n\r\n    // cleanup\r\n    primaryGeometry.parties = { ...g0.parties }\r\n    primaryGeometry.parties.numParties = 1\r\n    primaryGeometry.parties.partiesByCan = primaryGeometry.parties.partiesByCan.filter((p, i) => partiesByCan[i] === partyIndex)\r\n\r\n    return { primaryGeometry }\r\n}\r\n\r\nfunction getGeneralGeometry(geometry, primaryResults, numParties) {\r\n    const g0 = getGeometryForPhase('general', geometry)\r\n    const generalGeometry = { ...g0 }\r\n\r\n    const primaryWinners = []\r\n    for (let i = 0; i < numParties; i++) {\r\n        const primaryResult = primaryResults[i]\r\n        if (primaryResult === undefined) continue\r\n        const { allocation } = primaryResult.socialChoiceResults\r\n        const { canLabels } = primaryResult.geometry\r\n        if (canLabels === undefined || canLabels.length === 0) continue\r\n        for (let j = 0; j < allocation.length; j++) {\r\n            if (allocation[j]) { // todo: consider allocation > 1\r\n                const iWinner = canLabels[j]\r\n                primaryWinners.push(iWinner)\r\n            }\r\n        }\r\n    }\r\n\r\n    generalGeometry.canPoints = primaryWinners.map((iWinner) => g0.canPoints[iWinner])\r\n    generalGeometry.canLabels = primaryWinners\r\n\r\n    return { generalGeometry, primaryWinners }\r\n}\r\n\r\nfunction combineClosedPrimaryGeneral(primaryResults, general, primaryWinners, geometry, optionsBag) {\r\n    const generalAllocation = general.socialChoiceResults.allocation\r\n    const generalWinnerList = getWinnerList(generalAllocation)\r\n    const iWinners = generalWinnerList.map((i) => primaryWinners[i])\r\n\r\n    const numCans = geometry.canPoints.length\r\n    const allocation = Array(numCans).fill(0)\r\n    iWinners.forEach((iWinner) => {\r\n        allocation[iWinner] = 1\r\n    })\r\n\r\n    const results = {\r\n        phases: {\r\n            closedPrimary: primaryResults,\r\n            general,\r\n        },\r\n        phaseNames: ['closedPrimary', 'general'],\r\n        geometry,\r\n        optionsBag,\r\n        socialChoiceResults: {\r\n            allocation,\r\n        },\r\n    }\r\n\r\n    return results\r\n}\r\n\r\nfunction getWinnerList(allocation) {\r\n    const iWinners = []\r\n    allocation.forEach((winner, i) => {\r\n        if (winner) {\r\n            iWinners.push(i)\r\n        }\r\n    })\r\n    return iWinners\r\n}\r\n","/** @module */\r\n\r\nimport election from '@paretoman/votekit-election'\r\nimport electionCycle from './electionCycle.js'\r\n\r\n/**\r\n * Here we are in the context of a single election phase.\r\n * @param {*} geometry\r\n * @param {*} electionOptions\r\n * @param {*} optionsBag\r\n * @returns {*} electionResults\r\n */\r\nexport default function electionPhase(geometry, electionOptions, optionsBag) {\r\n    const { castOptions } = optionsBag\r\n    const { usePolls } = geometry\r\n\r\n    if (usePolls) {\r\n        return electionCycle(geometry, electionOptions, optionsBag)\r\n    }\r\n\r\n    return election(geometry, electionOptions, castOptions)\r\n}\r\n","/** @module */\r\n\r\nimport castVotesRun from './castVotesRun.js'\r\nimport socialChoiceRun from './socialChoiceRun.js'\r\n\r\n/**\r\n * Here we are in the context of a single election.\r\n * @param {*} geometry\r\n * @param {*} electionOptions\r\n * @param {*} castOptions\r\n * @returns {*}\r\n */\r\nexport default function election(geometry, electionOptions, castOptions) {\r\n    const votes = castVotesRun(geometry, electionOptions, castOptions)\r\n    const socialChoiceResults = socialChoiceRun(votes, electionOptions)\r\n    const electionResults = { geometry, electionOptions, votes, socialChoiceResults }\r\n    return electionResults\r\n}\r\n\r\nexport { socialChoiceRun }\r\n","import voteCasters, { getCanBorders } from '@paretoman/votekit-vote-casters'\r\n\r\nexport default function castVotesRun(geometry, electionOptions, castOptions) {\r\n    const { voteCasterName } = electionOptions\r\n    const { canPoints, voterGeoms, dimensions } = geometry\r\n\r\n    const geometry2 = { ...geometry }\r\n    const canBorders = getCanBorders(canPoints, voterGeoms, dimensions, voteCasterName)\r\n    geometry2.canBorders = canBorders\r\n\r\n    const votes = voteCasters[voteCasterName].cast(geometry2, castOptions)\r\n    return votes\r\n}\r\n","/** @module */\r\n\r\nimport castPlurality from '../plurality/castPlurality.js'\r\nimport castScore from '../score/castScore.js'\r\nimport castScoreFull from '../scoreFull/castScoreFull.js'\r\nimport castRanking from '../ranking/castRanking.js'\r\nimport castPluralityPoint from '../plurality/castPluralityPoint.js'\r\nimport castScorePoint from '../score/castScorePoint.js'\r\nimport castRankingPoint from '../ranking/castRankingPoint.js'\r\nimport castPairwise from '../pairwise/castPairwise.js'\r\nimport castPairwisePoint from '../pairwise/castPairwisePoint.js'\r\nimport makeCanBordersPairwise from '../pairwise/makeCanBordersPairwise.js'\r\nimport makeCanBordersPlurality from '../plurality/makeCanBordersPlurality.js'\r\nimport makeCanBordersRanking from '../ranking/makeCanBordersRanking.js'\r\nimport castRankingFindPolygons from '../ranking/castRankingFindPolygons.js'\r\nimport makeRankingIntervals1D from '../ranking/makeRankingIntervals1D.js'\r\n\r\n/**\r\n * a collection of ways to cast votes\r\n */\r\n\r\nconst voteCasters = {\r\n    plurality: { cast: castPlurality, castPoint: castPluralityPoint, makeCanBorders: makeCanBordersPlurality },\r\n    score: { cast: castScore, castPoint: castScorePoint },\r\n    scoreFull: { cast: castScoreFull, castPoint: castScorePoint },\r\n    ranking: { cast: castRanking, castPoint: castRankingPoint, makeCanBorders: makeCanBordersRanking },\r\n    pairwise: { cast: castPairwise, castPoint: castPairwisePoint, makeCanBorders: makeCanBordersPairwise },\r\n}\r\n\r\nexport function getCanBorders(canPoints, voterGeoms, dimensions, voteCasterName) {\r\n    const { makeCanBorders } = voteCasters[voteCasterName]\r\n    if (makeCanBorders !== undefined) {\r\n        const canBorders = makeCanBorders(canPoints, voterGeoms, dimensions)\r\n        return canBorders\r\n    }\r\n    return {}\r\n}\r\n\r\nexport { castRankingFindPolygons, makeRankingIntervals1D }\r\n\r\nexport default voteCasters\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport seedrandom from 'seedrandom'\r\nimport castPluralityIntervals1D from './castPluralityIntervals1D.js'\r\nimport castPluralityQuadrature2D from './castPluralityQuadrature2D.js'\r\nimport castPluralityGrid from './castPluralityGrid.js'\r\n\r\n/**\r\n * Vote for one.\r\n * Voters cast votes for candidates.\r\n * @param {types.typesGeometry.geometry} geometry - geometry for casting votes\r\n * @param {types.typesCast.castOptions} castOptions - options for how to cast votes.\r\n * @returns {types.typesVotes.votes} votes\r\n */\r\nexport default function castPlurality(geometry, castOptions) {\r\n    const { canPoints, voterGeoms, dimensions, parties, strategySeed, voterStrategyList } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n    const someStrategy = voterStrategyList.some(\r\n        (v) => v.strategy.some(\r\n            (a) => (a.actionName !== 'closest' && a.actionWeight !== 0),\r\n        ),\r\n    )\r\n\r\n    const castRegions = (dimensions === 1)\r\n        ? castPluralityIntervals1D\r\n        : castPluralityQuadrature2D\r\n    const cast = (someGaussian2D || someStrategy) ? castPluralityGrid : castRegions\r\n\r\n    // get fraction of votes for each candidate so we can summarize results\r\n    const n = canPoints.length\r\n    const votesByGeom = []\r\n    const countByCan = (new Array(n)).fill(0)\r\n    let totalVotes = 0\r\n    const strategyRngs = [seedrandom(`green${strategySeed}`), seedrandom(`orange${strategySeed}`)]\r\n    for (let i = 0; i < voterGeoms.length; i++) {\r\n        const voterGeom = voterGeoms[i]\r\n        const voterStrategy = voterStrategyList[i]\r\n\r\n        const votesForGeom = cast(voterGeom, geometry, castOptions, strategyRngs, voterStrategy)\r\n        const { countByCan: countByCanForGeom,\r\n            totalVotes: totalVotesForGeom } = votesForGeom\r\n\r\n        for (let k = 0; k < n; k++) {\r\n            countByCan[k] += countByCanForGeom[k]\r\n        }\r\n        totalVotes += totalVotesForGeom\r\n\r\n        if (verbosity < 2) continue\r\n\r\n        votesByGeom[i] = votesForGeom\r\n    }\r\n    const voteFractionsByCan = countByCan.map((x) => x / totalVotes)\r\n\r\n    const candidateTallies = { voteFractionsByCan }\r\n    const numCans = canPoints.length\r\n    const votes = { candidateTallies, parties, numCans }\r\n    if (verbosity < 2) return votes\r\n\r\n    votes.votesByGeom = votesByGeom\r\n    return votes\r\n}\r\n","export * as typesCanBorders from './typesCanBorders.js'\r\nexport * as typesCast from './typesCast.js'\r\nexport * as typesGeometry from './typesGeometry.js'\r\nexport * as typesGeoms from './typesGeoms.js'\r\nexport * as typesGrid from './typesGrid.js'\r\nexport * as typesMath from './typesMath.js'\r\nexport * as typesPoints from './typesPoints.js'\r\nexport * as typesSocialChoice from './typesSocialChoice.js'\r\nexport * as typesVote from './typesVote.js'\r\nexport * as typesVoteArrays from './typesVoteArrays.js'\r\nexport * as typesVotes from './typesVotes.js'\r\nexport * as typesVotesForGeom from './typesVotesForGeom.js'\r\nexport * as typesVotesForGeomGrid from './typesVotesForGeomGrid.js'\r\n","import * as typesMath from './typesMath.js'\r\n\r\n/**\r\n * @namespace typesCanBorders\r\n */\r\n\r\n/**\r\n * @typedef {object} canBorders\r\n * @property {pairwiseIntervals1D} [pairwiseIntervals1D]\r\n * @property {voronoiIntervals1D} [voronoiIntervals1D]\r\n * @property {voronoiLines2D} [voronoiLines2D]\r\n * @property {rankingIntervals1D} [rankingIntervals1D]\r\n * @memberof typesCanBorders\r\n */\r\n\r\n/**\r\n * @typedef {object} pairwiseIntervals1D\r\n * @property {number[][]} midpoints - midpoint for every pair of candidates\r\n * @property {number[][]} iLower - true if first candidate of pair is lower in x coordinate than second.\r\n * @memberof typesCanBorders\r\n */\r\n/**\r\n * @typedef {object} voronoiIntervals1D\r\n * @memberof typesCanBorders\r\n */\r\n/**\r\n * @typedef {typesMath.lineHomogeneous[]} voronoiLines2D\r\n * @memberof typesCanBorders\r\n */\r\n/**\r\n * @typedef {object} rankingIntervals1D\r\n * @memberof typesCanBorders\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesMath\r\n */\r\n/**\r\n * @typedef {number[]} lineHomogeneous - line in homogeneous coordinates, [ax, ay, b],\r\n * ax * x + ay * y = b\r\n * @memberof typesMath\r\n */\r\n/**\r\n * @typedef {object} vector2D\r\n * @property {number} x\r\n * @property {number} y\r\n * @memberof typesMath\r\n */\r\n\r\nexport default {}\r\n","// How exporting types works:\r\n// https://stackoverflow.com/a/73232942\r\n/**\r\n * @namespace typesCast\r\n */\r\n\r\n/**\r\n * @typedef {object} castOptions - options for how to cast votes.\r\n * @property {number} usr - undersampling ratio. Sample grid points faster by reducing resolution in each dimension by this factor.\r\n * @property {number} verbosity - how much to store in votes data structure.\r\n * @memberof typesCast\r\n */\r\n\r\nexport default {}\r\n","import * as geoms from './typesGeoms.js'\r\nimport * as typesPoints from './typesPoints.js'\r\n\r\n// How exporting types works:\r\n// https://stackoverflow.com/a/73232942\r\n/**\r\n * @namespace typesGeometry\r\n */\r\n/**\r\n * @typedef {object} geometry - geometry for casting votes\r\n * @property {geoms.canPoints} canPoints\r\n * @property {geoms.voterGeoms} voterGeoms\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @property {string} [strategySeed]\r\n * @property {object} [voterStrategyList]\r\n * @memberof typesGeometry\r\n */\r\n\r\n/**\r\n * @typedef {object} parties - describes parties each candidate belongs to.\r\n * @property {number[]} partiesByCan - each candidate has party.\r\n * @property {number} numParties - total number of parties.\r\n * @memberof typesGeometry\r\n */\r\n\r\n/**\r\n * @typedef {object} testGeometry -geometry for casting one vote\r\n * @property {typesPoints.points} canPoints\r\n * @property {typesPoints.points} voterPoints\r\n * @property {number} dimensions\r\n * @property {parties} parties\r\n * @memberof typesGeometry\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesGeoms\r\n */\r\n/**\r\n * @typedef {canPoint1D[] | canPoint2D[]} canPoints - geometries for a number of candidates.\r\n * For 2D, an array of objects: {x,y}. For 1D, an array of objects: {x}.\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {voterGeom1D[] | voterGeom2D[]} voterGeoms - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {voterGeom1D | voterGeom2D} voterGeom - geometries for a number of voters\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {number} canPoint1D - the point where a candidate sits in 1D - x position\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {number[]} canPoint2D - the point where a candidate sits in 2D- [x,y] position\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {object} voterGeom1D - the geometry of a voter distribution in 1D\r\n * @property {number} x - x position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */\r\n/**\r\n * @typedef {object} voterGeom2D - the geometry of a voter distribution in 2D\r\n * @property {number} x - x position\r\n * @property {number} y - y position\r\n * @property {number} w - width\r\n * @property {String} densityProfile - how voters are spread in policy space\r\n * @memberof typesGeoms\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesPoints\r\n */\r\n\r\n/**\r\n * @typedef {point[]} points - For 2D, an array of objects: {x,y,w}. For 1D, an array of objects: {x,w,densityProfile}.\r\n */\r\n/**\r\n * @typedef {point1D | point2D} point\r\n */\r\n/**\r\n * @typedef {number} point1D - a point in 1D, x coordinate in policy space.\r\n * @memberof typesPoints\r\n */\r\n/**\r\n * @typedef {number[]} point2D - a point in 2D, [x,y] coordinates in policy space.\r\n * @memberof typesPoints\r\n */\r\n\r\nexport default {}\r\n","import * as typesGeoms from './typesGeoms.js'\r\nimport * as typesPoints from './typesPoints.js'\r\n\r\n/**\r\n * @namespace typesGrid\r\n */\r\n/**\r\n * @typedef {grid1D | grid2D} grid - data for points on a grid\r\n */\r\n/**\r\n * @typedef {object} grid1D - data for points on a 1D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {typesGeoms.voterGeom1D} voterGeom - the geometry of a voter distribution in 1D\r\n * @memberof typesGrid\r\n */\r\n/**\r\n* @typedef {object} gridX\r\n* @property {number[]} gridX - x coordinates for grid points\r\n* @property {typesPoints.point1D[]} voterPoints - grid points in point1D format\r\n* @property {number} gridPointLength - size of grid point's region in policy space. density * length = count.\r\n * @memberof typesGrid\r\n */\r\n\r\n/**\r\n * @typedef {object} grid2D - data for points on a 2D grid\r\n * @property {number[]} x - x coordinates for grid points\r\n * @property {number[]} y - y coordinates for grid points\r\n * @property {number[]} density - density for grid points\r\n * @property {number[]} voteCounts - voteCount for each grid point\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number} nx - number of x coordinates\r\n * @property {number} ny - number of y coordinates\r\n * @property {number} width - width and height of grid in pixels. grid is square.\r\n * @property {typesPoints.point2D[]} voterPoints - grid points in point2D format\r\n * @property {typesGeoms.voterGeom2D} voterGeom - the geometry of a voter distribution in 2D\r\n * @memberof typesGrid\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesSocialChoice\r\n */\r\n\r\n/**\r\n * @typedef {object} socialChoiceOptions - options to specify a social choice function.\r\n * @property {number} [seats] - Number of candidates to elect.\r\n * @property {number[]} [seatLimits] - Upper limit of number of candidates to elect from each party, useful for OLPR.\r\n * @property {number} [threshold] - The minimum fraction of voters that a party needs to be eligible for a seat.\r\n * @memberof typesSocialChoice\r\n */\r\n\r\n/**\r\n * @typedef {object} socialChoiceResults - the results returned from a social choice function.\r\n * @property {number} [iWinner]\r\n * @property {number[]} [allocation] - says whether each candidate is elected (1) or not (0).\r\n * Allocation also applies to parties. It says how many seats were allocated to each party.\r\n * @memberof typesSocialChoice\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesVote\r\n */\r\n\r\n/**\r\n * @typedef rankingVote - a rank for each candidate.\r\n * @property {number[]} cansByRank - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[][]} [netWinsPairwise] - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */\r\n\r\n/**\r\n * @typedef pairwiseVote - how candidates compare head-to-head.\r\n * @property {number[][]} netWinsPairwise - a win, tie, or loss (1,0,-1) for the first of a pair of candidates, indexed by pair.\r\n * @property {number[]} [cansByRank] - an array of candidates lists, indexed by rank. Candidates can share a rank.\r\n * @property {number[]} [ranking] - an array of ranks, indexed by candidate.\r\n * @property {number[]} [bordaScores] - The borda scores for each candidate for one vote.\r\n * @property {number[]} [bordaFractions] - Fractional borda scores, between 0 and 1.\r\n * @memberof typesVote\r\n */\r\n\r\n/**\r\n * @typedef pluralityVote - a choice of a candidate.\r\n * @property {number} pluralityVote - the chosen candidate.\r\n * A candidate is represented as an integer from 0 to a max.\r\n * The max is the number of candidates minus 1.\r\n * @property {number[]} [pluralityAllocation] - an array of 0's except for a 1 for the chosen candidate.\r\n * @memberof typesVote\r\n */\r\n\r\n/**\r\n * @typedef scoreVote - a score for each candidate.\r\n * @property {number[]} scoreVote - an array of scores, indexed by candidate\r\n * A score is a number between 0 and 1.\r\n * In the future, maybe integers between 0 and a maximum score.\r\n * @memberof typesVote\r\n */\r\n\r\nexport default {}\r\n","/**\r\n * @namespace typesVoteArrays\r\n */\r\n/**\r\n * @typedef {object[][]} scoreVotes - Each preference has a score for each candidate.\r\n * @memberof typesVoteArrays\r\n */\r\n/**\r\n * @typedef {object[][]} rankings - Each preference has a rank for each candidate.\r\n * @memberof typesVoteArrays\r\n */\r\n/**\r\n * @typedef {number[][][]} cansByRankList - Each preference is a list indexed by ranking.\r\n * A list of candidates is at each ranking.\r\n * The first index is a group of voters who share the same ranking.\r\n * The second index is the rank number.\r\n * The third index is for a list of candidates at that rank.\r\n * @memberof typesVoteArrays\r\n */\r\nexport default {}\r\n","import * as typesVotesForGeom from './typesVotesForGeom.js'\r\nimport * as typesGeometry from './typesGeometry.js'\r\nimport * as typesVoteArrays from './typesVoteArrays.js'\r\n\r\n/**\r\n * @namespace typesVotes\r\n */\r\n/**\r\n * @typedef {object} votes - The vote a data structure that contains the information needed to elect, explain, and visualize.\r\n * @property {preferenceLists} [preferenceLists] - Lists of preferences.\r\n * @property {preferenceTallies} [preferenceTallies] - How many votes have a listed preference.\r\n * @property {candidateTallies} [candidateTallies] - vote tallies indexed by candidate\r\n * @property {pairwiseTallies} [pairwiseTallies] - pairwise tallies\r\n * @property {typesVotesForGeom.votesForGeom[]} [votesByGeom] - Vote data for each voter geometry. A list of votesForGeom.\r\n * @property {typesGeometry.parties} [parties] - describes parties each candidate belongs to.\r\n * @property {number} numCans - the number of candidates, comes in handy.\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} preferenceLists - Lists of preferences.\r\n * @property {typesVoteArrays.scoreVotes} [scoreVotes]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} [cansByRankList]\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} preferenceTallies - How many votes have a listed preference.\r\n * @property {number[]} voteFractions - The fraction of voters who share the same preference.\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} candidateTallies - vote tallies indexed by candidate\r\n * @property {number[]} [voteFractionsByCan] - The fraction of plurality votes for each candidate.\r\n * @property {number[]} [scoreFractionAverageByCan] - the average fractional score for each candidate.\r\n * @property {number[]} [firstPreferenceFractions] - A list of fractions of voters\r\n * who ranked a candidate first, indexed by candidate.\r\n * @property {number[]} [bordaFractionAverageByCan] - The average fractional borda score for a candidate.\r\n * @memberof typesVotes\r\n */\r\n/**\r\n * @typedef {object} pairwiseTallies - pairwise tallies\r\n * @property {number[][]} winFractionPairwise - The fraction of wins for the first of a pair of candidates.\r\n * who preferred candidate i over k, indexed by [i][k].\r\n * @memberof typesVotes\r\n */\r\n\r\nexport default {}\r\n","import * as typesVoteArrays from './typesVoteArrays.js'\r\nimport * as typesVotesForGeomGrid from './typesVotesForGeomGrid.js'\r\n\r\n/**\r\n * @namespace typesVotesForGeom\r\n */\r\n/**\r\n * @typedef {typesVotesForGeomGrid.votesForGeomGrid | votesForGeomCells | votesForGeomIntervals | votesForGeomPlurality} votesForGeom\r\n */\r\n\r\n/**\r\n * @typedef {object} votesForGeomCells - Vote data for just one voter geometry in the form of 2D cells.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @property {number[]} voteCounts - number of votes for each cell\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */\r\n/**\r\n * @typedef {object} rankingPolygons2D - calculated cells of 2D policy space where voters share the same ranking.\r\n * @property {number[][][]} cells - each cell is a list of points.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each cell\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each cell\r\n * @memberof typesVotesForGeom\r\n */\r\n\r\n/**\r\n * @typedef {object} votesForGeomIntervals - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} voteCounts - number of votes for each interval\r\n * @property {number} totalVotes - total number of votes\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */\r\n/**\r\n * @typedef {object} rankingIntervals1D - calculated intervals of 1D policy space where voters share the same ranking.\r\n * @property {typesVoteArrays.rankings} rankings - rankings for each interval\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each interval\r\n * @property {number[]} intervalBorders - midpoints and two infinity points\r\n * @memberof typesVotesForGeom\r\n */\r\n\r\n/**\r\n * @typedef {object} votesForGeomPlurality - Vote data for just one voter geometry in the form of 1D intervals.\r\n * @property {number[]} countByCan - The number of plurality votes for a candidate.\r\n * @property {number} totalVotes - total number of votes\r\n * @memberof typesVotesForGeom\r\n */\r\n\r\nexport default {}\r\n","import * as typesGrid from './typesGrid.js'\r\nimport * as typesVote from './typesVote.js'\r\nimport * as typesVoteArrays from './typesVoteArrays.js'\r\nimport * as typesGeoms from './typesGeoms.js'\r\n\r\n/**\r\n * @namespace typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {votesForGeomGridRanking | votesForGeomGridPairwise | votesForGeomGridPlurality | votesForGeomGridScore} votesForGeomGrid - Vote data for just one voter geometry in the form of a grid, 1D or 2D.\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridRanking\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.rankingVote[]} [voteSet] - a vote for each grid point\r\n * @property {number[]} voteCounts\r\n * @property {number} totalVotes\r\n * @property {number[]} [bordaFractionAverageByCan]\r\n * @property {typesVoteArrays.rankings} [rankings]\r\n * @property {typesVoteArrays.cansByRankList} cansByRankList - cansByRank for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridPairwise\r\n * @property {typesGrid.grid} grid - data for points on a grid\r\n * @property {typesVote.rankingVote[]} voteSet - a vote for each grid point\r\n * @property {number} totalVotes\r\n * @property {number[]} bordaFractionAverageByCan\r\n * @property {number[][]} winsPairwise -  The number of wins for the first of a pair of candidates.\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridPlurality\r\n * @property {number[]} countByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.pluralityVote[]} [voteSet] - a vote for each grid point\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridScore\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesVote.scoreVote[]} [voteSet] - a vote for each grid point\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n/**\r\n * @typedef {object} votesForGeomGridScoreFull\r\n * @property {number[]} scoreSumByCan\r\n * @property {number} totalVotes\r\n * @property {number[]} voteCounts\r\n * @property {typesVote.scoreVote[]} voteSet - a vote for each grid point\r\n * @property {typesGrid.grid} [grid] - data for points on a grid\r\n * @property {typesGeoms.voterGeom} [voterGeom]\r\n * @memberof typesVotesForGeomGrid\r\n */\r\n\r\nexport default {}\r\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","/** @module */\r\n\r\nimport { normCDF } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n/**\r\n * Sum area under voter distributions to tally the votes.\r\n * @returns {types.typesVotesForGeom.votesForGeomPlurality}\r\n */\r\nexport default function castPluralityIntervals1D(voterGeom, geometry) {\r\n    const { canPoints, canBorders } = geometry\r\n    const intervals = canBorders.voronoiIntervals1D\r\n\r\n    const sum = (voterGeom.densityProfile === 'gaussian') ? sumGaussian : sumBlock\r\n\r\n    // return sum for each candidate\r\n    const n = canPoints.length\r\n    const countByCan = Array(n)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < n; i++) {\r\n        const voteCount = sum(voterGeom, intervals[i])\r\n        countByCan[i] = voteCount\r\n        totalVotes += voteCount\r\n    }\r\n    return { countByCan, totalVotes }\r\n}\r\n\r\nexport function sumBlock(voterGeom, interval) {\r\n    const { lower, upper } = interval\r\n    const { x, w, densityMax } = voterGeom\r\n    const r = 0.5 * w\r\n    const lower2 = x - r\r\n    const upper2 = x + r\r\n    const lower3 = Math.max(lower, lower2)\r\n    const upper3 = Math.min(upper, upper2)\r\n    const sum = Math.max(0, upper3 - lower3) * densityMax\r\n    return sum\r\n}\r\n\r\nexport function sumGaussian(voterGeom, interval) {\r\n    const { lower, upper } = interval\r\n    const { x, w, densityMax } = voterGeom\r\n    const center = x\r\n    const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n    // evaluate integral of gaussian on interval\r\n    const sum = w * (normCDF(upper, center, sigma) - normCDF(lower, center, sigma)) * densityMax\r\n\r\n    return sum\r\n}\r\n","/**\r\n * Javascript Utilities.\r\n * Just a few helpful functions that are self-contained and don't need much context.\r\n * @module */\r\n\r\nimport makeCandidateDistributionCDF from './makeCandidateDistributionCDF.js'\r\n\r\nexport { makeCandidateDistributionCDF }\r\nexport * from './math.js'\r\nexport * from './statistics.js'\r\nexport * from './minmax.js'\r\nexport * from './copy.js'\r\n","/** @module */\r\n\r\nimport { getCDF } from './statistics.js'\r\n\r\nexport default function makeCandidateDistributionCDF(canDnGeoms, dimensions) {\r\n    const proportion = (dimensions === 1) ? canDnGeoms.map((cd) => cd.w) : canDnGeoms.map((cd) => cd.w ** 2)\r\n    const canDnCDF = getCDF(proportion)\r\n    return canDnCDF\r\n}\r\n","/** @module */\r\n\r\nconst coefInvSqrt2Pi = 1 / (Math.sqrt(2 * Math.PI))\r\n\r\nexport function normPDF(x, mean, sd) {\r\n    const coef = coefInvSqrt2Pi / sd\r\n    return coef * Math.exp(-0.5 * ((x - mean) / sd) ** 2)\r\n}\r\n\r\nexport function normCDF(x, mean, sd) {\r\n    if (x === Infinity) {\r\n        return 1\r\n    } if (x === -Infinity) {\r\n        return 0\r\n    }\r\n    return 0.5 * erf((x - mean) / (sd * Math.sqrt(2))) + 0.5\r\n}\r\n\r\nfunction erf(x) {\r\n    const ERF_A = 0.147\r\n    const x2 = x ** 2\r\n    const down = 1 + ERF_A * x2\r\n    const up = 4 / Math.PI + ERF_A * x2\r\n    const ratio = -(up / down) * x2\r\n    const expofun = Math.exp(ratio)\r\n    const radical = Math.sqrt(1 - expofun)\r\n    const z = radical * Math.sign(x)\r\n    return z\r\n}\r\n\r\n/**\r\n * Make a cumulative distribution function CDF for a set of proportions.\r\n * @param {number[]} proportion - Doesn't have to add to 1. Will normalize.\r\n * @returns {number[]} cdf - Use with randomIndexFromCDF\r\n */\r\nexport function getCDF(proportion) {\r\n    // probability mass function\r\n    const pmf = normalizePDF(proportion)\r\n\r\n    // https://stackoverflow.com/a/20477613\r\n    // [5, 10, 3, 2];\r\n    // [5, 15, 18, 20]\r\n    // cumulative distribution function\r\n    const cdf = []\r\n    pmf.reduce((p, c, i) => {\r\n        const a = p + c\r\n        cdf[i] = a\r\n        return a\r\n    }, 0)\r\n\r\n    return cdf\r\n}\r\n\r\nexport function normalizePDF(pdf) {\r\n    const sum = pdf.reduce((p, c) => p + c)\r\n    return pdf.map((p) => p / sum)\r\n}\r\n\r\nexport function pdfFromCdf(a) {\r\n    return a.map((x, i) => {\r\n        if (i === 0) {\r\n            return x\r\n        }\r\n        return x - a[i - 1]\r\n    })\r\n}\r\n\r\nexport function randomIndexFromCDF(cdf, rng) {\r\n    // sample from distribution\r\n    // pick a random number from 0 to 1\r\n    const random1 = rng()\r\n    const index = cdf.findIndex((x) => x >= random1)\r\n    return index\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * List the indices of an array of length n.\r\n * @param {number} n - length of array\r\n * @returns {number[]} - A number array from 0 to n-1.\r\n */\r\nexport function range(n) {\r\n    const a = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        a[i] = i\r\n    }\r\n    return a\r\n}\r\n\r\nexport function sumArray(a) {\r\n    return a.reduce((p, c) => p + c)\r\n}\r\n\r\nexport function last(a) {\r\n    const n = a.length\r\n    return a[n - 1]\r\n}\r\n","/** @module */\r\n\r\nexport function minIndex(a) {\r\n    let min = Infinity\r\n    let iClosest = null\r\n    for (let i = 0; i < a.length; i++) {\r\n        const d = a[i]\r\n        if (d < min) {\r\n            min = d\r\n            iClosest = i\r\n        }\r\n    }\r\n    return iClosest\r\n}\r\n\r\nexport function maxIndex(a) {\r\n    let max = -Infinity\r\n    let iMax = null\r\n    for (let i = 0; i < a.length; i++) {\r\n        const d = a[i]\r\n        if (d > max) {\r\n            max = d\r\n            iMax = i\r\n        }\r\n    }\r\n    return iMax\r\n}\r\n\r\nexport function minMax(a) {\r\n    let min = a[0]\r\n    let max = a[0]\r\n    for (let i = 0; i < a.length; i++) {\r\n        const d = a[i]\r\n        if (d < min) {\r\n            min = d\r\n        }\r\n        if (d > max) {\r\n            max = d\r\n        }\r\n    }\r\n    return [min, max]\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Try to deepcopy an object.\r\n * @param {object} a - an object to copy.\r\n * @returns {object} A copy of a.\r\n */\r\nexport function jcopy(a) {\r\n    return JSON.parse(JSON.stringify(a))\r\n}\r\n\r\nexport function copyArrayShallow(a) {\r\n    const n = a.length\r\n    const b = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        b[i] = a[i]\r\n    }\r\n    return b\r\n}\r\n\r\nexport function copyArrayShallow2(a) {\r\n    const n = a.length\r\n    const b = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const m = a[i].length\r\n        b[i] = Array(m)\r\n        for (let k = 0; k < m; k++) {\r\n            b[i][k] = a[i][k]\r\n        }\r\n    }\r\n    return b\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport sumCircle from './sumCircle.js'\r\n\r\n/**\r\n * Sum area of voter distributions to tally the votes.\r\n * @returns {types.typesVotesForGeom.votesForGeomPlurality}\r\n */\r\nexport default function castPluralityQuadrature2D(voterGeom, geometry) {\r\n    const lines = geometry.canBorders.voronoiLines2D\r\n    const { densityMax } = voterGeom\r\n    // use lines drawn across shape of voterGeom to sum the area within\r\n\r\n    const n = lines.length\r\n    const countByCan = Array(n)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < n; i++) {\r\n        const lineSet = lines[i]\r\n        // return area for each candidate\r\n        const area = sumCircle(voterGeom, lineSet)\r\n        const voteCount = area * densityMax\r\n        countByCan[i] = voteCount\r\n        totalVotes += voteCount\r\n    }\r\n    return { countByCan, totalVotes }\r\n}\r\n","export default function sumCircle(circle, lineSet) {\r\n    // integrate inside\r\n    //   Need a direction for \"inside\" for each line.\r\n    //   Then do a 1D consideration of what is inside.\r\n\r\n    // for each x coordinate,\r\n    const dx = 2\r\n    let sum = 0\r\n    const x1 = circle.x\r\n    const y1 = circle.y\r\n    const { w } = circle\r\n    const r = 0.5 * w\r\n    // x only goes from x1-r to x1+r\r\n    for (let x = x1 - r; x < x1 + r; x += dx) {\r\n        // find bounds\r\n\r\n        // find equation for circle\r\n\r\n        // (y - y1)**2 + (x-x1)**2 < r**2\r\n        const diff2 = r ** 2 - (x - x1) ** 2\r\n        let half\r\n        if (diff2 > 0) {\r\n            half = Math.sqrt(diff2)\r\n        } else {\r\n            half = 0\r\n        }\r\n        let high = y1 + half\r\n        let low = y1 - half\r\n\r\n        // for each of the constraints, figure out if it is an upper or lower bound,\r\n        // then adjust the bound.\r\n        // The y coefficient tells us whether this is an upper or lower bound.\r\n        // Imagine infinite +y.\r\n        // If the y coefficient is negative, then ax * x + ay * y + b < 0, and ax * x + ay * y + b = 0 is a lower bound.\r\n        // ax * x + ay * y + b = 0\r\n        // y = -(b + ax * x) / ay\r\n        for (let i = 0; i < lineSet.length; i++) {\r\n            const [ax, ay, b] = lineSet[i]\r\n            if (ay === 0) {\r\n                if (ax * x < -b) {\r\n                    // no bounds\r\n                } else {\r\n                    low = Infinity // bounded by x\r\n                }\r\n                // not handling 0,0 case\r\n            } else {\r\n                const y2 = -(b + ax * x) / ay\r\n                if (ay < 0) {\r\n                    low = Math.max(low, y2)\r\n                } else {\r\n                    high = Math.min(high, y2)\r\n                }\r\n            }\r\n        }\r\n\r\n        // count area inside lines\r\n        const dy = high - low\r\n        if (dy > 0) {\r\n            const area = dy * dx\r\n            sum += area\r\n        }\r\n    }\r\n    return sum\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport castPluralityPoint from './castPluralityPoint.js'\r\nimport makeGrid1D from '../voteCasters/makeGrid1D.js'\r\nimport makeGrid2D from '../voteCasters/makeGrid2D.js'\r\n\r\n/**\r\n * Tally votes.\r\n * @returns {types.typesVotesForGeomGrid.votesForGeomGridPlurality}\r\n */\r\nexport default function castPluralityGrid(voterGeom, geometry, castOptions, strategyRngs, voterStrategy) {\r\n    const { canPoints, dimensions, information } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // just find the vote and count at each grid point\r\n    const makeGrid = (dimensions === 1) ? makeGrid1D : makeGrid2D\r\n    const grid = makeGrid(voterGeom, castOptions)\r\n\r\n    const n = canPoints.length\r\n    const countByCan = Array(n).fill(0)\r\n    let totalVotes = 0\r\n\r\n    // find vote\r\n    const gridLength = grid.x.length\r\n    const voteSet = Array(gridLength)\r\n    for (let i = 0; i < gridLength; i++) {\r\n        const voteCounts = grid.voteCounts[i]\r\n        const voterPoint = grid.voterPoints[i]\r\n        const vote = castPluralityPoint(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs)\r\n        const { pluralityVote } = vote\r\n        countByCan[pluralityVote] += voteCounts\r\n        totalVotes += voteCounts\r\n\r\n        if (verbosity < 2) continue\r\n\r\n        voteSet[i] = vote\r\n    }\r\n    if (verbosity < 2) {\r\n        return { countByCan, totalVotes }\r\n    }\r\n    return {\r\n        grid, voteSet, countByCan, totalVotes,\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport strategicPlurality from './strategicPlurality.js'\r\n/**\r\n * Vote for the closest candidate.\r\n * @returns {types.typesVote.pluralityVote}\r\n */\r\nexport default function castPluralityPoint(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs) {\r\n    const d2f = (dimensions === 1) ? d2f1 : d2f2\r\n    const n = canPoints.length\r\n    const dist2 = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        dist2[i] = d2f(canPoints[i], voterPoint)\r\n    }\r\n\r\n    const i = strategicPlurality(dist2, information, voterStrategy, strategyRngs)\r\n\r\n    if (verbosity < 2) {\r\n        return { pluralityVote: i }\r\n    }\r\n\r\n    const pluralityAllocation = (new Array(n)).fill(0)\r\n    pluralityAllocation[i] = 1\r\n    const vote = { pluralityAllocation, pluralityVote: i }\r\n    return vote\r\n}\r\nfunction d2f1(a, b) {\r\n    return (a - b) ** 2\r\n}\r\nfunction d2f2(a, b) {\r\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\r\n}\r\n","import { minIndex, randomIndexFromCDF, range } from '@paretoman/votekit-utilities'\r\n\r\nexport default function strategicPlurality(dist2, information, voterStrategy, strategyRngs) {\r\n    if (voterStrategy === undefined) {\r\n        return minIndex(dist2)\r\n    }\r\n\r\n    const { strategyCDF, strategy } = voterStrategy\r\n    const idx = randomIndexFromCDF(strategyCDF, strategyRngs[0])\r\n    const { actionName, actionOptions } = strategy[idx]\r\n\r\n    if (actionName !== 'lesserEvil') {\r\n        return minIndex(dist2)\r\n    }\r\n\r\n    const { mean, radius } = actionOptions.threshold\r\n    const rnd = strategyRngs[1]()\r\n    const threshold = mean + radius * (rnd * 2 - 1)\r\n\r\n    // determine closest of the viable candidates\r\n    const { voteFractionsByCan, highestScore } = information.polling\r\n    if (highestScore === undefined) {\r\n        return minIndex(dist2)\r\n    }\r\n\r\n    const scoreThreshold = threshold * highestScore\r\n    const indexViable = range(dist2.length).filter((i) => voteFractionsByCan[i] >= scoreThreshold)\r\n    const dist2Viable = dist2.filter((d, i) => voteFractionsByCan[i] >= scoreThreshold)\r\n\r\n    if (dist2Viable.length <= 1) {\r\n        return minIndex(dist2)\r\n    }\r\n\r\n    const minIndexViable = minIndex(dist2Viable)\r\n    const minIdx = indexViable[minIndexViable]\r\n    return minIdx\r\n}\r\n","import { normPDF } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n\r\n/**\r\n * makes 1D grid data structure\r\n * @param {types.typesGeoms.voterGeom1D} voterGeom\r\n * @returns {types.typesGrid.grid1D}\r\n */\r\nexport default function makeGrid1D(voterGeom) {\r\n    const { gridX, voterPoints, gridPointLength } = findGridX(voterGeom)\r\n    const { density, voteCounts, totalVotes } = findDensity(voterGeom, gridX, gridPointLength)\r\n    const grid = { x: gridX, density, voterPoints, voteCounts, totalVotes, voterGeom }\r\n    return grid\r\n}\r\n\r\n/**\r\n * get x coordinates for grid\r\n * @param {types.typesGeoms.voterGeom1D} voterGeom\r\n * @returns {types.typesGrid.gridX}\r\n */\r\nfunction findGridX(voterGeom) {\r\n    const isGauss = voterGeom.densityProfile === 'gaussian'\r\n    const spread = (isGauss) ? 2 : 1\r\n    const iWidth = Math.round(voterGeom.w * spread)\r\n    const gridX = Array(iWidth)\r\n    const voterPoints = Array(iWidth)\r\n    const gridPointLength = 1\r\n\r\n    for (let i = 0; i < iWidth; i++) {\r\n        const x = i + 0.5 - iWidth * 0.5 + voterGeom.x\r\n        gridX[i] = x\r\n        voterPoints[i] = x\r\n    }\r\n    return { gridX, voterPoints, gridPointLength }\r\n}\r\n\r\nfunction findDensity(voterGeom, gridX, gridPointLength) {\r\n    const { x, w, densityProfile, densityMax } = voterGeom\r\n    const isGauss = densityProfile === 'gaussian'\r\n    const density = Array(gridX.length)\r\n    const voteCounts = Array(gridX.length)\r\n\r\n    if (!isGauss) {\r\n        const d = densityMax\r\n        density.fill(d)\r\n        voteCounts.fill(d)\r\n        const totalVotes = voteCounts.length * d\r\n        return { density, voteCounts, totalVotes }\r\n    }\r\n\r\n    const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n    const invNorm = 1 / normPDF(0, 0, sigma)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < gridX.length; i++) {\r\n        const xi = gridX[i]\r\n        const d = normPDF(xi, x, sigma) * invNorm * densityMax\r\n        density[i] = d\r\n        const voteCount = d * gridPointLength\r\n        voteCounts[i] = voteCount\r\n        totalVotes += voteCount\r\n    }\r\n\r\n    return { density, voteCounts, totalVotes }\r\n}\r\n","import { normPDF, range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n/**\r\n * makes 2D grid data structure\r\n * @param {types.typesGeoms.voterGeom2D} voterGeom\r\n * @param {types.typesCast.castOptions} castOptions\r\n * @returns {types.typesGrid.grid2D}\r\n */\r\nexport default function makeGrid2D(voterGeom, castOptions) {\r\n    const { x, y, w, densityProfile } = voterGeom\r\n    const isGauss = densityProfile === 'gaussian'\r\n    const spread = (isGauss) ? 2 : 1\r\n\r\n    const width = w * spread\r\n    const { usr } = castOptions // undersampling ratio\r\n    const iWidth = Math.round(width / usr)\r\n\r\n    // TODO: sample from middle of square\r\n    const ixGrid = range(iWidth)\r\n    const iyGrid = range(iWidth)\r\n    const gridXMargin = ixGrid.map((i) => (i + 0.5) * usr - width * 0.5 + x)\r\n    const gridYMargin = iyGrid.map((i) => (i + 0.5) * usr - width * 0.5 + y)\r\n    const gridPointArea = usr * usr\r\n\r\n    const nx = ixGrid.length\r\n    const ny = iyGrid.length\r\n    const gridLength = nx * ny\r\n    const gridX = Array(gridLength)\r\n    const gridY = Array(gridLength)\r\n    const voterPoints = Array(gridLength)\r\n    let i = 0\r\n\r\n    for (let iy = 0; iy < iyGrid.length; iy++) {\r\n        for (let ix = 0; ix < ixGrid.length; ix++) {\r\n            const gx = gridXMargin[ix]\r\n            const gy = gridYMargin[iy]\r\n            gridX[i] = gx\r\n            gridY[i] = gy\r\n            voterPoints[i] = [gx, gy]\r\n            i += 1\r\n        }\r\n    }\r\n\r\n    const findDensity = (isGauss) ? findDensityGauss : findDensityCircle\r\n    const { density, voteCounts, totalVotes } = findDensity(voterGeom, gridX, gridY, gridPointArea)\r\n\r\n    const grid = {\r\n        x: gridX, y: gridY, nx, ny, width, voterPoints, density, voteCounts, totalVotes, voterGeom,\r\n    }\r\n    return grid\r\n}\r\n\r\nfunction findDensityCircle(voterGeom, gridX, gridY, gridPointArea) {\r\n    const { x, y, w, densityMax } = voterGeom\r\n\r\n    const ni = gridX.length\r\n    const density = Array(ni).fill(0)\r\n    const voteCounts = Array(ni).fill(0)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < ni; i++) {\r\n        const gx = gridX[i]\r\n        const gy = gridY[i]\r\n\r\n        const d2 = (gx - x) ** 2 + (gy - y) ** 2\r\n        const r2 = (0.5 * w) ** 2\r\n        // TODO: for edges, determine how much of the area of the pixel is within the shape.\r\n        if (d2 < r2) {\r\n            density[i] = densityMax\r\n            const voteCount = gridPointArea * densityMax\r\n            voteCounts[i] = voteCount\r\n            totalVotes += voteCount\r\n        }\r\n\r\n        // const density = (d2 < r2) ? 1 : 0\r\n        // return density\r\n    }\r\n\r\n    return { density, voteCounts, totalVotes }\r\n}\r\n\r\nconst invSqrt8 = 1 / Math.sqrt(8)\r\n\r\nfunction findDensityGauss(voterGeom, gridX, gridY, gridPointArea) {\r\n    const { x, y, w, densityMax } = voterGeom\r\n\r\n    // To compare a circle to a 2D normal distribution,\r\n    // set the circle's density to the normal's density at 0.\r\n    // Then the radius R of the circle is related to sigma.\r\n    // radius = sqrt(2) * sigma\r\n    // sigma = radius / sqrt(2)\r\n    // The radius is half the width.\r\n    // sigma = width / sqrt(8)\r\n    const sigma = w * invSqrt8\r\n\r\n    // normalize density to be 1 at the center.\r\n    const invNorm = 1 / normPDF(0, 0, sigma)\r\n    const invNorm2 = invNorm ** 2\r\n\r\n    const ni = gridX.length\r\n    const density = Array(ni)\r\n    const voteCounts = Array(ni)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < ni; i++) {\r\n        const gx = gridX[i]\r\n        const gy = gridY[i]\r\n        const d = normPDF(gx, x, sigma) * normPDF(gy, y, sigma) * invNorm2 * densityMax\r\n        density[i] = d\r\n        const voteCount = d * gridPointArea\r\n        voteCounts[i] = voteCount\r\n        totalVotes += voteCount\r\n    }\r\n    return { density, voteCounts, totalVotes }\r\n}\r\n","/** @module */\r\n\r\nimport seedrandom from 'seedrandom'\r\nimport castScoreGrid from './castScoreGrid.js'\r\n\r\n// The main difference between this and plurality is we need to return a grid from here.\r\n// We also will return a set of votes from that grid.\r\n\r\n/**\r\n * Voters cast votes for candidates.\r\n * @param {object} geometry - geometry for casting votes\r\n * @param {object[]} geometry.canPoints - For 2D, an array of arrays: [x,y].\r\n * For 1D, an array of numbers: x.\r\n * @param {object[]} geometry.voterGeoms - For 2D, an array of objects: {x,y,w}.\r\n * For 1D, an array of objects: {x,w,densityProfile}.\r\n * @param {object} geometry.parties\r\n * @param {object} geometry.strategySeed\r\n * @param {object} geometry.voterStrategyList\r\n * @param {object} castOptions - options for how to cast votes.\r\n * @returns {object} votes\r\n */\r\nexport default function castScore(geometry, castOptions) {\r\n    const { canPoints, voterGeoms, parties, strategySeed, voterStrategyList } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // get fraction of votes for each candidate so we can summarize results\r\n    const n = canPoints.length\r\n    const votesByGeom = []\r\n    const scoreSumByCan = (new Array(n)).fill(0)\r\n    let totalVotes = 0\r\n    const strategyRngs = [seedrandom(`green${strategySeed}`), seedrandom(`orange${strategySeed}`)]\r\n    for (let i = 0; i < voterGeoms.length; i++) {\r\n        const voterGeom = voterGeoms[i]\r\n        const voterStrategy = voterStrategyList[i]\r\n\r\n        const votesForGeom = castScoreGrid(voterGeom, geometry, castOptions, strategyRngs, voterStrategy)\r\n        votesByGeom[i] = votesForGeom\r\n        const { totalVotes: totalVotesForGeom,\r\n            scoreSumByCan: scoreSumByCanForGeom } = votesForGeom\r\n\r\n        for (let k = 0; k < n; k++) {\r\n            scoreSumByCan[k] += scoreSumByCanForGeom[k]\r\n        }\r\n        totalVotes += totalVotesForGeom\r\n    }\r\n    const maxScore = 1\r\n    const scoreFractionAverageByCan = scoreSumByCan.map((x) => x / (totalVotes * maxScore))\r\n\r\n    const candidateTallies = { scoreFractionAverageByCan }\r\n    const numCans = canPoints.length\r\n    const votes = { candidateTallies, parties, numCans }\r\n    if (verbosity < 2) return votes\r\n\r\n    votes.votesByGeom = votesByGeom\r\n    return votes\r\n}\r\n","/** @module */\r\n\r\nimport castScorePoint from './castScorePoint.js'\r\nimport makeGrid1D from '../voteCasters/makeGrid1D.js'\r\nimport makeGrid2D from '../voteCasters/makeGrid2D.js'\r\n\r\n/**\r\n * Tally votes.\r\n */\r\nexport default function castScoreGrid(voterGeom, geometry, castOptions, strategyRngs, voterStrategy) {\r\n    const { canPoints, dimensions, information } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // just find the vote and count at each grid point\r\n    const makeGrid = (dimensions === 1) ? makeGrid1D : makeGrid2D\r\n    const grid = makeGrid(voterGeom, castOptions)\r\n    const { voteCounts, totalVotes, voterPoints } = grid\r\n\r\n    const n = canPoints.length\r\n    const scoreSumByCan = Array(n).fill(0)\r\n\r\n    // find vote\r\n    const gridLength = grid.x.length\r\n    const voteSet = Array(gridLength)\r\n    for (let i = 0; i < gridLength; i++) {\r\n        const voteCount = voteCounts[i]\r\n        const voterPoint = voterPoints[i]\r\n\r\n        const vote = castScorePoint(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs)\r\n        voteSet[i] = vote\r\n        const { scoreVote } = vote\r\n        for (let k = 0; k < n; k++) {\r\n            scoreSumByCan[k] += scoreVote[k] * voteCount\r\n        }\r\n    }\r\n    if (verbosity < 2) {\r\n        return { scoreSumByCan, totalVotes }\r\n    }\r\n    const votesForGeom = { grid, voteSet, scoreSumByCan, totalVotes, voterGeom }\r\n    return votesForGeom\r\n}\r\n","/** @module */\r\n\r\nimport strategicMinMax from './strategicMinMax.js'\r\n\r\n/**\r\n * Vote for the closest candidate.\r\n */\r\nexport default function castScorePoint(canPoints, voterPoint, dimensions, verbosity, information, voterStrategy, strategyRngs) {\r\n    const df = (dimensions === 1) ? df1 : df2\r\n\r\n    const n = canPoints.length\r\n    const dist = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        dist[i] = df(canPoints[i], voterPoint)\r\n    }\r\n\r\n    const [min, max] = strategicMinMax(dist, information, voterStrategy, strategyRngs)\r\n\r\n    // in the current implementation, all candidates are frontrunners\r\n\r\n    const maxscore = 1\r\n    const minscore = 0\r\n    const scoreVote = (new Array(n)).fill(0)\r\n    for (let i = 0; i < n; i++) {\r\n        const d = dist[i]\r\n        if (d <= min) {\r\n            scoreVote[i] = maxscore\r\n        } else if (d >= max) {\r\n            // in the case that the voter likes the frontrunner candidates equally,\r\n            // he just votes for everyone better\r\n            scoreVote[i] = minscore\r\n        } else { // putting this last avoids max==min giving division by 0\r\n            const frac = (d - min) / (max - min)\r\n            // scoreVote[i] = Math.floor(0.5 + minscore + (maxscore - minscore) * (1 - frac))\r\n            scoreVote[i] = minscore + (maxscore - minscore) * (1 - frac)\r\n        }\r\n    }\r\n    const vote = { scoreVote }\r\n    return vote\r\n}\r\nfunction df1(a, b) {\r\n    return Math.abs(a - b)\r\n}\r\nfunction df2(a, b) {\r\n    return Math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\r\n}\r\n","import { minMax, randomIndexFromCDF } from '@paretoman/votekit-utilities'\r\n\r\n/**\r\n * Decide how close a candidate needs to be to get the max score. Similar for min.\r\n * @param {number[]} dist\r\n * @param {object} information\r\n * @param {object} voterStrategy\r\n * @param {function} strategyRngs\r\n * @returns {number[]} [min, max]\r\n */\r\nexport default function strategicMinMax(dist, information, voterStrategy, strategyRngs) {\r\n    if (voterStrategy === undefined) {\r\n        return minMax(dist)\r\n    }\r\n\r\n    const { strategyCDF, strategy } = voterStrategy\r\n    const idx = randomIndexFromCDF(strategyCDF, strategyRngs[0])\r\n    const { actionName, actionOptions } = strategy[idx]\r\n\r\n    if (actionName !== 'normalizeOverFrontrunners') {\r\n        return minMax(dist)\r\n    }\r\n\r\n    const { mean, radius } = actionOptions.threshold\r\n    const rnd = strategyRngs[1]()\r\n    const threshold = mean + radius * (rnd * 2 - 1)\r\n\r\n    // determine closest and furthest of the viable candidates\r\n    const { scoreFractionAverageByCan, highestScore } = information.polling\r\n    if (highestScore === undefined) {\r\n        return minMax(dist)\r\n    }\r\n\r\n    const scoreThreshold = threshold * highestScore\r\n    const distViable = dist.filter((d, i) => scoreFractionAverageByCan[i] >= scoreThreshold)\r\n\r\n    if (distViable.length <= 1) {\r\n        return minMax(dist)\r\n    }\r\n\r\n    return minMax(distViable)\r\n}\r\n","/** @module */\r\n\r\nimport castScoreFullGrid from './castScoreFullGrid.js'\r\n\r\n// The main difference between this and score is we need to return a set of votes from here.\r\n\r\n/**\r\n * Voters cast votes for candidates.\r\n * @param {object} geometry - geometry for casting votes\r\n * @param {object[]} geometry.canPoints - For 2D, an array of arrays: [x,y]. For 1D, an array of numbers: x.\r\n * @param {object[]} geometry.voterGeoms - For 2D, an array of objects: {x,y,w}.\r\n * For 1D, an array of objects: {x,w,densityProfile}.\r\n * @param {object} geometry.parties\r\n * @param {object} castOptions - options for how to cast votes.\r\n * @returns {object} votes\r\n */\r\nexport default function castScoreFull(geometry, castOptions) {\r\n    const { canPoints, voterGeoms, parties } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // get fraction of votes for each candidate so we can summarize results\r\n    const n = canPoints.length\r\n\r\n    // find totalWeight of \"voter area\" over all the voterGeoms\r\n    // then find normalization factor, which is just 1/totalWeight\r\n    let totalVotes = 0\r\n    const votesByGeom = []\r\n    for (let i = 0; i < voterGeoms.length; i++) {\r\n        const voterGeom = voterGeoms[i]\r\n\r\n        const votesForGeom = castScoreFullGrid(voterGeom, geometry, castOptions)\r\n        votesByGeom[i] = votesForGeom\r\n        const { totalVotes: totalVotesForGeom } = votesForGeom\r\n\r\n        totalVotes += totalVotesForGeom\r\n    }\r\n    const invTotalCount = 1 / totalVotes\r\n\r\n    // tally votes\r\n    // flatten voteSets into scoreVotes\r\n    // voteFractions is number of voters with that vote as a fraction of total votes (usually 1 or lower)\r\n    const scoreSumByCan = (new Array(n)).fill(0)\r\n    const scoreVotes = []\r\n    const voteFractions = []\r\n    let index = 0\r\n    for (let i = 0; i < voterGeoms.length; i++) {\r\n        const {\r\n            voteCounts, voteSet,\r\n            scoreSumByCan: scoreSumByCanForGeom,\r\n        } = votesByGeom[i]\r\n\r\n        // use voteIndex to find flattened index\r\n        // voteIndex = Number[] with first index as geometry and second index as voteSet index\r\n        const voteIndex = []\r\n\r\n        for (let j = 0; j < voteSet.length; j++) {\r\n            scoreVotes[index] = voteSet[j].scoreVote\r\n            voteIndex[j] = index\r\n            voteFractions[index] = voteCounts[j] * invTotalCount\r\n            index += 1\r\n        }\r\n        votesByGeom[i].voteIndex = voteIndex\r\n\r\n        for (let k = 0; k < n; k++) {\r\n            scoreSumByCan[k] += scoreSumByCanForGeom[k]\r\n        }\r\n    }\r\n    const maxScore = 1\r\n    const scoreFractionAverageByCan = scoreSumByCan.map((x) => x / (totalVotes * maxScore))\r\n\r\n    const preferenceLists = { scoreVotes }\r\n    const preferenceTallies = { voteFractions }\r\n    const candidateTallies = { scoreFractionAverageByCan }\r\n    const numCans = canPoints.length\r\n\r\n    const votes = { preferenceLists, preferenceTallies, candidateTallies, parties, numCans }\r\n    if (verbosity < 2) return votes\r\n\r\n    votes.votesByGeom = votesByGeom\r\n    return votes\r\n}\r\n","/** @module */\r\n\r\nimport castScorePoint from '../score/castScorePoint.js'\r\nimport makeGrid1D from '../voteCasters/makeGrid1D.js'\r\nimport makeGrid2D from '../voteCasters/makeGrid2D.js'\r\n\r\n/**\r\n * Tally votes.\r\n */\r\nexport default function castScoreFullGrid(voterGeom, geometry, castOptions) {\r\n    const { canPoints, dimensions } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // just find the vote and count at each grid point\r\n    const makeGrid = (dimensions === 1) ? makeGrid1D : makeGrid2D\r\n    const grid = makeGrid(voterGeom, castOptions)\r\n    const { voteCounts, totalVotes, voterPoints } = grid\r\n\r\n    const n = canPoints.length\r\n    const scoreSumByCan = Array(n).fill(0)\r\n\r\n    // find vote\r\n    const gridLength = grid.x.length\r\n    const voteSet = Array(gridLength)\r\n    for (let i = 0; i < gridLength; i++) {\r\n        const voteCount = voteCounts[i]\r\n        const voterPoint = voterPoints[i]\r\n        const vote = castScorePoint(canPoints, voterPoint, dimensions)\r\n        voteSet[i] = vote\r\n        const { scoreVote } = vote\r\n        for (let k = 0; k < n; k++) {\r\n            scoreSumByCan[k] += scoreVote[k] * voteCount\r\n        }\r\n    }\r\n    if (verbosity < 2) {\r\n        return { voteCounts, voteSet, scoreSumByCan, totalVotes }\r\n    }\r\n    const votesForGeom = { grid, voteCounts, voteSet, scoreSumByCan, totalVotes, voterGeom }\r\n    return votesForGeom\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport castRankingGrid from './castRankingGrid.js'\r\nimport castRankingIntervals1D from './castRankingIntervals1D.js'\r\nimport castRankingPolygons2D from './castRankingPolygons2D.js'\r\n\r\n/**\r\n * Voters cast votes for candidates.\r\n * @param {types.typesGeometry.geometry} geometry - geometry for casting votes\r\n * @param {types.typesCast.castOptions} castOptions - options for how to cast votes.\r\n * @returns {types.typesVotes.votes} votes\r\n */\r\n\r\nexport default function castRanking(geometry, castOptions) {\r\n    const { canPoints, voterGeoms, dimensions, parties } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n    const castRegions = (dimensions === 1)\r\n        ? castRankingIntervals1D\r\n        : castRankingPolygons2D\r\n    const cast = (someGaussian2D) ? castRankingGrid : castRegions\r\n\r\n    const n = canPoints.length\r\n\r\n    // get fraction of votes for each candidate so we can summarize results\r\n    const voteCounts = []\r\n    const rankings = []\r\n    const cansByRankList = []\r\n    const firstPreferences = Array(n).fill(0)\r\n    let totalVotes = 0\r\n    const votesByGeom = []\r\n\r\n    // should ideally make a set of polygons for each ranking so that we avoid repeating rankings.\r\n    voterGeoms.forEach((voterGeom, g) => {\r\n        const votesForGeom = cast(voterGeom, geometry, castOptions)\r\n\r\n        const { rankings: rankingsForGeom,\r\n            cansByRankList: cansByRankListForGeom,\r\n            voteCounts: voteCountsForGeom,\r\n            totalVotes: totalVotesForGeom } = votesForGeom\r\n\r\n        // concat\r\n        const n1 = voteCounts.length\r\n        const n2 = voteCountsForGeom.length\r\n        voteCounts.length += n2\r\n        for (let i = 0; i < n2; i++) {\r\n            voteCounts[n1 + i] = voteCountsForGeom[i]\r\n            cansByRankList[n1 + i] = cansByRankListForGeom[i]\r\n        }\r\n        totalVotes += totalVotesForGeom\r\n\r\n        // tally first preferences\r\n        for (let i = 0; i < cansByRankListForGeom.length; i++) {\r\n            const cr0 = cansByRankListForGeom[i][0]\r\n            for (let k = 0; k < cr0.length; k++) {\r\n                const c0 = cr0[k]\r\n                firstPreferences[c0] += voteCountsForGeom[i]\r\n            }\r\n        }\r\n\r\n        if (verbosity < 2) return\r\n\r\n        for (let i = 0; i < n2; i++) {\r\n            rankings[n1 + i] = rankingsForGeom[i]\r\n        }\r\n\r\n        votesByGeom[g] = votesForGeom\r\n    })\r\n    const voteFractions = voteCounts.map((x) => x / totalVotes)\r\n    const firstPreferenceFractions = firstPreferences.map((x) => x / totalVotes)\r\n\r\n    const preferenceLists = { cansByRankList }\r\n    const preferenceTallies = { voteFractions }\r\n    const candidateTallies = { firstPreferenceFractions }\r\n    const numCans = canPoints.length\r\n    const votes = { preferenceLists, preferenceTallies, candidateTallies, parties, numCans }\r\n    if (verbosity < 2) return votes\r\n\r\n    preferenceLists.rankings = rankings\r\n    votes.votesByGeom = votesByGeom\r\n    return votes\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport castRankingPoint from './castRankingPoint.js'\r\nimport makeGrid1D from '../voteCasters/makeGrid1D.js'\r\nimport makeGrid2D from '../voteCasters/makeGrid2D.js'\r\n\r\n/**\r\n * Cast and tally votes on a grid of points.\r\n * @param {types.typesGeoms.voterGeom} voterGeom\r\n * @param {types.typesGeometry.geometry} geometry\r\n * @param {types.typesCast.castOptions} castOptions\r\n * @returns {types.typesVotesForGeomGrid.votesForGeomGridRanking} votesForGeom\r\n */\r\nexport default function castRankingGrid(voterGeom, geometry, castOptions) {\r\n    const { canPoints, dimensions } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // just find the vote and voteCount at each grid point\r\n    const makeGrid = (dimensions === 1) ? makeGrid1D : makeGrid2D\r\n    // @ts-ignore\r\n    const grid = makeGrid(voterGeom, castOptions)\r\n    const { voteCounts, totalVotes, voterPoints } = grid\r\n\r\n    const nk = canPoints.length\r\n    const cansByRankList = new Array(nk)\r\n\r\n    let bordaScoreSumByCan\r\n    let rankings\r\n    let voteSet\r\n    if (verbosity >= 2) {\r\n        bordaScoreSumByCan = Array(nk).fill(0)\r\n        rankings = new Array(nk)\r\n        voteSet = Array(voteCounts.length)\r\n    }\r\n\r\n    // find vote\r\n    for (let i = 0; i < voteCounts.length; i++) {\r\n        const voteCount = voteCounts[i]\r\n        const voterPoint = voterPoints[i]\r\n\r\n        const vote = castRankingPoint(canPoints, voterPoint, dimensions, verbosity)\r\n\r\n        cansByRankList[i] = vote.cansByRank\r\n\r\n        if (verbosity < 2) continue\r\n\r\n        voteSet[i] = vote\r\n\r\n        rankings[i] = vote.ranking\r\n        const { bordaScores } = vote\r\n        for (let k = 0; k < nk; k++) {\r\n            bordaScoreSumByCan[k] += bordaScores[k] * voteCount\r\n        }\r\n    }\r\n    if (verbosity < 2) {\r\n        return { voteCounts, totalVotes, cansByRankList }\r\n    }\r\n\r\n    // bordaScore is nk-1 if a candidate receives all the votes for the voter geometry.\r\n    // bordaFractionAverageByCan is 1 if a candidate receives all the votes.\r\n    const bordaFractionAverageByCan = bordaScoreSumByCan.map(\r\n        (bt) => (bt / (nk - 1)) / totalVotes,\r\n    )\r\n    return { grid, voteSet, voteCounts, totalVotes, bordaFractionAverageByCan, rankings, cansByRankList }\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n/**\r\n * Vote for the closest candidate.\r\n * @returns {types.typesVote.rankingVote}\r\n */\r\nexport default function castRankingPoint(canPoints, voterPoint, dimensions, verbosity) {\r\n    const d2f = (dimensions === 1) ? d2f1 : d2f2\r\n\r\n    const n = canPoints.length\r\n    const dist2 = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        dist2[i] = d2f(canPoints[i], voterPoint)\r\n    }\r\n    const indexInOrder = range(n).sort((a, b) => dist2[a] - dist2[b])\r\n    // Note that ties are not handled.\r\n\r\n    const cansByRank = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const can = indexInOrder[i]\r\n        cansByRank[i] = [can]\r\n    }\r\n\r\n    if (verbosity === 0) return { cansByRank }\r\n\r\n    const ranking = Array(n)\r\n    const bordaScores = Array(n)\r\n    const bordaFractions = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const can = indexInOrder[i]\r\n        ranking[can] = i + 1\r\n        bordaScores[can] = n - i - 1\r\n        bordaFractions[can] = (n - i - 1) / (n - 1)\r\n    }\r\n    // Does i beat k? 1 if yes, -1 if opposite, 0 if tie\r\n    const netWinsPairwise = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        netWinsPairwise[i] = Array(n).fill(0)\r\n        for (let k = 0; k < n; k++) {\r\n            if (dist2[i] === dist2[k]) continue\r\n            netWinsPairwise[i][k] = (dist2[i] < dist2[k]) ? 1 : -1\r\n        }\r\n    }\r\n\r\n    return {\r\n        cansByRank, ranking, netWinsPairwise, bordaFractions, bordaScores,\r\n    }\r\n}\r\nfunction d2f1(a, b) {\r\n    return (a - b) ** 2\r\n}\r\nfunction d2f2(a, b) {\r\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\r\n}\r\n","/** @module */\r\n\r\nimport { sumBlock, sumGaussian } from '../plurality/castPluralityIntervals1D.js'\r\n/**\r\n * Sum density of voter distributions within intervals to tally the votes.\r\n */\r\nexport default function castRankingIntervals1D(voterGeom, geometry, castOptions) {\r\n    const { intervalBorders, rankings, cansByRankList } = geometry.canBorders.rankingIntervals1D\r\n    const { verbosity } = castOptions\r\n\r\n    // find count inside each interval\r\n\r\n    const ni = intervalBorders.length - 1\r\n    const voteCounts = Array(ni)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < ni; i++) {\r\n        // return count for each ranking\r\n        const lower = intervalBorders[i]\r\n        const upper = intervalBorders[i + 1]\r\n        const voteCount = sumInterval(lower, upper, voterGeom)\r\n        voteCounts[i] = voteCount\r\n        totalVotes += voteCount\r\n    }\r\n\r\n    if (verbosity < 2) {\r\n        return { voteCounts, totalVotes, cansByRankList }\r\n    }\r\n    return { voteCounts, totalVotes, cansByRankList, rankings, intervalBorders }\r\n}\r\n\r\nfunction sumInterval(lower, upper, voterGeom) {\r\n    if (voterGeom.densityProfile === 'gaussian') {\r\n        return sumGaussian(voterGeom, { lower, upper })\r\n    }\r\n    return sumBlock(voterGeom, { lower, upper })\r\n}\r\n","/** @module */\r\n\r\nimport { polygonArea } from 'd3-polygon'\r\nimport castRankingFindPolygons from './castRankingFindPolygons.js'\r\n\r\n/**\r\n * Sum area of voter distributions to tally the votes.\r\n */\r\nexport default function castRankingPolygons2D(voterGeom, geometry, castOptions) {\r\n    const { canPoints } = geometry\r\n    const { verbosity } = castOptions\r\n    const { densityMax } = voterGeom\r\n\r\n    // draw lines across shape of voterGeom\r\n    let { cells, rankings, cansByRankList } = castRankingFindPolygons(voterGeom, canPoints, verbosity)\r\n\r\n    // find area of polygons\r\n    const cn = cells.length\r\n    const areas = Array(cn)\r\n    let voteCounts = Array(cn)\r\n    let totalVotes = 0\r\n    for (let i = 0; i < cn; i++) {\r\n        // return area for each ranking\r\n        const area = -polygonArea(cells[i])\r\n        areas[i] = area\r\n        const voteCount = area * densityMax\r\n        voteCounts[i] = voteCount\r\n        totalVotes += voteCount\r\n    }\r\n\r\n    // sometimes near-zero-area polygons are formed that need to be removed\r\n    // because they also have rankings that don't make sense.\r\n    const tol = 0.000001\r\n    cansByRankList = cansByRankList.filter((_, i) => Math.abs(areas[i]) > tol)\r\n    voteCounts = voteCounts.filter((_, i) => Math.abs(areas[i]) > tol)\r\n\r\n    if (verbosity < 2) {\r\n        return { voteCounts, totalVotes, cansByRankList }\r\n    }\r\n    rankings = rankings.filter((_, i) => Math.abs(areas[i]) > tol)\r\n    cells = cells.filter((_, i) => Math.abs(areas[i]) > tol)\r\n    return { voteCounts, totalVotes, cansByRankList, rankings, cells }\r\n}\r\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n}\n","/** @module */\r\n\r\nimport { copyArrayShallow } from '@paretoman/votekit-utilities'\r\nimport equidistantLine from '../plurality/equidistantLine.js'\r\nimport splitConvex from './splitConvex.js'\r\n\r\n/**\r\n * Make polygons for each group of voters that gives a unique ranking.\r\n * Divide a starting polygon into smaller polygons.\r\n * Use a dividing line for each pair of candidates.\r\n * @param {object} voterGeom\r\n * @param {number[][]} canPoints\r\n */\r\nexport default function castRankingFindPolygons(voterGeom, canPoints, verbosity) {\r\n    /* Start with polygons for each voterGeom\r\n    * At each division, increment the borda score for the closer candidate.\r\n    * The resulting borda score is nearly the opposite of the ranking. n-i-1.\r\n    */\r\n    // Just keep dividing up the polygons for each pair.\r\n    // Keep track of the indexes of who won, too.\r\n\r\n    // start with polygons for voterGeom\r\n    const voterPoly = makeCircle(voterGeom)\r\n    let cells = [voterPoly]\r\n\r\n    const n = canPoints.length\r\n    let bordaScore = [Array(n).fill(0)]\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let k = i + 1; k < n; k++) {\r\n            const cn = cells.length\r\n            // split cells with voronoi, guess how many cells\r\n            // the number of cells will only increase, so start with cn and add more if needed\r\n            const newCells = Array(cn)\r\n            const newBordaScore = Array(cn)\r\n\r\n            let o = 0\r\n            for (let m = 0; m < cn; m++) {\r\n                const subject = cells[m]\r\n\r\n                const plane = equidistantLine(canPoints[i], canPoints[k])\r\n\r\n                const newC = splitConvex(subject, plane)\r\n\r\n                // sometimes near-zero-area polygons are formed that need to be removed\r\n                // because they also have rankings that don't make sense.\r\n                const pos = newC.positive\r\n                if (pos !== undefined && pos.length > 2) {\r\n                    newCells[o] = pos\r\n\r\n                    newBordaScore[o] = copyArrayShallow(bordaScore[m])\r\n                    newBordaScore[o][k] += 1\r\n\r\n                    o += 1\r\n                }\r\n                const neg = newC.negative\r\n                if (neg !== undefined && neg.length > 2) {\r\n                    newCells[o] = neg\r\n\r\n                    newBordaScore[o] = copyArrayShallow(bordaScore[m])\r\n                    newBordaScore[o][i] += 1\r\n\r\n                    o += 1\r\n                }\r\n            }\r\n            cells = newCells\r\n            bordaScore = newBordaScore\r\n        }\r\n    }\r\n    const cn = cells.length\r\n    const cansByRankList = Array(cn)\r\n    let rankings\r\n    if (verbosity >= 2) {\r\n        rankings = Array(cn)\r\n        for (let i = 0; i < cn; i++) {\r\n            rankings[i] = Array(n)\r\n        }\r\n    }\r\n    for (let i = 0; i < cn; i++) {\r\n        cansByRankList[i] = Array(n)\r\n        for (let k = 0; k < n; k++) {\r\n            cansByRankList[i][k] = []\r\n        }\r\n        for (let k = 0; k < n; k++) {\r\n            const rik = n - bordaScore[i][k]\r\n            cansByRankList[i][rik - 1].push(k)\r\n            if (verbosity < 2) continue\r\n            rankings[i][k] = rik\r\n        }\r\n    }\r\n    if (verbosity < 2) return { cells, cansByRankList }\r\n\r\n    const rankingPolygons2D = { cells, rankings, cansByRankList }\r\n    return rankingPolygons2D\r\n}\r\n\r\n/**\r\n * Make an approximate circle.\r\n * @param {object} voterGeom\r\n */\r\nfunction makeCircle(voterGeom) {\r\n    const { x, y, w } = voterGeom\r\n    const r = w / 2\r\n    const n = 100\r\n    const circle = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const frac = i / (n - 1)\r\n        const angle = 2 * Math.PI * frac\r\n        const px = x + r * Math.cos(angle)\r\n        const py = y + r * Math.sin(angle)\r\n        circle[i] = [px, py]\r\n    }\r\n    return circle\r\n}\r\n","import * as types from '@paretoman/votekit-types'\r\n/**\r\n * Make line equidistant from two points.\r\n * The line can be used to determine if a new point c is closer to c1 or c2.\r\n * For the line [ax, ay, b] and point c = [x,y], ax * x + ay * y + b < 0 means the point c is closer to c1.\r\n * @param {number[]} c1\r\n * @param {number[]} c2\r\n * @returns {types.typesMath.lineHomogeneous}\r\n */\r\nexport default function equidistantLine(c1, c2) {\r\n    const [c1x, c1y] = c1\r\n    const [c2x, c2y] = c2\r\n\r\n    // ax * x + ay * y + b < 0\r\n    // this is the condition that x counts for a candidate.\r\n\r\n    // line equidistant from two points\r\n    // https://math.stackexchange.com/a/771773\r\n\r\n    // difference between points\r\n    const dx = c2x - c1x\r\n    const dy = c2y - c1y\r\n\r\n    // midpoint between points\r\n    const mx = (c1x + c2x) * 0.5\r\n    const my = (c1y + c2y) * 0.5\r\n\r\n    // equation for line\r\n    // (y-my) / (x-mx) = - dx / dy\r\n    // implies y * dy - my * dy = - x * dx + mx * dx\r\n    // implies dx * x + dy * y = mx * dx + my * dy\r\n    // rename to A = [dx;dy]\r\n    //           b = -(mx * dx + my * dy)\r\n    const ax = dx\r\n    const ay = dy\r\n    const b = -(mx * dx + my * dy)\r\n\r\n    // is c1 or c2 closer?\r\n    // c1 is closer is equivalent to ax * x + ay * y + b < 0\r\n\r\n    return [ax, ay, b]\r\n}\r\n","/** @module */\r\n/**\r\n * Beware, points are references to old points, so make sure to make a copy afterward.\r\n * @param {number[][]} points\r\n * @param {number[]} plane\r\n * @returns {{positive:Number[][], negative:Number[][]}} - Object containing properties\r\n * positive and negative, each being a set of points\r\n */\r\nexport default function splitConvex(points, plane) {\r\n    // put all points on either the positive or negative side of the plane.\r\n    // When we cross to the other side, we create a point in the middle and add it to both.\r\n    const n = points.length\r\n    const pos = []\r\n    const neg = []\r\n    let iPos = 0\r\n    let iNeg = 0\r\n\r\n    let a = points[n - 1]\r\n    let aNeg = calcNeg(plane, a)\r\n    for (let i = 0; i < n; i++) {\r\n        const b = points[i]\r\n        const bNeg = calcNeg(plane, b)\r\n        if ((aNeg && !bNeg) || (!aNeg && bNeg)) {\r\n            const da = calcDist(plane, a)\r\n            const db = calcDist(plane, b)\r\n            const m = lerp(a, b, da, db)\r\n            pos[iPos] = m\r\n            neg[iNeg] = m\r\n            iPos += 1\r\n            iNeg += 1\r\n        }\r\n        if (bNeg) {\r\n            neg[iNeg] = b\r\n            iNeg += 1\r\n        } else {\r\n            pos[iPos] = b\r\n            iPos += 1\r\n        }\r\n        a = b\r\n        aNeg = bNeg\r\n    }\r\n\r\n    return { positive: pos, negative: neg }\r\n}\r\n\r\nfunction calcDist(plane, point) {\r\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\r\n    const numerator = plane[0] * point[0] + plane[1] * point[1] + plane[2]\r\n    const denominator = Math.sqrt(plane[0] ** 2 + plane[1] ** 2)\r\n    return numerator / denominator\r\n}\r\n\r\nfunction calcNeg(plane, point) {\r\n    const numerator = plane[0] * point[0] + plane[1] * point[1] + plane[2]\r\n    return numerator < 0\r\n}\r\n\r\nfunction lerp(a, b, da, db) {\r\n    const d = da - db\r\n    let f = -db / d\r\n    if (f < 0) f = 0\r\n    if (f > 1) f = 1\r\n    const n = [\r\n        f * a[0] + (1 - f) * b[0],\r\n        f * a[1] + (1 - f) * b[1],\r\n    ]\r\n    return n\r\n}\r\n","/** @module */\r\n\r\nimport * as types from '@paretoman/votekit-types'\r\nimport castPairwisePlanes2D from './castPairwisePlanes2D.js'\r\nimport castPairwiseIntervals1D from './castPairwiseIntervals1D.js'\r\nimport castPairwiseGrid from './castPairwiseGrid.js'\r\n/**\r\n * Voters cast votes for candidates.\r\n * @param {types.typesGeometry.geometry} geometry - geometry for casting votes\r\n * @param {types.typesCast.castOptions} castOptions - options for how to cast votes.\r\n * @returns {types.typesVotes.votes} votes\r\n */\r\nexport default function castPairwise(geometry, castOptions) {\r\n    const { canPoints, voterGeoms, dimensions, parties } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n    const castRegions = (dimensions === 1)\r\n        ? castPairwiseIntervals1D\r\n        : castPairwisePlanes2D\r\n    const cast = (someGaussian2D) ? castPairwiseGrid : castRegions\r\n\r\n    // get fraction of votes for each candidate so we can summarize results\r\n    let totalVotes = 0\r\n\r\n    // should ideally make a set of polygons for each ranking so that we avoid repeating rankings.\r\n\r\n    const n = canPoints.length\r\n    const winsPairwise = Array(n).fill(0)\r\n    for (let i = 0; i < n; i++) {\r\n        winsPairwise[i] = Array(n).fill(0)\r\n    }\r\n    const votesByGeom = []\r\n    voterGeoms.forEach((voterGeom, g) => {\r\n        const votesForGeom = cast(voterGeom, geometry, castOptions)\r\n        const { winsPairwise: winsPairwiseForGeom,\r\n            totalVotes: totalVotesForGeom } = votesForGeom\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            for (let k = 0; k < n; k++) {\r\n                winsPairwise[i][k] += winsPairwiseForGeom[i][k]\r\n            }\r\n        }\r\n        totalVotes += totalVotesForGeom\r\n\r\n        if (verbosity < 2) return\r\n\r\n        votesByGeom[g] = votesForGeom\r\n    })\r\n    const invTotalCount = 1 / totalVotes\r\n    const winFractionPairwise = winsPairwise.map((x) => x.map((a) => a * invTotalCount))\r\n\r\n    const pairwiseTallies = { winFractionPairwise }\r\n    const numCans = canPoints.length\r\n    const votes = { pairwiseTallies, parties, numCans }\r\n    if (verbosity < 1) return votes\r\n\r\n    // borda scores\r\n    const bordaScoreSumByCan = Array(n).fill(0)\r\n    const bordaFractionAverageByCan = Array(n)\r\n    const invTotalCountTimesNMinus1 = invTotalCount / (n - 1)\r\n    for (let i = 0; i < n; i++) {\r\n        for (let k = 0; k < n; k++) {\r\n            bordaScoreSumByCan[i] += winsPairwise[i][k]\r\n        }\r\n        bordaFractionAverageByCan[i] = bordaScoreSumByCan[i] * invTotalCountTimesNMinus1\r\n    }\r\n    const candidateTallies = { bordaFractionAverageByCan }\r\n    votes.candidateTallies = candidateTallies\r\n    if (verbosity < 2) return votes\r\n\r\n    votes.votesByGeom = votesByGeom\r\n    return votes\r\n}\r\n","/** @module */\r\n\r\nimport equidistantLine from '../plurality/equidistantLine.js'\r\n\r\n/**\r\n * Sum area of voter distributions to tally the votes.\r\n */\r\nexport default function castPairwisePlanes2D(voterGeom, geometry) {\r\n    const { canPoints } = geometry\r\n\r\n    // draw lines across shape of voterGeom\r\n\r\n    const totalArea = calcVoterTotalArea(voterGeom)\r\n\r\n    const n = canPoints.length\r\n\r\n    const winsPairwise = Array(n).fill(0)\r\n    for (let i = 0; i < n; i++) {\r\n        winsPairwise[i] = Array(n).fill(0)\r\n    }\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let k = i + 1; k < n; k++) {\r\n            // find split plane\r\n\r\n            const plane = equidistantLine(canPoints[i], canPoints[k])\r\n\r\n            const dist = calcDist(plane, voterGeom)\r\n\r\n            // find winsPairwise for i and k\r\n            const iArea = calcArea(dist, voterGeom, totalArea)\r\n            const kArea = totalArea - iArea\r\n\r\n            winsPairwise[i][k] = iArea\r\n            winsPairwise[k][i] = kArea\r\n        }\r\n    }\r\n    return { winsPairwise, totalVotes: totalArea }\r\n}\r\nfunction calcDist(plane, voterGeom) {\r\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\r\n    const numerator = plane[0] * voterGeom.x + plane[1] * voterGeom.y + plane[2]\r\n    const denominator = Math.sqrt(plane[0] ** 2 + plane[1] ** 2)\r\n    return numerator / denominator\r\n}\r\nfunction calcArea(dist, voterGeom, totalArea) {\r\n    // find the area of the cap of circle,\r\n    // where the area starts at a chord at a distance from the center.\r\n\r\n    // https://en.wikipedia.org/wiki/Circular_segment\r\n    const r = voterGeom.w / 2\r\n    if (dist > r) return 0\r\n    if (dist < -r) return totalArea\r\n\r\n    // const area = r ** 2 * Math.acos(dist / r) - dist * Math.sqrt(r ** 2 - dist ** 2)\r\n    const d = dist / r\r\n    const normArea = Math.acos(d) - d * Math.sqrt(1 - d ** 2)\r\n    // https://www.desmos.com/calculator\r\n    // y=\\arccos(d)-d\\sqrt{1-d^{2}}\r\n    const area = r ** 2 * normArea\r\n    return area\r\n}\r\nfunction calcVoterTotalArea(voterGeom) {\r\n    return Math.PI * (voterGeom.w / 2) ** 2\r\n}\r\n","/** @module */\r\n\r\nimport { sumBlock, sumGaussian } from '../plurality/castPluralityIntervals1D.js'\r\n\r\n/**\r\n * Sum density of voter distributions along splits.\r\n */\r\nexport default function castPairwiseIntervals1D(voterGeom, geometry) {\r\n    const { canPoints, canBorders } = geometry\r\n    const { midpoints, iLower } = canBorders.pairwiseIntervals1D\r\n\r\n    const nCans = canPoints.length\r\n\r\n    const totalVotes = calcVoterTotalArea(voterGeom)\r\n\r\n    const winsPairwise = Array(nCans).fill(0)\r\n    for (let i = 0; i < nCans; i++) {\r\n        winsPairwise[i] = Array(nCans).fill(0)\r\n    }\r\n\r\n    for (let i = 0; i < nCans - 1; i++) {\r\n        for (let k = i + 1; k < nCans; k++) {\r\n            // find split plane\r\n            const lower = -Infinity\r\n            const upper = midpoints[i][k]\r\n            const lowerWins = sumInterval(lower, upper, voterGeom)\r\n            const iWins = (iLower[i][k]) ? lowerWins : totalVotes - lowerWins\r\n            const kWins = totalVotes - iWins\r\n\r\n            winsPairwise[i][k] = iWins\r\n            winsPairwise[k][i] = kWins\r\n        }\r\n    }\r\n    return { winsPairwise, totalVotes }\r\n}\r\n\r\nfunction calcVoterTotalArea(voterGeom) {\r\n    const lower = -Infinity\r\n    const upper = Infinity\r\n    return sumInterval(lower, upper, voterGeom)\r\n}\r\n\r\nfunction sumInterval(lower, upper, voterGeom) {\r\n    if (voterGeom.densityProfile === 'gaussian') {\r\n        return sumGaussian(voterGeom, { lower, upper })\r\n    }\r\n    return sumBlock(voterGeom, { lower, upper })\r\n}\r\n","/** @module */\r\n\r\nimport makeGrid1D from '../voteCasters/makeGrid1D.js'\r\nimport makeGrid2D from '../voteCasters/makeGrid2D.js'\r\nimport castPairwisePoint from './castPairwisePoint.js'\r\n\r\n/**\r\n * Tally votes.\r\n */\r\nexport default function castPairwiseGrid(voterGeom, geometry, castOptions) {\r\n    const { canPoints, dimensions } = geometry\r\n    const { verbosity } = castOptions\r\n\r\n    // just find the vote and count at each grid point\r\n    const makeGrid = (dimensions === 1) ? makeGrid1D : makeGrid2D\r\n    const grid = makeGrid(voterGeom, castOptions)\r\n    const { voteCounts, totalVotes, voterPoints } = grid\r\n    const gridLength = voteCounts.length\r\n\r\n    const nk = canPoints.length\r\n    const netWins = new Array(nk)\r\n    for (let i = 0; i < nk; i++) {\r\n        netWins[i] = Array(nk).fill(0)\r\n    }\r\n\r\n    let bordaScoreSumByCan\r\n    if (verbosity >= 1) {\r\n        bordaScoreSumByCan = Array(nk).fill(0)\r\n    }\r\n    let voteSet\r\n    if (verbosity >= 2) {\r\n        voteSet = Array(gridLength)\r\n    }\r\n\r\n    // find vote\r\n    for (let i = 0; i < gridLength; i++) {\r\n        const voteCount = voteCounts[i]\r\n        const voterPoint = voterPoints[i]\r\n        const vote = castPairwisePoint(canPoints, voterPoint, dimensions)\r\n\r\n        const { netWinsPairwise } = vote\r\n        for (let m = 0; m < nk; m++) {\r\n            for (let k = 0; k < nk; k++) {\r\n                if (i === k) continue\r\n                netWins[m][k] += netWinsPairwise[m][k] * voteCount\r\n            }\r\n        }\r\n\r\n        if (verbosity < 1) continue\r\n\r\n        const { bordaScores } = vote\r\n        for (let k = 0; k < nk; k++) {\r\n            bordaScoreSumByCan[k] += bordaScores[k] * voteCount\r\n        }\r\n\r\n        if (verbosity < 2) continue\r\n\r\n        voteSet[i] = vote\r\n    }\r\n\r\n    // netWins is totalVotes if a candidate receives all the votes for the voter geometry.\r\n    // winsPairwise is the total number of votes, too\r\n    const winsPairwise = netWins.map((row) => row.map(\r\n        (net) => (net + totalVotes) * 0.5,\r\n    ))\r\n\r\n    if (verbosity < 1) {\r\n        return { voteCounts, totalVotes, winsPairwise }\r\n    }\r\n\r\n    // bordaScore is nk-1 if a candidate receives all the votes for the voter geometry.\r\n    // bordaFractionAverageByCan is 1 if a candidate receives all the votes.\r\n    const bordaFractionAverageByCan = bordaScoreSumByCan.map(\r\n        (bt) => (bt / (nk - 1)) / totalVotes,\r\n    )\r\n\r\n    return {\r\n        grid, voteSet, winsPairwise, totalVotes, bordaFractionAverageByCan,\r\n    }\r\n}\r\n","/** @module */\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport * as types from '@paretoman/votekit-types'\r\n/**\r\n * Vote for the closest candidate.\r\n * @returns {types.typesVote.pairwiseVote}\r\n */\r\nexport default function castPairwisePoint(canPoints, voterPoint, dimensions, verbosity) {\r\n    const d2f = (dimensions === 1) ? d2f1 : d2f2\r\n\r\n    const n = canPoints.length\r\n    const dist2 = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        dist2[i] = d2f(canPoints[i], voterPoint)\r\n    }\r\n\r\n    // Does i beat k? 1 if yes, -1 if opposite, 0 if tie\r\n    const netWinsPairwise = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        netWinsPairwise[i] = Array(n).fill(0)\r\n        for (let k = 0; k < n; k++) {\r\n            if (dist2[i] === dist2[k]) continue\r\n            netWinsPairwise[i][k] = (dist2[i] < dist2[k]) ? 1 : -1\r\n        }\r\n    }\r\n\r\n    if (verbosity === 0) return { netWinsPairwise }\r\n\r\n    const indexInOrder = range(n).sort((a, b) => dist2[a] - dist2[b])\r\n    // Note that ties are not handled.\r\n\r\n    const ranking = Array(n)\r\n    const bordaScores = Array(n)\r\n    const bordaFractions = Array(n)\r\n    const cansByRank = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const can = indexInOrder[i]\r\n        ranking[can] = i + 1\r\n        bordaScores[can] = n - i - 1\r\n        bordaFractions[can] = (n - i - 1) / (n - 1)\r\n        cansByRank[i] = [can]\r\n    }\r\n\r\n    return {\r\n        cansByRank, ranking, netWinsPairwise, bordaFractions, bordaScores,\r\n    }\r\n}\r\nfunction d2f1(a, b) {\r\n    return (a - b) ** 2\r\n}\r\nfunction d2f2(a, b) {\r\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\r\n}\r\n","import makePairwiseIntervals1D from './makePairwiseIntervals1D.js'\r\n\r\nexport default function makeCanBordersPairwise(canPoints, voterGeoms, dimensions) {\r\n    const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n    if (dimensions === 2 || someGaussian2D) {\r\n        const canBorders = {}\r\n        return canBorders\r\n    }\r\n    const canBorders = { pairwiseIntervals1D: makePairwiseIntervals1D(canPoints) }\r\n    return canBorders\r\n}\r\n","import * as types from '@paretoman/votekit-types'\r\n/**\r\n * divide voterGeom\r\n * compute the midpoints\r\n * identify which candidate is smaller in x value\r\n * @param {number[]} canPoints\r\n * @returns {types.typesCanBorders.pairwiseIntervals1D}\r\n */\r\nexport default function makePairwiseIntervals1D(canPoints) {\r\n    const n = canPoints.length\r\n    const midpoints = Array(n - 1)\r\n    const iLower = Array(n - 1)\r\n    for (let i = 0; i < n - 1; i++) {\r\n        midpoints[i] = Array(n - i - 1)\r\n        iLower[i] = Array(n - i - 1)\r\n        for (let k = i + 1; k < n; k++) {\r\n            const ix = canPoints[i]\r\n            const kx = canPoints[k]\r\n            const midpoint = 0.5 * (ix + kx)\r\n            midpoints[i][k] = midpoint\r\n            iLower[i][k] = (ix < kx)\r\n        }\r\n    }\r\n    const pairwiseIntervals1D = { midpoints, iLower }\r\n    return pairwiseIntervals1D\r\n}\r\n","import makeVoronoiIntervals1D from './makeVoronoiIntervals1D.js'\r\nimport makeVoronoiLines2D from './makeVoronoiLines2D.js'\r\n\r\nexport default function makeCanBordersPlurality(canPoints, voterGeoms, dimensions) {\r\n    const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n    if (someGaussian2D) {\r\n        const canBorders = {}\r\n        return canBorders\r\n    }\r\n    if (dimensions === 1) {\r\n        const canBorders = { voronoiIntervals1D: makeVoronoiIntervals1D(canPoints) }\r\n        return canBorders\r\n    }\r\n    const canBorders = { voronoiLines2D: makeVoronoiLines2D(canPoints) }\r\n    return canBorders\r\n}\r\n","import { range } from '@paretoman/votekit-utilities'\r\n\r\n/** Find boundary between candidates */\r\nexport default function makeVoronoiIntervals1D(canPoints) {\r\n    const n = canPoints.length\r\n    const iSorted = range(n).sort((a, b) => canPoints[a] - canPoints[b])\r\n    const midpoints = new Array(n - 1)\r\n    for (let i = 0; i < n - 1; i++) {\r\n        midpoints[i] = (canPoints[iSorted[i]] + canPoints[iSorted[i + 1]]) * 0.5\r\n    }\r\n    const intervals = new Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        const lower = (i === 0) ? -Infinity : midpoints[i - 1]\r\n        const upper = (i === n - 1) ? Infinity : midpoints[i]\r\n        intervals[iSorted[i]] = { lower, upper }\r\n    }\r\n\r\n    return intervals\r\n}\r\n","import * as types from '@paretoman/votekit-types'\r\nimport equidistantLine from './equidistantLine.js'\r\n/**\r\n * Each pair of candidates defines a potential line for the voronoi diagram.\r\n * @param {number[][]} canPoints\r\n * @returns {types.typesCanBorders.voronoiLines2D}\r\n */\r\nexport default function makeVoronoiLines2D(canPoints) {\r\n    // find all lines\r\n    const n = canPoints.length\r\n    const lines = new Array(n) // each candidate has a set of lines for themselves\r\n    for (let i = 0; i < n; i++) {\r\n        lines[i] = []\r\n        for (let k = 0; k < n; k++) {\r\n            // skip sames\r\n            if (i === k) continue\r\n            // find equation for a line\r\n            const c1 = canPoints[i]\r\n            const c2 = canPoints[k]\r\n            // lines[i][k] = equidistantLine(c1,c2) // problem when i === k\r\n            lines[i].push(equidistantLine(c1, c2))\r\n        }\r\n    }\r\n    return lines\r\n}\r\n","import makeRankingIntervals1D from './makeRankingIntervals1D.js'\r\n\r\nexport default function makeCanBordersRanking(canPoints, voterGeoms, dimensions) {\r\n    const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n    if (someGaussian2D || dimensions === 2) {\r\n        const canBorders = {}\r\n        return canBorders\r\n    }\r\n    const canBorders = { rankingIntervals1D: makeRankingIntervals1D(canPoints) }\r\n    return canBorders\r\n}\r\n","/** @module */\r\n\r\nimport { copyArrayShallow, range } from '@paretoman/votekit-utilities'\r\n\r\n/**\r\n * Find the intervals over which voters share a ranking.\r\n * @param {number[]} canPoints\r\n */\r\nexport default function makeRankingIntervals1D(canPoints) {\r\n    /*\r\n    * Find and sort midpoints for each pair of voters.\r\n    * Find intervals in which voters have a ranking.\r\n    * Include -Inf and Inf as interval bounds.\r\n    * At each division, increment the borda score for the closer candidate.\r\n    * The resulting borda score is nearly the opposite of the ranking. n-i-1.\r\n    */\r\n\r\n    // compute the midpoints\r\n\r\n    const n = canPoints.length\r\n    const iSorted = range(n).sort((a, b) => canPoints[a] - canPoints[b])\r\n\r\n    const mn = 0.5 * n * (n - 1)\r\n    const uMidpoints = Array(mn)\r\n    const uMidpointPair = Array(mn)\r\n    let o = 0\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let k = i + 1; k < n; k++) {\r\n            const ci = iSorted[i]\r\n            const ck = iSorted[k]\r\n            const midpoint = findMidpoint(canPoints[ci], canPoints[ck])\r\n            uMidpoints[o] = midpoint\r\n            uMidpointPair[o] = [ci, ck]\r\n            o += 1\r\n        }\r\n    }\r\n\r\n    // sort the midpoints\r\n    const mSorted = range(mn).sort((a, b) => uMidpoints[a] - uMidpoints[b])\r\n    const midpoints = mSorted.map((i) => uMidpoints[i])\r\n    const midpointPair = mSorted.map((i) => uMidpointPair[i])\r\n\r\n    // compute ranking at lower side\r\n    const ranking = Array(n)\r\n    for (let i = 0; i < n; i++) {\r\n        ranking[iSorted[i]] = i + 1\r\n    }\r\n\r\n    // compute all rankings\r\n\r\n    const rankings = Array(mn + 1)\r\n    rankings[0] = copyArrayShallow(ranking)\r\n    for (let i = 0; i < mn; i++) {\r\n        const [ci, ck] = midpointPair[i]\r\n        ranking[ci] += 1\r\n        ranking[ck] -= 1\r\n        rankings[i + 1] = copyArrayShallow(ranking)\r\n    }\r\n\r\n    const cansByRankList = Array(mn + 1)\r\n    for (let i = 0; i < mn + 1; i++) {\r\n        cansByRankList[i] = Array(n)\r\n        for (let k = 0; k < n; k++) {\r\n            cansByRankList[i][k] = []\r\n        }\r\n        const ri = rankings[i]\r\n        for (let k = 0; k < n; k++) {\r\n            const rik = ri[k]\r\n            cansByRankList[i][rik - 1].push(k)\r\n        }\r\n    }\r\n\r\n    // Add endpoints\r\n    const intervalBorders = copyArrayShallow(midpoints)\r\n    intervalBorders.unshift(-Infinity)\r\n    intervalBorders.push(Infinity)\r\n    const rankingIntervals1D = { intervalBorders, rankings, cansByRankList }\r\n    return rankingIntervals1D\r\n}\r\n\r\nfunction findMidpoint(can1, can2) {\r\n    return (can1 + can2) * 0.5\r\n}\r\n","/** @module */\r\n\r\nimport socialChoiceMethods from '@paretoman/votekit-social-choice-methods'\r\nimport makeAllocation from './makeAllocation.js'\r\n\r\nexport default function socialChoiceRun(votes, electionOptions) {\r\n    // why have two different kinds of results?\r\n    // socialChoiceResults, the smaller one,\r\n    //   is in the context of the social choice method,\r\n    //   which has tallies go in and analysis come out\r\n    // electionResults, the larger one,\r\n    //   is in the context of candidate and voter geometries.\r\n\r\n    const { socialChoiceOptions, socialChoiceMethod } = electionOptions\r\n    const socialChoice = socialChoiceMethods[socialChoiceMethod]\r\n    const socialChoiceResults = socialChoice(votes, socialChoiceOptions)\r\n    if (socialChoiceResults.allocation === undefined) {\r\n        socialChoiceResults.allocation = makeAllocation(votes, socialChoiceResults)\r\n    }\r\n    return socialChoiceResults\r\n}\r\n","/**\r\n * When there is just one winner,\r\n * sometimes the allocation isn't included in the election results.\r\n * So we fill the gap, for now.\r\n */\r\nexport default function makeAllocation(votes, socialChoiceResults) {\r\n    const { numCans } = votes\r\n    const { iWinner } = socialChoiceResults\r\n\r\n    const allocation = Array(numCans).fill(0)\r\n    allocation[iWinner] = 1\r\n    return allocation\r\n}\r\n","/** @module */\r\n\r\nimport election from '@paretoman/votekit-election'\r\nimport calculatePolling from './calculatePolling.js'\r\n\r\n/**\r\n * Here we are in the context of an election cycle with polls followed by a single election.\r\n * @param {*} geometry\r\n * @param {*} electionOptions\r\n * @param {*} optionsBag\r\n * @returns {*} electionResults\r\n */\r\nexport default function electionCycle(geometry, electionOptions, optionsBag) {\r\n    const { pollCount } = optionsBag\r\n\r\n    // run several elections and store the results in electionResultsList\r\n    // return the last one\r\n\r\n    let electionResults = null\r\n    for (let i = 0; i < pollCount + 1; i++) {\r\n        const geometry1 = { ...geometry }\r\n        const polling = calculatePolling(electionResults)\r\n        geometry1.information = { polling }\r\n        const { castOptions } = optionsBag\r\n        electionResults = election(geometry1, electionOptions, castOptions)\r\n    }\r\n    return electionResults\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Get polling information from election results.\r\n * @param {*} lastElectionResults\r\n * @returns {*}\r\n */\r\nexport default function calculatePolling(lastElectionResults) {\r\n    if (lastElectionResults === null) {\r\n        return {}\r\n    }\r\n\r\n    if (lastElectionResults.votes.candidateTallies === undefined) {\r\n        return {}\r\n    }\r\n\r\n    const { scoreFractionAverageByCan } = lastElectionResults.votes.candidateTallies\r\n    const { voteFractionsByCan } = lastElectionResults.votes.candidateTallies\r\n\r\n    if (scoreFractionAverageByCan !== undefined) {\r\n        const highestScore = Math.max(...scoreFractionAverageByCan)\r\n        const polling = { highestScore, scoreFractionAverageByCan }\r\n        return polling\r\n    }\r\n    if (voteFractionsByCan !== undefined) {\r\n        const highestScore = Math.max(...voteFractionsByCan)\r\n        const polling = { highestScore, voteFractionsByCan }\r\n        return polling\r\n    }\r\n\r\n    return {}\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Use phase description to get geometry. Geometry can differ by phase.\r\n * e.g. voter strategy, use of polls\r\n * @param {*} phaseName\r\n * @param {*} geometry\r\n * @returns {*} geometry\r\n */\r\nexport default function getGeometryForPhase(phaseName, geometry) {\r\n    const phaseGeometry = { ...geometry }\r\n\r\n    phaseGeometry.voterStrategyList = geometry.voterStrategyListByPhase[phaseName]\r\n    phaseGeometry.usePolls = geometry.usePollsByPhase[phaseName]\r\n\r\n    delete phaseGeometry.voterStrategyListByPhase\r\n    delete phaseGeometry.usePollsByPhase\r\n\r\n    return phaseGeometry\r\n}\r\n","/** @module */\r\n\r\n/** get election phase options from election options for a phase\r\n * @param {*} sequenceName\r\n * @param {string} phaseName\r\n * @param {*} optionsBag\r\n * @returns {*} election phase options\r\n */\r\nexport default function getElectionOptions(sequenceName, phaseName, optionsBag) {\r\n    const eo = optionsBag.sequenceOptions.sequences[sequenceName].phases[phaseName]\r\n    return eo\r\n}\r\n","/** @module */\r\n\r\nimport electionPhase from '@paretoman/votekit-election-phase'\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport getGeometryForPhase from './getGeometryForPhase.js'\r\nimport getElectionOptions from './getElectionOptions.js'\r\n\r\n/**\r\n * Here we are in the context of the simplest election sequence with one general election phase.\r\n * @param {*} geometry\r\n * @param {*} optionsBag\r\n * @returns {*} sequenceResults\r\n */\r\nexport default function electionGeneral(geometry, optionsBag) {\r\n    const generalGeometry = getGeometryForPhase('general', geometry)\r\n    const allCanLabels = range(geometry.canPoints.length)\r\n    generalGeometry.canLabels = allCanLabels\r\n\r\n    const generalOptions = getElectionOptions('general', 'general', optionsBag)\r\n    const general = electionPhase(generalGeometry, generalOptions, optionsBag)\r\n    const { socialChoiceResults } = general\r\n    const results = {\r\n        phases: {\r\n            general,\r\n        },\r\n        phaseNames: ['general'],\r\n        geometry,\r\n        optionsBag,\r\n        socialChoiceResults,\r\n    }\r\n    return results\r\n}\r\n","/** @module */\r\n\r\nimport electionPhase from '@paretoman/votekit-election-phase'\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport getGeometryForPhase from './getGeometryForPhase.js'\r\nimport getElectionOptions from './getElectionOptions.js'\r\n\r\n/**\r\n * Here we are in the context of an election sequence with two phases, a non-partisan primary, and a general.\r\n * @param {*} geometry\r\n * @param {*} optionsBag\r\n * @returns {*} sequenceResults\r\n */\r\nexport default function electionNonpartisanPrimary(geometry, optionsBag) {\r\n    // primary phase\r\n    const primaryGeometry = getGeometryForPhase('nonpartisanOpenPrimary', geometry)\r\n\r\n    const allCanLabels = range(geometry.canPoints.length)\r\n    primaryGeometry.canLabels = allCanLabels\r\n\r\n    const primaryOptions = getElectionOptions('nonpartisanOpenPrimary', 'nonpartisanOpenPrimary', optionsBag)\r\n    const primary = electionPhase(primaryGeometry, primaryOptions, optionsBag)\r\n\r\n    // general phase\r\n    const { generalGeometry, primaryWinners } = getGeneralGeometry(geometry, primary)\r\n    const generalOptions = getElectionOptions('nonpartisanOpenPrimary', 'general', optionsBag)\r\n    const general = electionPhase(generalGeometry, generalOptions, optionsBag)\r\n\r\n    // combine primary and general results\r\n    const results = combinePrimaryGeneral(primary, general, primaryWinners, geometry, optionsBag)\r\n\r\n    return results\r\n}\r\n/** Get the winners of the primary to be candidates in the general. */\r\nfunction getGeneralGeometry(geometry, primary) {\r\n    const g0 = getGeometryForPhase('general', geometry)\r\n    const generalGeometry = { ...g0 }\r\n\r\n    const { allocation } = primary.socialChoiceResults\r\n    const primaryWinners = getWinnerList(allocation)\r\n    generalGeometry.canPoints = primaryWinners.map((iWinner) => g0.canPoints[iWinner])\r\n    generalGeometry.canLabels = primaryWinners\r\n\r\n    generalGeometry.parties = { ...g0.parties }\r\n    generalGeometry.parties.partiesByCan = primaryWinners.map((iWinner) => g0.parties.partiesByCan[iWinner])\r\n\r\n    return { generalGeometry, primaryWinners }\r\n}\r\n\r\nfunction combinePrimaryGeneral(primary, general, primaryWinners, geometry, optionsBag) {\r\n    const generalAllocation = general.socialChoiceResults.allocation\r\n    const generalWinnerList = getWinnerList(generalAllocation)\r\n    const iWinners = generalWinnerList.map((i) => primaryWinners[i])\r\n\r\n    const numCans = geometry.canPoints.length\r\n    const allocation = Array(numCans).fill(0)\r\n    iWinners.forEach((iWinner) => {\r\n        allocation[iWinner] = 1\r\n    })\r\n\r\n    const results = {\r\n        phases: {\r\n            nonpartisanOpenPrimary: primary,\r\n            general,\r\n        },\r\n        phaseNames: [\r\n            'nonpartisanOpenPrimary',\r\n            'general',\r\n        ],\r\n        geometry,\r\n        optionsBag,\r\n        socialChoiceResults: {\r\n            allocation,\r\n        },\r\n    }\r\n\r\n    return results\r\n}\r\n\r\nfunction getWinnerList(allocation) {\r\n    const iWinners = []\r\n    allocation.forEach((winner, i) => {\r\n        if (winner) {\r\n            iWinners.push(i)\r\n        }\r\n    })\r\n    return iWinners\r\n}\r\n","export default {\r\n    numTracts: 2,\r\n    numDistricts: 3,\r\n    castOptions: {\r\n        usr: 4,\r\n        verbosity: 0,\r\n    },\r\n    numSampleCandidates: 10,\r\n    pollCount: 5,\r\n    sequenceOptions: {\r\n        sequenceName: 'general',\r\n        sequences: {\r\n            general: {\r\n                phases: {\r\n                    general: {\r\n                        socialChoiceMethod: 'plurality',\r\n                        voteCasterName: 'plurality',\r\n                        socialChoiceType: 'singleWinner',\r\n                        socialChoiceOptions: {\r\n                            seats: 1,\r\n                            threshold: 0.1,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n}\r\n","import sampleCanDnGeom1D from './sampleCanDnGeom1D.js'\r\nimport sampleCanDnGeom2D from './sampleCanDnGeom2D.js'\r\n\r\n/**\r\n * Pick a point in the candidate distribution geometry.\r\n * @param {object} canDnGeom - candidate distribution geometry\r\n * @param {number} dimensions\r\n * @returns {object} canGeom\r\n */\r\nexport default function sampleCanDnGeom(canDnGeom, dimensions, rng) {\r\n    if (dimensions === 1) {\r\n        return sampleCanDnGeom1D(canDnGeom, rng)\r\n    }\r\n    return sampleCanDnGeom2D(canDnGeom, rng)\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Use this to sample a random candidate from a distribution.\r\n * @param {object} canDnGeom\r\n * @returns {number} x coordinate\r\n */\r\nexport default function sampleCanDnGeom1D(canDnGeom, rng) {\r\n    const { x, w, densityProfile } = canDnGeom\r\n    // sample circle\r\n    const isGaussian = densityProfile === 'gaussian'\r\n    const sample = (isGaussian) ? sampleGaussian : randomInsideInterval\r\n    const canPoint = sample(x, w * 0.5, rng)\r\n    return canPoint\r\n}\r\n\r\nfunction randomInsideInterval(X, R, rng) {\r\n    const x = (rng() * 2 - 1) * R + X\r\n    return x\r\n}\r\n\r\nconst invSqrtHalfPi = 1 / Math.sqrt(Math.PI / 2)\r\n\r\nfunction sampleGaussian(X, R, rng) {\r\n    // to compare a block to a normal distribution\r\n    // set the block density to the normal density at 0.\r\n    // Then the radius R of the block is related to sigma.\r\n    // R is at sqrt(pi/2) * sigma\r\n    // sigma = R / sqrt(pi/2)\r\n    // The radius is half the width.\r\n    const a = sampleStandardNormal(rng)\r\n    const sigma = R * invSqrtHalfPi\r\n    const x = a * sigma + X\r\n    // const x2 = mag * Math.sin(2 * Math.PI * u2) + X\r\n    return x\r\n}\r\n\r\nfunction sampleStandardNormal(rng) {\r\n    // https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\r\n    const u1 = rng()\r\n    const u2 = rng()\r\n    const mag = Math.sqrt(-2 * Math.log(u1))\r\n    const x = mag * Math.cos(2 * Math.PI * u2)\r\n    return x\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Use this to sample a random candidate from a distribution.\r\n * @param {object} canDnGeom\r\n * @returns {object} x,y coordinates\r\n */\r\nexport default function sampleCanDnGeom2D(canDnGeom, rng) {\r\n    const { x, y, w, densityProfile } = canDnGeom\r\n\r\n    const randomSample = (densityProfile === 'gaussian') ? randomInsideGaussian : randomInsideCircle\r\n    const canPoint = randomSample(x, y, w * 0.5, rng)\r\n    return canPoint\r\n}\r\n\r\nfunction randomInsideCircle(X, Y, R, rng) {\r\n    const [a, b] = randomUnitCircle(rng)\r\n    const x = X + R * a\r\n    const y = Y + R * b\r\n    return [x, y]\r\n}\r\n\r\nfunction randomUnitCircle(rng) {\r\n    let a; let b; let c\r\n    do {\r\n        a = 2 * rng() - 1\r\n        b = 2 * rng() - 1\r\n        c = a * a + b * b\r\n    } while (c > 1 || c === 0)\r\n    return [a, b]\r\n}\r\n\r\nconst invSqrt2 = 1 / Math.sqrt(2)\r\n\r\n/**\r\n * Two samples from gaussian around center with stdev scaled to R.\r\n * @param {number} X center.x\r\n * @param {number} Y center.y\r\n * @param {number} R radius = stdev * sqrt(2)\r\n * @returns {object} point\r\n */\r\nfunction randomInsideGaussian(X, Y, R, rng) {\r\n    const [a, b] = randomStandardNormal(rng)\r\n    // pdfN01 fits inside circle of radius sqrt(2) and density pdfN01([0,0])\r\n    // So we increase the density a little more to fit inside unit circle.\r\n    // Then expand to fill circle of radius R.\r\n    // The circle has a radius R = stdev * sqrt(2).\r\n    const scale = R * invSqrt2\r\n    const x = X + scale * a\r\n    const y = Y + scale * b\r\n    return [x, y]\r\n}\r\n\r\n/**\r\n * Marsaglia Method\r\n * https://www.alanzucconi.com/2015/09/16/how-to-sample-from-a-gaussian-distribution/\r\n * @returns {number[]} Two samples from Random standard normal with mean 0 and stdev 1.\r\n */\r\nfunction randomStandardNormal(rng) {\r\n    let a; let b; let c\r\n    do {\r\n        a = 2 * rng() - 1\r\n        b = 2 * rng() - 1\r\n        c = a * a + b * b\r\n    } while (c > 1 || c === 0)\r\n    const d = Math.log(c) / c\r\n    const e = Math.sqrt(-2 * d)\r\n    return [e * a, e * b]\r\n}\r\n","import seedrandom from 'seedrandom'\r\n\r\n/**\r\n * Make a new random seed, if we want to.\r\n * @param {*} simOptions\r\n * @param {*} changes\r\n */\r\nexport default function updateSeeds(simOptions, changes) {\r\n    if (!changes.checkAny()) return\r\n\r\n    // debug with console log\r\n    // console.log(simOptions.seeds[0])\r\n\r\n    if (!simOptions.seedRandom) return\r\n    if (changes.check(['init', 'seeds'])) return\r\n\r\n    const rng = seedrandom()\r\n    const seed = Math.floor(rng() * 10000)\r\n    simOptions.setSeeds(0, seed)\r\n\r\n    // console.log(`->${simOptions.seeds[0]}`)\r\n}\r\n","/** @module */\r\n\r\nimport geoElection from '@paretoman/votekit-geographic-election'\r\nimport districtElection from '@paretoman/votekit-district-election'\r\nimport { getGeometryForPhase } from '@paretoman/votekit-election-sequence'\r\nimport getGeometry from '../geometry/getGeometry.js'\r\n\r\n/**\r\n * Simulate one election with\r\n *   candidates in defined positions, and\r\n *   voters in a distribution that will be summed over.\r\n * Create a geographical district map with variations of voter center.\r\n * @param {Screen} screen\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {DistrictGeometry} districts\r\n * @constructor\r\n */\r\n// eslint-disable-next-line max-len\r\nexport default function SimModeOne(pub, entities, changes, districts, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const { voterShapeList, candidateList } = entities\r\n\r\n    self.update = () => {\r\n        if (changes.checkNone()) return\r\n\r\n        electionOptionsMan.update()\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        districts.update()\r\n\r\n        const geometry = getGeometry(voterShapeList, candidateList, simOptions, optionsBag, districts)\r\n\r\n        const geoResults = districtPatch(geometry, optionsBag)\r\n\r\n        geoResults.colorRGBAOfCandidates = candidateList.getRGBAList()\r\n\r\n        const simData = { geoResults }\r\n        pub.update(simData)\r\n        changes.clear()\r\n    }\r\n}\r\n\r\nfunction districtPatch(geometry, optionsBag) {\r\n    if (optionsBag.useGeography === true) {\r\n        const { sequenceName } = optionsBag.sequenceOptions\r\n        const phaseName = 'general'\r\n        const electionOptions = optionsBag.sequenceOptions.sequences[sequenceName].phases[phaseName]\r\n        const { castOptions } = optionsBag\r\n        const geometry2 = getGeometryForPhase(phaseName, geometry)\r\n        const deResults = districtElection(geometry2, electionOptions, castOptions)\r\n        const geoResults = deResults\r\n        return geoResults\r\n    }\r\n    // else\r\n    return geoElection(geometry, optionsBag)\r\n}\r\n","// import sumAllocationsStatewide from '@paretoman/votekit-district-election'\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport electionSequence from '@paretoman/votekit-election-sequence'\r\n\r\nexport default function geoElection(geometry0, optionsBag) {\r\n    const { canPoints, parties, voterParties, dimensions, geography, strategySeed, usePollsByPhase, voterStrategyListByPhase, information } = geometry0\r\n    const { voterGeomsByDistrict } = geography\r\n    const { nd } = geography.districtMap\r\n\r\n    // Calculating candidate borders can be useful, unless we have primaries.\r\n    // const voterGeoms00 = voterGeomsByTract[0][0]\r\n    // const { voteCasterName } = optionsBag.electionOptions\r\n    // const canBorders = getCanBorders(canPoints, voterGeoms00, dimensions, voteCasterName)\r\n\r\n    const scResultsByDistrict = range(nd).map((iDistrict) => {\r\n        const voterGeoms = voterGeomsByDistrict[iDistrict]\r\n        const geometry = { voterGeoms, voterParties, canPoints, parties, dimensions, strategySeed, information, usePollsByPhase, voterStrategyListByPhase }\r\n\r\n        const sequenceResults = electionSequence(geometry, optionsBag)\r\n        return sequenceResults\r\n    })\r\n\r\n    // need for visuals\r\n    // votesByTract,\r\n    // votesByDistrict,\r\n    // scResultsByDistrict,\r\n    // votesByTractByDistrict\r\n    // const { electionOptions } = optionsBag\r\n    // const allocation = sumAllocationsStatewide(scResultsByDistrict, canPoints, electionOptions)\r\n    // const socialChoiceResults = { allocation }\r\n\r\n    const electionResults = { scResultsByDistrict, geometry: geometry0 }\r\n    return electionResults\r\n}\r\n","/** @module */\r\n\r\nimport { socialChoiceRun } from '@paretoman/votekit-election'\r\nimport combineVotesStatewide from './combineVotesStatewide.js'\r\nimport combineVotesByDistrict from './combineVotesByDistrict.js'\r\nimport castVotesByTract from './castVotesByTract.js'\r\nimport sumAllocationsStatewide from './combineAllocationsStatewide.js'\r\n\r\n/**\r\n * An election with many districts.\r\n * Voters are from many groups.\r\n * Voter groups are centered around a point.\r\n * The point is moved by simplex noise to create distinct districts.\r\n * All the voter groups share the same voter basis.\r\n */\r\nexport default function districtElection(geometry, electionOptions, castOptions) {\r\n    const { canPoints, geography } = geometry\r\n\r\n    const votesByTract = castVotesByTract(geometry, electionOptions, castOptions)\r\n    const allVotes = combineVotesStatewide(votesByTract, canPoints)\r\n    const votesByDistrict = combineVotesByDistrict(votesByTract, canPoints, geography)\r\n\r\n    const scResultsByDistrict = countDistrictElections(votesByDistrict, electionOptions)\r\n    const allocation = sumAllocationsStatewide(scResultsByDistrict, canPoints, electionOptions)\r\n    const socialChoiceResults = { allocation }\r\n\r\n    const electionResults = {\r\n        electionOptions, geometry, votes: allVotes, votesByTract, votesByDistrict, scResultsByDistrict, socialChoiceResults,\r\n    }\r\n    return electionResults\r\n}\r\n\r\n/** Run separate elections in each district. */\r\nfunction countDistrictElections(votesByDistrict, electionOptions) {\r\n    const scResultsByDistrict = votesByDistrict.map(\r\n        (votes) => socialChoiceRun(votes, electionOptions),\r\n    )\r\n    return scResultsByDistrict\r\n}\r\n","import statewidePairwiseTallies from './statewidePairwiseTallies.js'\r\nimport statewidePreferenceLists from './statewidePreferenceLists.js'\r\nimport statewidePreferenceTallies from './statewidePreferenceTallies.js'\r\nimport statewideCandidateTallies from './statewideCandidateTallies.js'\r\n\r\nexport default function combineVotesStatewide(votesByTract, canPoints) {\r\n    const numCans = canPoints.length\r\n\r\n    const votes = {}\r\n\r\n    if (votesByTract[0][0].candidateTallies !== undefined) {\r\n        votes.candidateTallies = statewideCandidateTallies(votesByTract, numCans)\r\n    }\r\n    if (votesByTract[0][0].pairwiseTallies !== undefined) {\r\n        votes.pairwiseTallies = statewidePairwiseTallies(votesByTract, numCans)\r\n    }\r\n    if (votesByTract[0][0].preferenceLists !== undefined) {\r\n        votes.preferenceLists = statewidePreferenceLists(votesByTract)\r\n        votes.preferenceTallies = statewidePreferenceTallies(votesByTract)\r\n    }\r\n    votes.parties = votesByTract[0][0].parties\r\n    return votes\r\n}\r\n","import getNormStatewide from './getNormStatewide.js'\r\n\r\nexport default function statewidePairwiseTallies(votesByTract, numCans) {\r\n    // average pairwiseTallies\r\n    const tallyNames = Object.keys(votesByTract[0][0].pairwiseTallies)\r\n\r\n    const pairwiseTallies = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const tallyAverage = getPairwiseTallyAverageStatewide(tallyName, votesByTract, numCans)\r\n        pairwiseTallies[tallyName] = tallyAverage\r\n    }\r\n\r\n    return pairwiseTallies\r\n}\r\n\r\nfunction getPairwiseTallyAverageStatewide(tallyName, votesByTract, numCans) {\r\n    const pTotals = Array(numCans)\r\n    for (let k = 0; k < numCans; k++) {\r\n        pTotals[k] = Array(numCans).fill(0)\r\n    }\r\n    votesByTract.forEach(\r\n        (row) => row.forEach(\r\n            (votes) => {\r\n                const pairwiseTally = votes.pairwiseTallies[tallyName]\r\n                for (let i = 0; i < numCans; i++) {\r\n                    for (let k = 0; k < numCans; k++) {\r\n                        pTotals[i][k] += pairwiseTally[i][k]\r\n                    }\r\n                }\r\n            },\r\n        ),\r\n    )\r\n    const dNorm = getNormStatewide(votesByTract)\r\n    const pairwiseTallyAverage = pTotals.map((row) => row.map((t) => t * dNorm))\r\n    return pairwiseTallyAverage\r\n}\r\n","export default function getNormStatewide(votesByTract) {\r\n    const numRows = votesByTract.length\r\n    const numCols = votesByTract[0].length\r\n    const dNorm = 1 / (numRows * numCols)\r\n    return dNorm\r\n}\r\n","export default function statewidePreferenceLists(votesByTract) {\r\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceLists)\r\n\r\n    const preferenceLists = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const preferencesAll = concatPreferenceListsStatewide(tallyName, votesByTract)\r\n        preferenceLists[tallyName] = preferencesAll\r\n    }\r\n\r\n    return preferenceLists\r\n}\r\nfunction concatPreferenceListsStatewide(tallyName, votesByTract) {\r\n    // concatenate preferences\r\n    const preferencesAll = []\r\n    votesByTract.forEach(\r\n        (row) => row.forEach(\r\n            (votes) => {\r\n                const preferences = votes.preferenceLists[tallyName]\r\n\r\n                // concat\r\n                // preferencesAll.push(...preferences)\r\n                const n1 = preferencesAll.length\r\n                const n2 = preferences.length\r\n                preferencesAll.length += preferences.length\r\n                for (let i = 0; i < n2; i++) {\r\n                    preferencesAll[n1 + i] = preferences[i]\r\n                }\r\n            },\r\n        ),\r\n    )\r\n    return preferencesAll\r\n}\r\n","import getNormStatewide from './getNormStatewide.js'\r\n\r\nexport default function statewidePreferenceTallies(votesByTract) {\r\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceTallies)\r\n\r\n    const preferenceTallies = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const tallyAll = concatPreferenceTalliesStatewide(tallyName, votesByTract)\r\n        preferenceTallies[tallyName] = tallyAll\r\n    }\r\n\r\n    return preferenceTallies\r\n}\r\n\r\nfunction concatPreferenceTalliesStatewide(tallyName, votesByTract) {\r\n    // concatenate tallies and normalize\r\n    let tallyAll = []\r\n    votesByTract.forEach(\r\n        (row) => row.forEach(\r\n            (votes) => {\r\n                const tally = votes.preferenceTallies[tallyName]\r\n\r\n                // concat\r\n                // tallyAll.push(...tally)\r\n                const n1 = tallyAll.length\r\n                const n2 = tally.length\r\n                tallyAll.length += tally.length\r\n                for (let i = 0; i < n2; i++) {\r\n                    tallyAll[n1 + i] = tally[i]\r\n                }\r\n            },\r\n        ),\r\n    )\r\n    const dNorm = getNormStatewide(votesByTract)\r\n    tallyAll = tallyAll.map((t) => t * dNorm)\r\n    return tallyAll\r\n}\r\n","import getNormStatewide from './getNormStatewide.js'\r\n\r\nexport default function statewideCandidateTallies(votesByTract, numCans) {\r\n    // average tallies\r\n    const tallyNames = Object.keys(votesByTract[0][0].candidateTallies)\r\n\r\n    const candidateTallies = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const tallyAverage = getCandidateTallyAverageStatewide(tallyName, votesByTract, numCans)\r\n        candidateTallies[tallyName] = tallyAverage\r\n    }\r\n\r\n    return candidateTallies\r\n}\r\n\r\nfunction getCandidateTallyAverageStatewide(tallyName, votesByTract, numCans) {\r\n    // average the tally\r\n    const totals = Array(numCans).fill(0)\r\n    votesByTract.forEach(\r\n        (row) => row.forEach(\r\n            (votes) => {\r\n                const tally = votes.candidateTallies[tallyName]\r\n                for (let k = 0; k < numCans; k++) {\r\n                    totals[k] += tally[k]\r\n                }\r\n            },\r\n        ),\r\n    )\r\n    const dNorm = getNormStatewide(votesByTract)\r\n    const tallyAverage = totals.map((t) => t * dNorm)\r\n    return tallyAverage\r\n}\r\n","import { range } from '@paretoman/votekit-utilities'\r\nimport districtPairwiseTallies from './districtPairwiseTallies.js'\r\nimport districtCandidateTallies from './districtCandidateTallies.js'\r\nimport districtPreferenceLists from './districtPreferenceLists.js'\r\nimport districtPreferenceTallies from './districtPreferenceTallies.js'\r\n\r\nexport default function combineVotesByDistrict(votesByTract, canPoints, geography) {\r\n    const { census } = geography\r\n    const { nd } = geography.districtMap\r\n    const numCans = canPoints.length\r\n\r\n    // Loop through districts.\r\n    // Each district has a census with a list of tracts with weights.\r\n    // The weights indicate what fraction of the tract is in the district.\r\n    // Tracts are listed by index.\r\n    // This is the same index as the votes list uses.\r\n    const votesByDistrict = range(nd).map((iDistrict) => {\r\n        const cen = census[iDistrict]\r\n\r\n        const votes = {}\r\n\r\n        if (votesByTract[0][0].candidateTallies !== undefined) {\r\n            votes.candidateTallies = districtCandidateTallies(votesByTract, cen, numCans)\r\n        }\r\n\r\n        if (votesByTract[0][0].pairwiseTallies !== undefined) {\r\n            votes.pairwiseTallies = districtPairwiseTallies(votesByTract, cen, numCans)\r\n        }\r\n        if (votesByTract[0][0].preferenceLists !== undefined) {\r\n            votes.preferenceLists = districtPreferenceLists(votesByTract, cen)\r\n            votes.preferenceTallies = districtPreferenceTallies(votesByTract, cen)\r\n        }\r\n        votes.parties = votesByTract[0][0].parties\r\n        votes.numCans = numCans\r\n        return votes\r\n    })\r\n    return votesByDistrict\r\n}\r\n","import getNormDistrict from './getNormDistrict.js'\r\n\r\nexport default function districtPairwiseTallies(votesByTract, cen, numCans) {\r\n    // average pairwiseTallies\r\n    const tallyNames = Object.keys(votesByTract[0][0].pairwiseTallies)\r\n\r\n    const pairwiseTallies = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const tallyAverage = getPairwiseTallyAverageForDistrict(tallyName, votesByTract, cen, numCans)\r\n        pairwiseTallies[tallyName] = tallyAverage\r\n    }\r\n\r\n    return pairwiseTallies\r\n}\r\n\r\nfunction getPairwiseTallyAverageForDistrict(tallyName, votesByTract, cen, numCans) {\r\n    const pTotals = Array(numCans)\r\n    for (let k = 0; k < numCans; k++) {\r\n        pTotals[k] = Array(numCans).fill(0)\r\n    }\r\n    for (let j = 0; j < cen.length; j++) {\r\n        const [gx, gy, gf] = cen[j]\r\n        const pairwiseTally = votesByTract[gx][gy].pairwiseTallies[tallyName]\r\n        for (let i = 0; i < numCans; i++) {\r\n            for (let k = 0; k < numCans; k++) {\r\n                pTotals[i][k] += pairwiseTally[i][k] * gf\r\n            }\r\n        }\r\n    }\r\n\r\n    const gfNorm = getNormDistrict(cen)\r\n    const pairwiseTallyAverage = pTotals.map((row) => row.map((t) => t * gfNorm))\r\n    return pairwiseTallyAverage\r\n}\r\n","/**\r\n * Normalize the sum of the stats for a district.\r\n * @param {number[][]} cen - An entry in the census for a district,\r\n * containing the fraction of a tract in a district\r\n * @returns {number} normalizing parameter to multiply stat sum by.\r\n */\r\nexport default function getNormDistrict(cen) {\r\n    let gfSum = 0\r\n    for (let j = 0; j < cen.length; j++) {\r\n        const [, , gf] = cen[j]\r\n        gfSum += gf\r\n    }\r\n    const gfNorm = 1 / gfSum\r\n    return gfNorm\r\n}\r\n","import getNormDistrict from './getNormDistrict.js'\r\n\r\nexport default function districtCandidateTallies(votesByTract, cen, numCans) {\r\n    // average tallies\r\n\r\n    const tallyNames = Object.keys(votesByTract[0][0].candidateTallies)\r\n\r\n    const candidateTallies = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const tallyAverage = getCandidateTallyAverage(tallyName, votesByTract, cen, numCans)\r\n        candidateTallies[tallyName] = tallyAverage\r\n    }\r\n\r\n    return candidateTallies\r\n}\r\n\r\nfunction getCandidateTallyAverage(tallyName, votesByTract, cen, numCans) {\r\n    // average the tally\r\n    const totals = Array(numCans).fill(0)\r\n    for (let j = 0; j < cen.length; j++) {\r\n        const [gx, gy, gf] = cen[j]\r\n        const tally = votesByTract[gx][gy].candidateTallies[tallyName]\r\n        for (let k = 0; k < numCans; k++) {\r\n            totals[k] += tally[k] * gf\r\n        }\r\n    }\r\n    const gfNorm = getNormDistrict(cen)\r\n    const tallyAverage = totals.map((t) => t * gfNorm)\r\n    return tallyAverage\r\n}\r\n","export default function districtPreferenceLists(votesByTract, cen) {\r\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceLists)\r\n\r\n    const preferenceLists = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const preferencesAll = concatPreferenceListsDistrict(tallyName, votesByTract, cen)\r\n        preferenceLists[tallyName] = preferencesAll\r\n    }\r\n\r\n    return preferenceLists\r\n}\r\nfunction concatPreferenceListsDistrict(tallyName, votesByTract, cen) {\r\n    // concatenate preferences\r\n    const preferencesAll = []\r\n    for (let j = 0; j < cen.length; j++) {\r\n        const [gx, gy] = cen[j]\r\n        const votesInTract = votesByTract[gx][gy]\r\n        const preferences = votesInTract.preferenceLists[tallyName]\r\n\r\n        // concat\r\n        // preferencesAll.push(...preferences)\r\n        const n1 = preferencesAll.length\r\n        const n2 = preferences.length\r\n        preferencesAll.length += preferences.length\r\n        for (let i = 0; i < n2; i++) {\r\n            preferencesAll[n1 + i] = preferences[i]\r\n        }\r\n    }\r\n    return preferencesAll\r\n}\r\n","import getNormDistrict from './getNormDistrict.js'\r\n\r\nexport default function districtPreferenceTallies(votesByTract, cen) {\r\n    const tallyNames = Object.keys(votesByTract[0][0].preferenceTallies)\r\n\r\n    const preferenceTallies = {}\r\n    for (let i = 0; i < tallyNames.length; i++) {\r\n        const tallyName = tallyNames[i]\r\n\r\n        const tallyAll = concatPreferenceTalliesDistrict(tallyName, votesByTract, cen)\r\n        preferenceTallies[tallyName] = tallyAll\r\n    }\r\n\r\n    return preferenceTallies\r\n}\r\n\r\nfunction concatPreferenceTalliesDistrict(tallyName, votesByTract, cen) {\r\n    // concatenate tallies and normalize\r\n    const tallyAll = []\r\n    const gfNorm = getNormDistrict(cen)\r\n\r\n    for (let j = 0; j < cen.length; j++) {\r\n        const [gx, gy, gf] = cen[j]\r\n        const votesInTract = votesByTract[gx][gy]\r\n        const tally = votesInTract.preferenceTallies[tallyName]\r\n        const tallyNorm = tally.map((x) => x * gf * gfNorm)\r\n\r\n        // concat\r\n        // tallyAll.push(...tally)\r\n        const n1 = tallyAll.length\r\n        const n2 = tallyNorm.length\r\n        tallyAll.length += tallyNorm.length\r\n        for (let i = 0; i < n2; i++) {\r\n            tallyAll[n1 + i] = tallyNorm[i]\r\n        }\r\n    }\r\n    return tallyAll\r\n}\r\n","import voteCasters, { getCanBorders } from '@paretoman/votekit-vote-casters'\r\n\r\nexport default function castVotesByTract(geometry0, electionOptions, castOptions) {\r\n    const { canPoints, parties, dimensions, geography, strategySeed, voterStrategyList, information } = geometry0\r\n    const { voterGeomsByTract } = geography\r\n\r\n    const voterGeoms00 = voterGeomsByTract[0][0]\r\n    const { voteCasterName } = electionOptions\r\n    const canBorders = getCanBorders(canPoints, voterGeoms00, dimensions, voteCasterName)\r\n\r\n    const votesByTract = voterGeomsByTract.map(\r\n        (row) => row.map(\r\n            (voterGeoms) => {\r\n                const geometry = { voterGeoms, canPoints, parties, dimensions, canBorders, strategySeed, voterStrategyList, information }\r\n                return voteCasters[voteCasterName].cast(geometry, castOptions)\r\n            },\r\n        ),\r\n    )\r\n    return votesByTract\r\n}\r\n","// Show wins across all districts for each candidate\r\nexport default function sumAllocationsStatewide(scResultsByDistrict, canPoints, electionOptions) {\r\n    // make a histogram of allocation\r\n    const numCandidates = canPoints.length\r\n    const allocationsSum = Array(numCandidates).fill(0)\r\n    if (electionOptions.socialChoiceType === 'singleWinner') {\r\n        const iWinners = scResultsByDistrict.map((socialChoiceResults) => socialChoiceResults.iWinner)\r\n        iWinners.forEach((iWinner) => {\r\n            allocationsSum[iWinner] += 1\r\n        })\r\n    } else {\r\n        scResultsByDistrict.forEach(\r\n            (socialChoiceResults) => {\r\n                const { allocation } = socialChoiceResults\r\n                for (let i = 0; i < numCandidates; i++) {\r\n                    allocationsSum[i] += allocation[i]\r\n                }\r\n            },\r\n        )\r\n    }\r\n    return allocationsSum\r\n}\r\n","import getUsePollsByPhase from './getUsePollsByPhase.js'\r\n\r\n/**\r\n * Get geometry inputs to election.\r\n * @param {*} voterShapeList\r\n * @param {*} candidateList\r\n * @param {*} simOptions\r\n * @param {*} districts\r\n * @returns {Object} geometry is input for an election\r\n */\r\nexport default function getGeometry(voterShapeList, candidateList, simOptions, optionsBag, districts) {\r\n    const { dimensions, seeds } = simOptions\r\n    const { geography } = districts\r\n    const { sequenceOptions } = optionsBag\r\n\r\n    const voterGeoms = voterShapeList.getGeoms(dimensions)\r\n    const voterParties = voterShapeList.getParties()\r\n    const voterStrategyListByPhase = voterShapeList.getVoterStrategyListByPhase(sequenceOptions)\r\n    const information = null\r\n    const usePollsByPhase = getUsePollsByPhase(voterStrategyListByPhase)\r\n\r\n    const canPoints = candidateList.getPoints(dimensions)\r\n    const parties = candidateList.getParties()\r\n\r\n    const strategySeed = `pumpkin${seeds[0]}` // todo: use seeds[1] for strategySeed\r\n    const geometry = { voterGeoms, voterParties, canPoints, parties, dimensions, geography, strategySeed, voterStrategyListByPhase, information, usePollsByPhase }\r\n    return geometry\r\n}\r\n","import defaultStrategyRules from './defaultStrategyRules.js'\r\n\r\n/**\r\n * Add entities for a default configuration.\r\n * @param {Entities} entities\r\n */\r\nexport default function addDefaultEntities(entities) {\r\n    const doLoad = true\r\n    entities.candidateList.addCandidate({\r\n        shape2: { x: 50, y: 100 },\r\n        shape1: { x: 50 },\r\n        color: '#e05020',\r\n        doLoad,\r\n    })\r\n    entities.candidateList.addCandidate({\r\n        shape2: { x: 100, y: 50 },\r\n        shape1: { x: 100 },\r\n        color: '#50e020',\r\n        doLoad,\r\n    })\r\n    entities.candidateList.addCandidate({\r\n        shape2: { x: 300 - 100, y: 300 - 50 },\r\n        shape1: { x: 200 },\r\n        color: '#2050e0',\r\n        doLoad,\r\n    })\r\n    entities.candidateDnList.addCandidateDistribution({\r\n        shape2: { x: 150, y: 150, w: 200, densityProfile: 'step' },\r\n        shape1: { x: 150, w: 200, densityProfile: 'gaussian' },\r\n        doLoad,\r\n    })\r\n    entities.voterShapeList.addVoterCircle({\r\n        shape2: { x: 150, y: 150, w: 200, densityProfile: 'step', densityMax: 1 },\r\n        shape1: { x: 150, w: 200, densityProfile: 'gaussian', densityMax: 1 },\r\n        strategyRules: defaultStrategyRules,\r\n        doLoad,\r\n    })\r\n}\r\n","export default function Publisher() {\r\n    const self = this\r\n\r\n    // Publish to View //\r\n    const observers = []\r\n    self.attach = (observer) => { observers.push(observer) }\r\n    self.update = (simData) => { observers.forEach((o) => o.update(simData)) }\r\n}\r\n","/** @module */\r\n\r\nimport makeGeography, { makeTracts, updateCensus, updateDistricts, updateVotersByDistrict, updateVotersByTract } from '@paretoman/votekit-make-geography'\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport default function Districts(voterShapeList, changes, electionOptionsMan, simOptions) {\r\n    const self = this\r\n\r\n    self.init = () => {\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        const { numTracts, numDistricts } = optionsBag\r\n        const { dimensions } = simOptions\r\n        const voterGeoms = voterShapeList.getGeoms(dimensions)\r\n        self.geography = makeGeography(numTracts, numDistricts, voterGeoms, dimensions)\r\n    }\r\n\r\n    let firstRun = true\r\n\r\n    // Update call from sim //\r\n    self.update = () => {\r\n        if (changes.checkNone()) return\r\n\r\n        if (firstRun) {\r\n            firstRun = false\r\n            self.init()\r\n            return\r\n        }\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        if (changes.check(['numTracts'])) {\r\n            const { numTracts } = optionsBag\r\n            self.geography = makeTracts(self.geography, numTracts)\r\n        }\r\n\r\n        if (changes.check(['numDistricts'])) {\r\n            const { numDistricts } = optionsBag\r\n            self.geography = updateDistricts(self.geography, numDistricts)\r\n        }\r\n\r\n        if (changes.check(['numDistricts', 'numTracts'])) {\r\n            self.geography = updateCensus(self.geography)\r\n        }\r\n\r\n        if (changes.check(['voters', 'dimensions', 'numTracts'])) {\r\n            const { dimensions } = simOptions\r\n            const voterGeoms = voterShapeList.getGeoms(dimensions)\r\n            self.geography = updateVotersByTract(self.geography, voterGeoms, dimensions)\r\n            // todo: maybe make this only trigger when voters change\r\n        }\r\n\r\n        if (changes.check(['voters', 'dimensions', 'numTracts', 'numDistricts'])) {\r\n            self.geography = updateVotersByDistrict(self.geography)\r\n            // todo: maybe make this only trigger when voters change\r\n        }\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport makeCensus from './makeCensus.js'\r\nimport makeDistrictMap from './makeDistrictMap.js'\r\nimport makeTractNoise from './makeTractNoise.js'\r\nimport makeVoterGeomsByDistrict from './makeVoterGeomsByDistrict.js'\r\nimport makeVoterGeomsByTract from './makeVoterGeomsByTract.js'\r\n\r\n/** Make tracts */\r\nexport default function makeGeography(numTracts, numDistricts, voterGeoms, dimensions) {\r\n    const nx = numTracts\r\n    const ny = numTracts\r\n    const tractNoise = makeTractNoise(nx, ny)\r\n    const districtMap = makeDistrictMap(numDistricts)\r\n    const census = makeCensus(districtMap, nx, ny)\r\n    const voterGeomsByTract = makeVoterGeomsByTract(voterGeoms, tractNoise, dimensions)\r\n    const voterGeomsByDistrict = makeVoterGeomsByDistrict(census, voterGeomsByTract)\r\n    const geography = { nx, ny, tractNoise, districtMap, census, voterGeomsByTract, voterGeomsByDistrict }\r\n    return geography\r\n}\r\n\r\nexport function makeTracts(geography0, numTracts) {\r\n    const geography = { ...geography0 }\r\n\r\n    /** Number of census tracts in x and y */\r\n    const nx = numTracts\r\n    const ny = numTracts\r\n\r\n    // Code that handles making geographic district noise.\r\n    const tractNoise = makeTractNoise(nx, ny)\r\n\r\n    geography.nx = nx\r\n    geography.ny = ny\r\n    geography.tractNoise = tractNoise\r\n    return geography\r\n}\r\n\r\n/** Make districts */\r\nexport function updateDistricts(geography0, numDistricts) {\r\n    const geography = { ...geography0 }\r\n\r\n    geography.districtMap = makeDistrictMap(numDistricts)\r\n    return geography\r\n}\r\n\r\n/** update census */\r\nexport function updateCensus(geography0) {\r\n    const geography = { ...geography0 }\r\n\r\n    const { districtMap, nx, ny } = geography\r\n    geography.census = makeCensus(districtMap, nx, ny)\r\n    return geography\r\n}\r\n\r\n/** Update VoterGeoms for each Tract */\r\nexport function updateVotersByTract(geography0, voterGeoms, dimensions) {\r\n    const geography = { ...geography0 }\r\n\r\n    const { tractNoise } = geography\r\n    geography.voterGeomsByTract = makeVoterGeomsByTract(voterGeoms, tractNoise, dimensions)\r\n    return geography\r\n}\r\n\r\n/** Update VoterGeoms for each Tract */\r\nexport function updateVotersByDistrict(geography0) {\r\n    const geography = { ...geography0 }\r\n\r\n    const { census, voterGeomsByTract } = geography\r\n    geography.voterGeomsByDistrict = makeVoterGeomsByDistrict(census, voterGeomsByTract)\r\n    return geography\r\n}\r\n","/** @module */\r\n\r\n// import _ from 'https://cdn.skypack.dev/lodash@4.17.21'\r\nimport { range, jcopy } from '@paretoman/votekit-utilities'\r\nimport { polygonArea } from 'd3-polygon'\r\nimport polygonClip from './polygonClip.js'\r\n\r\n/**\r\n * What fraction of each tract lives in each district?\r\n * Return an array indexed by district.\r\n * Each element contains an array of pairs.\r\n * The first of the pair is a tract's pair of coordinates.\r\n * The second of the pair is the fraction of the tract within that district.\r\n * @returns {number[][][]} - an array of districts,\r\n * each with a list of census tract properties [x,y,overlap]\r\n */\r\nexport default function makeCensus(districtMap, nx, ny) {\r\n    const { nd, polygons } = districtMap\r\n\r\n    const census = Array(nd).fill().map(() => [])\r\n\r\n    const xScale = 1 / nx\r\n    const yScale = 1 / ny\r\n    for (let gx = 0; gx < nx; gx++) { // x-coordinate of tract\r\n        for (let gy = 0; gy < ny; gy++) { // y-coordinate of tract\r\n            const subject = makeSquare(gx * xScale, gy * yScale, xScale, yScale)\r\n            range(nd).forEach((iDistrict) => {\r\n                const poly = polygons[iDistrict]\r\n                const clip = jcopy(poly).reverse()\r\n                const overlap = polygonClip(clip, subject)\r\n\r\n                // store data more sparsely because it is more efficient\r\n                // loop through all districts\r\n                if (overlap !== null) {\r\n                    const gf = polygonArea(overlap)\r\n                    census[iDistrict].push([gx, gy, gf])\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return census\r\n}\r\n\r\nfunction makeSquare(x, y, w, h) {\r\n    // the points are in counterclockwise order\r\n    // assuming a coordinate system where y points down and x points right.\r\n    // top left\r\n    // bottom left\r\n    // bottom right\r\n    // top right\r\n    const subject = [\r\n        [x, y],\r\n        [x, y + h],\r\n        [x + w, y + h],\r\n        [x + w, y],\r\n    ]\r\n    return subject\r\n}\r\n","// @ts-nocheck\r\n\r\n/**\r\n * Clips a polygon with another polygon to return a polygon.\r\n * Polygons must be counter-clockwise.\r\n * https://observablehq.com/@d3/polygonclip@1237\r\n * @param {number[][]} clip - polygon\r\n * @param {number[][]} subject0 - polygon, gets mutated\r\n * @returns {number[][]} - polygon\r\n */\r\nexport default function polygonClip(clip, subject0) {\r\n    const closed = polygonClosed(subject0)\r\n    const n = clip.length - polygonClosed(clip)\r\n    const subject = subject0.slice() // copy before mutate\r\n    for (let i = 0, a = clip[n - 1], b, c, d; i < n; ++i) {\r\n        const input = subject.slice()\r\n        const m = input.length - closed\r\n        subject.length = 0\r\n        b = clip[i]\r\n        c = input[m - 1]\r\n        for (let j = 0; j < m; ++j) {\r\n            d = input[j]\r\n            if (lineOrient(d, a, b)) {\r\n                if (!lineOrient(c, a, b)) {\r\n                    subject.push(lineIntersect(c, d, a, b))\r\n                }\r\n                subject.push(d)\r\n            } else if (lineOrient(c, a, b)) {\r\n                subject.push(lineIntersect(c, d, a, b))\r\n            }\r\n            c = d\r\n        }\r\n        if (closed) subject.push(subject[0])\r\n        a = b\r\n    }\r\n    return subject.length ? subject : null\r\n}\r\nfunction lineOrient([px, py], [ax, ay], [bx, by]) {\r\n    return (bx - ax) * (py - ay) < (by - ay) * (px - ax)\r\n}\r\nfunction lineIntersect([ax, ay], [bx, by], [cx, cy], [dx, dy]) {\r\n    const bax = bx - ax; const bay = by - ay; const dcx = dx - cx; const\r\n        dcy = dy - cy\r\n    const k = (bax * (cy - ay) - bay * (cx - ax)) / (bay * dcx - bax * dcy)\r\n    return [cx + k * dcx, cy + k * dcy]\r\n}\r\nfunction polygonClosed(points) {\r\n    const [ax, ay] = points[0]; const\r\n        [bx, by] = points[points.length - 1]\r\n    return ax === bx && ay === by\r\n}\r\nexport function polygonConvex(points) {\r\n    const n = points.length\r\n    const [rx, ry] = points[n - 2]\r\n    let [qx, qy] = points[n - 1]\r\n    let vx = rx - qx; let\r\n        vy = ry - qy\r\n    for (let i = 0; i < n; ++i) {\r\n        const [px, py] = points[i]\r\n        const wx = qx - px; const\r\n            wy = qy - py\r\n        if (wx * vy < wy * vx) return false\r\n        if (wx || wy) {\r\n            vx = wx\r\n            vy = wy\r\n        }\r\n        qx = px\r\n        qy = py\r\n    }\r\n    return true\r\n}\r\n\r\nexport function testClip() {\r\n    const subject = [\r\n        [79, 200], [266, 100],\r\n        [452, 200],\r\n        [359, 450],\r\n        [172, 420]]\r\n    const clip = [[210, 90], [110, 400], [420, 400], [490, 250]]\r\n\r\n    return polygonClip(clip, subject)\r\n}\r\n","/** @module */\r\n\r\nimport { polygonArea } from 'd3-polygon'\r\nimport lloydVoronoi from './lloydVoronoi.js'\r\n/**\r\n * Makes and draws district boundaries for districts of equal number of voters.\r\n * Right now, just for a uniform square geography.\r\n * Each axis is from 0 to 1.\r\n * The total area is 1.\r\n * Define district lines and count voters.\r\n * @param {number} nd - number of districts.\r\n */\r\nexport default function makeDistrictMap(nd) {\r\n    const [centroids, voronoi, polygons] = lloydVoronoi(1, 1, nd, 0.01)\r\n    const polygonAreas = polygons.map(polygonArea).map((x) => -x)\r\n\r\n    const districtMap = { nd, centroids, voronoi, polygons, polygonAreas }\r\n\r\n    return districtMap\r\n}\r\n","/** @module */\r\n\r\nimport { polygonCentroid } from 'd3-polygon'\r\nimport { Delaunay } from 'd3-delaunay'\r\n\r\n/**\r\n * Calculate a voronoi diagram with some degree of equal capacity between voronoi cells.\r\n * Uses Lloyd's method.\r\n * @param {number} w - number of discrete points wide of space to divide\r\n * @param {number} h - number of points high\r\n * @param {number} n - number of voronoi cells\r\n * @param {number} tolFraction - fractional tolerance for relaxation. Maybe .01 is good.\r\n * @returns Centroids (list of points) and voronoi d3 object\r\n */\r\nexport default function lloydVoronoi(w, h, n, tolFraction) {\r\n    let centroids = randomPoints(w, h, n)\r\n    let converged = false\r\n    let voronoi\r\n    let polygons\r\n    const tol = tolFraction * Math.min(w, h)\r\n    for (let i = 0; i < 1000; i++) {\r\n        [centroids, converged, voronoi, polygons] = relax(centroids, w, h, tol)\r\n        if (converged) return centroids\r\n    }\r\n    return [centroids, voronoi, polygons]\r\n}\r\n\r\n// https://bl.ocks.org/veltman/3d1fb70e6993d4eb2eff7112c9e7bcf4\r\n\r\nfunction randomPoints(w, h, n) {\r\n    return Array(n).fill().map(() => [Math.random() * w, Math.random() * h])\r\n}\r\n\r\nfunction relax(points, w, h, tol) {\r\n    const delaunay = Delaunay.from(points)\r\n    const voronoi = delaunay.voronoi([0, 0, w, h])\r\n    const polygons = range(points.length).map((i) => voronoi.cellPolygon(i))\r\n    const centroids = polygons.map(polygonCentroid)\r\n    const converged = points.every((point, i) => distance2(point, centroids[i]) < tol)\r\n    return [centroids, converged, voronoi, polygons]\r\n}\r\n\r\n// function relax3(points, w, h) {\r\n//     const polygons = voronoi(points).polygons()\r\n//     polygons.map(d3.polygonCentroid)\r\n//     const converged = points.every((point, i) => distance2(point, centroids[i]) < 1)\r\n//     return { centroids, converged }\r\n// }\r\n\r\n// cellPolygons.prototype.map = function* (mapper, thisArg) {\r\n//     for (const val of this) {\r\n//         yield mapper.call(thisArg, val)\r\n//     }\r\n// }\r\n\r\nfunction distance2(x, y) {\r\n    return x ** 2 + y ** 2\r\n}\r\n\r\nfunction range(n) {\r\n    return [...Array(n).keys()]\r\n}\r\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      x = 0,\n      y = 0,\n      a,\n      b = polygon[n - 1],\n      c,\n      k = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    k += c = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * c;\n    y += (a[1] + b[1]) * c;\n  }\n\n  return k *= 3, [x / k, y / k];\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        // find the point closest to the seed\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                const d = this._dists[id];\n                if (d > d0) {\n                    hull[j++] = id;\n                    d0 = d;\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","\nexport {orient2d, orient2dfast} from './esm/orient2d.js';\nexport {orient3d, orient3dfast} from './esm/orient3d.js';\nexport {incircle, incirclefast} from './esm/incircle.js';\nexport {insphere, inspherefast} from './esm/insphere.js';\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, scale} from './util.js';\n\nconst o3derrboundA = (7 + 56 * epsilon) * epsilon;\nconst o3derrboundB = (3 + 28 * epsilon) * epsilon;\nconst o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst at_b = vec(4);\nconst at_c = vec(4);\nconst bt_c = vec(4);\nconst bt_a = vec(4);\nconst ct_a = vec(4);\nconst ct_b = vec(4);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abt = vec(8);\nconst u = vec(4);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _16 = vec(8);\nconst _12 = vec(12);\n\nlet fin = vec(192);\nlet fin2 = vec(192);\n\nfunction finadd(finlen, alen, a) {\n    finlen = sum(finlen, fin, alen, a, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction tailinit(xtail, ytail, ax, ay, bx, by, a, b) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;\n    if (xtail === 0) {\n        if (ytail === 0) {\n            a[0] = 0;\n            b[0] = 0;\n            return 1;\n        } else {\n            negate = -ytail;\n            s1 = negate * ax;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        }\n    } else {\n        if (ytail === 0) {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            negate = -xtail;\n            s1 = negate * by;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        } else {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = ytail * ax;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            a[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            a[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            a[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            a[3] = u3;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = xtail * by;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            b[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            b[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            b[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            b[3] = u3;\n            return 4;\n        }\n    }\n}\n\nfunction tailadd(finlen, a, b, k, z) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;\n    s1 = a * b;\n    c = splitter * a;\n    ahi = c - (c - a);\n    alo = a - ahi;\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    c = splitter * k;\n    bhi = c - (c - k);\n    blo = k - bhi;\n    _i = s0 * k;\n    c = splitter * s0;\n    ahi = c - (c - s0);\n    alo = s0 - ahi;\n    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n    _j = s1 * k;\n    c = splitter * s1;\n    ahi = c - (c - s1);\n    alo = s1 - ahi;\n    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n    _k = _i + _0;\n    bvirt = _k - _i;\n    u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n    u3 = _j + _k;\n    u[2] = _k - (u3 - _j);\n    u[3] = u3;\n    finlen = finadd(finlen, 4, u);\n    if (z !== 0) {\n        c = splitter * z;\n        bhi = c - (c - z);\n        blo = z - bhi;\n        _i = s0 * z;\n        c = splitter * s0;\n        ahi = c - (c - s0);\n        alo = s0 - ahi;\n        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n        _j = s1 * z;\n        c = splitter * s1;\n        ahi = c - (c - s1);\n        alo = s1 - ahi;\n        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n        _k = _i + _0;\n        bvirt = _k - _i;\n        u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n        u3 = _j + _k;\n        u[2] = _k - (u3 - _j);\n        u[3] = u3;\n        finlen = finadd(finlen, 4, u);\n    }\n    return finlen;\n}\n\nfunction orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail;\n    let adytail, bdytail, cdytail;\n    let adztail, bdztail, cdztail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            scale(4, bc, adz, _8), _8,\n            scale(4, ca, bdz, _8b), _8b, _16), _16,\n        scale(4, ab, cdz, _8), _8, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = o3derrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    bvirt = az - adz;\n    adztail = az - (adz + bvirt) + (bvirt - dz);\n    bvirt = bz - bdz;\n    bdztail = bz - (bdz + bvirt) + (bvirt - dz);\n    bvirt = cz - cdz;\n    cdztail = cz - (cdz + bvirt) + (bvirt - dz);\n\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 &&\n        adytail === 0 && bdytail === 0 && cdytail === 0 &&\n        adztail === 0 && bdztail === 0 && cdztail === 0) {\n        return det;\n    }\n\n    errbound = o3derrboundC * permanent + resulterrbound * Math.abs(det);\n    det +=\n        adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) +\n        bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) +\n        cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);\n    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);\n    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);\n\n    const bctlen = sum(bt_len, bt_c, ct_len, ct_b, bct);\n    finlen = finadd(finlen, scale(bctlen, bct, adz, _16), _16);\n\n    const catlen = sum(ct_len, ct_a, at_len, at_c, cat);\n    finlen = finadd(finlen, scale(catlen, cat, bdz, _16), _16);\n\n    const abtlen = sum(at_len, at_b, bt_len, bt_a, abt);\n    finlen = finadd(finlen, scale(abtlen, abt, cdz, _16), _16);\n\n    if (adztail !== 0) {\n        finlen = finadd(finlen, scale(4, bc, adztail, _12), _12);\n        finlen = finadd(finlen, scale(bctlen, bct, adztail, _16), _16);\n    }\n    if (bdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ca, bdztail, _12), _12);\n        finlen = finadd(finlen, scale(catlen, cat, bdztail, _16), _16);\n    }\n    if (cdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ab, cdztail, _12), _12);\n        finlen = finadd(finlen, scale(abtlen, abt, cdztail, _16), _16);\n    }\n\n    if (adxtail !== 0) {\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);\n        }\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);\n        }\n    }\n    if (bdxtail !== 0) {\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);\n        }\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);\n        }\n    }\n    if (cdxtail !== 0) {\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);\n        }\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n\n    const det =\n        adz * (bdxcdy - cdxbdy) +\n        bdz * (cdxady - adxcdy) +\n        cdz * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\n\n    const errbound = o3derrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n\n    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);\n}\n\nexport function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    return adx * (bdy * cdz - bdz * cdy) +\n        bdx * (cdy * adz - cdz * ady) +\n        cdx * (ady * bdz - adz * bdy);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale} from './util.js';\n\nconst iccerrboundA = (10 + 96 * epsilon) * epsilon;\nconst iccerrboundB = (4 + 48 * epsilon) * epsilon;\nconst iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst aa = vec(4);\nconst bb = vec(4);\nconst cc = vec(4);\nconst u = vec(4);\nconst v = vec(4);\nconst axtbc = vec(8);\nconst aytbc = vec(8);\nconst bxtca = vec(8);\nconst bytca = vec(8);\nconst cxtab = vec(8);\nconst cytab = vec(8);\nconst abt = vec(8);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abtt = vec(4);\nconst bctt = vec(4);\nconst catt = vec(4);\n\nconst _8 = vec(8);\nconst _16 = vec(16);\nconst _16b = vec(16);\nconst _16c = vec(16);\nconst _32 = vec(32);\nconst _32b = vec(32);\nconst _48 = vec(48);\nconst _64 = vec(64);\n\nlet fin = vec(1152);\nlet fin2 = vec(1152);\n\nfunction finadd(finlen, a, alen) {\n    finlen = sum(finlen, fin, a, alen, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;\n    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;\n    let abtlen, bctlen, catlen;\n    let abttlen, bcttlen, cattlen;\n    let n1, n0;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            sum(\n                scale(scale(4, bc, adx, _8), _8, adx, _16), _16,\n                scale(scale(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32,\n            sum(\n                scale(scale(4, ca, bdx, _8), _8, bdx, _16), _16,\n                scale(scale(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64,\n        sum(\n            scale(scale(4, ab, cdx, _8), _8, cdx, _16), _16,\n            scale(scale(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = iccerrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) {\n        return det;\n    }\n\n    errbound = iccerrboundC * permanent + resulterrbound * Math.abs(det);\n    det += ((adx * adx + ady * ady) * ((bdx * cdytail + cdy * bdxtail) - (bdy * cdxtail + cdx * bdytail)) +\n        2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx)) +\n        ((bdx * bdx + bdy * bdy) * ((cdx * adytail + ady * cdxtail) - (cdy * adxtail + adx * cdytail)) +\n        2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) +\n        ((cdx * cdx + cdy * cdy) * ((adx * bdytail + bdy * adxtail) - (ady * bdxtail + bdx * adytail)) +\n        2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n        s1 = adx * adx;\n        c = splitter * adx;\n        ahi = c - (c - adx);\n        alo = adx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = ady * ady;\n        c = splitter * ady;\n        ahi = c - (c - ady);\n        alo = ady - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        aa[3] = u3;\n    }\n    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n        s1 = bdx * bdx;\n        c = splitter * bdx;\n        ahi = c - (c - bdx);\n        alo = bdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = bdy * bdy;\n        c = splitter * bdy;\n        ahi = c - (c - bdy);\n        alo = bdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        bb[3] = u3;\n    }\n    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n        s1 = cdx * cdx;\n        c = splitter * cdx;\n        ahi = c - (c - cdx);\n        alo = cdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = cdy * cdy;\n        c = splitter * cdy;\n        ahi = c - (c - cdy);\n        alo = cdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        cc[3] = u3;\n    }\n\n    if (adxtail !== 0) {\n        axtbclen = scale(4, bc, adxtail, axtbc);\n        finlen = finadd(finlen, sum_three(\n            scale(axtbclen, axtbc, 2 * adx, _16), _16,\n            scale(scale(4, cc, adxtail, _8), _8, bdy, _16b), _16b,\n            scale(scale(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);\n    }\n    if (adytail !== 0) {\n        aytbclen = scale(4, bc, adytail, aytbc);\n        finlen = finadd(finlen, sum_three(\n            scale(aytbclen, aytbc, 2 * ady, _16), _16,\n            scale(scale(4, bb, adytail, _8), _8, cdx, _16b), _16b,\n            scale(scale(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);\n    }\n    if (bdxtail !== 0) {\n        bxtcalen = scale(4, ca, bdxtail, bxtca);\n        finlen = finadd(finlen, sum_three(\n            scale(bxtcalen, bxtca, 2 * bdx, _16), _16,\n            scale(scale(4, aa, bdxtail, _8), _8, cdy, _16b), _16b,\n            scale(scale(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);\n    }\n    if (bdytail !== 0) {\n        bytcalen = scale(4, ca, bdytail, bytca);\n        finlen = finadd(finlen, sum_three(\n            scale(bytcalen, bytca, 2 * bdy, _16), _16,\n            scale(scale(4, cc, bdytail, _8), _8, adx, _16b), _16b,\n            scale(scale(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);\n    }\n    if (cdxtail !== 0) {\n        cxtablen = scale(4, ab, cdxtail, cxtab);\n        finlen = finadd(finlen, sum_three(\n            scale(cxtablen, cxtab, 2 * cdx, _16), _16,\n            scale(scale(4, bb, cdxtail, _8), _8, ady, _16b), _16b,\n            scale(scale(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);\n    }\n    if (cdytail !== 0) {\n        cytablen = scale(4, ab, cdytail, cytab);\n        finlen = finadd(finlen, sum_three(\n            scale(cytablen, cytab, 2 * cdy, _16), _16,\n            scale(scale(4, aa, cdytail, _8), _8, bdx, _16b), _16b,\n            scale(scale(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);\n    }\n\n    if (adxtail !== 0 || adytail !== 0) {\n        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n            s1 = bdxtail * cdy;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdy;\n            bhi = c - (c - cdy);\n            blo = cdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * cdytail;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            s1 = cdxtail * -bdy;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * -bdy;\n            bhi = c - (c - -bdy);\n            blo = -bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * -bdytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * -bdytail;\n            bhi = c - (c - -bdytail);\n            blo = -bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            bctlen = sum(4, u, 4, v, bct);\n            s1 = bdxtail * cdytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdxtail * bdytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            bctt[3] = u3;\n            bcttlen = 4;\n        } else {\n            bct[0] = 0;\n            bctlen = 1;\n            bctt[0] = 0;\n            bcttlen = 1;\n        }\n        if (adxtail !== 0) {\n            const len = scale(bctlen, bct, adxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(axtbclen, axtbc, adxtail, _16), _16,\n                scale(len, _16c, 2 * adx, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * adx, _16), _16,\n                scale(len2, _8, adxtail, _16b), _16b,\n                scale(len, _16c, adxtail, _32), _32, _32b, _64), _64);\n\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, adxtail, _8), _8, bdytail, _16), _16);\n            }\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, -adxtail, _8), _8, cdytail, _16), _16);\n            }\n        }\n        if (adytail !== 0) {\n            const len = scale(bctlen, bct, adytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(aytbclen, aytbc, adytail, _16), _16,\n                scale(len, _16c, 2 * ady, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * ady, _16), _16,\n                scale(len2, _8, adytail, _16b), _16b,\n                scale(len, _16c, adytail, _32), _32, _32b, _64), _64);\n        }\n    }\n    if (bdxtail !== 0 || bdytail !== 0) {\n        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n            s1 = cdxtail * ady;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * ady;\n            bhi = c - (c - ady);\n            blo = ady - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * adytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -cdy;\n            n0 = -cdytail;\n            s1 = adxtail * n1;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * n0;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            catlen = sum(4, u, 4, v, cat);\n            s1 = cdxtail * adytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adxtail * cdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            catt[3] = u3;\n            cattlen = 4;\n        } else {\n            cat[0] = 0;\n            catlen = 1;\n            catt[0] = 0;\n            cattlen = 1;\n        }\n        if (bdxtail !== 0) {\n            const len = scale(catlen, cat, bdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bxtcalen, bxtca, bdxtail, _16), _16,\n                scale(len, _16c, 2 * bdx, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdx, _16), _16,\n                scale(len2, _8, bdxtail, _16b), _16b,\n                scale(len, _16c, bdxtail, _32), _32, _32b, _64), _64);\n\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, bdxtail, _8), _8, cdytail, _16), _16);\n            }\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, -bdxtail, _8), _8, adytail, _16), _16);\n            }\n        }\n        if (bdytail !== 0) {\n            const len = scale(catlen, cat, bdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bytcalen, bytca, bdytail, _16), _16,\n                scale(len, _16c, 2 * bdy, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdy, _16), _16,\n                scale(len2, _8, bdytail, _16b), _16b,\n                scale(len, _16c, bdytail, _32), _32,  _32b, _64), _64);\n        }\n    }\n    if (cdxtail !== 0 || cdytail !== 0) {\n        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n            s1 = adxtail * bdy;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdy;\n            bhi = c - (c - bdy);\n            blo = bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * bdytail;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -ady;\n            n0 = -adytail;\n            s1 = bdxtail * n1;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * n0;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            abtlen = sum(4, u, 4, v, abt);\n            s1 = adxtail * bdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdxtail * adytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            abtt[3] = u3;\n            abttlen = 4;\n        } else {\n            abt[0] = 0;\n            abtlen = 1;\n            abtt[0] = 0;\n            abttlen = 1;\n        }\n        if (cdxtail !== 0) {\n            const len = scale(abtlen, abt, cdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cxtablen, cxtab, cdxtail, _16), _16,\n                scale(len, _16c, 2 * cdx, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdx, _16), _16,\n                scale(len2, _8, cdxtail, _16b), _16b,\n                scale(len, _16c, cdxtail, _32), _32, _32b, _64), _64);\n\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, cdxtail, _8), _8, adytail, _16), _16);\n            }\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);\n            }\n        }\n        if (cdytail !== 0) {\n            const len = scale(abtlen, abt, cdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cytablen, cytab, cdytail, _16), _16,\n                scale(len, _16c, 2 * cdy, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdy, _16), _16,\n                scale(len2, _8, cdytail, _16b), _16b,\n                scale(len, _16c, cdytail, _32), _32, _32b, _64), _64);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function incircle(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n    const alift = adx * adx + ady * ady;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n    const blift = bdx * bdx + bdy * bdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n    const clift = cdx * cdx + cdy * cdy;\n\n    const det =\n        alift * (bdxcdy - cdxbdy) +\n        blift * (cdxady - adxcdy) +\n        clift * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * blift +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;\n\n    const errbound = iccerrboundA * permanent;\n\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);\n}\n\nexport function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const ady = ay - dy;\n    const bdx = bx - dx;\n    const bdy = by - dy;\n    const cdx = cx - dx;\n    const cdy = cy - dy;\n\n    const abdet = adx * bdy - bdx * ady;\n    const bcdet = bdx * cdy - cdx * bdy;\n    const cadet = cdx * ady - adx * cdy;\n    const alift = adx * adx + ady * ady;\n    const blift = bdx * bdx + bdy * bdy;\n    const clift = cdx * cdx + cdy * cdy;\n\n    return alift * bcdet + blift * cadet + clift * abdet;\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale, negate} from './util.js';\n\nconst isperrboundA = (16 + 224 * epsilon) * epsilon;\nconst isperrboundB = (5 + 72 * epsilon) * epsilon;\nconst isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;\n\nconst ab = vec(4);\nconst bc = vec(4);\nconst cd = vec(4);\nconst de = vec(4);\nconst ea = vec(4);\nconst ac = vec(4);\nconst bd = vec(4);\nconst ce = vec(4);\nconst da = vec(4);\nconst eb = vec(4);\n\nconst abc = vec(24);\nconst bcd = vec(24);\nconst cde = vec(24);\nconst dea = vec(24);\nconst eab = vec(24);\nconst abd = vec(24);\nconst bce = vec(24);\nconst cda = vec(24);\nconst deb = vec(24);\nconst eac = vec(24);\n\nconst adet = vec(1152);\nconst bdet = vec(1152);\nconst cdet = vec(1152);\nconst ddet = vec(1152);\nconst edet = vec(1152);\nconst abdet = vec(2304);\nconst cddet = vec(2304);\nconst cdedet = vec(3456);\nconst deter = vec(5760);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _8c = vec(8);\nconst _16 = vec(16);\nconst _24 = vec(24);\nconst _48 = vec(48);\nconst _48b = vec(48);\nconst _96 = vec(96);\nconst _192 = vec(192);\nconst _384x = vec(384);\nconst _384y = vec(384);\nconst _384z = vec(384);\nconst _768 = vec(768);\n\nfunction sum_three_scale(a, b, c, az, bz, cz, out) {\n    return sum_three(\n        scale(4, a, az, _8), _8,\n        scale(4, b, bz, _8b), _8b,\n        scale(4, c, cz, _8c), _8c, _16, out);\n}\n\nfunction liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {\n    const len = sum(\n        sum(alen, a, blen, b, _48), _48,\n        negate(sum(clen, c, dlen, d, _48b), _48b), _48b, _96);\n\n    return sum_three(\n        scale(scale(len, _96, x, _192), _192, x, _384x), _384x,\n        scale(scale(len, _96, y, _192), _192, y, _384y), _384y,\n        scale(scale(len, _96, z, _192), _192, z, _384z), _384z, _768, out);\n}\n\nfunction insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    s1 = ax * by;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ay;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n    s1 = bx * cy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * by;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cx * dy;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * cy;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    cd[3] = u3;\n    s1 = dx * ey;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * dy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    de[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    de[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    de[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    de[3] = u3;\n    s1 = ex * ay;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * ey;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ea[3] = u3;\n    s1 = ax * cy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * ay;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ac[3] = u3;\n    s1 = bx * dy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * by;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bd[3] = u3;\n    s1 = cx * ey;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * cy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ce[3] = u3;\n    s1 = dx * ay;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * dy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    da[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    da[3] = u3;\n    s1 = ex * by;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ey;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    eb[3] = u3;\n\n    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);\n    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);\n    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);\n    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);\n    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);\n    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);\n    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);\n    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);\n    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);\n    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);\n\n    const deterlen = sum_three(\n        liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet,\n        liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet,\n        sum_three(\n            liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet,\n            liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet,\n            liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);\n\n    return deter[deterlen - 1];\n}\n\nconst xdet = vec(96);\nconst ydet = vec(96);\nconst zdet = vec(96);\nconst fin = vec(1152);\n\nfunction liftadapt(a, b, c, az, bz, cz, x, y, z, out) {\n    const len = sum_three_scale(a, b, c, az, bz, cz, _24);\n    return sum_three(\n        scale(scale(len, _24, x, _48), _48, x, xdet), xdet,\n        scale(scale(len, _24, y, _48), _48, y, ydet), ydet,\n        scale(scale(len, _24, z, _48), _48, z, zdet), zdet, _192, out);\n}\n\nfunction insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {\n    let ab3, bc3, cd3, da3, ac3, bd3;\n\n    let aextail, bextail, cextail, dextail;\n    let aeytail, beytail, ceytail, deytail;\n    let aeztail, beztail, ceztail, deztail;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;\n\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    s1 = aex * bey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bex * aey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ab3 = _j + _i;\n    bvirt = ab3 - _j;\n    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);\n    ab[3] = ab3;\n    s1 = bex * cey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * bey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bc3 = _j + _i;\n    bvirt = bc3 - _j;\n    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);\n    bc[3] = bc3;\n    s1 = cex * dey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * cey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    cd3 = _j + _i;\n    bvirt = cd3 - _j;\n    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);\n    cd[3] = cd3;\n    s1 = dex * aey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = aex * dey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    da3 = _j + _i;\n    bvirt = da3 - _j;\n    da[2] = _j - (da3 - bvirt) + (_i - bvirt);\n    da[3] = da3;\n    s1 = aex * cey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * aey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ac3 = _j + _i;\n    bvirt = ac3 - _j;\n    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);\n    ac[3] = ac3;\n    s1 = bex * dey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * bey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bd3 = _j + _i;\n    bvirt = bd3 - _j;\n    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);\n    bd[3] = bd3;\n\n    const finlen = sum(\n        sum(\n            negate(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet,\n            liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet,\n        sum(\n            negate(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet,\n            liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = isperrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - aex;\n    aextail = ax - (aex + bvirt) + (bvirt - ex);\n    bvirt = ay - aey;\n    aeytail = ay - (aey + bvirt) + (bvirt - ey);\n    bvirt = az - aez;\n    aeztail = az - (aez + bvirt) + (bvirt - ez);\n    bvirt = bx - bex;\n    bextail = bx - (bex + bvirt) + (bvirt - ex);\n    bvirt = by - bey;\n    beytail = by - (bey + bvirt) + (bvirt - ey);\n    bvirt = bz - bez;\n    beztail = bz - (bez + bvirt) + (bvirt - ez);\n    bvirt = cx - cex;\n    cextail = cx - (cex + bvirt) + (bvirt - ex);\n    bvirt = cy - cey;\n    ceytail = cy - (cey + bvirt) + (bvirt - ey);\n    bvirt = cz - cez;\n    ceztail = cz - (cez + bvirt) + (bvirt - ez);\n    bvirt = dx - dex;\n    dextail = dx - (dex + bvirt) + (bvirt - ex);\n    bvirt = dy - dey;\n    deytail = dy - (dey + bvirt) + (bvirt - ey);\n    bvirt = dz - dez;\n    deztail = dz - (dez + bvirt) + (bvirt - ez);\n    if (aextail === 0 && aeytail === 0 && aeztail === 0 &&\n        bextail === 0 && beytail === 0 && beztail === 0 &&\n        cextail === 0 && ceytail === 0 && ceztail === 0 &&\n        dextail === 0 && deytail === 0 && deztail === 0) {\n        return det;\n    }\n\n    errbound = isperrboundC * permanent + resulterrbound * Math.abs(det);\n\n    const abeps = (aex * beytail + bey * aextail) - (aey * bextail + bex * aeytail);\n    const bceps = (bex * ceytail + cey * bextail) - (bey * cextail + cex * beytail);\n    const cdeps = (cex * deytail + dey * cextail) - (cey * dextail + dex * ceytail);\n    const daeps = (dex * aeytail + aey * dextail) - (dey * aextail + aex * deytail);\n    const aceps = (aex * ceytail + cey * aextail) - (aey * cextail + cex * aeytail);\n    const bdeps = (bex * deytail + dey * bextail) - (bey * dextail + dex * beytail);\n    det +=\n        (((bex * bex + bey * bey + bez * bez) * ((cez * daeps + dez * aceps + aez * cdeps) +\n        (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) *\n        ((aez * bceps - bez * aceps + cez * abeps) + (aeztail * bc3 - beztail * ac3 + ceztail * ab3))) -\n        ((aex * aex + aey * aey + aez * aez) * ((bez * cdeps - cez * bdeps + dez * bceps) +\n        (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) *\n        ((dez * abeps + aez * bdeps + bez * daeps) + (deztail * ab3 + aeztail * bd3 + beztail * da3)))) +\n        2 * (((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) +\n        (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3)) -\n        ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) +\n        (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);\n}\n\nexport function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    const aexbey = aex * bey;\n    const bexaey = bex * aey;\n    const ab = aexbey - bexaey;\n    const bexcey = bex * cey;\n    const cexbey = cex * bey;\n    const bc = bexcey - cexbey;\n    const cexdey = cex * dey;\n    const dexcey = dex * cey;\n    const cd = cexdey - dexcey;\n    const dexaey = dex * aey;\n    const aexdey = aex * dey;\n    const da = dexaey - aexdey;\n    const aexcey = aex * cey;\n    const cexaey = cex * aey;\n    const ac = aexcey - cexaey;\n    const bexdey = bex * dey;\n    const dexbey = dex * bey;\n    const bd = bexdey - dexbey;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    const det =\n        (clift * (dez * ab + aez * bd + bez * da) - dlift * (aez * bc - bez * ac + cez * ab)) +\n        (alift * (bez * cd - cez * bd + dez * bc) - blift * (cez * da + dez * ac + aez * cd));\n\n    const aezplus = Math.abs(aez);\n    const bezplus = Math.abs(bez);\n    const cezplus = Math.abs(cez);\n    const dezplus = Math.abs(dez);\n    const aexbeyplus = Math.abs(aexbey) + Math.abs(bexaey);\n    const bexceyplus = Math.abs(bexcey) + Math.abs(cexbey);\n    const cexdeyplus = Math.abs(cexdey) + Math.abs(dexcey);\n    const dexaeyplus = Math.abs(dexaey) + Math.abs(aexdey);\n    const aexceyplus = Math.abs(aexcey) + Math.abs(cexaey);\n    const bexdeyplus = Math.abs(bexdey) + Math.abs(dexbey);\n    const permanent =\n        (cexdeyplus * bezplus + bexdeyplus * cezplus + bexceyplus * dezplus) * alift +\n        (dexaeyplus * cezplus + aexceyplus * dezplus + cexdeyplus * aezplus) * blift +\n        (aexbeyplus * dezplus + bexdeyplus * aezplus + dexaeyplus * bezplus) * clift +\n        (bexceyplus * aezplus + aexceyplus * bezplus + aexbeyplus * cezplus) * dlift;\n\n    const errbound = isperrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);\n}\n\nexport function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {\n    const aex = pax - pex;\n    const bex = pbx - pex;\n    const cex = pcx - pex;\n    const dex = pdx - pex;\n    const aey = pay - pey;\n    const bey = pby - pey;\n    const cey = pcy - pey;\n    const dey = pdy - pey;\n    const aez = paz - pez;\n    const bez = pbz - pez;\n    const cez = pcz - pez;\n    const dez = pdz - pez;\n\n    const ab = aex * bey - bex * aey;\n    const bc = bex * cey - cex * bey;\n    const cd = cex * dey - dex * cey;\n    const da = dex * aey - aex * dey;\n    const ac = aex * cey - cex * aey;\n    const bd = bex * dey - dex * bey;\n\n    const abc = aez * bc - bez * ac + cez * ab;\n    const bcd = bez * cd - cez * bd + dez * bc;\n    const cda = cez * da + dez * ac + aez * cd;\n    const dab = dez * ab + aez * bd + bez * da;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    return (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n    let bx, by; // lazily computed barycenter of the hull\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (Math.abs(ab) < 1e-9) {\n        // For a degenerate triangle, the circumcenter is at the infinity, in a\n        // direction orthogonal to the halfedge and away from the “center” of\n        // the diagram <bx, by>, defined as the hull’s barycenter.\n        if (bx === undefined) {\n          bx = by = 0;\n          for (const i of hull) bx += points[i * 2], by += points[i * 2 + 1];\n          bx /= hull.length, by /= hull.length;\n        }\n        const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] === cj[aj]\n              && ci[ai + 1] === cj[aj + 1]\n              && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj]\n              && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return this._simplify(V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points));\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    // for more robustness, always consider the segment in the same order\n    const flip = c0 < c1;\n    if (flip) [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];\n    while (true) {\n      if (c0 === 0 && c1 === 0) return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n  _simplify(P) {\n    if (P && P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {\n          P.splice(j, 2), i -= 2;\n        }\n      }\n      if (!P.length) P = null;\n    }\n    return P;\n  }\n}\n","/** @module */\r\n\r\n// import SimplexNoise from 'https://cdn.skypack.dev/simplex-noise@3.0.1'\r\nimport { SimplexNoise } from 'simplex-noise'\r\n// https://runkit-packages.com/14.x.x/1644541101130/simplex-noise/#simplex-noisejs\r\n// https://npm.runkit.com/simplex-noise\r\n// https://www.npmjs.com/package/simplex-noise\r\n\r\n/**\r\n * Generate a noisy 2D map with two noise sources per pixel.\r\n * @param {number} nx - Number of x pixels\r\n * @param {number} ny - Number of y pixels\r\n */\r\nexport default function makeTractNoise(nx, ny) {\r\n    // Simplex Noise Parameters\r\n    const noiseWidth = 0.5\r\n    const noiseHeight = 0.5\r\n\r\n    // District Noise Parameters - amplitude of noise\r\n    const xAmp = 100\r\n    const yAmp = 100\r\n\r\n    /** Generate simplex noise. */\r\n    const sn = simplexNoise(nx, ny, noiseWidth, noiseHeight, xAmp, yAmp)\r\n    return sn\r\n}\r\n\r\n/**\r\n * Generate a noisy 2D map with two noise sources per pixel.\r\n * @param {number} nx - Number of x pixels\r\n * @param {number} ny - Number of y pixels\r\n * @param {number} noiseWidth -  A characteristic size of blobs, in pixels\r\n * @param {number} noiseHeight - A characteristic size of blobs, in pixels\r\n * @returns {number[][][]} - Noise in pixel displacement, indexed by row, col, dimension\r\n */\r\nexport function simplexNoise(nx, ny, noiseWidth, noiseHeight, xAmp, yAmp) {\r\n    // @ts-ignore\r\n    const simplexX = new SimplexNoise('s')\r\n    // @ts-ignore\r\n    const simplexY = new SimplexNoise('seed')\r\n    const map = zeros(nx, ny)\r\n    let sumX = 0\r\n    let sumY = 0\r\n    range(nx).forEach((ix) => {\r\n        range(ny).forEach((iy) => {\r\n            // fractional coordinate divided by period of waves\r\n            const x = (ix / nx) * (1 / noiseWidth)\r\n            const y = (iy / ny) * (1 / noiseHeight)\r\n            const noiseX = simplexX.noise2D(x, y)\r\n            const noiseY = simplexY.noise2D(x, y)\r\n            map[ix][iy][0] = (noiseX - 0.5)\r\n            map[ix][iy][1] = (noiseY - 0.5)\r\n            sumX += noiseX\r\n            sumY += noiseY\r\n        })\r\n    })\r\n    // normalize\r\n    const meanX = sumX / (nx * ny) - 0.5\r\n    const meanY = sumY / (nx * ny) - 0.5\r\n    map.forEach((a) => { // array\r\n        a.forEach((p) => { // pair\r\n            // eslint-disable-next-line no-param-reassign\r\n            p[0] = (p[0] - meanX) * xAmp\r\n            // eslint-disable-next-line no-param-reassign\r\n            p[1] = (p[1] - meanY) * yAmp\r\n        })\r\n    })\r\n    return map\r\n}\r\n\r\nfunction zeros(nx, ny) {\r\n    const empty = Array(nx).fill().map(() => Array(ny).fill().map(() => Array(2).fill(0)))\r\n    return empty\r\n}\r\n\r\nfunction range(n) {\r\n    return [...Array(n).keys()]\r\n}\r\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2021 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\nconst F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\nconst G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\nconst G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\nconst grad3 = new Float32Array([1, 1, 0,\n    -1, 1, 0,\n    1, -1, 0,\n    -1, -1, 0,\n    1, 0, 1,\n    -1, 0, 1,\n    1, 0, -1,\n    -1, 0, -1,\n    0, 1, 1,\n    0, -1, 1,\n    0, 1, -1,\n    0, -1, -1]);\nconst grad4 = new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n    0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n    1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n    -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n    1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n    -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n    1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n    -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n/** Deterministic simplex noise generator suitable for 2D, 3D and 4D spaces. */\nexport class SimplexNoise {\n    /**\n     * Creates a new `SimplexNoise` instance.\n     * This involves some setup. You can save a few cpu cycles by reusing the same instance.\n     * @param randomOrSeed A random number generator or a seed (string|number).\n     * Defaults to Math.random (random irreproducible initialization).\n     */\n    constructor(randomOrSeed = Math.random) {\n        const random = typeof randomOrSeed == 'function' ? randomOrSeed : alea(randomOrSeed);\n        this.p = buildPermutationTable(random);\n        this.perm = new Uint8Array(512);\n        this.permMod12 = new Uint8Array(512);\n        for (let i = 0; i < 512; i++) {\n            this.perm[i] = this.p[i & 255];\n            this.permMod12[i] = this.perm[i] % 12;\n        }\n    }\n    /**\n     * Samples the noise field in 2 dimensions\n     * @param x\n     * @param y\n     * @returns a number in the interval [-1, 1]\n     */\n    noise2D(x, y) {\n        const permMod12 = this.permMod12;\n        const perm = this.perm;\n        let n0 = 0; // Noise contributions from the three corners\n        let n1 = 0;\n        let n2 = 0;\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y) * F2; // Hairy factor for 2D\n        const i = Math.floor(x + s);\n        const j = Math.floor(y + s);\n        const t = (i + j) * G2;\n        const X0 = i - t; // Unskew the cell origin back to (x,y) space\n        const Y0 = j - t;\n        const x0 = x - X0; // The x,y distances from the cell origin\n        const y0 = y - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        else {\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        const y1 = y0 - j1 + G2;\n        const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n        const y2 = y0 - 1.0 + 2.0 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            const gi0 = permMod12[ii + perm[jj]] * 3;\n            t0 *= t0;\n            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            const gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n            t1 *= t1;\n            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            const gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n            t2 *= t2;\n            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70.0 * (n0 + n1 + n2);\n    }\n    /**\n     * Samples the noise field in 3 dimensions\n     * @param x\n     * @param y\n     * @param z\n     * @returns a number in the interval [-1, 1]\n     */\n    noise3D(x, y, z) {\n        const permMod12 = this.permMod12;\n        const perm = this.perm;\n        let n0, n1, n2, n3; // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n        const i = Math.floor(x + s);\n        const j = Math.floor(y + s);\n        const k = Math.floor(z + s);\n        const t = (i + j + k) * G3;\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const x0 = x - X0; // The x,y,z distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // X Y Z order\n            else if (x0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // X Z Y order\n            else {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // Z X Y order\n        }\n        else { // x0<y0\n            if (y0 < z0) {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Z Y X order\n            else if (x0 < z0) {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Y Z X order\n            else {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // Y X Z order\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n        const y1 = y0 - j1 + G3;\n        const z1 = z0 - k1 + G3;\n        const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n        const y2 = y0 - j2 + 2.0 * G3;\n        const z2 = z0 - k2 + 2.0 * G3;\n        const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n        const y3 = y0 - 1.0 + 3.0 * G3;\n        const z3 = z0 - 1.0 + 3.0 * G3;\n        // Work out the hashed gradient indices of the four simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        // Calculate the contribution from the four corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n            t0 *= t0;\n            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n            t1 *= t1;\n            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n            t2 *= t2;\n            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n            t3 *= t3;\n            n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n        return 32.0 * (n0 + n1 + n2 + n3);\n    }\n    /**\n     * Samples the noise field in 4 dimensions\n     * @param x\n     * @param y\n     * @param z\n     * @returns a number in the interval [-1, 1]\n     */\n    noise4D(x, y, z, w) {\n        const perm = this.perm;\n        let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n        const s = (x + y + z + w) * F4; // Factor for 4D skewing\n        const i = Math.floor(x + s);\n        const j = Math.floor(y + s);\n        const k = Math.floor(z + s);\n        const l = Math.floor(w + s);\n        const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const W0 = l - t;\n        const x0 = x - X0; // The x,y,z,w distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        const w0 = w - W0;\n        // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n        // To find out which of the 24 possible simplices we're in, we need to\n        // determine the magnitude ordering of x0, y0, z0 and w0.\n        // Six pair-wise comparisons are performed between each possible pair\n        // of the four coordinates, and the results are used to rank the numbers.\n        let rankx = 0;\n        let ranky = 0;\n        let rankz = 0;\n        let rankw = 0;\n        if (x0 > y0)\n            rankx++;\n        else\n            ranky++;\n        if (x0 > z0)\n            rankx++;\n        else\n            rankz++;\n        if (x0 > w0)\n            rankx++;\n        else\n            rankw++;\n        if (y0 > z0)\n            ranky++;\n        else\n            rankz++;\n        if (y0 > w0)\n            ranky++;\n        else\n            rankw++;\n        if (z0 > w0)\n            rankz++;\n        else\n            rankw++;\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n        // impossible. Only the 24 indices which have non-zero entries make any sense.\n        // We use a thresholding to set the coordinates in turn from the largest magnitude.\n        // Rank 3 denotes the largest coordinate.\n        // Rank 2 denotes the second largest coordinate.\n        // Rank 1 denotes the second smallest coordinate.\n        // The integer offsets for the second simplex corner\n        const i1 = rankx >= 3 ? 1 : 0;\n        const j1 = ranky >= 3 ? 1 : 0;\n        const k1 = rankz >= 3 ? 1 : 0;\n        const l1 = rankw >= 3 ? 1 : 0;\n        // The integer offsets for the third simplex corner\n        const i2 = rankx >= 2 ? 1 : 0;\n        const j2 = ranky >= 2 ? 1 : 0;\n        const k2 = rankz >= 2 ? 1 : 0;\n        const l2 = rankw >= 2 ? 1 : 0;\n        // The integer offsets for the fourth simplex corner\n        const i3 = rankx >= 1 ? 1 : 0;\n        const j3 = ranky >= 1 ? 1 : 0;\n        const k3 = rankz >= 1 ? 1 : 0;\n        const l3 = rankw >= 1 ? 1 : 0;\n        // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n        const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n        const y1 = y0 - j1 + G4;\n        const z1 = z0 - k1 + G4;\n        const w1 = w0 - l1 + G4;\n        const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n        const y2 = y0 - j2 + 2.0 * G4;\n        const z2 = z0 - k2 + 2.0 * G4;\n        const w2 = w0 - l2 + 2.0 * G4;\n        const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n        const y3 = y0 - j3 + 3.0 * G4;\n        const z3 = z0 - k3 + 3.0 * G4;\n        const w3 = w0 - l3 + 3.0 * G4;\n        const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n        const y4 = y0 - 1.0 + 4.0 * G4;\n        const z4 = z0 - 1.0 + 4.0 * G4;\n        const w4 = w0 - 1.0 + 4.0 * G4;\n        // Work out the hashed gradient indices of the five simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        const ll = l & 255;\n        // Calculate the contribution from the five corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n            t0 *= t0;\n            n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n            t1 *= t1;\n            n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n            t2 *= t2;\n            n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n            t3 *= t3;\n            n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n        }\n        let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n        if (t4 < 0)\n            n4 = 0.0;\n        else {\n            const gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n            t4 *= t4;\n            n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n        }\n        // Sum up and scale the result to cover the range [-1,1]\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n}\nexport default SimplexNoise;\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nexport function buildPermutationTable(random) {\n    const p = new Uint8Array(256);\n    for (let i = 0; i < 256; i++) {\n        p[i] = i;\n    }\n    for (let i = 0; i < 255; i++) {\n        const r = i + ~~(random() * (256 - i));\n        const aux = p[i];\n        p[i] = p[r];\n        p[r] = aux;\n    }\n    return p;\n}\n/*\nThe ALEA PRNG and masher code used by simplex-noise.js\nis based on code by Johannes Baagøe, modified by Jonas Wagner.\nSee alea.md for the full license.\n*/\nfunction alea(seed) {\n    let s0 = 0;\n    let s1 = 0;\n    let s2 = 0;\n    let c = 1;\n    const mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n    s0 -= mash(seed);\n    if (s0 < 0) {\n        s0 += 1;\n    }\n    s1 -= mash(seed);\n    if (s1 < 0) {\n        s1 += 1;\n    }\n    s2 -= mash(seed);\n    if (s2 < 0) {\n        s2 += 1;\n    }\n    return function () {\n        const t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n        s0 = s1;\n        s1 = s2;\n        return s2 = t - (c = t | 0);\n    };\n}\nfunction masher() {\n    let n = 0xefc8249d;\n    return function (data) {\n        data = data.toString();\n        for (let i = 0; i < data.length; i++) {\n            n += data.charCodeAt(i);\n            let h = 0.02519603282416938 * n;\n            n = h >>> 0;\n            h -= n;\n            h *= n;\n            n = h >>> 0;\n            h -= n;\n            n += h * 0x100000000; // 2^32\n        }\n        return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n}\n//# sourceMappingURL=simplex-noise.js.map","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2021 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nconst F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\nconst G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\nconst G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\nconst grad3 = new Float32Array([1, 1, 0,\n  -1, 1, 0,\n  1, -1, 0,\n\n  -1, -1, 0,\n  1, 0, 1,\n  -1, 0, 1,\n\n  1, 0, -1,\n  -1, 0, -1,\n  0, 1, 1,\n\n  0, -1, 1,\n  0, 1, -1,\n  0, -1, -1]);\n\nconst grad4 = new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n  0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n  1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n  -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n  1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n  -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n  1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n  -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n\n/**\n * A random() function, must return a numer in the interval [0,1), just like Math.random().\n */ \nexport type RandomFn = () => number;\n\n/** Deterministic simplex noise generator suitable for 2D, 3D and 4D spaces. */\nexport class SimplexNoise {\n  private p: Uint8Array;\n  private perm: Uint8Array;\n  private permMod12: Uint8Array;\n  /**\n   * Creates a new `SimplexNoise` instance.\n   * This involves some setup. You can save a few cpu cycles by reusing the same instance.\n   * @param randomOrSeed A random number generator or a seed (string|number).\n   * Defaults to Math.random (random irreproducible initialization).\n   */\n  constructor(randomOrSeed: RandomFn|string|number = Math.random) {\n    const random = typeof randomOrSeed == 'function' ? randomOrSeed : alea(randomOrSeed);\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n  }\n\n  /**\n   * Samples the noise field in 2 dimensions\n   * @param x\n   * @param y \n   * @returns a number in the interval [-1, 1]\n   */\n  noise2D(x: number, y: number): number {\n    const permMod12 = this.permMod12;\n    const perm = this.perm;\n    let n0 = 0; // Noise contributions from the three corners\n    let n1 = 0;\n    let n2 = 0;\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y) * F2; // Hairy factor for 2D\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const t = (i + j) * G2;\n    const X0 = i - t; // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t;\n    const x0 = x - X0; // The x,y distances from the cell origin\n    const y0 = y - Y0;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    else {\n      i1 = 0;\n      j1 = 1;\n    } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    const y1 = y0 - j1 + G2;\n    const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n    const y2 = y0 - 1.0 + 2.0 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    // Calculate the contribution from the three corners\n    let t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 >= 0) {\n      const gi0 = permMod12[ii + perm[jj]] * 3;\n      t0 *= t0;\n      n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n    }\n    let t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 >= 0) {\n      const gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n      t1 *= t1;\n      n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n    }\n    let t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 >= 0) {\n      const gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n      t2 *= t2;\n      n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70.0 * (n0 + n1 + n2);\n  }\n\n  /**\n   * Samples the noise field in 3 dimensions\n   * @param x \n   * @param y \n   * @param z \n   * @returns a number in the interval [-1, 1]\n   */\n  noise3D(x:number, y:number, z:number): number {\n    const permMod12 = this.permMod12;\n    const perm = this.perm;\n    let n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const k = Math.floor(z + s);\n    const t = (i + j + k) * G3;\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const x0 = x - X0; // The x,y,z distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // X Y Z order\n      else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // X Z Y order\n      else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n    }\n    else { // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Z Y X order\n      else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Y Z X order\n      else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + G3;\n    const z1 = z0 - k1 + G3;\n    const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * G3;\n    const z2 = z0 - k2 + 2.0 * G3;\n    const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * G3;\n    const z3 = z0 - 1.0 + 3.0 * G3;\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    // Calculate the contribution from the four corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) n0 = 0.0;\n    else {\n      const gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n      t0 *= t0;\n      n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) n1 = 0.0;\n    else {\n      const gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n      t1 *= t1;\n      n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) n2 = 0.0;\n    else {\n      const gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n      t2 *= t2;\n      n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) n3 = 0.0;\n    else {\n      const gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n      t3 *= t3;\n      n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 32.0 * (n0 + n1 + n2 + n3);\n  }\n\n  /**\n   * Samples the noise field in 4 dimensions\n   * @param x \n   * @param y \n   * @param z \n   * @returns a number in the interval [-1, 1]\n   */\n  noise4D(x:number, y:number, z:number, w:number): number {\n    const perm = this.perm;\n\n    let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * F4; // Factor for 4D skewing\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const k = Math.floor(z + s);\n    const l = Math.floor(w + s);\n    const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const W0 = l - t;\n    const x0 = x - X0; // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    const w0 = w - W0;\n    // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // Six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to rank the numbers.\n    let rankx = 0;\n    let ranky = 0;\n    let rankz = 0;\n    let rankw = 0;\n    if (x0 > y0) rankx++;\n    else ranky++;\n    if (x0 > z0) rankx++;\n    else rankz++;\n    if (x0 > w0) rankx++;\n    else rankw++;\n    if (y0 > z0) ranky++;\n    else rankz++;\n    if (y0 > w0) ranky++;\n    else rankw++;\n    if (z0 > w0) rankz++;\n    else rankw++;\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // Rank 3 denotes the largest coordinate.\n    // Rank 2 denotes the second largest coordinate.\n    // Rank 1 denotes the second smallest coordinate.\n\n    // The integer offsets for the second simplex corner\n    const i1 = rankx >= 3 ? 1 : 0;\n    const j1 = ranky >= 3 ? 1 : 0;\n    const k1 = rankz >= 3 ? 1 : 0;\n    const l1 = rankw >= 3 ? 1 : 0;\n    // The integer offsets for the third simplex corner\n    const i2 = rankx >= 2 ? 1 : 0;\n    const j2 = ranky >= 2 ? 1 : 0;\n    const k2 = rankz >= 2 ? 1 : 0;\n    const l2 = rankw >= 2 ? 1 : 0;\n\n    // The integer offsets for the fourth simplex corner\n    const i3 = rankx >= 1 ? 1 : 0;\n    const j3 = ranky >= 1 ? 1 : 0;\n    const k3 = rankz >= 1 ? 1 : 0;\n    const l3 = rankw >= 1 ? 1 : 0;\n    // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n    const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + G4;\n    const z1 = z0 - k1 + G4;\n    const w1 = w0 - l1 + G4;\n    const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * G4;\n    const z2 = z0 - k2 + 2.0 * G4;\n    const w2 = w0 - l2 + 2.0 * G4;\n    const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * G4;\n    const z3 = z0 - k3 + 3.0 * G4;\n    const w3 = w0 - l3 + 3.0 * G4;\n    const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * G4;\n    const z4 = z0 - 1.0 + 4.0 * G4;\n    const w4 = w0 - 1.0 + 4.0 * G4;\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    const ll = l & 255;\n    // Calculate the contribution from the five corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) n0 = 0.0;\n    else {\n      const gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n      t0 *= t0;\n      n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) n1 = 0.0;\n    else {\n      const gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n      t1 *= t1;\n      n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) n2 = 0.0;\n    else {\n      const gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n      t2 *= t2;\n      n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) n3 = 0.0;\n    else {\n      const gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n      t3 *= t3;\n      n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n    }\n    let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) n4 = 0.0;\n    else {\n      const gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n      t4 *= t4;\n      n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n    }\n    // Sum up and scale the result to cover the range [-1,1]\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  }\n}\nexport default SimplexNoise;\n\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nexport function buildPermutationTable(random: RandomFn): Uint8Array {\n  const p = new Uint8Array(256);\n  for (let i = 0; i < 256; i++) {\n    p[i] = i;\n  }\n  for (let i = 0; i < 255; i++) {\n    const r = i + ~~(random() * (256 - i));\n    const aux = p[i];\n    p[i] = p[r];\n    p[r] = aux;\n  }\n  return p;\n}\n\n/*\nThe ALEA PRNG and masher code used by simplex-noise.js\nis based on code by Johannes Baagøe, modified by Jonas Wagner.\nSee alea.md for the full license.\n*/\nfunction alea(seed: string|number): RandomFn {\n  let s0 = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let c = 1;\n\n  const mash = masher();\n  s0 = mash(' ');\n  s1 = mash(' ');\n  s2 = mash(' ');\n\n  s0 -= mash(seed);\n  if (s0 < 0) {\n    s0 += 1;\n  }\n  s1 -= mash(seed);\n  if (s1 < 0) {\n    s1 += 1;\n  }\n  s2 -= mash(seed);\n  if (s2 < 0) {\n    s2 += 1;\n  }\n\n  return function() {\n    const t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n    s0 = s1;\n    s1 = s2;\n    return s2 = t - (c = t | 0);\n  };\n}\n\nfunction masher() {\n  let n = 0xefc8249d;\n  return function(data: number|string) {\n    data = data.toString();\n    for (let i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      let h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n}","/**\r\n * Update VoterGeoms for each District\r\n * Districts are composed of voter geoms.\r\n * A tract has a set of voter geoms.\r\n * The overlap between a district and a tract determines the density of the voter geom in the district.\r\n *  */\r\nexport default function makeVoterGeomsByDistrict(census, voterGeomsByTract) {\r\n    const nDistricts = census.length\r\n    const voterGeomsByDistrict = []\r\n    for (let k = 0; k < nDistricts; k++) {\r\n        const cen = census[k]\r\n        const voterGeoms = []\r\n        for (let j = 0; j < cen.length; j++) {\r\n            const [gx, gy, gf] = cen[j]\r\n            const voterGeomsForTract = voterGeomsByTract[gx][gy]\r\n            // Adjust the weight of each voter geometry by the tract's weight in the census.\r\n            for (let i = 0; i < voterGeomsForTract.length; i++) {\r\n                const voterGeom = { ...voterGeomsForTract[i] }\r\n                voterGeom.densityMax *= gf\r\n                voterGeoms.push(voterGeom)\r\n            }\r\n        }\r\n        voterGeomsByDistrict.push(voterGeoms)\r\n    }\r\n    return voterGeomsByDistrict\r\n}\r\n","/**\r\n * Update VoterGeoms for each Tract\r\n * The set of voter basis geoms is repeated at every census tract on the district map,\r\n * but it is altered by translating it in policy space with a little noise\r\n * to represent differences due to geography\r\n *  */\r\nexport default function makeVoterGeomsByTract(voterGeoms, tractNoise, dimensions) {\r\n    if (dimensions === 1) {\r\n        return voterGeomsByTract1D(voterGeoms, tractNoise)\r\n    }\r\n    return voterGeomsByTract2D(voterGeoms, tractNoise)\r\n}\r\n\r\nfunction voterGeomsByTract1D(voterGeoms, tractNoise) {\r\n    return tractNoise.map(\r\n        (rowNoise) => rowNoise.map(\r\n            (cellNoise) => voterGeoms.map(\r\n                (vg) => {\r\n                    const [xNoise] = cellNoise\r\n                    const shape1 = { ...vg }\r\n                    shape1.x += xNoise\r\n                    return shape1\r\n                },\r\n            ),\r\n        ),\r\n    )\r\n}\r\n\r\nfunction voterGeomsByTract2D(voterGeoms, tractNoise) {\r\n    return tractNoise.map(\r\n        (rowNoise) => rowNoise.map(\r\n            (cellNoise) => voterGeoms.map(\r\n                (vg) => {\r\n                    const [xNoise, yNoise] = cellNoise\r\n                    const shape2 = { ...vg }\r\n                    shape2.x += xNoise\r\n                    shape2.y += yNoise\r\n                    return shape2\r\n                },\r\n            ),\r\n        ),\r\n    )\r\n}\r\n","import getPoints from '../entities/getPoints.js'\r\n\r\n/**\r\n * Get geometry inputs to election.\r\n * @param {*} voterShapeList\r\n * @param {*} candidateList\r\n * @param {*} simOptions\r\n * @returns {Object} geometry is input for castPoint\r\n */\r\nexport default function getTestGeometry(testVoter, candidateList, simOptions) {\r\n    const { dimensions } = simOptions\r\n    const voterPoint = getPoints([testVoter], dimensions)[0]\r\n    const canPoints = candidateList.getPoints(dimensions)\r\n    const parties = candidateList.getParties()\r\n    const testGeometry = {\r\n        voterPoint, canPoints, parties, dimensions,\r\n    }\r\n    return testGeometry\r\n}\r\n","/** @module */\r\n\r\nimport Sim from '@paretoman/votekit-sim'\r\nimport View from '@paretoman/votekit-view'\r\n\r\n/**\r\n * Set up a user interface to run a simulation.\r\n * @param {Object} config - An object containing commands. A command is a {name,value} pair.\r\n */\r\nexport default function sandbox(configURL, targetConfig, sandboxPath, comMessenger) {\r\n    const sim = Sim(comMessenger)\r\n\r\n    const view = View(sim, sandboxPath)\r\n    const { div, load } = view\r\n\r\n    load(configURL, targetConfig)\r\n\r\n    return div\r\n}\r\n","import { Changes } from '@paretoman/votekit-sim'\r\nimport layoutOrder from './layoutOrder.js'\r\nimport Layout from './Layout.js'\r\nimport ViewMode from './ViewMode.js'\r\nimport viewScreens from '../viewScreens/viewScreens.js'\r\nimport viewButtons from '../viewButtons/viewButtons.js'\r\nimport loadView from '../save/loadView.js'\r\nimport viewJupyter from '../environments/viewJupyter.js'\r\nimport save from '../save/save.js'\r\n\r\n/**\r\n * View observes the sim and adds a user interface.\r\n * The foreground draws animations.\r\n * The view loops as fast as the browser can refresh.\r\n * @param {*} sim\r\n * @param {String} sandboxPath\r\n * @returns {Object} - { div, load } - div contains everything, load figures out what configuration to load\r\n */\r\nexport default function View(sim, sandboxPath) {\r\n    const {\r\n        changes, simOptions, pub, update, init,\r\n    } = sim\r\n\r\n    const viewMode = new ViewMode(pub, simOptions, changes)\r\n    const viewChanges = new Changes()\r\n    const layout = new Layout(layoutOrder)\r\n\r\n    const { menu } = viewButtons(sim, layout, viewMode)\r\n    const { nameInput } = save(sim, layout, sandboxPath)\r\n    const { screenMain } = viewScreens(sim, viewMode, layout, viewChanges, menu)\r\n    viewJupyter(pub, changes)\r\n\r\n    function load(configURL, targetConfig) {\r\n        loadView(configURL, targetConfig, init, nameInput)\r\n    }\r\n\r\n    window.requestAnimationFrame(viewLoop)\r\n\r\n    function viewLoop() {\r\n        update()\r\n        drawForeground()\r\n        window.requestAnimationFrame(viewLoop)\r\n    }\r\n\r\n    function drawForeground() {\r\n        if (viewChanges.checkNone() && screenMain.tweenGroup.getAll().length === 0) return\r\n        screenMain.tweenGroup.update()\r\n        viewMode.clearForeground()\r\n        viewMode.renderForeground()\r\n        viewChanges.clear()\r\n    }\r\n\r\n    const div = layout.makeComponent()\r\n\r\n    return { div, load }\r\n}\r\n","const layoutOrder = [\r\n    'menu',\r\n    'darkModeSwitch',\r\n    'simControlsLabel',\r\n    'addEntities',\r\n    'undo',\r\n    'redo',\r\n    'warning',\r\n    'viz',\r\n    'vizMini',\r\n    'maps',\r\n    'budget',\r\n    'name',\r\n    'resultsPhaseSelector',\r\n    'saveConfigToLink',\r\n    'saveConfigToShortLink',\r\n    'saveConfigToText',\r\n    'loadConfigText',\r\n    'saveData',\r\n    'svgSwitch',\r\n    'showDownloadScreenLink',\r\n]\r\nexport default layoutOrder\r\n","/** @module */\r\n\r\n/**\r\n * Layout keeps an internal ordered list of div names.\r\n * It creates a parent div to fill with these divs.\r\n * New divs are added according to the order of the names.\r\n * If the new div isn't in the list, then it is added at the end of the parent div.\r\n * @param {String[]} - Names in an ordered list for the layout.\r\n * @constructor\r\n */\r\nexport default function Layout(order) {\r\n    const self = this\r\n\r\n    const divsByName = {}\r\n    const extraDivs = []\r\n\r\n    /**\r\n     * Adds a new div with a name that should be in Layout's internal ordered list.\r\n     * @param {String} name\r\n     * @param {HTMLElement} div\r\n     */\r\n    self.newElement = (name, div) => {\r\n        if (order.includes(name)) {\r\n            divsByName[name] = div\r\n        } else {\r\n            extraDivs.push(div)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When we're done adding new divs, we return a parent div.\r\n     * @returns The parent div containing all other divs in order.\r\n     */\r\n    self.makeComponent = () => {\r\n        const parent = document.createElement('div')\r\n        parent.className = 'sandbox'\r\n        order.forEach((name) => {\r\n            const div = divsByName[name]\r\n            if (div !== undefined) {\r\n                parent.appendChild(div)\r\n            }\r\n        })\r\n        extraDivs.forEach((div) => {\r\n            parent.appendChild(div)\r\n        })\r\n        return parent\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport ViewModePublisher from './ViewModePublisher.js'\r\n\r\n/**\r\n * Need to pass along the pub-sub pattern through view to specific viewModes.\r\n * The views attach to these view states.\r\n */\r\nexport default function ViewMode(pub, simOptions, changes) {\r\n    const self = this\r\n\r\n    pub.attach(self)\r\n\r\n    self.viewModes = {\r\n        one: new ViewModePublisher(),\r\n        sample: new ViewModePublisher(),\r\n    }\r\n    let viewModeState = self.viewModes[simOptions.mode]\r\n\r\n    self.update = (simData) => {\r\n        // state: check for change, exit, set, enter, update.\r\n        if (changes.check(['mode'])) {\r\n            viewModeState.exit()\r\n            viewModeState = self.viewModes[simOptions.mode]\r\n            viewModeState.enter()\r\n        }\r\n        viewModeState.update(simData)\r\n    }\r\n\r\n    self.render = () => { viewModeState.render() }\r\n    self.renderForeground = () => { viewModeState.renderForeground() }\r\n    self.clear = () => { viewModeState.clear() }\r\n    self.clearForeground = () => { viewModeState.clearForeground() }\r\n\r\n    self.rerender = () => {\r\n        self.clear()\r\n        self.clearForeground()\r\n        self.render()\r\n        self.renderForeground()\r\n    }\r\n}\r\n","export default function ViewModePublisher() {\r\n    const self = this\r\n\r\n    // Publish to View //\r\n    const observers = []\r\n    self.attach = (observer) => { observers.push(observer) }\r\n\r\n    self.enter = () => { observers.forEach((o) => o.enter()) }\r\n    self.exit = () => { observers.forEach((o) => o.exit()) }\r\n    self.update = (simData) => { observers.forEach((o) => o.update(simData)) }\r\n    self.render = () => {\r\n        observers.forEach((o) => { if (o.render) o.render() })\r\n    }\r\n    self.renderForeground = () => {\r\n        observers.forEach((o) => { if (o.renderForeground) o.renderForeground() })\r\n    }\r\n    self.clear = () => {\r\n        observers.forEach((o) => { if (o.clear) o.clear() })\r\n    }\r\n    self.clearForeground = () => {\r\n        observers.forEach((o) => { if (o.clearForeground) o.clearForeground() })\r\n    }\r\n}\r\n","/* eslint-disable no-new */\r\n\r\nimport Screen from '../screen/Screen.js'\r\nimport addDarkModeSwitch from './addDarkModeSwitch.js'\r\nimport ViewSettings from './ViewSettings.js'\r\nimport ViewVizBudget from './ViewVizBudget.js'\r\nimport ViewVizOne from './ViewVizOne.js'\r\nimport ViewVizSample from './ViewVizSample.js'\r\nimport ViewDistrictMaps from './ViewDistrictMaps.js'\r\nimport ViewEntitiesOne from './ViewEntitiesOne.js'\r\nimport ViewEntitiesSample from './ViewEntitiesSample.js'\r\nimport ScreenCommon from '../screen/ScreenCommon.js'\r\nimport addSvgSwitch from './addSvgSwitch.js'\r\nimport addDownloadScreen from './addDownloadScreen.js'\r\n\r\n/**\r\n * Make all the screens and views with screens.\r\n * @param {*} viewMode\r\n * @param {*} changes\r\n * @param {*} menu\r\n * @param {*} layout\r\n */\r\nexport default function viewScreens(sim, viewMode, layout, viewChanges, menu) {\r\n    const {\r\n        entities, simOptions, electionOptionsMan, changes,\r\n    } = sim\r\n\r\n    const screenCommon = new ScreenCommon(300, 300)\r\n    const screenMain = new Screen(screenCommon, viewMode, layout, 'viz')\r\n    const screenMini = new Screen(screenCommon, viewMode, layout, 'vizMini')\r\n    screenMini.setHeight(screenCommon.height / 3)\r\n    screenMini.hide()\r\n\r\n    addSvgSwitch(screenCommon, layout, viewMode)\r\n    addDownloadScreen(screenCommon, layout)\r\n    addDarkModeSwitch(screenCommon, layout, viewMode)\r\n\r\n    const viewSettings = new ViewSettings(changes)\r\n    new ViewEntitiesOne(entities, screenMain, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings, viewChanges)\r\n    new ViewEntitiesSample(entities, screenMain, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings)\r\n    new ViewVizOne(entities, screenMain, screenMini, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings)\r\n    new ViewVizSample(entities, screenMain, menu, changes, simOptions, viewMode, viewSettings)\r\n    new ViewVizBudget(screenCommon, layout, menu, changes, simOptions, electionOptionsMan, viewMode)\r\n    new ViewDistrictMaps(entities, screenCommon, layout, changes, simOptions, electionOptionsMan, viewMode)\r\n\r\n    return { screenMain }\r\n}\r\n","/** @module */\r\n\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport EventHandlers from './EventHandlers.js'\r\n\r\nimport ScreenCanvas from './ScreenCanvas.js'\r\nimport ScreenDownload from './ScreenDownload.js'\r\nimport ScreenSvg from './ScreenSvg.js'\r\n\r\n/**\r\n * @param {Layout} layout\r\n * @constructor\r\n */\r\nexport default function Screen(screenCommon, viewMode, layout, layoutName) {\r\n    const self = this\r\n\r\n    // Components //\r\n\r\n    self.common = screenCommon\r\n    self.common.attach(self)\r\n\r\n    self.canvas = new ScreenCanvas()\r\n    self.svg = new ScreenSvg()\r\n    self.download = new ScreenDownload(self, viewMode)\r\n    self.setShowDownloadScreenLink = self.download.setShowDownloadScreenLink\r\n\r\n    self.tweenGroup = new TWEEN.Group()\r\n\r\n    // Divs //\r\n\r\n    self.tooltips = document.createElement('div')\r\n    self.tooltips.setAttribute('class', 'tooltips')\r\n\r\n    const clearDiv = document.createElement('div')\r\n\r\n    self.wrap = document.createElement('div')\r\n    self.wrap.setAttribute('class', 'screenWrap')\r\n    self.wrap.appendChild(clearDiv)\r\n    self.wrap.appendChild(self.canvas.background)\r\n    self.wrap.appendChild(self.canvas.foreground)\r\n    self.wrap.appendChild(self.svg.background)\r\n    self.wrap.appendChild(self.svg.foreground)\r\n    self.wrap.appendChild(self.tooltips)\r\n\r\n    self.outer = document.createElement('div')\r\n    self.outer.appendChild(self.wrap)\r\n    self.outer.appendChild(self.download.div)\r\n\r\n    layout.newElement(layoutName, self.outer)\r\n\r\n    self.setSize = (w, h) => {\r\n        const wpx = `${w}px`\r\n        const hpx = `${h}px`\r\n\r\n        self.width = w // measured in browser pixels\r\n        self.height = h\r\n        self.tooltips.style.width = wpx\r\n        self.tooltips.style.height = hpx\r\n        self.wrap.style.width = wpx\r\n        self.wrap.style.height = hpx\r\n\r\n        self.svg.setSize(w, h)\r\n        self.canvas.setSize(w, h)\r\n    }\r\n    self.setWidth = (w) => {\r\n        self.setSize(w, self.height)\r\n    }\r\n    self.setHeight = (h) => {\r\n        self.setSize(self.width, h)\r\n    }\r\n    const { width, height } = screenCommon\r\n    self.setSize(width, height)\r\n\r\n    self.setFCtx = (f) => {\r\n        self.fctx = f\r\n    }\r\n\r\n    // Clear Screen //\r\n\r\n    self.clear = function () {\r\n        self.ctx.clearRect(0, 0, self.width, self.height)\r\n\r\n        if (self.common.darkMode && self.noBuffers) {\r\n            self.ctx.fillStyle = '#222'\r\n            self.ctx.fillRect(0, 0, self.width, self.height)\r\n\r\n            self.ctx.fillStyle = 'white'\r\n        }\r\n    }\r\n    self.clearForeground = function () {\r\n        self.fctx.clearRect(0, 0, self.width, self.height)\r\n    }\r\n\r\n    // Screen Modes //\r\n\r\n    self.switchToSVG = () => {\r\n        self.ctx = self.svg.ctx\r\n        self.fctx = self.svg.fctx\r\n        self.canvas.setDisplayStyle('none')\r\n        self.svg.setDisplayStyle('block')\r\n        self.noBuffers = true\r\n    }\r\n    self.switchToCanvas = () => {\r\n        self.ctx = self.canvas.ctx\r\n        self.fctx = self.canvas.fctx\r\n        self.canvas.setDisplayStyle('block')\r\n        self.svg.setDisplayStyle('none')\r\n        self.noBuffers = false\r\n    }\r\n    self.setSvgMode = (val) => {\r\n        if (val) {\r\n            self.switchToSVG()\r\n        } else {\r\n            self.switchToCanvas()\r\n        }\r\n    }\r\n    self.setSvgMode(false)\r\n\r\n    self.show = () => {\r\n        self.outer.style.display = 'block'\r\n    }\r\n    self.hide = () => {\r\n        self.outer.style.display = 'none'\r\n    }\r\n\r\n    self.setDarkMode = (doDarkMode) => {\r\n        const lightStroke = '#ddd'\r\n        const darkStroke = '#222'\r\n        const s = (doDarkMode) ? lightStroke : darkStroke\r\n        self.canvas.setStrokeStyle(s)\r\n        self.svg.setStrokeStyle(s)\r\n    }\r\n    self.setDarkMode(screenCommon.darkMode)\r\n\r\n    // Events //\r\n\r\n    self.eventHandlers = new EventHandlers()\r\n    const { handlers } = self.eventHandlers\r\n\r\n    self.wrap.onmousedown = (e) => handlers.start(e)\r\n    self.wrap.onmousemove = (e) => handlers.move(e)\r\n    self.wrap.onmouseup = (e) => handlers.end(e)\r\n    self.wrap.addEventListener('touchmove', (e) => handlers.touchmove(e))\r\n    self.wrap.addEventListener('touchstart', (e) => handlers.touchstart(e))\r\n    self.wrap.addEventListener('touchend', (e) => handlers.touchend(e))\r\n\r\n    // mouse up outside of canvas\r\n    const current = document.onmouseup\r\n    document.onmouseup = (e) => {\r\n        if (current) current(e)\r\n        self.wrap.onmouseup(e)\r\n    }\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Set event handlers for a screen.foreground.\r\n * We want to set the handlers once for the canvas,\r\n * and use this class to change the functions that the handlers call.\r\n * Then allow sim modes to set the functions called by the handlers.\r\n * @constructor\r\n */\r\nexport default function EventHandlers() {\r\n    const self = this\r\n\r\n    // Event Handlers - well, at least they handle the event handlers//\r\n    self.handlers = {\r\n        start: () => {},\r\n        move: () => {},\r\n        end: () => {},\r\n        touchmove: () => {},\r\n        touchstart: () => {},\r\n        touchend: () => {},\r\n    }\r\n\r\n    // overwrite event handlers\r\n    self.set = (eHandlers) => {\r\n        Object.assign(self.handlers, eHandlers)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport getPixelRatio from './getPixelRatio.js'\r\n\r\n/**\r\n * Make the canvas part of the screen.\r\n */\r\nexport default function ScreenCanvas() {\r\n    const self = this\r\n\r\n    self.background = document.createElement('canvas')\r\n    self.background.setAttribute('class', 'background')\r\n    self.ctx = self.background.getContext('2d')\r\n\r\n    self.foreground = document.createElement('canvas')\r\n    self.foreground.setAttribute('class', 'foreground')\r\n    self.fctx = self.foreground.getContext('2d')\r\n\r\n    self.setSize = (w, h) => {\r\n        const wpx = `${w}px`\r\n        const hpx = `${h}px`\r\n        const r = self.pixelRatio\r\n        const wd = w * r // measured in device pixels\r\n        const hd = h * r\r\n\r\n        self.background.width = wd\r\n        self.background.height = hd\r\n        self.background.style.width = wpx\r\n        self.background.style.height = hpx\r\n        self.foreground.width = wd\r\n        self.foreground.height = hd\r\n        self.foreground.style.width = wpx\r\n        self.foreground.style.height = hpx\r\n\r\n        self.ctx.scale(r, r)\r\n        self.fctx.scale(r, r)\r\n    }\r\n\r\n    self.setDisplayStyle = (displayStyle) => {\r\n        self.background.style.display = displayStyle\r\n        self.foreground.style.display = displayStyle\r\n    }\r\n\r\n    self.setStrokeStyle = (s) => {\r\n        self.ctx.strokeStyle = s\r\n        self.fctx.strokeStyle = s\r\n    }\r\n\r\n    self.pixelRatio = getPixelRatio(self.ctx)\r\n}\r\n","/**\r\n * Use scaling for high DPI devices instead of multiplying every time inside draw calls\r\n * https://www.html5rocks.com/en/tutorials/canvas/hidpi/\r\n * @param context drawing context\r\n * @returns Number\r\n */\r\nexport default function getPixelRatio(context) {\r\n    const backingStore = context.backingStorePixelRatio\r\n          || context.webkitBackingStorePixelRatio\r\n          || context.mozBackingStorePixelRatio\r\n          || context.msBackingStorePixelRatio\r\n          || context.oBackingStorePixelRatio\r\n          || context.backingStorePixelRatio || 1\r\n\r\n    return (window.devicePixelRatio || 1) / backingStore\r\n}\r\n","/** @module */\r\n/**\r\n * Make the download link part of the screen.\r\n */\r\nexport default function ScreenDownload(screen, viewMode) {\r\n    const self = this\r\n\r\n    self.div = document.createElement('div')\r\n\r\n    const makeSvgButton = document.createElement('button')\r\n    makeSvgButton.className = 'button2'\r\n    makeSvgButton.innerText = 'Make SVG'\r\n    makeSvgButton.onclick = makeSVG\r\n\r\n    const downloadLink = document.createElement('a')\r\n    downloadLink.innerText = 'vote.svg'\r\n    downloadLink.download = 'vote.svg'\r\n    downloadLink.style.margin = '4px'\r\n\r\n    self.div.append(makeSvgButton)\r\n    self.div.appendChild(downloadLink)\r\n\r\n    self.setShowDownloadScreenLink = (show) => {\r\n        if (show) {\r\n            makeSvgButton.hidden = false\r\n            downloadLink.hidden = false\r\n        } else {\r\n            makeSvgButton.hidden = true\r\n            downloadLink.hidden = true\r\n        }\r\n    }\r\n    self.setShowDownloadScreenLink(screen.common.showDownloadScreenLink)\r\n\r\n    function makeSVG() {\r\n        screen.setFCtx(screen.svg.ctx)\r\n\r\n        viewMode.clear()\r\n        viewMode.render()\r\n        viewMode.renderForeground()\r\n\r\n        const svg = screen.svg.ctx.getSerializedSvg(true)\r\n        const url = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`\r\n        downloadLink.href = url\r\n\r\n        screen.setFCtx(screen.svg.fctx)\r\n\r\n        viewMode.rerender()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport C2S from '@mithrandirii/canvas2svg'\r\n\r\n/**\r\n * Make the svg part of the screen.\r\n */\r\nexport default function ScreenSvg() {\r\n    const self = this\r\n\r\n    self.ctx = new C2S()\r\n    self.background = self.ctx.getSvg()\r\n    self.background.setAttribute('class', 'background')\r\n\r\n    self.fctx = new C2S()\r\n    self.foreground = self.fctx.getSvg()\r\n    self.foreground.setAttribute('class', 'foreground')\r\n\r\n    self.setSize = (w, h) => {\r\n        const wpx = `${w}px`\r\n        const hpx = `${h}px`\r\n\r\n        self.ctx.width = w\r\n        self.ctx.height = h\r\n        self.background.style.width = wpx\r\n        self.background.style.height = hpx\r\n\r\n        self.fctx.width = w\r\n        self.fctx.height = h\r\n        self.foreground.style.width = wpx\r\n        self.foreground.style.height = hpx\r\n    }\r\n\r\n    self.setDisplayStyle = (displayStyle) => {\r\n        self.background.style.display = displayStyle\r\n        self.foreground.style.display = displayStyle\r\n    }\r\n    self.setStrokeStyle = (s) => {\r\n        self.ctx.strokeStyle = s\r\n        self.fctx.strokeStyle = s\r\n    }\r\n}\r\n","/*!!\n *  Canvas 2 Svg v1.0.21\n *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.\n *\n *  Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  Author:\n *  Kerry Liu\n *\n *  Copyright (c) 2014 Gliffy Inc.\n */\n\n    var STYLES, ctx, CanvasGradient, CanvasPattern, namedEntities;\n\n    //helper function to format a string\n    function format(str, args) {\n        var keys = Object.keys(args), i;\n        for (i=0; i<keys.length; i++) {\n            str = str.replace(new RegExp(\"\\\\{\" + keys[i] + \"\\\\}\", \"gi\"), args[keys[i]]);\n        }\n        return str;\n    }\n\n    //helper function that generates a random string\n    function randomString(holder) {\n        var chars, randomstring, i;\n        if (!holder) {\n            throw new Error(\"cannot create a random attribute name for an undefined object\");\n        }\n        chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\";\n        randomstring = \"\";\n        do {\n            randomstring = \"\";\n            for (i = 0; i < 12; i++) {\n                randomstring += chars[Math.floor(Math.random() * chars.length)];\n            }\n        } while (holder[randomstring]);\n        return randomstring;\n    }\n\n    //helper function to map named to numbered entities\n    function createNamedToNumberedLookup(items, radix) {\n        var i, entity, lookup = {}, base10, base16;\n        items = items.split(',');\n        radix = radix || 10;\n        // Map from named to numbered entities.\n        for (i = 0; i < items.length; i += 2) {\n            entity = '&' + items[i + 1] + ';';\n            base10 = parseInt(items[i], radix);\n            lookup[entity] = '&#'+base10+';';\n        }\n        //FF and IE need to create a regex from hex values ie &nbsp; == \\xa0\n        lookup[\"\\\\xa0\"] = '&#160;';\n        return lookup;\n    }\n\n    //helper function to map canvas-textAlign to svg-textAnchor\n    function getTextAnchor(textAlign) {\n        //TODO: support rtl languages\n        var mapping = {\"left\":\"start\", \"right\":\"end\", \"center\":\"middle\", \"start\":\"start\", \"end\":\"end\"};\n        return mapping[textAlign] || mapping.start;\n    }\n\n    //helper function to map canvas-textBaseline to svg-dominantBaseline\n    function getDominantBaseline(textBaseline) {\n        //INFO: not supported in all browsers\n        var mapping = {\"alphabetic\": \"alphabetic\", \"hanging\": \"hanging\", \"top\":\"text-before-edge\", \"bottom\":\"text-after-edge\", \"middle\":\"central\"};\n        return mapping[textBaseline] || mapping.alphabetic;\n    }\n\n    // Unpack entities lookup where the numbers are in radix 32 to reduce the size\n    // entity mapping courtesy of tinymce\n    namedEntities = createNamedToNumberedLookup(\n        '50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,' +\n            '5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,' +\n            '5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,' +\n            '5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,' +\n            '68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,' +\n            '6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,' +\n            '6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,' +\n            '75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,' +\n            '7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,' +\n            '7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,' +\n            'sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,' +\n            'st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,' +\n            't9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,' +\n            'tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,' +\n            'u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,' +\n            '81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,' +\n            '8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,' +\n            '8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,' +\n            '8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,' +\n            '8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,' +\n            'nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,' +\n            'rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,' +\n            'Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,' +\n            '80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,' +\n            '811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro', 32);\n\n\n    //Some basic mappings for attributes and default values.\n    STYLES = {\n        \"strokeStyle\":{\n            svgAttr : \"stroke\", //corresponding svg attribute\n            canvas : \"#000000\", //canvas default\n            svg : \"none\",       //svg default\n            apply : \"stroke\"    //apply on stroke() or fill()\n        },\n        \"fillStyle\":{\n            svgAttr : \"fill\",\n            canvas : \"#000000\",\n            svg : null, //svg default is black, but we need to special case this to handle canvas stroke without fill\n            apply : \"fill\"\n        },\n        \"lineCap\":{\n            svgAttr : \"stroke-linecap\",\n            canvas : \"butt\",\n            svg : \"butt\",\n            apply : \"stroke\"\n        },\n        \"lineJoin\":{\n            svgAttr : \"stroke-linejoin\",\n            canvas : \"miter\",\n            svg : \"miter\",\n            apply : \"stroke\"\n        },\n        \"miterLimit\":{\n            svgAttr : \"stroke-miterlimit\",\n            canvas : 10,\n            svg : 4,\n            apply : \"stroke\"\n        },\n        \"lineWidth\":{\n            svgAttr : \"stroke-width\",\n            canvas : 1,\n            svg : 1,\n            apply : \"stroke\"\n        },\n        \"globalAlpha\": {\n            svgAttr : \"opacity\",\n            canvas : 1,\n            svg : 1,\n            apply :  \"fill stroke\"\n        },\n        \"font\":{\n            //font converts to multiple svg attributes, there is custom logic for this\n            canvas : \"10px sans-serif\"\n        },\n        \"shadowColor\":{\n            canvas : \"#000000\"\n        },\n        \"shadowOffsetX\":{\n            canvas : 0\n        },\n        \"shadowOffsetY\":{\n            canvas : 0\n        },\n        \"shadowBlur\":{\n            canvas : 0\n        },\n        \"textAlign\":{\n            canvas : \"start\"\n        },\n        \"textBaseline\":{\n            canvas : \"alphabetic\"\n        },\n        \"lineDash\" : {\n            svgAttr : \"stroke-dasharray\",\n            canvas : [],\n            svg : null,\n            apply : \"stroke\"\n        }\n    };\n\n    /**\n     *\n     * @param gradientNode - reference to the gradient\n     * @constructor\n     */\n    CanvasGradient = function (gradientNode, ctx) {\n        this.__root = gradientNode;\n        this.__ctx = ctx;\n    };\n\n    /**\n     * Adds a color stop to the gradient root\n     */\n    CanvasGradient.prototype.addColorStop = function (offset, color) {\n        var stop = this.__ctx.__createElement(\"stop\"), regex, matches;\n        stop.setAttribute(\"offset\", offset);\n        if (color.indexOf(\"rgba\") !== -1) {\n            //separate alpha value, since webkit can't handle it\n            regex = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?\\.?\\d*)\\s*\\)/gi;\n            matches = regex.exec(color);\n            stop.setAttribute(\"stop-color\", format(\"rgb({r},{g},{b})\", {r:matches[1], g:matches[2], b:matches[3]}));\n            stop.setAttribute(\"stop-opacity\", matches[4]);\n        } else {\n            stop.setAttribute(\"stop-color\", color);\n        }\n        this.__root.appendChild(stop);\n    };\n\n    CanvasPattern = function (pattern, ctx) {\n        this.__root = pattern;\n        this.__ctx = ctx;\n    };\n\n    /**\n     * The mock canvas context\n     * @param o - options include:\n     * ctx - existing Context2D to wrap around\n     * width - width of your canvas (defaults to 500)\n     * height - height of your canvas (defaults to 500)\n     * enableMirroring - enables canvas mirroring (get image data) (defaults to false)\n     * document - the document object (defaults to the current document)\n     */\n    ctx = function (o) {\n        var defaultOptions = { width:500, height:500, enableMirroring : false}, options;\n\n        //keep support for this way of calling C2S: new C2S(width,height)\n        if (arguments.length > 1) {\n            options = defaultOptions;\n            options.width = arguments[0];\n            options.height = arguments[1];\n        } else if ( !o ) {\n            options = defaultOptions;\n        } else {\n            options = o;\n        }\n\n        if (!(this instanceof ctx)) {\n            //did someone call this without new?\n            return new ctx(options);\n        }\n\n        //setup options\n        this.width = options.width || defaultOptions.width;\n        this.height = options.height || defaultOptions.height;\n        this.enableMirroring = options.enableMirroring !== undefined ? options.enableMirroring : defaultOptions.enableMirroring;\n\n        this.canvas = this;   ///point back to this instance!\n        this.__document = options.document || document;\n\n        // allow passing in an existing context to wrap around\n        // if a context is passed in, we know a canvas already exist\n        if (options.ctx) {\n            this.__ctx = options.ctx;\n        } else {\n            this.__canvas = this.__document.createElement(\"canvas\");\n            this.__ctx = this.__canvas.getContext(\"2d\");\n        }\n\n        this.__setDefaultStyles();\n        this.__stack = [this.__getStyleState()];\n        this.__groupStack = [];\n\n        //the root svg element\n        this.__root = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        this.__root.setAttribute(\"version\", 1.1);\n        this.__root.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        this.__root.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        this.__root.setAttribute(\"width\", this.width);\n        this.__root.setAttribute(\"height\", this.height);\n\n        //make sure we don't generate the same ids in defs\n        this.__ids = {};\n\n        //defs tag\n        this.__defs = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n        this.__root.appendChild(this.__defs);\n\n        //also add a group child. the svg element can't use the transform attribute\n        this.__currentElement = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        this.__root.appendChild(this.__currentElement);\n    };\n\n\n    /**\n     * Creates the specified svg element\n     * @private\n     */\n    ctx.prototype.__createElement = function (elementName, properties, resetFill) {\n        if (typeof properties === \"undefined\") {\n            properties = {};\n        }\n\n        var element = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", elementName),\n            keys = Object.keys(properties), i, key;\n        if (resetFill) {\n            //if fill or stroke is not specified, the svg element should not display. By default SVG's fill is black.\n            element.setAttribute(\"fill\", \"none\");\n            element.setAttribute(\"stroke\", \"none\");\n        }\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            element.setAttribute(key, properties[key]);\n        }\n        return element;\n    };\n\n    /**\n     * Applies default canvas styles to the context\n     * @private\n     */\n    ctx.prototype.__setDefaultStyles = function () {\n        //default 2d canvas context properties see:http://www.w3.org/TR/2dcontext/\n        var keys = Object.keys(STYLES), i, key;\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            this[key] = STYLES[key].canvas;\n        }\n    };\n\n    /**\n     * Applies styles on restore\n     * @param styleState\n     * @private\n     */\n    ctx.prototype.__applyStyleState = function (styleState) {\n        var keys = Object.keys(styleState), i, key;\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            this[key] = styleState[key];\n        }\n    };\n\n    /**\n     * Gets the current style state\n     * @return {Object}\n     * @private\n     */\n    ctx.prototype.__getStyleState = function () {\n        var i, styleState = {}, keys = Object.keys(STYLES), key;\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            styleState[key] = this[key];\n        }\n        return styleState;\n    };\n\n    /**\n     * Apples the current styles to the current SVG element. On \"ctx.fill\" or \"ctx.stroke\"\n     * @param type\n     * @private\n     */\n    ctx.prototype.__applyStyleToCurrentElement = function (type) {\n    \tvar currentElement = this.__currentElement;\n    \tvar currentStyleGroup = this.__currentElementsToStyle;\n    \tif (currentStyleGroup) {\n    \t\tcurrentElement.setAttribute(type, \"\");\n    \t\tcurrentElement = currentStyleGroup.element;\n    \t\tcurrentStyleGroup.children.forEach(function (node) {\n    \t\t\tnode.setAttribute(type, \"\");\n    \t\t})\n    \t}\n\n        var keys = Object.keys(STYLES), i, style, value, id, regex, matches;\n        for (i = 0; i < keys.length; i++) {\n            style = STYLES[keys[i]];\n            value = this[keys[i]];\n            if (style.apply) {\n                //is this a gradient or pattern?\n                if (value instanceof CanvasPattern) {\n                    //pattern\n                    if (value.__ctx) {\n                        //copy over defs\n                        while(value.__ctx.__defs.childNodes.length) {\n                            id = value.__ctx.__defs.childNodes[0].getAttribute(\"id\");\n                            this.__ids[id] = id;\n                            this.__defs.appendChild(value.__ctx.__defs.childNodes[0]);\n                        }\n                    }\n                    currentElement.setAttribute(style.apply, format(\"url(#{id})\", {id:value.__root.getAttribute(\"id\")}));\n                }\n                else if (value instanceof CanvasGradient) {\n                    //gradient\n                    currentElement.setAttribute(style.apply, format(\"url(#{id})\", {id:value.__root.getAttribute(\"id\")}));\n                } else if (style.apply.indexOf(type)!==-1 && style.svg !== value) {\n                    if ((style.svgAttr === \"stroke\" || style.svgAttr === \"fill\") && value.indexOf(\"rgba\") !== -1) {\n                        //separate alpha value, since illustrator can't handle it\n                        regex = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?\\.?\\d*)\\s*\\)/gi;\n                        matches = regex.exec(value);\n                        currentElement.setAttribute(style.svgAttr, format(\"rgb({r},{g},{b})\", {r:matches[1], g:matches[2], b:matches[3]}));\n                        //should take globalAlpha here\n                        var opacity = matches[4];\n                        var globalAlpha = this.globalAlpha;\n                        if (globalAlpha != null) {\n                            opacity *= globalAlpha;\n                        }\n                        currentElement.setAttribute(style.svgAttr+\"-opacity\", opacity);\n                    } else {\n                        var attr = style.svgAttr;\n                        if (keys[i] === 'globalAlpha') {\n                            attr = type+'-'+style.svgAttr;\n                            if (currentElement.getAttribute(attr)) {\n                                 //fill-opacity or stroke-opacity has already been set by stroke or fill.\n                                continue;\n                            }\n                        }\n                        //otherwise only update attribute if right type, and not svg default\n                        currentElement.setAttribute(attr, value);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Will return the closest group or svg node. May return the current element.\n     * @private\n     */\n    ctx.prototype.__closestGroupOrSvg = function (node) {\n        node = node || this.__currentElement;\n        if (node.nodeName === \"g\" || node.nodeName === \"svg\") {\n            return node;\n        } else {\n            return this.__closestGroupOrSvg(node.parentNode);\n        }\n    };\n\n    /**\n     * Returns the serialized value of the svg so far\n     * @param fixNamedEntities - Standalone SVG doesn't support named entities, which document.createTextNode encodes.\n     *                           If true, we attempt to find all named entities and encode it as a numeric entity.\n     * @return serialized svg\n     */\n    ctx.prototype.getSerializedSvg = function (fixNamedEntities) {\n        var serialized = new XMLSerializer().serializeToString(this.__root),\n            keys, i, key, value, regexp, xmlns;\n\n        //IE search for a duplicate xmnls because they didn't implement setAttributeNS correctly\n        xmlns = /xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg\".+xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg/gi;\n        if (xmlns.test(serialized)) {\n            serialized = serialized.replace('xmlns=\"http://www.w3.org/2000/svg','xmlns:xlink=\"http://www.w3.org/1999/xlink');\n        }\n\n        if (fixNamedEntities) {\n            keys = Object.keys(namedEntities);\n            //loop over each named entity and replace with the proper equivalent.\n            for (i=0; i<keys.length; i++) {\n                key = keys[i];\n                value = namedEntities[key];\n                regexp = new RegExp(key, \"gi\");\n                if (regexp.test(serialized)) {\n                    serialized = serialized.replace(regexp, value);\n                }\n            }\n        }\n\n        return serialized;\n    };\n\n\n    /**\n     * Returns the root svg\n     * @return\n     */\n    ctx.prototype.getSvg = function () {\n        return this.__root;\n    };\n    /**\n     * Will generate a group tag.\n     */\n    ctx.prototype.save = function () {\n        var group = this.__createElement(\"g\");\n        var parent = this.__closestGroupOrSvg();\n        this.__groupStack.push(parent);\n        parent.appendChild(group);\n        this.__currentElement = group;\n        this.__stack.push(this.__getStyleState());\n    };\n    /**\n     * Sets current element to parent, or just root if already root\n     */\n    ctx.prototype.restore = function () {\n        this.__currentElement = this.__groupStack.pop();\n        this.__currentElementsToStyle = null;\n        //Clearing canvas will make the poped group invalid, currentElement is set to the root group node.\n        if (!this.__currentElement) {\n            this.__currentElement = this.__root.childNodes[1];\n        }\n        var state = this.__stack.pop();\n        this.__applyStyleState(state);\n    };\n\n    /**\n     * Helper method to add transform\n     * @private\n     */\n    ctx.prototype.__addTransform = function (t) {\n        //if the current element has siblings, add another group\n        var parent = this.__closestGroupOrSvg();\n        if (parent.childNodes.length > 0) {\n        \tif (this.__currentElement.nodeName === \"path\") {\n        \t\tif (!this.__currentElementsToStyle) this.__currentElementsToStyle = {element: parent, children: []};\n        \t\tthis.__currentElementsToStyle.children.push(this.__currentElement)\n        \t\tthis.__applyCurrentDefaultPath();\n        \t}\n\n            var group = this.__createElement(\"g\");\n            parent.appendChild(group);\n            this.__currentElement = group;\n        }\n\n        var transform = this.__currentElement.getAttribute(\"transform\");\n        if (transform) {\n            transform += \" \";\n        } else {\n            transform = \"\";\n        }\n        transform += t;\n        this.__currentElement.setAttribute(\"transform\", transform);\n    };\n\n    /**\n     *  scales the current element\n     */\n    ctx.prototype.scale = function (x, y) {\n        if (y === undefined) {\n            y = x;\n        }\n        this.__addTransform(format(\"scale({x},{y})\", {x:x, y:y}));\n    };\n\n    /**\n     * rotates the current element\n     */\n    ctx.prototype.rotate = function (angle) {\n        var degrees = (angle * 180 / Math.PI);\n        this.__addTransform(format(\"rotate({angle},{cx},{cy})\", {angle:degrees, cx:0, cy:0}));\n    };\n\n    /**\n     * translates the current element\n     */\n    ctx.prototype.translate = function (x, y) {\n        this.__addTransform(format(\"translate({x},{y})\", {x:x,y:y}));\n    };\n\n    /**\n     * applies a transform to the current element\n     */\n    ctx.prototype.transform = function (a, b, c, d, e, f) {\n        this.__addTransform(format(\"matrix({a},{b},{c},{d},{e},{f})\", {a:a, b:b, c:c, d:d, e:e, f:f}));\n    };\n\n    /**\n     * Create a new Path Element\n     */\n    ctx.prototype.beginPath = function () {\n        var path, parent;\n\n        // Note that there is only one current default path, it is not part of the drawing state.\n        // See also: https://html.spec.whatwg.org/multipage/scripting.html#current-default-path\n        this.__currentDefaultPath = \"\";\n        this.__currentPosition = {};\n\n        path = this.__createElement(\"path\", {}, true);\n        parent = this.__closestGroupOrSvg();\n        parent.appendChild(path);\n        this.__currentElement = path;\n    };\n\n    /**\n     * Helper function to apply currentDefaultPath to current path element\n     * @private\n     */\n    ctx.prototype.__applyCurrentDefaultPath = function () {\n    \tvar currentElement = this.__currentElement;\n        if (currentElement.nodeName === \"path\") {\n\t\t\tcurrentElement.setAttribute(\"d\", this.__currentDefaultPath);\n        } else {\n\t\t\tconsole.error(\"Attempted to apply path command to node\", currentElement.nodeName);\n        }\n    };\n\n    /**\n     * Helper function to add path command\n     * @private\n     */\n    ctx.prototype.__addPathCommand = function (command) {\n        this.__currentDefaultPath += \" \";\n        this.__currentDefaultPath += command;\n    };\n\n    /**\n     * Adds the move command to the current path element,\n     * if the currentPathElement is not empty create a new path element\n     */\n    ctx.prototype.moveTo = function (x,y) {\n        if (this.__currentElement.nodeName !== \"path\") {\n            this.beginPath();\n        }\n\n        // creates a new subpath with the given point\n        this.__currentPosition = {x: x, y: y};\n        this.__addPathCommand(format(\"M {x} {y}\", {x:x, y:y}));\n    };\n\n    /**\n     * Closes the current path\n     */\n    ctx.prototype.closePath = function () {\n        if (this.__currentDefaultPath) {\n            this.__addPathCommand(\"Z\");\n        }\n    };\n\n    /**\n     * Adds a line to command\n     */\n    ctx.prototype.lineTo = function (x, y) {\n        this.__currentPosition = {x: x, y: y};\n        if (this.__currentDefaultPath.indexOf('M') > -1) {\n            this.__addPathCommand(format(\"L {x} {y}\", {x:x, y:y}));\n        } else {\n            this.__addPathCommand(format(\"M {x} {y}\", {x:x, y:y}));\n        }\n    };\n\n    /**\n     * Add a bezier command\n     */\n    ctx.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.__currentPosition = {x: x, y: y};\n        this.__addPathCommand(format(\"C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}\",\n            {cp1x:cp1x, cp1y:cp1y, cp2x:cp2x, cp2y:cp2y, x:x, y:y}));\n    };\n\n    /**\n     * Adds a quadratic curve to command\n     */\n    ctx.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {\n        this.__currentPosition = {x: x, y: y};\n        this.__addPathCommand(format(\"Q {cpx} {cpy} {x} {y}\", {cpx:cpx, cpy:cpy, x:x, y:y}));\n    };\n\n\n    /**\n     * Return a new normalized vector of given vector\n     */\n    var normalize = function (vector) {\n        var len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);\n        return [vector[0] / len, vector[1] / len];\n    };\n\n    /**\n     * Adds the arcTo to the current path\n     *\n     * @see http://www.w3.org/TR/2015/WD-2dcontext-20150514/#dom-context-2d-arcto\n     */\n    ctx.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        // Let the point (x0, y0) be the last point in the subpath.\n        var x0 = this.__currentPosition && this.__currentPosition.x;\n        var y0 = this.__currentPosition && this.__currentPosition.y;\n\n        // First ensure there is a subpath for (x1, y1).\n        if (typeof x0 == \"undefined\" || typeof y0 == \"undefined\") {\n            return;\n        }\n\n        // Negative values for radius must cause the implementation to throw an IndexSizeError exception.\n        if (radius < 0) {\n            throw new Error(\"IndexSizeError: The radius provided (\" + radius + \") is negative.\");\n        }\n\n        // If the point (x0, y0) is equal to the point (x1, y1),\n        // or if the point (x1, y1) is equal to the point (x2, y2),\n        // or if the radius radius is zero,\n        // then the method must add the point (x1, y1) to the subpath,\n        // and connect that point to the previous point (x0, y0) by a straight line.\n        if (((x0 === x1) && (y0 === y1))\n            || ((x1 === x2) && (y1 === y2))\n            || (radius === 0)) {\n            this.lineTo(x1, y1);\n            return;\n        }\n\n        // Otherwise, if the points (x0, y0), (x1, y1), and (x2, y2) all lie on a single straight line,\n        // then the method must add the point (x1, y1) to the subpath,\n        // and connect that point to the previous point (x0, y0) by a straight line.\n        var unit_vec_p1_p0 = normalize([x0 - x1, y0 - y1]);\n        var unit_vec_p1_p2 = normalize([x2 - x1, y2 - y1]);\n        if (unit_vec_p1_p0[0] * unit_vec_p1_p2[1] === unit_vec_p1_p0[1] * unit_vec_p1_p2[0]) {\n            this.lineTo(x1, y1);\n            return;\n        }\n\n        // Otherwise, let The Arc be the shortest arc given by circumference of the circle that has radius radius,\n        // and that has one point tangent to the half-infinite line that crosses the point (x0, y0) and ends at the point (x1, y1),\n        // and that has a different point tangent to the half-infinite line that ends at the point (x1, y1), and crosses the point (x2, y2).\n        // The points at which this circle touches these two lines are called the start and end tangent points respectively.\n\n        // note that both vectors are unit vectors, so the length is 1\n        var cos = (unit_vec_p1_p0[0] * unit_vec_p1_p2[0] + unit_vec_p1_p0[1] * unit_vec_p1_p2[1]);\n        var theta = Math.acos(Math.abs(cos));\n\n        // Calculate origin\n        var unit_vec_p1_origin = normalize([\n            unit_vec_p1_p0[0] + unit_vec_p1_p2[0],\n            unit_vec_p1_p0[1] + unit_vec_p1_p2[1]\n        ]);\n        var len_p1_origin = radius / Math.sin(theta / 2);\n        var x = x1 + len_p1_origin * unit_vec_p1_origin[0];\n        var y = y1 + len_p1_origin * unit_vec_p1_origin[1];\n\n        // Calculate start angle and end angle\n        // rotate 90deg clockwise (note that y axis points to its down)\n        var unit_vec_origin_start_tangent = [\n            -unit_vec_p1_p0[1],\n            unit_vec_p1_p0[0]\n        ];\n        // rotate 90deg counter clockwise (note that y axis points to its down)\n        var unit_vec_origin_end_tangent = [\n            unit_vec_p1_p2[1],\n            -unit_vec_p1_p2[0]\n        ];\n        var getAngle = function (vector) {\n            // get angle (clockwise) between vector and (1, 0)\n            var x = vector[0];\n            var y = vector[1];\n            if (y >= 0) { // note that y axis points to its down\n                return Math.acos(x);\n            } else {\n                return -Math.acos(x);\n            }\n        };\n        var startAngle = getAngle(unit_vec_origin_start_tangent);\n        var endAngle = getAngle(unit_vec_origin_end_tangent);\n\n        // Connect the point (x0, y0) to the start tangent point by a straight line\n        this.lineTo(x + unit_vec_origin_start_tangent[0] * radius,\n                    y + unit_vec_origin_start_tangent[1] * radius);\n\n        // Connect the start tangent point to the end tangent point by arc\n        // and adding the end tangent point to the subpath.\n        this.arc(x, y, radius, startAngle, endAngle);\n    };\n\n    /**\n     * Sets the stroke property on the current element\n     */\n    ctx.prototype.stroke = function () {\n        if (this.__currentElement.nodeName === \"path\") {\n            this.__currentElement.setAttribute(\"paint-order\", \"fill stroke markers\");\n        }\n        this.__applyCurrentDefaultPath();\n        this.__applyStyleToCurrentElement(\"stroke\");\n    };\n\n    /**\n     * Sets fill properties on the current element\n     */\n    ctx.prototype.fill = function () {\n        if (this.__currentElement.nodeName === \"path\") {\n            this.__currentElement.setAttribute(\"paint-order\", \"stroke fill markers\");\n        }\n        this.__applyCurrentDefaultPath();\n        this.__applyStyleToCurrentElement(\"fill\");\n    };\n\n    /**\n     *  Adds a rectangle to the path.\n     */\n    ctx.prototype.rect = function (x, y, width, height) {\n        if (this.__currentElement.nodeName !== \"path\") {\n            this.beginPath();\n        }\n        this.moveTo(x, y);\n        this.lineTo(x+width, y);\n        this.lineTo(x+width, y+height);\n        this.lineTo(x, y+height);\n        this.lineTo(x, y);\n        this.closePath();\n    };\n\n\n    /**\n     * adds a rectangle element\n     */\n    ctx.prototype.fillRect = function (x, y, width, height) {\n        var rect, parent;\n        rect = this.__createElement(\"rect\", {\n            x : x,\n            y : y,\n            width : width,\n            height : height\n        }, true);\n        parent = this.__closestGroupOrSvg();\n        parent.appendChild(rect);\n        this.__currentElement = rect;\n        this.__applyStyleToCurrentElement(\"fill\");\n    };\n\n    /**\n     * Draws a rectangle with no fill\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    ctx.prototype.strokeRect = function (x, y, width, height) {\n        var rect, parent;\n        rect = this.__createElement(\"rect\", {\n            x : x,\n            y : y,\n            width : width,\n            height : height\n        }, true);\n        parent = this.__closestGroupOrSvg();\n        parent.appendChild(rect);\n        this.__currentElement = rect;\n        this.__applyStyleToCurrentElement(\"stroke\");\n    };\n\n\n    /**\n     * Clear entire canvas:\n     * 1. save current transforms\n     * 2. remove all the childNodes of the root g element\n     */\n    ctx.prototype.__clearCanvas = function () {\n        var current = this.__closestGroupOrSvg(),\n            transform = current.getAttribute(\"transform\");\n        var rootGroup = this.__root.childNodes[1];\n        var childNodes = rootGroup.childNodes;\n        for (var i = childNodes.length - 1; i >= 0; i--) {\n            if (childNodes[i]) {\n                rootGroup.removeChild(childNodes[i]);\n            }\n        }\n        this.__currentElement = rootGroup;\n        //reset __groupStack as all the child group nodes are all removed.\n        this.__groupStack = [];\n        if (transform) {\n            this.__addTransform(transform);\n        }\n    };\n\n    /**\n     * \"Clears\" a canvas by just drawing a white rectangle in the current group.\n     */\n    ctx.prototype.clearRect = function (x, y, width, height) {\n        //clear entire canvas\n        if (x === 0 && y === 0 && width === this.width && height === this.height) {\n            this.__clearCanvas();\n            return;\n        }\n        var rect, parent = this.__closestGroupOrSvg();\n        rect = this.__createElement(\"rect\", {\n            x : x,\n            y : y,\n            width : width,\n            height : height,\n            fill : \"#FFFFFF\"\n        }, true);\n        parent.appendChild(rect);\n    };\n\n    /**\n     * Adds a linear gradient to a defs tag.\n     * Returns a canvas gradient object that has a reference to it's parent def\n     */\n    ctx.prototype.createLinearGradient = function (x1, y1, x2, y2) {\n        var grad = this.__createElement(\"linearGradient\", {\n            id : randomString(this.__ids),\n            x1 : x1+\"px\",\n            x2 : x2+\"px\",\n            y1 : y1+\"px\",\n            y2 : y2+\"px\",\n            \"gradientUnits\" : \"userSpaceOnUse\"\n        }, false);\n        this.__defs.appendChild(grad);\n        return new CanvasGradient(grad, this);\n    };\n\n    /**\n     * Adds a radial gradient to a defs tag.\n     * Returns a canvas gradient object that has a reference to it's parent def\n     */\n    ctx.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {\n        var grad = this.__createElement(\"radialGradient\", {\n            id : randomString(this.__ids),\n            cx : x1+\"px\",\n            cy : y1+\"px\",\n            r  : r1+\"px\",\n            fx : x0+\"px\",\n            fy : y0+\"px\",\n            \"gradientUnits\" : \"userSpaceOnUse\"\n        }, false);\n        this.__defs.appendChild(grad);\n        return new CanvasGradient(grad, this);\n\n    };\n\n    /**\n     * Parses the font string and returns svg mapping\n     * @private\n     */\n    ctx.prototype.__parseFont = function () {\n        var regex = /^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))(?:\\s*\\/\\s*(normal|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])))?\\s*([-,\\'\\\"\\sa-z0-9]+?)\\s*$/i;\n        var fontPart = regex.exec( this.font );\n        var data = {\n            style : fontPart[1] || 'normal',\n            size : fontPart[4] || '10px',\n            family : fontPart[6] || 'sans-serif',\n            weight: fontPart[3] || 'normal',\n            decoration : fontPart[2] || 'normal',\n            href : null\n        };\n\n        //canvas doesn't support underline natively, but we can pass this attribute\n        if (this.__fontUnderline === \"underline\") {\n            data.decoration = \"underline\";\n        }\n\n        //canvas also doesn't support linking, but we can pass this as well\n        if (this.__fontHref) {\n            data.href = this.__fontHref;\n        }\n\n        return data;\n    };\n\n    /**\n     * Helper to link text fragments\n     * @param font\n     * @param element\n     * @return {*}\n     * @private\n     */\n    ctx.prototype.__wrapTextLink = function (font, element) {\n        if (font.href) {\n            var a = this.__createElement(\"a\");\n            a.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", font.href);\n            a.appendChild(element);\n            return a;\n        }\n        return element;\n    };\n\n    /**\n     * Fills or strokes text\n     * @param text\n     * @param x\n     * @param y\n     * @param action - stroke or fill\n     * @private\n     */\n    ctx.prototype.__applyText = function (text, x, y, action) {\n        var font = this.__parseFont(),\n            parent = this.__closestGroupOrSvg(),\n            textElement = this.__createElement(\"text\", {\n                \"font-family\" : font.family,\n                \"font-size\" : font.size,\n                \"font-style\" : font.style,\n                \"font-weight\" : font.weight,\n                \"text-decoration\" : font.decoration,\n                \"x\" : x,\n                \"y\" : y,\n                \"text-anchor\": getTextAnchor(this.textAlign),\n                \"dominant-baseline\": getDominantBaseline(this.textBaseline)\n            }, true);\n\n        textElement.appendChild(this.__document.createTextNode(text));\n        this.__currentElement = textElement;\n        this.__applyStyleToCurrentElement(action);\n        parent.appendChild(this.__wrapTextLink(font,textElement));\n    };\n\n    /**\n     * Creates a text element\n     * @param text\n     * @param x\n     * @param y\n     */\n    ctx.prototype.fillText = function (text, x, y) {\n        this.__applyText(text, x, y, \"fill\");\n    };\n\n    /**\n     * Strokes text\n     * @param text\n     * @param x\n     * @param y\n     */\n    ctx.prototype.strokeText = function (text, x, y) {\n        this.__applyText(text, x, y, \"stroke\");\n    };\n\n    /**\n     * No need to implement this for svg.\n     * @param text\n     * @return {TextMetrics}\n     */\n    ctx.prototype.measureText = function (text) {\n        this.__ctx.font = this.font;\n        return this.__ctx.measureText(text);\n    };\n\n    /**\n     *  Arc command!\n     */\n    ctx.prototype.arc = function (x, y, radius, startAngle, endAngle, counterClockwise) {\n        // in canvas no circle is drawn if no angle is provided.\n        if (startAngle === endAngle) {\n            return;\n        }\n        startAngle = startAngle % (2*Math.PI);\n        endAngle = endAngle % (2*Math.PI);\n        if (startAngle === endAngle) {\n            //circle time! subtract some of the angle so svg is happy (svg elliptical arc can't draw a full circle)\n            endAngle = ((endAngle + (2*Math.PI)) - 0.001 * (counterClockwise ? -1 : 1)) % (2*Math.PI);\n        }\n        var endX = x+radius*Math.cos(endAngle),\n            endY = y+radius*Math.sin(endAngle),\n            startX = x+radius*Math.cos(startAngle),\n            startY = y+radius*Math.sin(startAngle),\n            sweepFlag = counterClockwise ? 0 : 1,\n            largeArcFlag = 0,\n            diff = endAngle - startAngle;\n\n        // https://github.com/gliffy/canvas2svg/issues/4\n        if (diff < 0) {\n            diff += 2*Math.PI;\n        }\n\n        if (counterClockwise) {\n            largeArcFlag = diff > Math.PI ? 0 : 1;\n        } else {\n            largeArcFlag = diff > Math.PI ? 1 : 0;\n        }\n\n        this.lineTo(startX, startY);\n        this.__addPathCommand(format(\"A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}\",\n            {rx:radius, ry:radius, xAxisRotation:0, largeArcFlag:largeArcFlag, sweepFlag:sweepFlag, endX:endX, endY:endY}));\n\n        this.__currentPosition = {x: endX, y: endY};\n    };\n\n    /**\n     * Generates a ClipPath from the clip command.\n     */\n    ctx.prototype.clip = function () {\n        var group = this.__closestGroupOrSvg(),\n            clipPath = this.__createElement(\"clipPath\"),\n            id =  randomString(this.__ids),\n            newGroup = this.__createElement(\"g\");\n\n        this.__applyCurrentDefaultPath();\n        group.removeChild(this.__currentElement);\n        clipPath.setAttribute(\"id\", id);\n        clipPath.appendChild(this.__currentElement);\n\n        this.__defs.appendChild(clipPath);\n\n        //set the clip path to this group\n        group.setAttribute(\"clip-path\", format(\"url(#{id})\", {id:id}));\n\n        //clip paths can be scaled and transformed, we need to add another wrapper group to avoid later transformations\n        // to this path\n        group.appendChild(newGroup);\n\n        this.__currentElement = newGroup;\n\n    };\n\n    /**\n     * Draws a canvas, image or mock context to this canvas.\n     * Note that all svg dom manipulation uses node.childNodes rather than node.children for IE support.\n     * http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-drawimage\n     */\n    ctx.prototype.drawImage = function () {\n        //convert arguments to a real array\n        var args = Array.prototype.slice.call(arguments),\n            image=args[0],\n            dx, dy, dw, dh, sx=0, sy=0, sw, sh, parent, svg, defs, group,\n            currentElement, svgImage, canvas, context, id;\n\n        if (args.length === 3) {\n            dx = args[1];\n            dy = args[2];\n            sw = image.width;\n            sh = image.height;\n            dw = sw;\n            dh = sh;\n        } else if (args.length === 5) {\n            dx = args[1];\n            dy = args[2];\n            dw = args[3];\n            dh = args[4];\n            sw = image.width;\n            sh = image.height;\n        } else if (args.length === 9) {\n            sx = args[1];\n            sy = args[2];\n            sw = args[3];\n            sh = args[4];\n            dx = args[5];\n            dy = args[6];\n            dw = args[7];\n            dh = args[8];\n        } else {\n            throw new Error(\"Inavlid number of arguments passed to drawImage: \" + arguments.length);\n        }\n\n        parent = this.__closestGroupOrSvg();\n        currentElement = this.__currentElement;\n        var translateDirective = \"translate(\" + dx + \", \" + dy + \")\";\n        if (image instanceof ctx) {\n            //canvas2svg mock canvas context. In the future we may want to clone nodes instead.\n            //also I'm currently ignoring dw, dh, sw, sh, sx, sy for a mock context.\n            svg = image.getSvg().cloneNode(true);\n            if (svg.childNodes && svg.childNodes.length > 1) {\n                defs = svg.childNodes[0];\n                while(defs.childNodes.length) {\n                    id = defs.childNodes[0].getAttribute(\"id\");\n                    this.__ids[id] = id;\n                    this.__defs.appendChild(defs.childNodes[0]);\n                }\n                group = svg.childNodes[1];\n                if (group) {\n                    //save original transform\n                    var originTransform = group.getAttribute(\"transform\");\n                    var transformDirective;\n                    if (originTransform) {\n                        transformDirective = originTransform+\" \"+translateDirective;\n                    } else {\n                        transformDirective = translateDirective;\n                    }\n                    group.setAttribute(\"transform\", transformDirective);\n                    parent.appendChild(group);\n                }\n            }\n        } else if (image.nodeName === \"IMG\") {\n            svgImage = this.__createElement(\"image\");\n            svgImage.setAttribute(\"width\", dw);\n            svgImage.setAttribute(\"height\", dh);\n            svgImage.setAttribute(\"preserveAspectRatio\", \"none\");\n\n            if (sx || sy || sw !== image.width || sh !== image.height) {\n                //crop the image using a temporary canvas\n                canvas = this.__document.createElement(\"canvas\");\n                canvas.width = dw;\n                canvas.height = dh;\n                context = canvas.getContext(\"2d\");\n                context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);\n                image = canvas;\n            }\n            svgImage.setAttribute(\"transform\", translateDirective);\n            svgImage.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\",\n                image.nodeName === \"CANVAS\" ? image.toDataURL() : image.getAttribute(\"src\"));\n            parent.appendChild(svgImage);\n        } else if (image.nodeName === \"CANVAS\") {\n            svgImage = this.__createElement(\"image\");\n            svgImage.setAttribute(\"width\", dw);\n            svgImage.setAttribute(\"height\", dh);\n            svgImage.setAttribute(\"preserveAspectRatio\", \"none\");\n\n            // draw canvas onto temporary canvas so that smoothing can be handled\n            canvas = this.__document.createElement(\"canvas\");\n            canvas.width = dw;\n            canvas.height = dh;\n            context = canvas.getContext(\"2d\");\n            context.imageSmoothingEnabled = false;\n            context.mozImageSmoothingEnabled = false;\n            context.oImageSmoothingEnabled = false;\n            context.webkitImageSmoothingEnabled = false;\n            context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);\n            image = canvas;\n\n            svgImage.setAttribute(\"transform\", translateDirective);\n            svgImage.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", image.toDataURL());\n            parent.appendChild(svgImage);\n        }\n    };\n\n    ctx.prototype.drawImageSvg = function () {\n        //convert arguments to a real array\n        var args = Array.prototype.slice.call(arguments),\n            image=args[0],\n            dx, dy, dw, dh, sx=0, sy=0, sw, sh, parent, svg, defs, group,\n            currentElement, svgImage, canvas, context, id;\n\n        if (args.length === 3) {\n            dx = args[1];\n            dy = args[2];\n            sw = image.width;\n            sh = image.height;\n            dw = sw;\n            dh = sh;\n        } else if (args.length === 5) {\n            dx = args[1];\n            dy = args[2];\n            dw = args[3];\n            dh = args[4];\n            sw = image.width;\n            sh = image.height;\n        } else if (args.length === 9) {\n            sx = args[1];\n            sy = args[2];\n            sw = args[3];\n            sh = args[4];\n            dx = args[5];\n            dy = args[6];\n            dw = args[7];\n            dh = args[8];\n        } else {\n            throw new Error(\"Inavlid number of arguments passed to drawImage: \" + arguments.length);\n        }\n\n        parent = this.__closestGroupOrSvg();\n        currentElement = this.__currentElement;\n        var translateDirective = \"translate(\" + dx + \", \" + dy + \")\";\n        if (image instanceof SVGSVGElement) {\n            if (image.childNodes && image.childNodes.length > 1) {\n                var orgWidth = parseFloat(image.getAttribute(\"width\"));\n                var orgHeight = parseFloat(image.getAttribute(\"height\"));\n                image.setAttribute(\"width\", dw);\n                image.setAttribute(\"height\", dh);\n                var scaleW = dw / orgWidth;\n                var scaleH = dh / orgHeight;\n                defs = image.childNodes[0];\n                while(defs.childNodes.length) {\n                    id = defs.childNodes[0].getAttribute(\"id\");\n                    this.__ids[id] = id;\n                    this.__defs.appendChild(defs.childNodes[0]);\n                }\n                group = image.childNodes[1];\n                if (group) {\n                    //save original transform\n                    var originTransform = group.getAttribute(\"transform\");\n                    var transformDirective;\n                    if (originTransform) {\n                        transformDirective = originTransform+\" \"+translateDirective;\n                    } else {\n                        transformDirective = translateDirective;\n                    }\n                    group.setAttribute(\"transform\", transformDirective + \" scale(\" + scaleW + \", \" + scaleH +\")\");\n                    parent.appendChild(group);\n                }\n            }\n        }\n    };\n\n    /**\n     * Generates a pattern tag\n     */\n    ctx.prototype.createPattern = function (image, repetition) {\n        var pattern = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"pattern\"), id = randomString(this.__ids),\n            img;\n        pattern.setAttribute(\"id\", id);\n        pattern.setAttribute(\"width\", image.width);\n        pattern.setAttribute(\"height\", image.height);\n        if (image.nodeName === \"CANVAS\" || image.nodeName === \"IMG\") {\n            img = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\n            img.setAttribute(\"width\", image.width);\n            img.setAttribute(\"height\", image.height);\n            img.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\",\n                image.nodeName === \"CANVAS\" ? image.toDataURL() : image.getAttribute(\"src\"));\n            pattern.appendChild(img);\n            this.__defs.appendChild(pattern);\n        } else if (image instanceof ctx) {\n            pattern.appendChild(image.__root.childNodes[1]);\n            this.__defs.appendChild(pattern);\n        }\n        return new CanvasPattern(pattern, this);\n    };\n\n    ctx.prototype.setLineDash = function (dashArray) {\n        if (dashArray && dashArray.length > 0) {\n            this.lineDash = dashArray.join(\",\");\n        } else {\n            this.lineDash = null;\n        }\n    };\n\n    /**\n     * Not yet implemented\n     */\n    ctx.prototype.drawFocusRing = function () {};\n    ctx.prototype.createImageData = function () {};\n    ctx.prototype.getImageData = function () {};\n    ctx.prototype.putImageData = function () {};\n    ctx.prototype.globalCompositeOperation = function () {};\n    ctx.prototype.setTransform = function () {};\n\n    export default ctx;\n","import ButtonGroup from '../menu/ButtonGroup.js'\r\nimport { buttonWidth } from '../menu/MenuItem.js'\r\n\r\nexport default function addDarkModeSwitch(screenCommon, layout, viewMode) {\r\n    const choose = new ButtonGroup({\r\n        label: 'Theme:',\r\n        width: buttonWidth(3),\r\n        data: [\r\n            { name: 'Light', value: false },\r\n            { name: 'Dark', value: true },\r\n        ],\r\n        onChoose: (data) => {\r\n            screenCommon.setDarkMode(data.value)\r\n            viewMode.rerender()\r\n        },\r\n    })\r\n    choose.highlight('value', screenCommon.darkMode)\r\n    layout.newElement('darkModeSwitch', choose.dom)\r\n}\r\n","/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-param-reassign */\r\n/** @module */\r\n\r\nimport Button from './Button.js'\r\n\r\n/**\r\n * Create a group of buttons.\r\n * @param {*} config\r\n * @constructor\r\n */\r\nexport default function ButtonGroup(config) {\r\n    const self = this\r\n    self.config = config\r\n\r\n    // check if there is a function to make the data\r\n    // this function can be used later to update the buttons\r\n    if (config.data === undefined) {\r\n        config.data = []\r\n        if (config.makeData === undefined) {\r\n            config.makeData = () => []\r\n        }\r\n        self.makeData = config.makeData\r\n        self.buttonConfigs = self.makeData()\r\n        self.doMakeData = true\r\n    }\r\n    self.buttonConfigs = config.data\r\n\r\n    self.labelName = config.label\r\n    self.labelIsHTML = config.labelIsHTML || false\r\n\r\n    self.onChoose = config.onChoose\r\n    self.isCheckbox = config.isCheckbox || false\r\n    self.isCheckboxBool = config.isCheckboxBool || false\r\n    self.justButton = config.justButton || false\r\n    self.buttonHidden = config.buttonHidden || {}\r\n\r\n    // DOM!\r\n    self.dom = document.createElement('div')\r\n    self.dom.setAttribute('class', 'button-group')\r\n\r\n    self.buttonDOMByValue = []\r\n\r\n    self.init = function () {\r\n        if (self.doMakeData) self.buttonConfigs = self.makeData()\r\n\r\n        // clear\r\n        self.dom.innerHTML = ''\r\n        self.buttons = []\r\n        self.buttonsByName = {}\r\n\r\n        // Label!\r\n        self.labelDOM = document.createElement('div')\r\n        self.labelDOM.setAttribute('class', 'button-group-label')\r\n        self.labelDOM.setAttribute('title', config.explain || '')\r\n\r\n        self.labelTip = document.createElement('div')\r\n        self.labelTip.setAttribute('class', 'label-tip')\r\n        self.labelTip.innerText = config.explain || ''\r\n        let labelToggle = true\r\n        self.labelTip.hidden = labelToggle\r\n        self.labelDOM.onclick = () => {\r\n            labelToggle = !labelToggle\r\n            if (config.explain === undefined) labelToggle = true\r\n            self.labelTip.hidden = labelToggle\r\n        }\r\n        self.dom.appendChild(self.labelDOM)\r\n        self.dom.appendChild(self.labelTip)\r\n\r\n        self.draw()\r\n\r\n        self.buttonContainer = document.createElement('div')\r\n        self.buttonContainer.setAttribute('class', 'button-group-button-container')\r\n        self.dom.appendChild(self.buttonContainer)\r\n\r\n        // Create & place buttons!\r\n        for (let i = 0; i < self.buttonConfigs.length; i++) {\r\n            const conf = self.buttonConfigs[i]\r\n            const button = new Button(conf, self.onToggle)\r\n            self.buttonsByName[conf.name] = button\r\n            button.dom.style.width = `${config.width}px` // whatever\r\n            if (conf.width) button.dom.style.width = `${conf.width}px` // whatever\r\n            self.buttons.push(button)\r\n            self.buttonContainer.appendChild(button.dom)\r\n            self.buttonDOMByValue[conf.value] = button.dom\r\n        }\r\n\r\n        // And then select the one that says \"selected\"! Fake a click.\r\n        for (let i = 0; i < self.buttons.length; i++) {\r\n            const button = self.buttons[i]\r\n            if (button.config.selected) {\r\n                button.turnOn()\r\n                break\r\n            }\r\n        }\r\n        self.draw()\r\n    }\r\n    self.updateNames = function () {\r\n        const data2 = self.makeData()\r\n        for (let i = 0; i < self.buttonConfigs.length; i++) {\r\n            self.buttonConfigs[i].name = data2[i].name\r\n            self.buttons[i].name = self.buttonConfigs[i].name\r\n        }\r\n    }\r\n    self.redraw = function () {\r\n        self.updateNames()\r\n        self.draw()\r\n    }\r\n    self.draw = function () {\r\n        if (self.labelIsHTML) {\r\n            self.labelDOM.innerHTML = self.labelName\r\n        } else {\r\n            self.labelDOM.innerText = self.labelName\r\n        }\r\n        for (const button of self.buttons) {\r\n            button.draw()\r\n        }\r\n    }\r\n\r\n    self.configureHidden = function () {\r\n        for (const [buttonName, hidden] of Object.entries(self.buttonHidden)) {\r\n            self.buttonsByName[buttonName].dom.hidden = hidden\r\n        }\r\n    }\r\n\r\n    // Toggle buttons\r\n    self.onToggle = function (button, buttonData) {\r\n        if (self.isCheckbox || self.isCheckboxBool) {\r\n            if (button.isOn) {\r\n                button.turnOff()\r\n            } else {\r\n                button.turnOn()\r\n            }\r\n        } else { // justButton means it doesn't get selected\r\n            // Turn all off\r\n            for (let i = 0; i < self.buttons.length; i++) self.buttons[i].turnOff()\r\n            button.turnOn() // except one\r\n            if (self.justButton) {\r\n                // turn on for a little while, then off\r\n                setTimeout(() => button.turnOff(), 800)\r\n            }\r\n        }\r\n        // And send the data up\r\n        self.onChoose(buttonData)\r\n    }\r\n\r\n    // Highlight based on data...\r\n    self.highlight = function (propName, propValue) {\r\n        // if we haven't set up the buttons yet, then don't do anything yet\r\n        if (self.buttons.length === 0) return\r\n\r\n        // Turn all off\r\n        for (let i = 0; i < self.buttons.length; i++) self.buttons[i].turnOff()\r\n\r\n        if (self.isCheckbox) {\r\n            for (const ibu in self.buttons) {\r\n                const bu = self.buttons[ibu]\r\n                if (propValue.includes(bu.config[propName])) { // the propValue is an array of values\r\n                    bu.turnOn()\r\n                }\r\n            }\r\n        } else if (self.isCheckboxBool) {\r\n            for (const ibu in self.buttons) {\r\n                const bu = self.buttons[ibu]\r\n                const buttonName = bu.config[propName]\r\n                // if (Object.keys(propValue).includes(buttonName)) { // the propValue is an array of values\r\n                if (buttonName in propValue) {\r\n                    if (propValue[buttonName]) {\r\n                        bu.turnOn()\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // Find the one...\r\n            const theButton = self.buttons.filter((button) => (button.config[propName] === propValue))[0]\r\n            if (theButton !== undefined) {\r\n                theButton.turnOn()\r\n            }\r\n        }\r\n    }\r\n\r\n    self.init()\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Class for a single button.\r\n * @param {*} buttonConfig\r\n * @param {*} onChoose\r\n * @constructor\r\n */\r\nexport default function Button(buttonConfig, onChoose) {\r\n    const self = this\r\n\r\n    self.config = buttonConfig\r\n    self.name = buttonConfig.name\r\n    self.nameIsHTML = buttonConfig.nameIsHTML || false\r\n    self.dom = document.createElement('div')\r\n    self.dom.setAttribute('class', 'button button2')\r\n\r\n    // overwrite margins.  The old way was not working.\r\n    let fixMargin = buttonConfig.margin\r\n    fixMargin = fixMargin || 0\r\n    fixMargin = Math.max(fixMargin, 4)\r\n    self.dom.style.marginRight = `${fixMargin}px`\r\n\r\n    // Click!\r\n    self.draw = function () {\r\n        if (self.nameIsHTML) {\r\n            self.dom.innerHTML = self.name\r\n        } else {\r\n            self.dom.innerText = self.name\r\n        }\r\n    }\r\n    self.draw()\r\n    self.dom.setAttribute('title', buttonConfig.explain || '')\r\n    self.onClick = function () {\r\n        onChoose(self, buttonConfig)\r\n    }\r\n    self.dom.onclick = self.onClick\r\n    // Turn on or off!\r\n    self.turnOff = function () {\r\n        self.isOn = false\r\n        self.config.isOn = false\r\n        self.dom.setAttribute('on', 'no')\r\n    }\r\n    self.turnOn = function () {\r\n        self.isOn = true\r\n        self.config.isOn = true\r\n        self.dom.setAttribute('on', 'yes')\r\n    }\r\n    self.turnOff()\r\n}\r\n","/** @module */\r\n\r\nimport ButtonGroup from './ButtonGroup.js'\r\n\r\n/**\r\n * Make a selection that determines a single property's value.\r\n * Defer handling dependent calculations to the next update step,\r\n * where we will look at a dependency tree to determine what else needs updating.\r\n * Functionality here is called from button presses.\r\n * Functionality here is also called from a command pattern (commander).\r\n * @param {Object.<string>} object\r\n * @param {(String|Number|Boolean)} object.prop - The property being selected in the menu.\r\n * @param {String} prop - Name of prop\r\n * @param {MenuItem~setProp} setProp - The action that is performed as part of onclick.\r\n * @param {String} label - The prompt presented to the user.\r\n * @param {Object[]} options - the list of options that the UI presents to the user.\r\n * @param {(String|Number|Boolean)} options[].value - Value to pass to setProp\r\n * @param {String[]} change - list of changes made when pressing a button.\r\n * @param {Changes} changes\r\n * @param {Commander} commander - Follows command pattern.\r\n * @constructor\r\n */\r\n// eslint-disable-next-line max-len\r\nexport default function MenuItem(pub, changes, choice) {\r\n    const {\r\n        label, options, changeList, getValue, onChoose, explain, checkShow,\r\n    } = choice\r\n\r\n    const self = this\r\n    pub.attach(self)\r\n\r\n    self.choose = new ButtonGroup({\r\n        label,\r\n        explain,\r\n        width: buttonWidth(3),\r\n        data: options,\r\n        onChoose,\r\n        // TODO: maybe do self.select here in onChoose rather than in update.\r\n    })\r\n    self.update = () => {\r\n        if (changes.check(changeList)) {\r\n            self.select()\r\n        }\r\n        if (checkShow !== undefined) {\r\n            const show = checkShow()\r\n            if (show) {\r\n                self.choose.dom.hidden = false\r\n            } else {\r\n                self.choose.dom.hidden = true\r\n            }\r\n        }\r\n    }\r\n    self.select = function () {\r\n        self.choose.highlight('value', getValue())\r\n    }\r\n}\r\n\r\nexport function buttonWidth(numButtons) {\r\n    const padding = 4\r\n    const border = 1\r\n    const margin = 4\r\n    const between = (padding + border + margin) * 2\r\n    const end = padding + border\r\n    const width = 302\r\n    const usableSpace = width - between * (numButtons - 1) - 2 * end\r\n    const buttonWidth1 = usableSpace / numButtons\r\n    return buttonWidth1\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * @param {Changes} changes\r\n */\r\nexport default function ViewSettings(changes) {\r\n    const self = this\r\n\r\n    self.setShowNonExistingEntities = (a) => {\r\n        self.showGhosts = a\r\n        changes.add(['showGhosts'])\r\n    }\r\n}\r\n","import Screen from '../screen/Screen.js'\r\nimport BaseExplanation from '../viz/BaseExplanation.js'\r\nimport VizExplanationBudgetMES from '../viz/VizExplanationBudgetMES.js'\r\nimport getResultsPhaseOptions from '../phase/getResultsPhaseOptions.js'\r\nimport getPhaseResults from '../phase/getPhaseResults.js'\r\n\r\nexport default function ViewVizBudget(screenCommon, layout, menu, changes, simOptions, electionOptionsMan, viewMode) {\r\n    const self = this\r\n\r\n    viewMode.viewModes.one.attach(self)\r\n\r\n    const screen = new Screen(screenCommon, viewMode, layout, 'budget')\r\n    const { height } = screenCommon\r\n    screen.setHeight(height / 3)\r\n    screen.hide()\r\n\r\n    let vizExplanation\r\n\r\n    function enterStrategy() {\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        const { useGeography } = optionsBag\r\n\r\n        const resultsPhaseOptions = getResultsPhaseOptions(optionsBag, simOptions)\r\n        const { socialChoiceMethod } = resultsPhaseOptions\r\n\r\n        const { dimensions } = simOptions\r\n        const VizExplanation = (socialChoiceMethod === 'methodOfEqualShares' && !useGeography && dimensions === 1)\r\n            ? VizExplanationBudgetMES : BaseExplanation\r\n        vizExplanation = new VizExplanation(screen)\r\n    }\r\n    enterStrategy()\r\n\r\n    self.enter = () => {\r\n        enterStrategy()\r\n        vizExplanation.enter()\r\n    }\r\n\r\n    self.exit = () => {\r\n        vizExplanation.exit()\r\n    }\r\n    self.update = (simData) => {\r\n        if (changes.checkNone()) return\r\n        if (changes.check(['numDistricts', 'numTracts', 'dimensions', 'socialChoiceMethod'])) {\r\n            self.exit()\r\n            self.enter()\r\n        }\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        if (optionsBag.useGeography === true) {\r\n            // skip\r\n        } else {\r\n            const { geoResults } = simData\r\n            const sequenceResults = geoResults.scResultsByDistrict[0]\r\n            const phaseResults = getPhaseResults(sequenceResults, simOptions)\r\n            vizExplanation.update(geoResults, sequenceResults, phaseResults)\r\n        }\r\n\r\n        self.clear()\r\n        self.render()\r\n    }\r\n\r\n    self.render = () => {\r\n        vizExplanation.render()\r\n    }\r\n    self.clear = () => {\r\n        screen.clear()\r\n    }\r\n    self.draw = () => {\r\n        self.clear()\r\n        self.render()\r\n    }\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Base Class for Showing an Explanation of Results\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function BaseExplanation() {\r\n    const self = this\r\n\r\n    self.enter = () => {\r\n    }\r\n    self.exit = () => {\r\n    }\r\n\r\n    self.update = function () {\r\n    }\r\n\r\n    self.render = function () {\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport vizMESChartsCalcBudget from './vizMESChartsCalcBudget.js'\r\nimport vizMESChartsCalcShape from './vizMESChartsCalcShape.js'\r\nimport vizMESChartsRender from './vizMESChartsRender.js'\r\n\r\n/**\r\n * Show votes\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function VizExplanationBudgetMES(screen) {\r\n    const self = this\r\n\r\n    let flagNoRender = false\r\n    let chartDataMES\r\n\r\n    self.enter = () => {\r\n        screen.show()\r\n    }\r\n    self.exit = () => {\r\n        screen.hide()\r\n    }\r\n\r\n    self.update = function (geoResults, sequenceResults, phaseResults) {\r\n        const { error } = sequenceResults\r\n        if (error !== undefined) {\r\n            flagNoRender = true\r\n            return\r\n        }\r\n        flagNoRender = false\r\n\r\n        const budgetDataMES = vizMESChartsCalcBudget(geoResults, phaseResults)\r\n        chartDataMES = vizMESChartsCalcShape(phaseResults, screen, budgetDataMES)\r\n    }\r\n\r\n    self.render = function () {\r\n        if (flagNoRender) return\r\n\r\n        vizMESChartsRender(screen, chartDataMES)\r\n    }\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Calculate data for charts of budget for MES\r\n * @param {Object} phaseResults - MES methodResults plus a little extra\r\n * @returns budgetDataMES\r\n */\r\nexport default function vizMESChartsCalcBudget(geoResults, phaseResults) {\r\n    const { socialChoiceResults, votes } = phaseResults\r\n    const { colorRGBAOfCandidates } = geoResults\r\n    const { winnersByRound, winnerMaxCostPerScoreByRound } = socialChoiceResults.explanation\r\n\r\n    const { scoreVotes } = votes.preferenceLists\r\n    const { votesByGeom } = votes\r\n\r\n    const nRounds = winnersByRound.length\r\n    const nGeoms = votesByGeom.length\r\n\r\n    const costsByGeom = []\r\n    const budgetsByGeom = []\r\n    const colorRGBAByGeom = []\r\n\r\n    // We want to use the geometry rather than voteFractions because voteFractions normalizes to add to 1.\r\n    for (let g = 0; g < nGeoms; g++) {\r\n        const { voteIndex } = votesByGeom[g]\r\n\r\n        const nVotes = voteIndex.length\r\n\r\n        const budgets = []\r\n        budgets[0] = Array(nVotes).fill(1)\r\n\r\n        const costs = []\r\n\r\n        const colorRGBA = []\r\n\r\n        for (let r = 0; r < nRounds; r++) {\r\n            const curBudget = budgets[r]\r\n            const nextBudget = Array(nVotes)\r\n            const curCost = Array(nVotes)\r\n            const winner = winnersByRound[r]\r\n            const maxCostPerScore = winnerMaxCostPerScoreByRound[r]\r\n\r\n            for (let i = 0; i < nVotes; i++) {\r\n                const vi = voteIndex[i]\r\n\r\n                const score = scoreVotes[vi][winner]\r\n                const cost = maxCostPerScore * score\r\n                curCost[i] = Math.min(curBudget[i], cost)\r\n                nextBudget[i] = Math.max(0, curBudget[i] - cost)\r\n            }\r\n\r\n            costs[r] = curCost\r\n            colorRGBA[r] = colorRGBAOfCandidates[winner]\r\n            if (r < (nRounds - 1)) {\r\n                budgets[r + 1] = nextBudget\r\n            }\r\n        }\r\n        colorRGBAByGeom[g] = colorRGBA\r\n        costsByGeom[g] = costs\r\n        budgetsByGeom[g] = budgets\r\n    }\r\n\r\n    const budgetDataMES = { costsByGeom, budgetsByGeom, colorRGBAByGeom }\r\n    return budgetDataMES\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Calculate shape data for charts of budget for MES\r\n * @param {Object} sequenceResults - MES methodResults plus a little extra candidate data\r\n * @param {Object} screen\r\n * @param {Object} budgetDataMES\r\n * @returns chartDataMES\r\n */\r\nexport default function vizMESChartsCalcShape(phaseResults, screen, budgetDataMES) {\r\n    const { socialChoiceResults, votes } = phaseResults\r\n    const { winnersByRound } = socialChoiceResults.explanation\r\n\r\n    const { costsByGeom, budgetsByGeom, colorRGBAByGeom } = budgetDataMES\r\n\r\n    const { votesByGeom } = votes\r\n\r\n    const nRounds = winnersByRound.length\r\n    const nGeoms = votesByGeom.length\r\n\r\n    const cols = 3\r\n    const xScale = 1 / cols\r\n    const yScale = -screen.width / cols\r\n    const sizeChart = screen.width / cols\r\n\r\n    const costShapesbyGeom = []\r\n    const budgetShapesbyGeom = []\r\n\r\n    for (let g = 0; g < nGeoms; g++) {\r\n        const { grid, voteIndex, voterGeom } = votesByGeom[g]\r\n        const { w, densityProfile } = voterGeom\r\n        const xCenter = voterGeom.x\r\n\r\n        const gridX = grid.x\r\n        const isGauss = (densityProfile === 'gaussian')\r\n        const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n\r\n        const nVotes = voteIndex.length\r\n\r\n        const budgets = budgetsByGeom[g]\r\n        const costs = costsByGeom[g]\r\n\r\n        const budgetShapes = []\r\n        const costShapes = []\r\n\r\n        for (let r = 0; r < nRounds; r++) {\r\n            const curBudget = budgets[r]\r\n            const curCost = costs[r]\r\n            const budgetShape = []\r\n            const costShape = []\r\n\r\n            // Place graph in row and column\r\n            const idCol = r % cols\r\n            const idRow = Math.floor(r / cols)\r\n            const xTranslate = idCol * sizeChart\r\n            const yTranslate = (idRow + 1) * sizeChart\r\n\r\n            let p = 0 // point counter\r\n\r\n            // start bottom left\r\n            // go outside of screen by one pixel\r\n            const bottom = 0 * yScale + yTranslate\r\n            const left = Math.max(-1, gridX[0]) * xScale + xTranslate\r\n            budgetShape[p] = [left, bottom]\r\n            costShape[p] = [left, bottom]\r\n            p += 1\r\n\r\n            for (let i = 0; i < nVotes; i++) {\r\n                const xg = gridX[i]\r\n                if (xg < -1) continue\r\n                if (xg > screen.width + 1) continue\r\n                const shapeMult = (isGauss) ? Math.exp(-0.5 * ((xg - xCenter) / sigma) ** 2) : 1\r\n\r\n                // The shape is affected by the density of voters.\r\n                const dCurCosti = curCost[i] * shapeMult\r\n                const dCurBudgeti = curBudget[i] * shapeMult\r\n\r\n                // add point\r\n                const xb = xg * xScale + xTranslate\r\n                const yb = dCurBudgeti * yScale + yTranslate\r\n                budgetShape[p] = [xb, yb]\r\n                const xc = xg * xScale + xTranslate\r\n                const yc = dCurCosti * yScale + yTranslate\r\n                costShape[p] = [xc, yc]\r\n                p += 1\r\n            }\r\n\r\n            // end bottom right\r\n            const right = Math.min(screen.width + 1, gridX[nVotes - 1]) * xScale + xTranslate\r\n            budgetShape[p] = [right, bottom]\r\n            costShape[p] = [right, bottom]\r\n            p += 1\r\n\r\n            // close path\r\n            budgetShape[p] = [left, bottom]\r\n            costShape[p] = [left, bottom]\r\n            p += 1\r\n\r\n            costShapes[r] = costShape\r\n            budgetShapes[r] = budgetShape\r\n        }\r\n        costShapesbyGeom[g] = costShapes\r\n        budgetShapesbyGeom[g] = budgetShapes\r\n    }\r\n\r\n    const chartDataMES = { costShapesbyGeom, budgetShapesbyGeom, colorRGBAByGeom }\r\n    return chartDataMES\r\n}\r\n","/** @module */\r\n\r\nimport colorBlender, { rgbToString } from './colorBlender.js'\r\n\r\n/**\r\n * Render data for charts of budget for MES\r\n * @param {*} screen\r\n * @param {*} chartDataMES  - MES methodResults plus a little extra\r\n */\r\nexport default function vizMESChartsRender(screen, chartDataMES) {\r\n    const { costShapesbyGeom, budgetShapesbyGeom, colorRGBAByGeom } = chartDataMES\r\n\r\n    const nGeoms = costShapesbyGeom.length\r\n    const { ctx } = screen\r\n\r\n    ctx.save()\r\n    ctx.globalAlpha = 0.7\r\n\r\n    for (let g = 0; g < nGeoms; g++) {\r\n        const costShapesByRound = costShapesbyGeom[g]\r\n        const budgetShapesByRound = budgetShapesbyGeom[g]\r\n        const colorRGBAByRound = colorRGBAByGeom[g]\r\n\r\n        const nRounds = costShapesByRound.length\r\n        for (let r = 0; r < nRounds; r++) {\r\n            const costShape = costShapesByRound[r]\r\n            const budgetShape = budgetShapesByRound[r]\r\n            const colorRGBA = colorRGBAByRound[r]\r\n\r\n            ctx.fillStyle = '#cccccc' // canList[i].colorRGBA\r\n            ctx.strokeStyle = '#555555' // rgbToString(colorBlender([0.8, 0.2], [canList[i].colorRGBA, '#000000']))\r\n            ctx.beginPath()\r\n            // make a shape for budget\r\n            ctx.moveTo(budgetShape[0][0], budgetShape[0][1])\r\n            for (let i = 1; i < budgetShape.length; i++) {\r\n                ctx.lineTo(budgetShape[i][0], budgetShape[i][1])\r\n            }\r\n\r\n            ctx.fill()\r\n            ctx.stroke()\r\n\r\n            ctx.fillStyle = rgbToString(colorRGBA)\r\n            ctx.strokeStyle = rgbToString(colorBlender([0.5, 0.5], [colorRGBA, [0, 0, 0]]))\r\n            ctx.beginPath()\r\n            // make a shape for cost\r\n            ctx.moveTo(costShape[0][0], costShape[0][1])\r\n            for (let i = 1; i < costShape.length; i++) {\r\n                ctx.lineTo(costShape[i][0], costShape[i][1])\r\n            }\r\n\r\n            ctx.fill()\r\n            ctx.stroke()\r\n        }\r\n    }\r\n    ctx.restore()\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Blend colors in given proportions.\r\n * @param {Number[]} f - proportions of colors, as fraction of 1.\r\n * @param {Number[][]} colors - list of lists. rgb colors.\r\n * @returns {String} - Color\r\n */\r\nexport default function colorBlender(f, colors) { // f fractions\r\n    const n = f.length\r\n\r\n    const sum2 = [0, 0, 0]\r\n    let sumF = 0\r\n    for (let i = 0; i < n; i++) {\r\n        for (let c = 0; c < 3; c++) {\r\n            sum2[c] += f[i] * colors[i][c] ** 2\r\n        }\r\n        sumF += f[i]\r\n    }\r\n    const blend = sum2.map((x) => Math.round(Math.sqrt(x / sumF)))\r\n    return blend\r\n}\r\n\r\nexport function rgbToString(c) {\r\n    return `rgb(${c[0]},${c[1]},${c[2]})`\r\n}\r\n","export default function getResultsPhaseOptions(optionsBag, simOptions) {\r\n    const { sequenceName, sequences } = optionsBag.sequenceOptions\r\n    const { resultsPhaseBySeq } = simOptions\r\n    const resultsPhaseName = resultsPhaseBySeq[sequenceName]\r\n    const resultsPhaseOptions = sequences[sequenceName].phases[resultsPhaseName]\r\n    return resultsPhaseOptions\r\n}\r\n","export default function getPhaseResults(sequenceResults, simOptions) {\r\n    if (sequenceResults.error) return sequenceResults\r\n\r\n    const { sequenceName } = sequenceResults.optionsBag.sequenceOptions\r\n    const { resultsPhaseBySeq } = simOptions\r\n    const resultsPhaseName = resultsPhaseBySeq[sequenceName]\r\n\r\n    if (sequenceName === 'closedPrimary' && resultsPhaseName === 'closedPrimary') {\r\n        const { resultsPartyBySeq } = simOptions\r\n        const resultsParty = resultsPartyBySeq[resultsPhaseName]\r\n        const phaseResults = sequenceResults.phases[resultsPhaseName][resultsParty]\r\n        if (phaseResults === undefined) {\r\n            return { error: true }\r\n        }\r\n        return phaseResults\r\n    }\r\n    // else\r\n    const phaseResults = sequenceResults.phases[resultsPhaseName]\r\n    return phaseResults\r\n}\r\n","/** @module */\r\n\r\nimport VizDistricts from '../viz/VizDistricts.js'\r\nimport VizOneVoronoi from '../viz/VizOneVoronoi.js'\r\nimport VizOneVoronoiRanking from '../viz/VizOneVoronoiRanking.js'\r\nimport VizOneGrid from '../viz/VizOneGrid.js'\r\nimport ViewBase from './ViewBase.js'\r\nimport VoterRendererList from '../vizVoters/VoterRendererList.js'\r\nimport getResultsPhaseOptions from '../phase/getResultsPhaseOptions.js'\r\nimport checkSomeStrategy from '../strategy/checkSomeStrategy.js'\r\nimport getPhaseResults from '../phase/getPhaseResults.js'\r\n\r\n/**\r\n * Simulate one election with\r\n *   candidates in defined positions, and\r\n *   voters in a distribution that will be summed over.\r\n * Create a geographical district map with variations of voter center.\r\n * Plan:\r\n * * Voronoi1D is called by VizOne.\r\n * @param {Screen} screen\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {ViewSettings} viewSettings\r\n * @constructor\r\n */\r\n// eslint-disable-next-line max-len\r\nexport default function ViewVizOne(entities, screenMain, screenMini, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings) {\r\n    const self = this\r\n\r\n    viewMode.viewModes.one.attach(self)\r\n\r\n    ViewBase.call(self, screenMain, changes, viewSettings)\r\n\r\n    const { candidateList, voterShapeList } = entities\r\n\r\n    // Entities //\r\n    const voterRendererList = new VoterRendererList(voterShapeList)\r\n\r\n    // Strategies //\r\n    let vizOne\r\n    function enterStrategy() {\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        const resultsPhaseOptions = getResultsPhaseOptions(optionsBag, simOptions)\r\n        const { voteCasterName } = resultsPhaseOptions\r\n\r\n        const { dimensions } = simOptions\r\n        const voterGeoms = voterShapeList.getGeoms(dimensions)\r\n        const someGaussian2D = voterGeoms.some((v) => v.densityProfile === 'gaussian') && dimensions === 2\r\n\r\n        const someStrategy = checkSomeStrategy(optionsBag, voterShapeList, simOptions)\r\n\r\n        const doGrid = someGaussian2D || someStrategy || voteCasterName === 'score' || voteCasterName === 'scoreFull'\r\n\r\n        const doRanking = voteCasterName === 'ranking' || voteCasterName === 'pairwise'\r\n\r\n        const VizOneVoronoiGeneral = (doRanking) ? VizOneVoronoiRanking : VizOneVoronoi\r\n        const VizNoDistricts = (doGrid) ? VizOneGrid : VizOneVoronoiGeneral\r\n        const VizOne = (optionsBag.useGeography === true) ? VizDistricts : VizNoDistricts\r\n        vizOne = new VizOne(voterRendererList, candidateList, screenMain, screenMini, simOptions)\r\n    }\r\n    enterStrategy()\r\n\r\n    // Main State Machine Functions //\r\n    self.enter = () => {\r\n        enterStrategy()\r\n        vizOne.enter()\r\n    }\r\n\r\n    self.exit = () => {\r\n        vizOne.exit()\r\n    }\r\n\r\n    self.update = (simData) => {\r\n        if (changes.checkNone()) return\r\n\r\n        const changeList = ['numDistricts', 'numTracts', 'dimensions', 'socialChoiceMethod', 'densityProfile', 'strategyRules', 'resultsPhase', 'resultsParty', 'sequenceName']\r\n        if (changes.check(changeList)) {\r\n            self.exit()\r\n            self.enter()\r\n        }\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        if (optionsBag.useGeography === true) {\r\n            const { geoResults } = simData\r\n            vizOne.update(geoResults)\r\n        } else {\r\n            const sequenceResults = simData.geoResults.scResultsByDistrict[0]\r\n            const phaseResults = getPhaseResults(sequenceResults, simOptions)\r\n            vizOne.update(phaseResults)\r\n        }\r\n\r\n        self.clear()\r\n        self.render()\r\n    }\r\n\r\n    self.render = () => {\r\n        vizOne.render()\r\n    }\r\n    self.clear = () => {\r\n        screenMain.clear()\r\n        screenMini.clear()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport VizDistrictNoise from './VizDistrictNoise.js'\r\nimport VoterRender1D from './VoterRender1D.js'\r\nimport VoterRender2D from './VoterRender2D.js'\r\n\r\n/**\r\n * Show votes\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {CandidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function VizDistricts(voterRendererList, candidateList, screen, screenMini, simOptions) {\r\n    const self = this\r\n\r\n    const { dimensions } = simOptions\r\n    const VoterRenderer = (dimensions === 1) ? VoterRender1D : VoterRender2D\r\n    voterRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n\r\n    const vizDistrictNoise = new VizDistrictNoise(screen)\r\n\r\n    self.enter = () => { }\r\n    self.exit = () => { }\r\n    self.update = (districtElectionResults) => {\r\n        vizDistrictNoise.update(districtElectionResults)\r\n    }\r\n    self.render = () => {\r\n        voterRendererList.render()\r\n        vizDistrictNoise.render()\r\n    }\r\n}\r\n","export default function VizDistrictNoise(screen) {\r\n    const self = this\r\n\r\n    let voterGeomsByTract\r\n    let dimensions\r\n\r\n    self.update = (districtElectionResults) => {\r\n        voterGeomsByTract = districtElectionResults.geometry.geography.voterGeomsByTract\r\n        dimensions = districtElectionResults.geometry.dimensions\r\n    }\r\n\r\n    self.render = () => {\r\n        const { ctx } = screen\r\n        const { svgMode } = screen.common\r\n        ctx.save()\r\n        if (dimensions === 1) {\r\n            ctx.globalAlpha = 0.3\r\n            voterGeomsByTract.forEach((row) => {\r\n                row.forEach((cell) => {\r\n                    cell.forEach((voterGeom) => {\r\n                        const { x } = voterGeom\r\n                        faintLine(ctx, x)\r\n                    })\r\n                })\r\n            })\r\n        } else {\r\n            voterGeomsByTract.forEach((row) => {\r\n                row.forEach((cell) => {\r\n                    cell.forEach((voterGeom) => {\r\n                        const { x, y } = voterGeom\r\n                        smallCircle(ctx, svgMode, x, y)\r\n                    })\r\n                })\r\n            })\r\n        }\r\n        ctx.restore()\r\n    }\r\n\r\n    /** Draw a small dot */\r\n\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = 10\r\n    canvas.height = 10\r\n    const offCtx = canvas.getContext('2d')\r\n    drawCircle(offCtx, 5, 5)\r\n\r\n    function drawCircle(ctx, x, y) {\r\n        ctx.beginPath()\r\n        ctx.fillStyle = '#555'\r\n\r\n        ctx.arc(x, y, 1, 0, 2 * Math.PI)\r\n        ctx.fill()\r\n    }\r\n\r\n    function smallCircle(ctx, svgMode, x, y) {\r\n        if (svgMode) {\r\n            drawCircle(ctx, x, y)\r\n            return\r\n        }\r\n        ctx.drawImage(canvas, x - 5, y - 5, 10, 10)\r\n    }\r\n\r\n    function faintLine(ctx, x) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(x, 0)\r\n        ctx.lineTo(x, 100)\r\n        ctx.stroke()\r\n    }\r\n}\r\n","/** @module */\r\n/**\r\n * Graphics Component for voterShapes in 1D\r\n * @param {VoterShape} voterShape\r\n * @param {Screen} screen\r\n */\r\nexport default function VoterRender1D(voterShape, screen) {\r\n    const self = this\r\n\r\n    self.render = function () {\r\n        const { ctx } = screen\r\n        const { darkMode } = screen.common\r\n        const { x, w, densityProfile } = voterShape.shape1\r\n        const h = 100\r\n        const middle = 150\r\n\r\n        ctx.save()\r\n\r\n        ctx.strokeStyle = '#555'\r\n        if (darkMode) ctx.strokeStyle = '#ddd'\r\n\r\n        ctx.beginPath()\r\n        doPath()\r\n        ctx.stroke()\r\n\r\n        ctx.restore()\r\n        function doPath() {\r\n            if (densityProfile === 'gaussian') {\r\n                gaussianPath()\r\n            } else {\r\n                rectanglePath()\r\n            }\r\n        }\r\n\r\n        function gaussianPath() {\r\n            const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n            const amp = h\r\n            const bottom = middle + h * 0.5\r\n            // start bottom left\r\n            ctx.moveTo(0, bottom)\r\n            const pa = []\r\n            for (let i = 0; i <= screen.width; i += 1) {\r\n                const xp = 0.5 * ((i - x) / sigma) ** 2\r\n                const y = bottom - amp * Math.exp(-xp)\r\n                pa.push(y)\r\n                ctx.lineTo(i, y)\r\n            }\r\n            // end bottom right\r\n            ctx.lineTo(screen.width, bottom)\r\n            ctx.lineTo(0, bottom)\r\n            // ctx.closePath()\r\n        }\r\n        function rectanglePath() {\r\n            ctx.rect(x - w * 0.5, middle - h * 0.5, w, h)\r\n        }\r\n    }\r\n\r\n    self.renderAt = () => { self.render() }\r\n}\r\n","/** @module */\r\n/**\r\n * Graphics Component for voterShapes in 2D\r\n * @param {VoterShape} voterShape\r\n * @param {Screen} screen\r\n */\r\nexport default function VoterRender2D(voterShape, screen) {\r\n    const self = this\r\n\r\n    self.render = function () {\r\n        const { ctx } = screen\r\n        const { darkMode } = screen.common\r\n        const { x, y, w, densityProfile } = voterShape.shape2\r\n        // circle\r\n        ctx.save()\r\n        if (densityProfile === 'gaussian') {\r\n            ctx.setLineDash([1, 9])\r\n            ctx.lineWidth = 10\r\n        }\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#555'\r\n        if (darkMode) ctx.strokeStyle = '#ddd'\r\n        // ctx.fillStyle = \"#eee\"\r\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI)\r\n        // ctx.fill()\r\n        ctx.stroke()\r\n        ctx.restore()\r\n    }\r\n    self.renderAt = function (newX, newY) {\r\n        const { ctx } = screen\r\n        const { darkMode } = screen.common\r\n        const { w } = voterShape.shape2\r\n        // circle\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#555'\r\n        if (darkMode) ctx.strokeStyle = '#ddd'\r\n        // ctx.fillStyle = \"#eee\"\r\n        ctx.arc(newX, newY, w * 0.5, 0, 2 * Math.PI)\r\n        // ctx.fill()\r\n        ctx.stroke()\r\n    }\r\n    self.renderCenterAt2 = function (newX, newY) {\r\n        const { ctx } = screen\r\n        const { darkMode } = screen.common\r\n        // circle\r\n        ctx.beginPath()\r\n        ctx.fillStyle = '#555'\r\n        if (darkMode) ctx.fillStyle = '#bbb'\r\n        ctx.arc(newX, newY, 1, 0, 2 * Math.PI)\r\n        ctx.fill()\r\n        // ctx.stroke()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport Voronoi1D from './Voronoi1D.js'\r\nimport Voronoi2D from './Voronoi2D.js'\r\n\r\n/**\r\n * Show votes\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {CandidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function VizOneVoronoi(voterRendererList, candidateList, screen, screenMini, simOptions) {\r\n    const self = this\r\n\r\n    // renderer factory //\r\n    const { dimensions } = simOptions\r\n    const Voronoi = (dimensions === 1) ? Voronoi1D : Voronoi2D\r\n    const rendererMaker = (voterShape) => new Voronoi(voterShape, candidateList, screen)\r\n    voterRendererList.setRenderer(rendererMaker)\r\n\r\n    self.enter = () => {}\r\n    self.exit = () => { }\r\n\r\n    self.update = function (phaseResults) {\r\n        const { error } = phaseResults\r\n        if (error !== undefined) return\r\n\r\n        voterRendererList.updateGraphic()\r\n    }\r\n\r\n    self.render = function () {\r\n        voterRendererList.render()\r\n    }\r\n}\r\n","/** @module */\r\n\r\n// d3-voronoi\r\n// d3-select\r\n// d3-range\r\n\r\nimport { Delaunay } from 'd3-delaunay'\r\n// import { Delaunay } from 'd3-delaunay'\r\n// import { Delaunay } from 'https://cdn.skypack.dev/d3-delaunay@6'\r\n// https://github.com/d3/d3-delaunay\r\n\r\n/**\r\n * Draw Voronoi cells to show votes.\r\n * Voronoi1D is called by VizOne.\r\n * @param {VoterGroup} voterGroup\r\n * @param {candidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function Voronoi1D(voterGroup, candidateList, screen) {\r\n    const self = this\r\n\r\n    let voronoi\r\n    let canList\r\n    self.update = function () {\r\n        canList = candidateList.getEntities()\r\n        if (canList === undefined) return\r\n        const points = canList.map((e) => [e.shape1.x, 0])\r\n        const delaunay = Delaunay.from(points)\r\n        voronoi = delaunay.voronoi([0, 0, screen.width, screen.height])\r\n    }\r\n\r\n    self.render = function () {\r\n        if (canList === undefined) return\r\n\r\n        const { ctx } = screen\r\n        const { x, w, densityProfile } = voterGroup.shape1\r\n        const h = 100\r\n\r\n        ctx.save()\r\n\r\n        // clip the voronoi diagram\r\n\r\n        // http://jsfiddle.net/jimrhoskins/dDUC3/1/\r\n        // https://dustinpfister.github.io/2019/10/08/canvas-clip/\r\n\r\n        ctx.beginPath()\r\n        doPath()\r\n        // ctx.closePath()\r\n        ctx.clip()\r\n\r\n        const n = canList.length\r\n        for (let i = 0; i < n; i++) {\r\n            ctx.beginPath()\r\n            voronoi.renderCell(i, ctx)\r\n            ctx.fillStyle = canList[i].color\r\n            ctx.fill()\r\n            ctx.stroke()\r\n        }\r\n\r\n        ctx.beginPath()\r\n        doPath()\r\n        ctx.stroke()\r\n\r\n        ctx.restore()\r\n\r\n        function doPath() {\r\n            if (densityProfile === 'gaussian') {\r\n                gaussianPath()\r\n            } else {\r\n                rectanglePath()\r\n            }\r\n        }\r\n        function gaussianPath() {\r\n            const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n            const amp = h\r\n            const bottom = 150 + h * 0.5\r\n            // start bottom left\r\n            ctx.moveTo(0, bottom)\r\n            const pa = []\r\n            for (let i = 0; i <= screen.width; i += 1) {\r\n                const xp = 0.5 * ((i - x) / sigma) ** 2\r\n                const y = bottom - amp * Math.exp(-xp)\r\n                pa.push(y)\r\n                ctx.lineTo(i, y)\r\n            }\r\n            // end bottom right\r\n            ctx.lineTo(screen.width, bottom)\r\n            ctx.lineTo(0, bottom)\r\n            // ctx.closePath()\r\n        }\r\n        function rectanglePath() {\r\n            ctx.rect(x - w * 0.5, 150 - h * 0.5, w, h)\r\n        }\r\n    }\r\n}\r\n","/** @module */\r\n\r\n// d3-voronoi\r\n// d3-select\r\n// d3-range\r\n\r\nimport { Delaunay } from 'd3-delaunay'\r\n// import { Delaunay } from 'd3-delaunay'\r\n// import { Delaunay } from 'https://cdn.skypack.dev/d3-delaunay@6'\r\n// https://github.com/d3/d3-delaunay\r\n\r\n/**\r\n * Draw Voronoi cells to show votes.\r\n * @param {VoterGroup} voterGroup\r\n * @param {candidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function Voronoi2D(voterGroup, candidateList, screen) {\r\n    const self = this\r\n\r\n    let voronoi\r\n    let canList\r\n    self.update = function () {\r\n        canList = candidateList.getEntities()\r\n        const points = canList.map((e) => [e.shape2.x, e.shape2.y])\r\n        const delaunay = Delaunay.from(points)\r\n        voronoi = delaunay.voronoi([0, 0, screen.width, screen.height])\r\n    }\r\n\r\n    self.render = function () {\r\n        const { ctx } = screen\r\n        const { x, y, w } = voterGroup.shape2\r\n\r\n        ctx.save()\r\n\r\n        // draw circle clip\r\n\r\n        // http://jsfiddle.net/jimrhoskins/dDUC3/1/\r\n        // https://dustinpfister.github.io/2019/10/08/canvas-clip/\r\n        ctx.beginPath()\r\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI)\r\n        // ctx.closePath()\r\n        ctx.clip()\r\n\r\n        const n = canList.length\r\n        for (let i = 0; i < n; i++) {\r\n            ctx.beginPath()\r\n            voronoi.renderCell(i, ctx)\r\n            ctx.fillStyle = canList[i].color\r\n            ctx.fill()\r\n            ctx.stroke()\r\n        }\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI)\r\n        ctx.stroke()\r\n\r\n        ctx.restore()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport BeatMap from '../vizBeatMap/BeatMap.js'\r\nimport VoronoiRanking1D from './VoronoiRanking1D.js'\r\nimport VoronoiRanking2D from './VoronoiRanking2D.js'\r\n\r\n/**\r\n * Show votes\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {CandidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\n// eslint-disable-next-line max-len\r\nexport default function VizOneVoronoiRanking(voterRendererList, candidateList, screen, screenMini, simOptions) {\r\n    const self = this\r\n\r\n    // renderer factory //\r\n    const { dimensions } = simOptions\r\n    const VoronoiRanking = (dimensions === 1) ? VoronoiRanking1D : VoronoiRanking2D\r\n    const rendererMaker = (voterShape) => new VoronoiRanking(voterShape, candidateList, screen)\r\n    voterRendererList.setRenderer(rendererMaker)\r\n\r\n    const beatMap = new BeatMap()\r\n    let doBeatMap\r\n\r\n    self.enter = () => {}\r\n    self.exit = () => { }\r\n\r\n\r\n    self.update = function (phaseResults) {\r\n        const { error } = phaseResults\r\n        if (error !== undefined) return\r\n\r\n        const { votesByGeom } = phaseResults.votes\r\n\r\n        voterRendererList.updateGraphic(votesByGeom)\r\n\r\n        // if (phaseResults.)\r\n        const {socialChoiceMethod} = phaseResults.electionOptions\r\n        doBeatMap = (socialChoiceMethod === 'minimax')\r\n        if ( doBeatMap) {\r\n            const canList = candidateList.getEntities()\r\n            beatMap.update(phaseResults, canList)\r\n        }\r\n    }\r\n\r\n    self.render = function () {\r\n        \r\n        if ( doBeatMap) {\r\n            const { ctx } = screen\r\n            beatMap.render(ctx)\r\n        }\r\n        voterRendererList.render()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { rgbToString } from '../viz/colorBlender.js'\r\nimport bMap from './bMap.js'\r\n\r\n/**\r\n * Draw beat maps.\r\n * @constructor\r\n */\r\nexport default function BeatMap() {\r\n    const self = this\r\n\r\n    let beatMap\r\n    let colorStrings\r\n    const p = [.1,.2,.3,.4,.5,.6,.7,.8,.9]\r\n    // const p = [.5]\r\n\r\n    self.update = function (phaseResults, canList) {\r\n        colorStrings = canList.map((can) => rgbToString(can.colorRGBA))\r\n\r\n        const cx = canList.map((can) => can.shape2.x)\r\n        const cy = canList.map((can) => can.shape2.y)\r\n        const {voterGeoms} = phaseResults.geometry\r\n        const x = voterGeoms.map((v) => v.x)\r\n        const y = voterGeoms.map((v) => v.y)\r\n        const w = voterGeoms.map((v) => v.w)\r\n        const densityDecoder = {\"step\":1,\"gaussian\":2}\r\n        const d = voterGeoms.map((v) => densityDecoder[v.densityProfile])\r\n        const m = voterGeoms.map((v) => v.densityMax)\r\n        // console.log({x,y,d,w,m,cx,cy,p})\r\n        beatMap = bMap(x,y,d,w,m,cx,cy,p)\r\n\r\n    }\r\n\r\n    self.render = function (ctx) {\r\n\r\n        const cn = beatMap.x.length\r\n\r\n        ctx.save()\r\n        ctx.fillStyle = `rgb(0 0 0)`\r\n        ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height)\r\n        ctx.restore()\r\n\r\n        for (let j = 0; j < p.length; j++) {\r\n            ctx.save()\r\n            ctx.lineWidth = 1\r\n            const shade = Math.round(p[j] * 255)\r\n            ctx.fillStyle = `rgb(${shade} ${shade} ${shade})`\r\n            for(let k = 0; k < cn; k++){\r\n                \r\n                const x = beatMap.x[k][j]\r\n                const y = beatMap.y[k][j]\r\n                const bc = new Path2D()\r\n                \r\n                bc.moveTo(x[0],y[0])\r\n                for (let i=1; i < x.length; i++) {\r\n                    bc.lineTo(x[i],y[i])\r\n                }    \r\n\t\t\t\tbc.closePath()\r\n\t\t\t\tctx.clip(bc)\r\n            }\r\n\t\t\tctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height)\r\n            ctx.restore()\r\n        }\r\n    }\r\n}\r\n","import quantile from \"./quantile.js\"\r\n\r\nexport default function bMap(vx,vy,d,w,m,cx,cy,p) {\r\n    const N = 200\r\n\r\n    // N points for pn probabilities\r\n    const pn = p.length\r\n    const cn = cx.length\r\n    const vn = vx.length\r\n    const bm = {\r\n        x:create3DArray(cn,pn,N),\r\n        y:create3DArray(cn,pn,N)\r\n    }\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        const angle = i / N * Math.PI * 2\r\n        const dx = Math.cos(angle)\r\n        const dy = Math.sin(angle)\r\n        const v = new Array(vn)\r\n        \r\n        // reuse projection for all cans\r\n        for (let j = 0; j < vn; j++) {\r\n            v[j] = dx * vx[j] + dy * vy[j]\r\n        }\r\n        for (let j = 0; j < pn; j++) {\r\n            const q = quantile(v,w,d,m,p[j])\r\n            for (let k = 0; k < cn; k++) {\r\n                const c = dx * cx[k] + dy * cy[k]\r\n                const dist = 2 * Math.min(0,q - c)\r\n                bm.x[k][j][i] = cx[k] + dx * dist\r\n                bm.y[k][j][i] = cy[k] + dy * dist\r\n            }\r\n        }\r\n    }\r\n    return bm\r\n}\r\n\r\nfunction create2DArray(m,n) {\r\n    return Array.from(Array(m), () => new Array(n))\r\n}\r\n\r\nfunction create3DArray(m,n,p) {\r\n    return Array.from(Array(m), () => create2DArray(n,p))\r\n}","import binarySearch from \"./binarySearch.js\"\r\nimport circleCDF from \"./circleCDF.js\"\r\nimport { normCDF } from \"@paretoman/votekit-utilities\"\r\n\r\nconst invSqrt8 = 1 / Math.sqrt(8)\r\n\r\n/**\r\n * Take a list of distributions and find the quantile for a probability.\r\n * @param {number[]} ms - Means\r\n * @param {number[]} w - widths of distributions\r\n * @param {number[]} d - distribution types, 1 or 2\r\n * @param {number[]} ma - max density of distribution, scales the distribution\r\n * @param {number} p - probability, between 0 and 1\r\n * @returns {number} q - quantile\r\n */\r\nexport default function quantile(ms,w,d,ma,p) {\r\n    // const q = quantile2(v,w,d,m,p) {\r\n\r\n    // console.log({ms,rs,d,ma,q})\r\n    const n = ms.length\r\n    const sma = sum(ma)\r\n    const cdf = (x) => {\r\n        let s = 0\r\n        for (let i = 0; i < n; i++) {\r\n            if (d[i] === 2){\r\n                s = s + normCDF(x,ms[i],w[i] * invSqrt8) * ma[i]\r\n            } else {\r\n                s = s + circleCDF(x,ms[i],w[i] * .5) * ma[i]\r\n            }\r\n        }\r\n        return s/sma\r\n    }\r\n    const highs = range(n).map((i)=>ms[i] + w[i] * invSqrt8 * 3)\r\n    const lows = range(n).map((i)=>ms[i] - w[i] * invSqrt8 * 3)\r\n    const high = Math.max(...highs)\r\n    const low = Math.min(...lows)\r\n    // console.log({low,high})\r\n    const tol = .001\r\n    const q = binarySearch(cdf,p,low,high,tol)\r\n    // console.log(p,cdf(q))\r\n    return q\r\n}\r\n\r\nfunction range(n) {\r\n    return [...Array(n).keys()]\r\n}\r\n\r\nfunction sum(a) {\r\n    const n = a.length\r\n    let s = 0\r\n    for (let i = 0; i < n; i++) {\r\n        s = s + a[i]\r\n    }\r\n    return s\r\n}","\r\nexport default function binarySearch(f,value,low,high,tol) {\r\n\r\n    if (value > f(high) ) {\r\n        console.log('out of bounds')\r\n        return high\r\n    }\r\n    if (value < f(low)) {\r\n        console.log('out of bounds')\r\n        return low\r\n    }\r\n    let c = 0\r\n    let mid\r\n    while (low <= high && c < 30) { // 10^9 ~= 2^30\r\n        c = c + 1\r\n        mid = (low + high) * .5\r\n        const fmid = f(mid)\r\n        if (value + tol < fmid) high = mid\r\n        else if (value - tol > fmid) low = mid\r\n        else break\r\n    }\r\n    return mid\r\n}","const invPi = 1 / Math.PI\r\n\r\nexport default function circleCDF(x,m,r) {\r\n    let z = (x - m)/r\r\n    if (z > 1) return 1\r\n    else if (z < -1) return 0\r\n    const areaFromCenter = z * Math.sqrt(1 - z * z)  + Math.asin(z)\r\n    return areaFromCenter * invPi + .5\r\n}","/** @module */\r\n\r\nimport { makeRankingIntervals1D } from '@paretoman/votekit-vote-casters'\r\nimport colorBlender, { rgbToString } from './colorBlender.js'\r\n\r\n/**\r\n * Draw Voronoi cells to show votes.\r\n * @param {VoterGroup} voterGroup\r\n * @param {CandidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function VoronoiRanking1D(voterGroup, candidateList, screen) {\r\n    const self = this\r\n\r\n    let canList\r\n    let colors\r\n    let intervals\r\n    self.update = function (votesForGeom) {\r\n        // calculate colors\r\n\r\n        let { rankings } = votesForGeom\r\n        let { intervalBorders } = votesForGeom\r\n        if (rankings === undefined || intervalBorders === undefined) {\r\n            canList = candidateList.getEntities()\r\n            const canPoints = canList.map((can) => can.shape1.x)\r\n            const cd = makeRankingIntervals1D(canPoints)\r\n            rankings = cd.rankings\r\n            intervalBorders = cd.intervalBorders\r\n        }\r\n\r\n        canList = candidateList.getEntities()\r\n        const n = canList.length\r\n        const colorList = canList.map((can) => can.colorRGBA)\r\n\r\n        const ni = intervalBorders.length - 1\r\n        intervals = Array(ni)\r\n        colors = Array(ni)\r\n        for (let i = 0; i < ni; i++) {\r\n            intervals[i] = [intervalBorders[i], intervalBorders[i + 1]]\r\n            const bordaScores = rankings[i].map((r) => n - r)\r\n            colors[i] = rgbToString(colorBlender(bordaScores, colorList))\r\n        }\r\n    }\r\n\r\n    self.render = function () {\r\n        const { ctx } = screen\r\n        const { x, w, densityProfile } = voterGroup.shape1\r\n        const h = 100\r\n\r\n        ctx.save()\r\n\r\n        // clip the voronoi diagram\r\n\r\n        // http://jsfiddle.net/jimrhoskins/dDUC3/1/\r\n        // https://dustinpfister.github.io/2019/10/08/canvas-clip/\r\n\r\n        ctx.beginPath()\r\n        doPath()\r\n        // ctx.closePath()\r\n        ctx.clip()\r\n\r\n        const n = intervals.length\r\n        for (let i = 0; i < n; i++) {\r\n            renderInterval(intervals[i], colors[i], ctx, screen)\r\n        }\r\n\r\n        ctx.beginPath()\r\n        doPath()\r\n        ctx.stroke()\r\n\r\n        ctx.restore()\r\n\r\n        function doPath() {\r\n            if (densityProfile === 'gaussian') {\r\n                gaussianPath()\r\n            } else {\r\n                rectanglePath()\r\n            }\r\n        }\r\n        function gaussianPath() {\r\n            const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n            const amp = h\r\n            const bottom = 150 + h * 0.5\r\n            // start bottom left\r\n            ctx.moveTo(0, bottom)\r\n            const pa = []\r\n            for (let i = 0; i <= screen.width; i += 1) {\r\n                const xp = 0.5 * ((i - x) / sigma) ** 2\r\n                const y = bottom - amp * Math.exp(-xp)\r\n                pa.push(y)\r\n                ctx.lineTo(i, y)\r\n            }\r\n            // end bottom right\r\n            ctx.lineTo(screen.width, bottom)\r\n            ctx.lineTo(0, bottom)\r\n            // ctx.closePath()\r\n        }\r\n        function rectanglePath() {\r\n            ctx.rect(x - w * 0.5, 150 - h * 0.5, w, h)\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInterval(interval, color, ctx, screen) {\r\n    const x = Math.max(0, interval[0])\r\n    const x2 = Math.min(screen.width, interval[1])\r\n    const w = x2 - x\r\n    const y = 0\r\n    const h = screen.height\r\n\r\n    ctx.beginPath()\r\n    ctx.rect(x, y, w, h)\r\n    ctx.fillStyle = color\r\n    ctx.fill()\r\n    ctx.stroke()\r\n}\r\n","/** @module */\r\n\r\nimport { castRankingFindPolygons } from '@paretoman/votekit-vote-casters'\r\nimport colorBlender, { rgbToString } from './colorBlender.js'\r\n\r\n/**\r\n * Draw Voronoi cells to show votes.\r\n * @param {VoterGroup} voterGroup\r\n * @param {CandidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function VoronoiRanking2D(voterGroup, candidateList, screen) {\r\n    const self = this\r\n\r\n    let canList\r\n    let colors\r\n    let cells\r\n    self.update = function (votesForGeom) {\r\n        // calculate colors\r\n\r\n        let { rankings } = votesForGeom\r\n        cells = votesForGeom.cells\r\n        if (rankings === undefined || cells === undefined) {\r\n            canList = candidateList.getEntities()\r\n            const canPoints = canList.map((can) => [can.shape2.x, can.shape2.y])\r\n            const voterGeom = voterGroup.shape2\r\n            const verbosity = 3\r\n            const cd = castRankingFindPolygons(voterGeom, canPoints, verbosity)\r\n            rankings = cd.rankings\r\n            cells = cd.cells\r\n        }\r\n\r\n        canList = candidateList.getEntities()\r\n\r\n        const n = canList.length\r\n        const cn = cells.length\r\n        colors = Array(cn)\r\n        const colorList = canList.map((can) => can.colorRGBA)\r\n        for (let i = 0; i < cn; i++) {\r\n            const bordaScores = rankings[i].map((r) => n - r)\r\n            colors[i] = rgbToString(colorBlender(bordaScores, colorList))\r\n        }\r\n    }\r\n\r\n    self.render = function () {\r\n        const { ctx } = screen\r\n        const { x, y, w } = voterGroup.shape2\r\n\r\n        ctx.save()\r\n\r\n        const cn = cells.length\r\n        for (let i = 0; i < cn; i++) {\r\n            ctx.beginPath()\r\n            cellPath(ctx, cells[i])\r\n            ctx.fillStyle = colors[i]\r\n            ctx.strokeStyle = colors[i]\r\n            ctx.fill()\r\n            ctx.stroke()\r\n        }\r\n\r\n        // border\r\n        ctx.strokeStyle = '#222'\r\n        ctx.beginPath()\r\n        ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI)\r\n        ctx.stroke()\r\n\r\n        ctx.restore()\r\n    }\r\n}\r\n\r\nfunction cellPath(ctx, cell) {\r\n    const cc = cell.length\r\n    const first = cell[cc - 1]\r\n    ctx.moveTo(first[0], first[1])\r\n    for (let i = 0; i < cc; i++) {\r\n        const coord = cell[i]\r\n        ctx.lineTo(coord[0], coord[1])\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport BeatMap from '../vizBeatMap/BeatMap.js'\r\nimport Grid1D from './Grid1D.js'\r\nimport Grid2D from './Grid2D.js'\r\n\r\n/**\r\n * Show votes\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {CandidateList} candidateList\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function VizOneGrid(voterRendererList, candidateList, screenMain, screenMini, simOptions) {\r\n    const self = this\r\n\r\n    // renderer factory //\r\n    const { dimensions } = simOptions\r\n    const Grid = (dimensions === 1) ? Grid1D : Grid2D\r\n    const rendererMaker = () => new Grid(candidateList, screenMain, screenMini)\r\n    voterRendererList.setRenderer(rendererMaker)\r\n\r\n    const beatMap = new BeatMap()\r\n    let doBeatMap\r\n\r\n    self.enter = function () {\r\n        if (dimensions === 2) {\r\n            screenMini.show()\r\n        }\r\n    }\r\n    self.exit = function () {\r\n        screenMini.hide()\r\n    }\r\n\r\n    self.update = function (phaseResults) {\r\n        const { error } = phaseResults\r\n        if (error !== undefined) return\r\n        const { votesByGeom } = phaseResults.votes\r\n        voterRendererList.updateGraphic(votesByGeom)        \r\n        \r\n        const {socialChoiceMethod} = phaseResults.electionOptions\r\n        doBeatMap = (socialChoiceMethod === 'minimax')\r\n        if ( doBeatMap) {\r\n            const canList = candidateList.getEntities()\r\n            beatMap.update(phaseResults, canList)\r\n        }\r\n    }\r\n    self.render = function () {\r\n        if (dimensions === 1) {\r\n            voterRendererList.renderBackground()\r\n        }\r\n        if (dimensions === 2) {  \r\n            if (doBeatMap) {        \r\n                const { ctx } = screenMain\r\n                beatMap.render(ctx)\r\n            }\r\n        }\r\n        voterRendererList.render()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport colorBlender, { rgbToString } from './colorBlender.js'\r\nimport getTallyFractionsNameForVote from './getTallyFractionsNameForVote.js'\r\n\r\n/**\r\n * Draw grid cells to show votes.\r\n * @param {VoterShape} voterGeom\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function Grid1D(candidateList, screen) {\r\n    const self = this\r\n\r\n    const h = 200\r\n    const center = 100\r\n\r\n    let votesForGeom\r\n    let canList\r\n    self.update = (votesForGeom0) => {\r\n        votesForGeom = votesForGeom0\r\n        canList = candidateList.getEntities()\r\n    }\r\n\r\n    self.renderBackground = function () {\r\n        const { ctx } = screen\r\n        ctx.save()\r\n        ctx.globalAlpha = 0.7\r\n\r\n        // draw each can separately\r\n        const nCans = canList.length\r\n        for (let i = 0; i < nCans; i++) {\r\n            ctx.strokeStyle = '#dddddd'\r\n            // ctx.strokeStyle = '#333333'\r\n            ctx.beginPath()\r\n            shapePath(ctx, i, true)\r\n            ctx.stroke()\r\n        }\r\n        ctx.restore()\r\n    }\r\n    self.render = function () {\r\n        const { ctx } = screen\r\n        ctx.save()\r\n        ctx.globalAlpha = 0.7\r\n        const nCans = canList.length\r\n        for (let i = 0; i < nCans; i++) {\r\n            // draw image\r\n            ctx.fillStyle = canList[i].color\r\n            const { colorRGBA } = canList[i]\r\n            ctx.strokeStyle = rgbToString(colorBlender([0.5, 0.5], [colorRGBA, [0, 0, 0]]))\r\n            ctx.beginPath()\r\n            shapePath(ctx, i, false)\r\n            ctx.fill()\r\n            ctx.stroke()\r\n        }\r\n        ctx.restore()\r\n    }\r\n    function shapePath(ctx, iCan, drawOutline) {\r\n        const { grid, voteSet } = votesForGeom\r\n        const { x, w, densityProfile } = grid.voterGeom\r\n        const nCans = canList.length\r\n\r\n        const isGauss = (densityProfile === 'gaussian')\r\n        const gridX = grid.x\r\n        const sigma = w / Math.sqrt(2 * Math.PI) // w = sigma * sqrt(2*pi)\r\n        const amp = h / nCans\r\n        const bottom = center + h * 0.5 - iCan * amp\r\n        // start bottom left\r\n        // go outside of screen by one pixel\r\n        const left = Math.max(-1, gridX[0])\r\n        ctx.moveTo(left, bottom)\r\n        const gl = gridX.length\r\n        const tallyName = getTallyFractionsNameForVote(voteSet[0])\r\n        for (let i = 0; i < gl; i += 1) {\r\n            const xg = gridX[i]\r\n            if (xg < -1) continue\r\n            if (xg > screen.width) continue\r\n            const voteMult = (drawOutline) ? 1 : voteSet[i][tallyName][iCan]\r\n            const shapeMult = (isGauss) ? Math.exp(-0.5 * ((xg - x) / sigma) ** 2) : 1\r\n            const y = bottom - amp * shapeMult * voteMult\r\n            ctx.lineTo(xg, y)\r\n        }\r\n        // end bottom right\r\n        const right = Math.min(screen.width, gridX[gl - 1])\r\n        ctx.lineTo(right, bottom)\r\n        // close path\r\n        ctx.lineTo(left, bottom)\r\n    }\r\n}\r\n","/** get a fractional candidate tally from a grid vote */\r\nexport default function getTallyFractionsNameForVote(vote) {\r\n    if (vote.scoreVote) {\r\n        return 'scoreVote'\r\n    }\r\n\r\n    if (vote.bordaFractions) {\r\n        return 'bordaFractions'\r\n    }\r\n\r\n    if (vote.pluralityAllocation) {\r\n        return 'pluralityAllocation'\r\n    }\r\n\r\n    return null\r\n}\r\n","/** @module */\r\nimport colorBlender from './colorBlender.js'\r\nimport getTallyFractionsNameForVote from './getTallyFractionsNameForVote.js'\r\n\r\n/**\r\n * Draw grid cells to show votes.\r\n * Basically, we have a rectangular grid of voter support.\r\n * Even if the voterGeom is a circle.\r\n * Later, when we draw, we make a clip in the shape of the voterGeom,\r\n * and draw the grid inside the clip.\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function Grid2D(candidateList, screenMain, screenMini) {\r\n    const self = this\r\n\r\n    let votesForGeom\r\n    let canList\r\n    let singleCanvas\r\n    const canvases = []\r\n    // TODO: set up canvases before update?\r\n\r\n    self.update = (votesForGeom0) => {\r\n        votesForGeom = votesForGeom0\r\n        canList = candidateList.getEntities()\r\n\r\n        const { grid, voteSet } = votesForGeom\r\n        const { densityProfile } = grid.voterGeom\r\n\r\n        const nCans = canList.length\r\n        const nHeight = Math.floor((nCans - 1) / 3) + 1\r\n        screenMini.setHeight(nHeight * (1 / 3) * screenMini.common.height)\r\n\r\n        const isGauss = densityProfile === 'gaussian'\r\n\r\n        fillDataSeparate()\r\n        fillDataBlend()\r\n\r\n        function fillDataSeparate() {\r\n            // make image data\r\n            const { nx, ny, density } = grid\r\n            canvases.splice(0)\r\n            const tallyName = getTallyFractionsNameForVote(voteSet[0])\r\n            for (let i = 0; i < canList.length; i++) {\r\n                const canvas = document.createElement('canvas')\r\n                canvas.width = nx\r\n                canvas.height = ny\r\n                const offCtx = canvas.getContext('2d')\r\n                const imageData = offCtx.createImageData(nx, ny)\r\n\r\n                const { data } = imageData\r\n\r\n                const { colorRGBA } = canList[i]\r\n                const [r, g, b] = colorRGBA\r\n\r\n                let k = 0\r\n                for (let yp = 0; yp < ny; yp++) {\r\n                    for (let xp = 0; xp < nx; xp++) {\r\n                        const support = voteSet[k][tallyName][i]\r\n                        const a = support * ((isGauss) ? density[k] : 1) * 255\r\n\r\n                        data[(xp + yp * nx) * 4 + 0] = r\r\n                        data[(xp + yp * nx) * 4 + 1] = g\r\n                        data[(xp + yp * nx) * 4 + 2] = b\r\n                        data[(xp + yp * nx) * 4 + 3] = a\r\n                        k += 1\r\n                    }\r\n                }\r\n                canvases.push(canvas)\r\n                offCtx.putImageData(imageData, 0, 0)\r\n            }\r\n        }\r\n\r\n        function fillDataBlend() {\r\n        // make image data\r\n            const { nx, ny, density } = grid\r\n            const colorSet = canList.map((can) => can.colorRGBA)\r\n\r\n            const canvas = document.createElement('canvas')\r\n            canvas.width = nx\r\n            canvas.height = ny\r\n            const offCtx = canvas.getContext('2d')\r\n            const imageData = offCtx.createImageData(nx, ny)\r\n\r\n            const { data } = imageData\r\n\r\n            const tallyName = getTallyFractionsNameForVote(voteSet[0])\r\n\r\n            let k = 0\r\n            for (let yp = 0; yp < ny; yp++) {\r\n                for (let xp = 0; xp < nx; xp++) {\r\n                    const tallyFractions = voteSet[k][tallyName]\r\n                    const [r, g, b] = colorBlender(tallyFractions, colorSet)\r\n\r\n                    const a = ((isGauss) ? density[k] : 1) * 255\r\n\r\n                    data[(xp + yp * nx) * 4 + 0] = r\r\n                    data[(xp + yp * nx) * 4 + 1] = g\r\n                    data[(xp + yp * nx) * 4 + 2] = b\r\n                    data[(xp + yp * nx) * 4 + 3] = a\r\n                    k += 1\r\n                }\r\n            }\r\n            singleCanvas = canvas\r\n            offCtx.putImageData(imageData, 0, 0)\r\n        }\r\n    }\r\n\r\n    self.render = function () {\r\n        const { width, voterGeom } = votesForGeom.grid\r\n        const { x, y, w, densityProfile } = voterGeom\r\n\r\n        drawBlend()\r\n\r\n        drawSeparate()\r\n\r\n        function drawSeparate() {\r\n            const { ctx } = screenMini\r\n            const { darkMode } = screenMini.common\r\n            // draw each can separately\r\n            const nCans = canList.length\r\n            for (let i = 0; i < nCans; i++) {\r\n                // draw image\r\n                // transform is t\r\n                ctx.save()\r\n                // ctx.globalAlpha = 0.7\r\n                const t = {\r\n                    w: 1 / 3, h: 1 / 3, x: (i % 3) * 100, y: Math.floor(i / 3) * 100,\r\n                }\r\n\r\n                // shape\r\n                const sh = {\r\n                    x: x * t.w + t.x,\r\n                    y: y * t.h + t.y,\r\n                    r: w * t.w * 0.5,\r\n                }\r\n                const clipShape = {\r\n                    x: x * t.w + t.x,\r\n                    y: y * t.h + t.y,\r\n                    r: width * t.w * 0.5,\r\n                }\r\n\r\n                // clip outline of shape\r\n                ctx.beginPath()\r\n                ctx.arc(clipShape.x, clipShape.y, clipShape.r, 0, 2 * Math.PI)\r\n                ctx.clip()\r\n\r\n                ctx.beginPath()\r\n                ctx.rect(t.x, t.y, 100, 100)\r\n                ctx.clip()\r\n\r\n                const canvas = canvases[i]\r\n                const im = {\r\n                    x: x * t.w - width * t.w * 0.5 + t.x,\r\n                    y: y * t.w - width * t.w * 0.5 + t.y,\r\n                    w: width * t.w,\r\n                    h: width * t.h,\r\n                }\r\n                ctx.drawImage(canvas, im.x, im.y, im.w, im.h)\r\n\r\n                // draw outline of shape\r\n                if (densityProfile === 'gaussian') {\r\n                    ctx.setLineDash([1 / 3, 9 / 3])\r\n                    ctx.lineWidth = 5 / 3\r\n                }\r\n                ctx.strokeStyle = '#555'\r\n                if (darkMode) ctx.strokeStyle = '#ddd'\r\n                ctx.beginPath()\r\n                ctx.arc(sh.x, sh.y, sh.r, 0, 2 * Math.PI)\r\n                ctx.stroke()\r\n                ctx.restore()\r\n            }\r\n        }\r\n\r\n        function drawBlend() {\r\n            const { ctx } = screenMain\r\n            const { darkMode } = screenMain.common\r\n            ctx.save()\r\n            // ctx.globalAlpha = 0.7\r\n\r\n            // clip outline of shape\r\n            ctx.beginPath()\r\n            ctx.arc(x, y, width * 0.5, 0, 2 * Math.PI)\r\n            ctx.clip()\r\n\r\n            // draw image\r\n            // transform is t\r\n            const t = {\r\n                w: 1, h: 1, x: 0, y: 0,\r\n            }\r\n            const canvas = singleCanvas\r\n            ctx.imageSmoothingEnabled = false\r\n            const ov = {\r\n                x: x - width * 0.5 + t.x,\r\n                y: y - width * 0.5 + t.y,\r\n                w: width * t.w,\r\n                h: width * t.h,\r\n            }\r\n            ctx.drawImage(canvas, ov.x, ov.y, ov.w, ov.h)\r\n\r\n            // draw outline of shape\r\n            if (densityProfile === 'gaussian') {\r\n                ctx.setLineDash([1, 9])\r\n                ctx.lineWidth = 5\r\n            }\r\n            ctx.strokeStyle = '#555'\r\n            if (darkMode) ctx.strokeStyle = '#ddd'\r\n            ctx.beginPath()\r\n            ctx.arc(x, y, w * 0.5, 0, 2 * Math.PI)\r\n            ctx.stroke()\r\n\r\n            ctx.restore()\r\n        }\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { drawStrokedColor } from '@paretoman/votekit-graphics'\r\nimport DraggableManager from './DraggableManager.js'\r\nimport ClickDrag from './ClickDrag.js'\r\n\r\n/**\r\n * The super class for each view state. Provides some basic required functionality.\r\n * @param {Screen} screen\r\n * @param {Changes} changes\r\n * @param {ViewSettings} viewSettings\r\n * @constructor\r\n */\r\nexport default function ViewBase(screen, changes, viewSettings) {\r\n    const self = this\r\n    self.dragm = new DraggableManager()\r\n    self.clickDrag = new ClickDrag(self.dragm, self, screen, changes, viewSettings)\r\n    self.enter = () => {\r\n        screen.eventHandlers.set(self.clickDrag.eventHandlers)\r\n    }\r\n    self.exit = () => {}\r\n    self.update = () => {\r\n        if (changes.checkNone()) return\r\n        screen.clear()\r\n        const [x, y] = [150, 150]\r\n        drawStrokedColor('Not Yet Implemented', x, y, 20, 2, '#222', 1, screen.ctx)\r\n    }\r\n    self.render = () => { }\r\n    self.renderForeground = () => { }\r\n    self.testVoteView = () => null\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Draggable Manager keeps a list of draggable objects on a canvas.\r\n * @constructor\r\n */\r\nexport default function DraggableManager() {\r\n    const self = this\r\n\r\n    self.list = [] // intended to be accessed externally\r\n\r\n    self.updateNewG = (g) => { self.add(g) }\r\n\r\n    // add draggable objects\r\n    self.add = (s) => {\r\n        const d = { }\r\n        if (s.voterShape) {\r\n            d.g = s.graphic.circle\r\n            d.r = s.graphic\r\n            d.o = s.voterShape\r\n            d.p = { isCircle: true }\r\n        } else if (s.candidate) {\r\n            d.g = s.graphic.square\r\n            d.r = s.graphic\r\n            d.o = s.candidate\r\n            d.p = { isSquare: true }\r\n        } else if (s.canDn) {\r\n            d.g = s.graphic.square\r\n            d.r = s.graphic\r\n            d.o = s.canDn\r\n            d.p = { isSquare: true }\r\n        } else {\r\n            d.g = s.graphic.circle\r\n            d.r = s.graphic\r\n            d.o = s.testVoter\r\n            d.p = { isCircle: true }\r\n        }\r\n        self.list.push(d)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { minIndex } from '@paretoman/votekit-utilities'\r\n\r\n/**\r\n * ClickDrag gives draggable behavior to objects on a canvas.\r\n * If anything changes, an item is added to the \"changes\" array.\r\n * Calling screen.setEventHandlers(clickDrag.eventHandlers) sets the eventhandlers on the screen.\r\n * @param {Screen} screen\r\n * @param {Changes} changes\r\n * @constructor\r\n */\r\nexport default function ClickDrag(dragm, viewEntities, screen, changes, viewSettings) {\r\n    const self = this\r\n\r\n    // private variables\r\n    let drag = {}\r\n    const draggables = dragm.list\r\n\r\n    const grabCanvas = screen.tooltips\r\n\r\n    // Mouse Listeners\r\n    // As a sidenote, it is interesting that we don't need to call model.update here\r\n    // because we are using a game loop that will call model.update.\r\n    const start = function (event) {\r\n        // don't interact with stuff underneath a tooltip\r\n        if (event.target.closest('.tooltipBox') !== null) {\r\n            return\r\n        }\r\n\r\n        const mouse = getMouse(event)\r\n        const extra = (event.isTouch) ? 10 : 0\r\n        const nd = draggables.length\r\n        // We are in the hitboxes of these draggables.\r\n        const hitList = []\r\n        for (let i = 0; i < nd; i++) {\r\n            const d = draggables[i]\r\n            if ((d.o.exists || viewSettings.showGhosts) && hitTest(d, mouse, extra)) {\r\n                hitList.push(i)\r\n            }\r\n        }\r\n        if (hitList.length > 0) {\r\n            const distances2 = hitList.map((i) => {\r\n                const d = draggables[i]\r\n                const offX = d.r.x - mouse.x\r\n                const offY = d.r.y - mouse.y\r\n                return offX ** 2 + offY ** 2\r\n            })\r\n            // pick up\r\n            const iHitListClosest = minIndex(distances2)\r\n            const iDraggableClosest = hitList[iHitListClosest]\r\n\r\n            const d = draggables[iDraggableClosest]\r\n            drag.iDragging = iDraggableClosest\r\n            drag.isDragging = true\r\n            drag.offX = d.r.x - mouse.x\r\n            drag.offY = d.r.y - mouse.y\r\n            d.g.pickUp()\r\n            grabCanvas.dataset.cursor = 'grabbing' // CSS data attribute\r\n        }\r\n        startClickDetect(mouse)\r\n    }\r\n\r\n    const move = function (event) {\r\n        const mouse = getMouse(event)\r\n        if (drag.isDragging) { // because the mouse is moving\r\n            if (event.isTouch) {\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n            }\r\n            const dragging = draggables[drag.iDragging]\r\n\r\n            const w = screen.width\r\n            const h = screen.height\r\n            dragging.r.setXYView({\r\n                x: clamp(mouse.x + drag.offX, 0, w),\r\n                y: clamp(mouse.y + drag.offY, 0, h),\r\n            })\r\n            changes.add(['draggables'])\r\n        } else {\r\n            // see if we're hovering over something grabbable\r\n            // because we want the user to see if they can grab something\r\n            const nd = draggables.length\r\n            for (let i = 0; i < nd; i++) {\r\n                const d = draggables[i]\r\n                if ((viewSettings.showGhosts || d.o.exists) && hitTest(d, mouse, 0)) {\r\n                    grabCanvas.dataset.cursor = 'grab'\r\n                    return\r\n                }\r\n            }\r\n            grabCanvas.dataset.cursor = '' // nothing to grab\r\n        }\r\n        moveClickDetect(mouse)\r\n    }\r\n\r\n    const end = function () {\r\n        endClickDetect()\r\n        if (drag.iDragging !== undefined) {\r\n            const dragging = draggables[drag.iDragging]\r\n            dragging.g.drop()\r\n        }\r\n        drag = {}\r\n    }\r\n\r\n    // Touch Listeners\r\n    const touchmove = (e) => {\r\n        const pass = passTouch(e)\r\n        move(pass)\r\n    }\r\n    const touchstart = (e) => {\r\n        const pass = passTouch(e)\r\n        start(pass)\r\n    }\r\n    const touchend = (e) => {\r\n        const pass = passTouch(e)\r\n        move(pass)\r\n        end(pass)\r\n\r\n        // prevent mousedown from firing unless we're on a tooltip\r\n        if (e.target.closest('.tooltipBox') === null) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    self.eventHandlers = {\r\n        start, move, end, touchmove, touchstart, touchend,\r\n    }\r\n\r\n    /**\r\n     * Make a touch event look like a mouse event, with a flag.\r\n     * @param {Event} e - The event from the DOM\r\n     * @returns {Event} - The same event it received, plus some added properties.\r\n     */\r\n    function passTouch(e) {\r\n        e.isTouch = true\r\n        return e\r\n    }\r\n\r\n    /** Fix position relative to parent\r\n     *  https://stackoverflow.com/questions/2614461/javascript-get-mouse-position-relative-to-parent-element\r\n     */\r\n    function getMouse(e) {\r\n        const rect = screen.wrap.getBoundingClientRect()\r\n        const c = (e.isTouch) ? e.changedTouches[0] : e\r\n        const x = c.clientX - rect.left\r\n        const y = c.clientY - rect.top\r\n        const mouse = { x, y }\r\n        return mouse\r\n    }\r\n\r\n    /**\r\n     * Check whether m, e.g. a mouse, hits d, a draggable object.\r\n     * @param {Object} d - An entry in the draggables array.\r\n     * @param {Object} m - An object with properties x and y, e.g. a mouse.\r\n     * @param {Number} extra - Extra slack to catch touches outside of the hitbox.\r\n     * @returns {Boolean} - Whether m hits d.\r\n     */\r\n    function hitTest(d, m, extra) {\r\n        // Only drag an object if we're near it.\r\n        const x = d.r.x - m.x\r\n        const y = d.r.y - m.y\r\n        if (d.p.isCircle) {\r\n            const { r } = d.g\r\n            const hit = x * x + y * y < (r + extra) * (r + extra)\r\n            return hit\r\n        } if (d.p.isSquare) {\r\n            const { w, h } = d.g\r\n            const hit = Math.abs(x) < 0.5 * w + extra && Math.abs(y) < 0.5 * h + extra\r\n            return hit\r\n        }\r\n        return false\r\n    }\r\n\r\n    // click detection //\r\n\r\n    let couldBeClick\r\n    let startPos\r\n    function startClickDetect(mouse) {\r\n        couldBeClick = true\r\n        startPos = { ...mouse }\r\n    }\r\n    function moveClickDetect(mouse) {\r\n        if (couldBeClick) {\r\n            const xDist = Math.abs(startPos.x - mouse.x)\r\n            const yDist = Math.abs(startPos.y - mouse.y)\r\n            if (xDist > 5) couldBeClick = false\r\n            if (yDist > 5) couldBeClick = false\r\n        }\r\n    }\r\n    function endClickDetect() {\r\n        if (couldBeClick) {\r\n            couldBeClick = false\r\n            if (drag.isDragging) { // because the mouse is moving\r\n                const dragging = draggables[drag.iDragging]\r\n                dragging.r.click()\r\n            } else {\r\n                // We are not dragging anything, and we clicked,\r\n                // and we're inside the screen because this could be a click,\r\n                // so let's do the click action for blank space.\r\n                viewEntities.clickEmpty(startPos)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** https://stackoverflow.com/a/24719569 */\r\nfunction clamp(value, min, max) {\r\n    if (value < min) return min\r\n    if (value > max) return max\r\n    return value\r\n}\r\n","/** @module */\r\n\r\nimport VoterRenderer from './VoterRenderer.js'\r\n\r\nexport default function VoterRendererList(voterShapeList) {\r\n    const self = this\r\n\r\n    const list = []\r\n    self.list = list\r\n    self.rendererMaker = () => ({ render: () => {} })\r\n\r\n    // Subscribe to Sim //\r\n    voterShapeList.attachNewE(self)\r\n    self.updateNewE = (voterShape) => {\r\n        self.newVoterShape(voterShape)\r\n    }\r\n\r\n    // Setters and Getters //\r\n    self.newVoterShape = function (voterShape) {\r\n        const voterRenderer = new VoterRenderer(voterShape)\r\n        list.push(voterRenderer)\r\n        voterRenderer.setRenderer(self.rendererMaker)\r\n    }\r\n\r\n    self.getVoterShapes = () => list.filter((v) => v.voterShape.exists).map((v) => v.voterShape)\r\n    self.getVoterRenderers = () => list.filter((v) => v.voterShape.exists)\r\n\r\n    // Update //\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.rendererMaker = rendererMaker\r\n        list.forEach((v) => v.setRenderer(rendererMaker))\r\n    }\r\n    self.updateGraphic = (data) => {\r\n        const voterRenderersEx = self.getVoterRenderers()\r\n        if (data === undefined) {\r\n            voterRenderersEx.forEach((v) => v.renderer.update())\r\n        } else {\r\n            voterRenderersEx.forEach((v, i) => v.renderer.update(data[i]))\r\n        }\r\n    }\r\n\r\n    // Render //\r\n    self.render = () => {\r\n        list.forEach((v) => { if (v.voterShape.exists) v.renderer.render() })\r\n    }\r\n    self.renderBackground = () => {\r\n        list.forEach((v) => { if (v.voterShape.exists) v.renderer.renderBackground() })\r\n    }\r\n}\r\n","export default function VoterRenderer(voterShape) {\r\n    const self = this\r\n\r\n    self.voterShape = voterShape\r\n\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.renderer = rendererMaker(voterShape)\r\n    }\r\n}\r\n","import checkSomeStrategyForPhase from './checkSomeStrategyForPhase.js'\r\n\r\nexport default function checkSomeStrategy(optionsBag, voterShapeList, simOptions) {\r\n    const { sequenceOptions } = optionsBag\r\n\r\n    const { sequenceName } = optionsBag.sequenceOptions\r\n    const { resultsPhaseBySeq } = simOptions\r\n    const resultsPhaseName = resultsPhaseBySeq[sequenceName]\r\n\r\n    const voterStrategyListByPhase = voterShapeList.getVoterStrategyListByPhase(sequenceOptions)\r\n    const voterStrategyList = voterStrategyListByPhase[resultsPhaseName]\r\n\r\n    let someStrategy\r\n    if (sequenceName === 'closedPrimary') {\r\n        const { resultsPartyBySeq } = simOptions\r\n        const resultsParty = resultsPartyBySeq[resultsPhaseName]\r\n\r\n        const voterStrategyListForParty = voterStrategyList.filter((v) => v.party === resultsParty) // not right. need to use party index.\r\n        // todo: consider party. Maybe one primary has no strategic votes and another has some\r\n        someStrategy = checkSomeStrategyForPhase(voterStrategyListForParty)\r\n    } else {\r\n        someStrategy = checkSomeStrategyForPhase(voterStrategyList)\r\n    }\r\n    return someStrategy\r\n}\r\n","export default function checkSomeStrategyForPhase(voterStrategyList) {\r\n    return voterStrategyList.some(\r\n        (v) => v.strategy.some(\r\n            (a) => (a.actionName !== 'closest' && a.actionWeight !== 0),\r\n        ),\r\n    )\r\n}\r\n","/** @module */\r\n\r\nimport VizSample from '../viz/VizSample.js'\r\nimport VizSampleDensity1D from '../viz/VizSampleDensity1D.js'\r\nimport VizSampleDensity2D from '../viz/VizSampleDensity2D.js'\r\nimport ViewBase from './ViewBase.js'\r\nimport VoterRendererList from '../vizVoters/VoterRendererList.js'\r\nimport CandidateDnRendererList from '../vizCandidateDns/CandidateDnRendererList.js'\r\n\r\n/**\r\n * Simulate many sample elections with\r\n *   candidates in random positions within a distribution, and\r\n *   voters in a distribution that will be summed over.\r\n * @param {Screen} screen\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {ViewSettings} viewSettings\r\n * @constructor\r\n */\r\nexport default function ViewVizSample(entities, screen, menu, changes, simOptions, viewMode, viewSettings) {\r\n    const self = this\r\n\r\n    viewMode.viewModes.sample.attach(self)\r\n\r\n    ViewBase.call(self, screen, changes, viewSettings)\r\n\r\n    // Entities //\r\n    const { candidateDnList, voterShapeList } = entities\r\n\r\n    const voterRendererList = new VoterRendererList(voterShapeList)\r\n    const canDnRendererList = new CandidateDnRendererList(candidateDnList)\r\n\r\n    // Strategies //\r\n\r\n    let vizSample\r\n    function enterStrategy() {\r\n        const doDensity = true // TODO : make into an option, perhaps\r\n        const { dimensions } = simOptions\r\n        const VizSampleDensity = (dimensions === 1)\r\n            ? VizSampleDensity1D\r\n            : VizSampleDensity2D\r\n        const VizSampleStrat = (doDensity) ? VizSampleDensity : VizSample\r\n        vizSample = new VizSampleStrat(voterRendererList, canDnRendererList, screen, changes, simOptions)\r\n    }\r\n    enterStrategy()\r\n\r\n    // Main State Machine Functions //\r\n\r\n    self.enter = () => {\r\n        enterStrategy()\r\n    }\r\n\r\n    self.exit = () => {\r\n    }\r\n\r\n    self.update = (simData) => {\r\n        if (changes.check(['dimensions'])) {\r\n            self.exit()\r\n            self.enter()\r\n        }\r\n\r\n        // Update players. Run an election. Get result. Visualize result.\r\n        // The election handles any changes.\r\n        // The samplingResult communicates how to visualize the election.\r\n\r\n        const { samplingResult } = simData\r\n        vizSample.update(samplingResult)\r\n\r\n        const { pointsChanged } = samplingResult\r\n\r\n        if (pointsChanged) {\r\n            self.clear()\r\n            self.render()\r\n        }\r\n    }\r\n\r\n    self.render = () => {\r\n        vizSample.render()\r\n    }\r\n    self.clear = () => {\r\n        screen.clear()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport VoterRender1D from './VoterRender1D.js'\r\nimport VoterRender2D from './VoterRender2D.js'\r\n\r\n/**\r\n * Show Voters\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {screen} screen - draw to the screen\r\n * @constructor\r\n */\r\nexport default function VizSample(voterRendererList, canDnRendererList, screen, changes, simOptions) {\r\n    const self = this\r\n\r\n    // Candidates //\r\n\r\n    // buffer canvas\r\n    const canvas2 = document.createElement('canvas')\r\n    canvas2.width = screen.width\r\n    canvas2.height = screen.height\r\n    const context2 = canvas2.getContext('2d')\r\n\r\n    const { dimensions } = simOptions\r\n\r\n    // voter renderer factory //\r\n    const VoterRenderer = (dimensions === 1) ? VoterRender1D : VoterRender2D\r\n    voterRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n    canDnRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n\r\n    self.update = function (samplingResult) {\r\n        if (changes.checkAny()) {\r\n            self.start()\r\n        }\r\n\r\n        const {\r\n            pointsChanged, samplingPointsList, samplingPointsCount,\r\n        } = samplingResult\r\n\r\n        if (pointsChanged) {\r\n            // newPoints are jittered\r\n            const newPoints = addNewPoints(samplingPointsList, samplingPointsCount)\r\n            renderToBuffer(newPoints)\r\n        }\r\n    }\r\n\r\n    self.start = function () {\r\n        clearBuffer()\r\n    }\r\n\r\n    /** Add points with jitter */\r\n    function addNewPoints(samplingPointsList, samplingPointsCount) {\r\n        const jitterSize = 10\r\n\r\n        const newPoints = []\r\n        for (let i = 0; i < samplingPointsList.length; i++) {\r\n            const point = samplingPointsList[i]\r\n            const count = samplingPointsCount[i]\r\n\r\n            const [x, y] = point\r\n            for (let m = 0; m < count; m++) {\r\n                // add jitter\r\n                let winPoint\r\n                if (m === 0) {\r\n                    winPoint = [x, y]\r\n                } else if (dimensions === 1) {\r\n                    winPoint = [x + (Math.random() - 0.5) * jitterSize]\r\n                } else {\r\n                    winPoint = [\r\n                        x + (Math.random() - 0.5) * jitterSize,\r\n                        y + (Math.random() - 0.5) * jitterSize,\r\n                    ]\r\n                }\r\n                self.points.push(winPoint)\r\n                newPoints.push(winPoint)\r\n            }\r\n        }\r\n        return newPoints\r\n    }\r\n\r\n    self.render = () => {\r\n        self.renderCans()\r\n\r\n        voterRendererList.render()\r\n        canDnRendererList.render()\r\n    }\r\n\r\n    self.renderCans = function () {\r\n        if (screen.noBuffers) {\r\n            noBufferRender()\r\n        } else {\r\n            bufferRender()\r\n        }\r\n    }\r\n\r\n    function clearBuffer() {\r\n        context2.clearRect(0, 0, canvas2.width, canvas2.height)\r\n    }\r\n\r\n    function renderToBuffer(newPoints) {\r\n        const ctx = context2\r\n        renderPoints(ctx, newPoints)\r\n    }\r\n\r\n    function renderPoints(ctx, newPoints) {\r\n        ctx.fillStyle = 'grey'\r\n        const n = newPoints.length\r\n        for (let i = 0; i < n; i++) {\r\n            const [x, y0] = newPoints[i]\r\n            // dot\r\n            ctx.beginPath()\r\n            const y = (dimensions === 1)\r\n                ? Math.random() * 100 + 0\r\n                : y0\r\n            ctx.arc(x, y, 2, 0, 2 * Math.PI)\r\n            ctx.fill()\r\n        }\r\n    }\r\n\r\n    function bufferRender() {\r\n        const { ctx } = screen\r\n        ctx.drawImage(canvas2, 0, 0)\r\n    }\r\n\r\n    // use this if we want to export to an SVG\r\n    function noBufferRender() {\r\n        const { ctx } = screen\r\n        renderPoints(ctx, self.points)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport VoterRender1D from './VoterRender1D.js'\r\nimport VoterRender2D from './VoterRender2D.js'\r\n\r\n/**\r\n * Show Voters\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {screen} screen - draw to the screen\r\n * @constructor\r\n */\r\n// eslint-disable-next-line max-len\r\nexport default function VizSampleDensity1D(voterRendererList, canDnRendererList, screen, changes, simOptions) {\r\n    const self = this\r\n\r\n    // adjustable visual parameters\r\n    const kw = 20\r\n    const ikw = 1 / kw\r\n\r\n    // sum and total density\r\n    const { width } = screen\r\n    const sum = Array(width).fill(0)\r\n    let total = 0\r\n\r\n    const { dimensions } = simOptions\r\n\r\n    // voter renderer factory //\r\n    const VoterRenderer = (dimensions === 1) ? VoterRender1D : VoterRender2D\r\n    voterRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n    canDnRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n\r\n    self.update = function (samplingResult) {\r\n        if (changes.checkAny()) {\r\n            start()\r\n        }\r\n\r\n        const { pointsChanged, samplingPointsList, samplingPointsCount } = samplingResult\r\n\r\n        if (pointsChanged) {\r\n            updatePoints(samplingPointsList, samplingPointsCount)\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        sum.fill(0)\r\n        total = 0\r\n    }\r\n\r\n    const kernelsize = 4 / 3\r\n    function updatePoints(samplingPointsList, samplingPointsCount) {\r\n        // add to sum for each point\r\n        const nk = samplingPointsList.length\r\n        for (let k = 0; k < nk; k++) {\r\n            const x = samplingPointsList[k][0]\r\n            const count = samplingPointsCount[k]\r\n            for (let i = 0; i < width; i++) {\r\n                sum[i] += kernel(i - x) * count\r\n            }\r\n            total += kernelsize * count\r\n        }\r\n    }\r\n\r\n    function kernel(x) {\r\n        if (x > kw || x < -kw) return 0\r\n        return (1 - (x * ikw) ** 2) * ikw\r\n    }\r\n\r\n    self.render = () => {\r\n        renderCans()\r\n\r\n        voterRendererList.render()\r\n        canDnRendererList.render()\r\n    }\r\n\r\n    function renderCans() {\r\n        const { ctx } = screen\r\n        ctx.save()\r\n\r\n        ctx.beginPath()\r\n        doPath(ctx)\r\n        ctx.strokeStyle = '#ccc'\r\n        ctx.stroke()\r\n        ctx.fillStyle = '#ccc'\r\n        ctx.fill()\r\n\r\n        ctx.restore()\r\n    }\r\n\r\n    const h = 100\r\n    const middle = 150\r\n    function doPath(ctx) {\r\n        const norm = 1 / total\r\n\r\n        const amp = h * 100\r\n        const bottom = middle + h * 0.5\r\n        // start bottom left\r\n        ctx.moveTo(0, bottom)\r\n        const pa = []\r\n        for (let i = 0; i <= width; i += 1) {\r\n            const y = bottom - amp * sum[i] * norm\r\n            pa.push(y)\r\n            ctx.lineTo(i, y)\r\n        }\r\n        // end bottom right\r\n        ctx.lineTo(screen.width, bottom)\r\n        ctx.lineTo(0, bottom)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { range } from '@paretoman/votekit-utilities'\r\nimport { contourDensity } from 'd3-contour'\r\nimport { geoPath } from 'd3-geo'\r\n\r\nimport VoterRender1D from './VoterRender1D.js'\r\nimport VoterRender2D from './VoterRender2D.js'\r\n\r\n/**\r\n * Show Voters\r\n * @param {VoterRendererList} voterRendererList\r\n * @param {screen} screen - draw to the screen\r\n * @constructor\r\n */\r\n// eslint-disable-next-line max-len\r\nexport default function VizSampleDensity2D(voterRendererList, canDnRendererList, screen, changes, simOptions) {\r\n    const self = this\r\n\r\n    // Candidates //\r\n\r\n    const { dimensions } = simOptions\r\n\r\n    // voter renderer factory //\r\n    const VoterRenderer = (dimensions === 1) ? VoterRender1D : VoterRender2D\r\n    voterRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n    canDnRendererList.setRenderer((voterShape) => new VoterRenderer(voterShape, screen))\r\n\r\n    const pointsList = []\r\n    const pointCounts = []\r\n    let totalCount\r\n\r\n    self.update = function (samplingResult) {\r\n        if (changes.checkAny()) {\r\n            start()\r\n        }\r\n        const { pointsChanged, samplingPointsList, samplingPointsCount } = samplingResult\r\n\r\n        if (pointsChanged) {\r\n            self.updatePoints(samplingPointsList, samplingPointsCount)\r\n            self.updateDensity()\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        pointsList.splice(0, pointsList.length)\r\n        pointCounts.splice(0, pointCounts.length)\r\n        totalCount = 0\r\n    }\r\n\r\n    self.render = () => {\r\n        self.renderCans()\r\n\r\n        voterRendererList.render()\r\n        canDnRendererList.render()\r\n    }\r\n\r\n    self.updatePoints = function (samplingPointsList, samplingPointsCount) {\r\n        for (let i = 0; i < samplingPointsList.length; i++) {\r\n            const point = samplingPointsList[i]\r\n            const count = samplingPointsCount[i]\r\n            pointsList.push(point)\r\n            pointCounts.push(count)\r\n            totalCount += count\r\n        }\r\n    }\r\n\r\n    const nThresholds = 20\r\n    let densityData\r\n    self.updateDensity = () => {\r\n        const btw = totalCount / 10000\r\n        const thresholds = range(nThresholds).map((x) => x * btw)\r\n        const cd = contourDensity()\r\n            .x((d) => d[0])\r\n            .y((d) => d[1])\r\n            .weight((d, i) => pointCounts[i])\r\n            .bandwidth(10)\r\n            .thresholds(thresholds)\r\n        densityData = cd(pointsList)\r\n    }\r\n\r\n    self.renderCans = () => {\r\n        const { ctx } = screen\r\n        const { darkMode } = screen.common\r\n        const gg = geoPath()\r\n            .context(ctx)\r\n\r\n        ctx.save()\r\n\r\n        ctx.lineWidth = 0.5\r\n        ctx.strokeStyle = '#aaa'\r\n        const alpha = 1\r\n        const nd = densityData.length\r\n        for (let i = 0; i < nd; i++) {\r\n            const col = 255 - i * (200 / nThresholds)\r\n            // 33 is #222, otherwise there is noise TODO: fix this workaround. Try to take out 33.\r\n            const co = (darkMode) ? 255 - col + 33 : col\r\n            ctx.fillStyle = `rgba(${co},${co},${co}, ${alpha})`\r\n            ctx.beginPath()\r\n            gg(densityData[i])\r\n            // ctx.stroke()\r\n            ctx.fill()\r\n        }\r\n        ctx.restore()\r\n    }\r\n}\r\n","import {max, ticks} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport {blurX, blurY} from \"./blur.js\";\nimport constant from \"./constant.js\";\nimport Contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function grid(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k);\n\n    data.forEach(function(d, i, data) {\n      var xi = (x(d, i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    return values0;\n  }\n\n  function density(data) {\n    var values = grid(data),\n        tz = threshold(values),\n        pow4k = Math.pow(2, 2 * k);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);\n    }\n\n    return Contours()\n        .size([n, m])\n        .thresholds(tz.map(d => d * pow4k))\n      (values)\n        .map((c, i) => (c.value = +tz[i], transform(c)));\n  }\n\n  density.contours = function(data) {\n    var values = grid(data),\n        contours = Contours().size([n, m]),\n        pow4k = Math.pow(2, 2 * k),\n        contour = value => {\n          value = +value;\n          var c = transform(contours.contour(values, value * pow4k));\n          c.value = value; // preserve exact threshold value\n          return c;\n        };\n    Object.defineProperty(contour, \"max\", {get: () => max(values) / pow4k});\n    return contour;\n  };\n\n  function transform(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\n","// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurX(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var j = 0; j < m; ++j) {\n    for (var i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source.data[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source.data[i - w + j * n];\n        }\n        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurY(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source.data[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source.data[i + (j - w) * n];\n        }\n        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n","export default x => () => x;\n","import {extent, thresholdSturges, ticks, tickStep} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport ascending from \"./ascending.js\";\nimport area from \"./area.js\";\nimport constant from \"./constant.js\";\nimport contains from \"./contains.js\";\nimport noop from \"./noop.js\";\n\nvar cases = [\n  [],\n  [[[1.0, 1.5], [0.5, 1.0]]],\n  [[[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [0.5, 1.0]]],\n  [[[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 0.5], [1.0, 1.5]]],\n  [[[1.0, 0.5], [0.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 0.5]]],\n  [[[1.0, 1.5], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.5, 1.0]]],\n  [[[1.0, 1.5], [1.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 1.5]]],\n  []\n];\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      threshold = thresholdSturges,\n      smooth = smoothLinear;\n\n  function contours(values) {\n    var tz = threshold(values);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      const e = extent(values), ts = tickStep(e[0], e[1], tz);\n      tz = ticks(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);\n    } else {\n      tz = tz.slice().sort(ascending);\n    }\n\n    return tz.map(value => contour(values, value));\n  }\n\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n  function contour(values, value) {\n    var polygons = [],\n        holes = [];\n\n    isorings(values, value, function(ring) {\n      smooth(ring, values, value);\n      if (area(ring) > 0) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\n          polygon.push(hole);\n          return;\n        }\n      }\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      value: value,\n      coordinates: polygons\n    };\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = new Array,\n        fragmentByEnd = new Array,\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = values[0] >= value;\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = values[x + 1] >= value;\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = values[y * dx + dx] >= value;\n      t2 = values[y * dx] >= value;\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(function(point) {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v0,\n          v1 = values[yt * dx + xt];\n      if (x > 0 && x < dx && xt === x) {\n        v0 = values[yt * dx + xt - 1];\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n      }\n      if (y > 0 && y < dy && yt === y) {\n        v0 = values[(yt - 1) * dx + xt];\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n      }\n    });\n  }\n\n  contours.contour = contour;\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n","export default function extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","import count from \"../count.js\";\n\nexport default function thresholdSturges(values) {\n  return Math.max(1, Math.ceil(Math.log(count(values)) / Math.LN2) + 1);\n}\n","export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n","export default function(a, b) {\n  return a - b;\n}\n","export default function(ring) {\n  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area;\n}\n","export default function(ring, hole) {\n  var i = -1, n = hole.length, c;\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n  return 0;\n}\n\nfunction ringContains(ring, point) {\n  var x = point[0], y = point[1], contains = -1;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n    if (segmentContains(pi, pj, point)) return 0;\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n  }\n  return contains;\n}\n\nfunction segmentContains(a, b, c) {\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\n\nfunction collinear(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction within(p, q, r) {\n  return p <= q && q <= r || r <= q && q <= p;\n}\n","export default function() {}\n","import identity from \"../identity.js\";\nimport stream from \"../stream.js\";\nimport pathArea from \"./area.js\";\nimport pathBounds from \"./bounds.js\";\nimport pathCentroid from \"./centroid.js\";\nimport PathContext from \"./context.js\";\nimport pathMeasure from \"./measure.js\";\nimport PathString from \"./string.js\";\n\nexport default function(projection, context) {\n  let digits = 3,\n      pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    if (!arguments.length) return projection;\n    projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream;\n    return path;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString(digits)) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  path.digits = function(_) {\n    if (!arguments.length) return digits;\n    if (_ == null) digits = null;\n    else {\n      const d = Math.floor(_);\n      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);\n      digits = d;\n    }\n    if (context === null) contextStream = new PathString(digits);\n    return path;\n  };\n\n  return path.projection(projection).digits(digits).context(context);\n}\n","export default x => x;\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import {Adder} from \"d3-array\";\nimport {abs} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar areaSum = new Adder(),\n    areaRingSum = new Adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum = new Adder();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum = new Adder();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math.js\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import {Adder} from \"d3-array\";\nimport {sqrt} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar lengthSum = new Adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum = new Adder();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","// Simple caching for constant-radius points.\nlet cacheDigits, cacheAppend, cacheRadius, cacheCircle;\n\nexport default class PathString {\n  constructor(digits) {\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n  pointRadius(_) {\n    this._radius = +_;\n    return this;\n  }\n  polygonStart() {\n    this._line = 0;\n  }\n  polygonEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line === 0) this._ += \"Z\";\n    this._point = NaN;\n  }\n  point(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._append`M${x},${y}`;\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._append`L${x},${y}`;\n        break;\n      }\n      default: {\n        this._append`M${x},${y}`;\n        if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n          const r = this._radius;\n          const s = this._;\n          this._ = \"\"; // stash the old string so we can cache the circle path fragment\n          this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;\n          cacheRadius = r;\n          cacheAppend = this._append;\n          cacheCircle = this._;\n          this._ = s;\n        }\n        this._ += cacheCircle;\n        break;\n      }\n    }\n  }\n  result() {\n    const result = this._;\n    this._ = \"\";\n    return result.length ? result : null;\n  }\n}\n\nfunction append(strings) {\n  let i = 1;\n  this._ += strings[0];\n  for (const j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  const d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  if (d !== cacheDigits) {\n    const k = 10 ** d;\n    cacheDigits = d;\n    cacheAppend = function append(strings) {\n      let i = 1;\n      this._ += strings[0];\n      for (const j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n  return cacheAppend;\n}\n","/** @module */\r\n\r\nimport CandidateDnRenderer from './CandidateDnRenderer.js'\r\n\r\n/**\r\n * A simple list of candidateDnRenderer instances.\r\n * It really just passes along function calls to each member of the list.\r\n * It also checks if that member exists. Alternatively, it was deleted.\r\n */\r\nexport default function CandidateDnRendererList(candidateDnList) {\r\n    const self = this\r\n\r\n    const list = []\r\n    self.rendererMaker = () => ({ render: () => {} })\r\n\r\n    // Subscribe to Sim //\r\n    candidateDnList.attachNewE(self)\r\n    self.updateNewE = (candidateDn) => {\r\n        self.newCandidateDn(candidateDn)\r\n    }\r\n\r\n    // Data Setters and Getters //\r\n\r\n    self.newCandidateDn = function (candidateDn) {\r\n        const canDnRenderer = new CandidateDnRenderer(candidateDn)\r\n        list.push(canDnRenderer)\r\n        canDnRenderer.setRenderer(self.rendererMaker)\r\n    }\r\n\r\n    // get sim entities that exist\r\n    self.getCanDnRenderers = () => {\r\n        const a = list.filter((canDnRenderer) => canDnRenderer.canDn.exists)\r\n        return a\r\n    }\r\n\r\n    // get the underlying entities of the above\r\n    self.getCandidateDistributions = () => {\r\n        const canDnRenderersEx = self.getCanDnRenderers()\r\n        return canDnRenderersEx.map((canDnRenderer) => canDnRenderer.canDn)\r\n    }\r\n    self.getCandidateDistributionsAll = () => list.map((canDnRenderer) => canDnRenderer.canDn)\r\n\r\n    // Update //\r\n\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.rendererMaker = rendererMaker\r\n        list.forEach((canDnRenderer) => canDnRenderer.setRenderer(rendererMaker))\r\n    }\r\n\r\n    // Render //\r\n\r\n    self.render = () => {\r\n        list.forEach((canDnRenderer) => {\r\n            if (canDnRenderer.canDn.exists) canDnRenderer.renderer.render()\r\n        })\r\n    }\r\n}\r\n","export default function CandidateDnRenderer(candidateDn) {\r\n    const self = this\r\n\r\n    self.canDn = candidateDn\r\n\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.renderer = rendererMaker(candidateDn)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport Screen from '../screen/Screen.js'\r\nimport DistrictMapViz from '../viz/DistrictMapViz.js'\r\n\r\n/**\r\n * Show votes\r\n * @constructor\r\n */\r\nexport default function ViewDistrictMaps(entities, screenCommon, layout, changes, simOptions, electionOptionsMan, viewMode) {\r\n    const self = this\r\n\r\n    viewMode.viewModes.one.attach(self)\r\n\r\n    const screen = new Screen(screenCommon, viewMode, layout, 'maps')\r\n    const { height } = screenCommon\r\n    screen.setHeight(height / 3)\r\n    screen.hide()\r\n\r\n    const districtMapViz = new DistrictMapViz(entities.candidateList, screen, electionOptionsMan, simOptions, changes)\r\n    let flagNoRender = false\r\n\r\n    self.enter = () => {\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        if (optionsBag.useGeography) {\r\n            screen.show()\r\n        }\r\n    }\r\n    self.exit = () => {\r\n        screen.hide()\r\n    }\r\n\r\n    self.update = function (simData) {\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        if (changes.check(['numDistricts', 'numTracts'])) {\r\n            if (optionsBag.useGeography) {\r\n                screen.show()\r\n            } else {\r\n                screen.hide()\r\n            }\r\n        }\r\n        const sequenceResults = simData.geoResults.scResultsByDistrict[0]\r\n        const { error } = sequenceResults\r\n        if (error !== undefined) {\r\n            flagNoRender = true\r\n            return\r\n        }\r\n        flagNoRender = false\r\n\r\n        if (optionsBag.useGeography) {\r\n            districtMapViz.update(simData.geoResults)\r\n            self.clear()\r\n            self.render()\r\n        }\r\n    }\r\n\r\n    self.render = function () {\r\n        if (flagNoRender) return\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        if (optionsBag.useGeography) districtMapViz.render()\r\n    }\r\n    self.clear = () => {\r\n        screen.clear()\r\n    }\r\n    self.draw = () => {\r\n        self.clear()\r\n        self.render()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport DistrictDraw from './DistrictDraw.js'\r\nimport districtColors from './DistrictColors.js'\r\nimport MapOfTracts from './MapOfTracts.js'\r\n\r\n/**\r\n * Show votes\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function DistrictMapViz(candidateList, screen, electionOptionsMan, simOptions, changes) {\r\n    const self = this\r\n\r\n    let districtMap\r\n    // Update //\r\n\r\n    self.update = (districtElectionResults) => {\r\n        const { geography } = districtElectionResults.geometry\r\n        districtMap = geography.districtMap\r\n\r\n        // todo: make this only run when we have new districts\r\n        if (self.districtDraw === undefined || changes.check(['numTracts'])) {\r\n            self.districtDraw = new DistrictDraw(screen)\r\n            // Code that handles making images of geographic noise.\r\n            self.mapOfTracts = new MapOfTracts(geography.nx, geography.ny, screen)\r\n        }\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        const gc = districtColors(districtElectionResults, candidateList, optionsBag, simOptions)\r\n        const { colorByTract, colorOfVoteByDistrict, colorOfWinsByDistrict } = gc\r\n        self.colorOfVoteByDistrict = colorOfVoteByDistrict\r\n        self.winnerColors = colorOfWinsByDistrict\r\n        self.mapOfTracts.loadColors(colorByTract)\r\n    }\r\n\r\n    // Display //\r\n\r\n    const districtMapWidth = 100\r\n    const districtMapHeight = 100\r\n\r\n    // screen.setMapsHeight((1 / 3) * screen.height)\r\n    /** Render all maps and  */\r\n    self.render = () => {\r\n        self.renderTractVotes()\r\n        self.renderDistrictWins()\r\n        self.renderDistrictVotes()\r\n    }\r\n    // Render census tract votes.\r\n    self.renderTractVotes = () => {\r\n        self.mapOfTracts.render(districtMapWidth, districtMapHeight)\r\n        self.districtDraw.renderVoronoi(districtMap, districtMapWidth, districtMapHeight)\r\n    }\r\n    // Render district wins.\r\n    self.renderDistrictWins = () => {\r\n        const { renderVoronoiColors } = self.districtDraw\r\n        renderVoronoiColors(districtMap, 200, 0, districtMapWidth, districtMapHeight, self.winnerColors)\r\n    }\r\n    // render district votes.\r\n    self.renderDistrictVotes = () => {\r\n        const { renderVoronoiColors } = self.districtDraw\r\n        renderVoronoiColors(districtMap, 100, 0, districtMapWidth, districtMapHeight, self.colorOfVoteByDistrict)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { drawStrokedColor } from '@paretoman/votekit-graphics'\r\n/**\r\n * Draws district boundaries.\r\n * Right now, just for a uniform square geography.\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function DistrictDraw(screen) {\r\n    const self = this\r\n\r\n    /**\r\n     * Define district lines and count demographics.\r\n     * @param {Number} nx - number of voter cells in x\r\n     * @param {Number} ny - number of voter cells in y\r\n     * @param {Number} nd - number of districts.\r\n     */\r\n\r\n    /**\r\n     * Draw Voronoi cell boundaries.\r\n     * @param {Number} districtMapWidth - width of image\r\n     * @param {Number} districtMapHeight - height of image\r\n     */\r\n    self.renderVoronoi = (districtMap, districtMapWidth, districtMapHeight) => {\r\n        self.renderVoronoiGeneral(districtMap, 0, 0, districtMapWidth, districtMapHeight, null, renderAreaText)\r\n    }\r\n\r\n    self.renderVoronoiColors = (districtMap, x, y, districtMapWidth, districtMapHeight, colors) => {\r\n        self.renderVoronoiGeneral(districtMap, x, y, districtMapWidth, districtMapHeight, colors, undefined)\r\n    }\r\n    /**\r\n     * Draw a Voronoi Diagram\r\n     * @param {Number} x - translate image\r\n     * @param {Number} y - translate image\r\n     * @param {Number} districtMapWidth - width of image\r\n     * @param {Number} districtMapHeight - height of image\r\n     * @param {string[]} colors - an option, say \"null\" if do not want colors\r\n     * @param {Function} textFunction - an option, defaults to undefined\r\n     */\r\n    self.renderVoronoiGeneral = (districtMap, x, y, districtMapWidth, districtMapHeight, colors, textFunction) => {\r\n        const { ctx } = screen\r\n        const { voronoi, nd } = districtMap\r\n        ctx.save()\r\n        const scaleX = districtMapWidth\r\n        const scaleY = districtMapHeight\r\n        ctx.translate(x, y)\r\n        ctx.scale(scaleX, scaleY)\r\n        for (let i = 0; i < nd; i++) {\r\n            ctx.beginPath()\r\n            ctx.strokeStyle = '#333'\r\n            ctx.lineWidth = 1 / scaleX\r\n            voronoi.renderCell(i, ctx)\r\n            if (colors !== null) { // option\r\n                ctx.fillStyle = colors[i]\r\n                ctx.fill()\r\n            }\r\n            ctx.stroke()\r\n            if (textFunction !== undefined) textFunction(districtMap, i) // option\r\n        }\r\n        ctx.restore()\r\n    }\r\n\r\n    function renderAreaText(districtMap, i) {\r\n        const { ctx } = screen\r\n        const { centroids, polygonAreas } = districtMap\r\n        const c = centroids[i]\r\n        const textHeight = 0.1\r\n        // const areaText = textPercent(polygonAreas[i] / (districtMap.totalArea))\r\n        const area = polygonAreas[i]\r\n        const area1000 = area * 1000\r\n        const areaText = area1000.toFixed(0)\r\n        drawStrokedColor(areaText, c[0], c[1] + textHeight * 0.5, textHeight, 0.2, '#222', 1, ctx)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport colorBlender, { rgbToString } from './colorBlender.js'\r\nimport getResultsPhaseOptions from '../phase/getResultsPhaseOptions.js'\r\nimport getTallyFractions from './getTallyFractions.js'\r\n\r\nexport default function districtColors(districtElectionResults, candidateList, optionsBag, simOptions) {\r\n    const {\r\n        votesByTract,\r\n        votesByDistrict,\r\n        scResultsByDistrict,\r\n    } = districtElectionResults\r\n\r\n    const canList = candidateList.getEntities()\r\n\r\n    const colorByTract = colorTracts(votesByTract, canList)\r\n    const colorOfWinsByDistrict = colorDistrictWins(scResultsByDistrict, canList, optionsBag, simOptions)\r\n    const colorOfVoteByDistrict = colorDistrictVote(votesByDistrict, canList)\r\n\r\n    const gc = {\r\n        colorByTract,\r\n        colorOfVoteByDistrict,\r\n        colorOfWinsByDistrict,\r\n    }\r\n    return gc\r\n}\r\n\r\nfunction colorTracts(votesByTract, canList) {\r\n    // get color\r\n    const colorSet = canList.map((can) => can.colorRGBA)\r\n    const colorByTract = votesByTract.map(\r\n        (row) => row.map(\r\n            (votes) => {\r\n                const tallyFractions = getTallyFractions(votes)\r\n                const color = colorBlender(tallyFractions, colorSet)\r\n                return color\r\n            },\r\n        ),\r\n    )\r\n    return colorByTract\r\n}\r\n\r\nfunction colorDistrictWins(scResultsByDistrict, canList, optionsBag, simOptions) {\r\n    // calculate color for win map\r\n    let colorOfWinsByDistrict\r\n\r\n    const resultsPhaseOptions = getResultsPhaseOptions(optionsBag, simOptions)\r\n    const { socialChoiceType } = resultsPhaseOptions\r\n\r\n    if (socialChoiceType === 'singleWinner') {\r\n        colorOfWinsByDistrict = scResultsByDistrict.map(\r\n            (socialChoiceResults) => canList[socialChoiceResults.iWinner].color,\r\n        )\r\n    } else {\r\n        const colorSet = canList.map((can) => can.colorRGBA)\r\n        colorOfWinsByDistrict = scResultsByDistrict.map(\r\n            (socialChoiceResults) => {\r\n                const { allocation } = socialChoiceResults\r\n                const sum = allocation.reduce((p, c) => p + c)\r\n                const fractions = allocation.map((x) => x / sum)\r\n                const color = rgbToString(colorBlender(fractions, colorSet))\r\n                return color\r\n            },\r\n        )\r\n    }\r\n    return colorOfWinsByDistrict\r\n}\r\n\r\n/**\r\n * Update color for each district, based on votes for each candidate.\r\n * Blend candidate colors in proportion to their votes.\r\n * @param {Candidate[]} canList - An array of Candidate objects.\r\n * @returns {String[]} - List of color strings indexed by district.\r\n */\r\nfunction colorDistrictVote(votesByDistrict, canList) {\r\n    const colorOfVoteByDistrict = votesByDistrict.map((votes) => {\r\n        const tallyFractions = getTallyFractions(votes)\r\n        const colorSet = canList.map((can) => can.colorRGBA)\r\n        const color = rgbToString(colorBlender(tallyFractions, colorSet))\r\n        return color\r\n    })\r\n    return colorOfVoteByDistrict\r\n}\r\n","import getMinimaxScore from \"./getMinimaxScore.js\"\r\n\r\n/** Look for candidateTallies with fractions and pick one. Right now, this is easy. */\r\nexport default function getTallyFractions(votes, socialChoiceMethod) {\r\n    const { candidateTallies } = votes\r\n\r\n    if (candidateTallies.bordaFractionAverageByCan) {\r\n        if (socialChoiceMethod === 'minimax') {\r\n            const {winFractionPairwise} = votes.pairwiseTallies\r\n            const minimaxScore = getMinimaxScore(winFractionPairwise)\r\n            return minimaxScore\r\n        }\r\n        return candidateTallies.bordaFractionAverageByCan\r\n    }\r\n\r\n    if (candidateTallies.voteFractionsByCan) {\r\n        return candidateTallies.voteFractionsByCan\r\n    }\r\n\r\n    if (candidateTallies.firstPreferenceFractions) {\r\n        return candidateTallies.firstPreferenceFractions\r\n    }\r\n\r\n    if (candidateTallies.scoreFractionAverageByCan) {\r\n        return candidateTallies.scoreFractionAverageByCan\r\n    }\r\n\r\n    return null\r\n}\r\n","export default function getMinimaxScore(winFractionPairwise) {\r\n    const nk = winFractionPairwise.length\r\n    const minimaxScore = []\r\n    for (let k = 0; k < nk ; k++) {\r\n        const pairs = winFractionPairwise[k]\r\n        let min = 1\r\n        for (let i = 0; i < nk; i++) {\r\n            if( i === k ) continue\r\n            const p = pairs[i]\r\n            if (p < min) {\r\n                min = p\r\n            }\r\n        }\r\n        minimaxScore.push(min)\r\n    }\r\n    return minimaxScore\r\n}","/** @module */\r\n\r\n/**\r\n * Draws a map of the geographical tracts, or anything really.\r\n * @param {Number} nx - Width in pixels\r\n * @param {Number} ny - Height in pixels\r\n * @param {Screen} screen - Draw here.\r\n * @constructor\r\n */\r\nexport default function MapOfTracts(nx, ny, screen) {\r\n    const self = this\r\n\r\n    /*\r\n        Makes your pixel manip on an off-screen canvas\r\n        Returns the off-screen canvas\r\n        */\r\n\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = nx\r\n    canvas.height = ny\r\n    const offCtx = canvas.getContext('2d')\r\n    const imageData = offCtx.createImageData(nx, ny)\r\n\r\n    // not used anymore\r\n    self.load = (sn) => {\r\n        const { data } = imageData\r\n\r\n        for (let x = 0; x < nx; x++) {\r\n            for (let y = 0; y < ny; y++) {\r\n                const r = sn[x][y][0] + 0.5\r\n                const g = sn[x][y][1] + 0.5\r\n                data[(x + y * nx) * 4 + 0] = r * 255\r\n                data[(x + y * nx) * 4 + 1] = (r + g) * 200\r\n                data[(x + y * nx) * 4 + 2] = g * 200\r\n                data[(x + y * nx) * 4 + 3] = 255\r\n            }\r\n        }\r\n\r\n        offCtx.putImageData(imageData, 0, 0)\r\n    }\r\n\r\n    self.loadColors = (colors) => {\r\n        const { data } = imageData\r\n\r\n        for (let y = 0; y < ny; y++) {\r\n            for (let x = 0; x < nx; x++) {\r\n                const color = colors[x][y]\r\n                const [r, g, b] = color\r\n                data[(x + y * nx) * 4 + 0] = r\r\n                data[(x + y * nx) * 4 + 1] = g\r\n                data[(x + y * nx) * 4 + 2] = b\r\n                data[(x + y * nx) * 4 + 3] = 255\r\n            }\r\n        }\r\n\r\n        offCtx.putImageData(imageData, 0, 0)\r\n    }\r\n\r\n    self.render = (renderWidth, renderHeight) => {\r\n        const { ctx } = screen\r\n        ctx.save()\r\n        ctx.imageSmoothingEnabled = false\r\n        ctx.drawImage(canvas, 0, 0, renderWidth, renderHeight)\r\n        ctx.restore()\r\n    }\r\n    // Draw simplex noise\r\n    // https://codepen.io/jwagner/pen/BNmpdm/?editors=0010\r\n    // Scale image\r\n    // https://stackoverflow.com/a/48858621\r\n}\r\n","/** @module */\r\n\r\nimport voteCasters from '@paretoman/votekit-vote-casters'\r\nimport { getTestGeometry } from '@paretoman/votekit-sim'\r\nimport CandidateViewList from '../vizCandidates/CandidateViewList.js'\r\nimport VoterViewList from '../vizVoters/VoterViewList.js'\r\nimport ViewBase from './ViewBase.js'\r\nimport TestVoterView from '../vizTestVoter/TestVoterView.js'\r\nimport getResultsPhaseOptions from '../phase/getResultsPhaseOptions.js'\r\nimport updateCandidateStatistics from './updateCandidateStatistics.js'\r\n\r\n/**\r\n * Draw entities: voters, candidates, test voters.\r\n * @param {Screen} screen\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {ViewSettings} viewSettings\r\n * @constructor\r\n */\r\nexport default function ViewEntitiesOne(entities, screen, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings, viewChanges) {\r\n    const self = this\r\n\r\n    viewMode.viewModes.one.attach(self)\r\n\r\n    ViewBase.call(self, screen, changes, viewSettings)\r\n\r\n    const { candidateList, voterShapeList } = entities\r\n\r\n    // Entities //\r\n    const candidateViewList = new CandidateViewList(viewSettings, candidateList, screen, simOptions, electionOptionsMan)\r\n    const voterViewList = new VoterViewList(viewSettings, voterShapeList, screen, simOptions, electionOptionsMan)\r\n    candidateViewList.attachNewG(self.dragm)\r\n    voterViewList.attachNewG(self.dragm)\r\n\r\n    self.testVoterView = new TestVoterView(screen, simOptions, self, viewSettings)\r\n\r\n    // Main State Machine Functions //\r\n\r\n    self.exit = () => {\r\n        candidateViewList.unsetCandidateWins()\r\n        self.testVoterView.testVoter.doSetCommand.exists(0)\r\n    }\r\n\r\n    self.update = (simData) => {\r\n        if (changes.checkNone()) return\r\n\r\n        if (changes.check(['dimensions'])) {\r\n            self.exit()\r\n            self.enter()\r\n        }\r\n\r\n        if (changes.check(['draggables', 'dimensions', 'mode'])) {\r\n            voterViewList.updateViewXY()\r\n            candidateViewList.updateViewXY()\r\n            self.testVoterView.graphic.updateViewXY()\r\n        }\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n        updateCandidateStatistics(candidateViewList, simData, simOptions, optionsBag)\r\n\r\n        self.testVoteView()\r\n\r\n        self.clearForeground()\r\n        self.renderForeground()\r\n    }\r\n\r\n    // Test Point\r\n    self.clickEmpty = (p) => {\r\n        self.testVoterView.graphic.start(p)\r\n    }\r\n    self.testVoteView = () => {\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        const resultsPhaseOptions = getResultsPhaseOptions(optionsBag, simOptions)\r\n        const { voteCasterName } = resultsPhaseOptions\r\n\r\n        // todo: check this to see if it is correct. I'm not sure if a closed primary would work well here.\r\n        const testGeometry = getTestGeometry(self.testVoterView.testVoter, candidateList, simOptions)\r\n        const { canPoints, voterPoint, dimensions } = testGeometry\r\n        const verbosity = 3\r\n\r\n        const vote = voteCasters[voteCasterName].castPoint(canPoints, voterPoint, dimensions, verbosity)\r\n\r\n        self.testVoterView.graphic.update(vote, candidateList)\r\n        viewChanges.add(['testVote'])\r\n        return vote\r\n    }\r\n\r\n    self.renderForeground = () => {\r\n        voterViewList.renderForeground()\r\n        candidateViewList.renderForeground()\r\n        self.testVoterView.graphic.renderForeground()\r\n    }\r\n    self.clearForeground = () => {\r\n        screen.clearForeground()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport CandidateView from './CandidateView.js'\r\n\r\n/**\r\n *\r\n * A simple list of candidateView instances.\r\n * It passes along function calls to each member of the list.\r\n * It also checks if that member exists. Alternatively, it was deleted.\r\n * @constructor\r\n */\r\nexport default function CandidateViewList(viewSettings, candidateList, screen, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const canViews = []\r\n\r\n    // Publish to DraggableManager //\r\n    const observers = []\r\n    self.attachNewG = (o) => { observers.push(o) }\r\n    const updateObservers = (g) => { observers.forEach((o) => o.updateNewG(g)) }\r\n\r\n    // Subscribe to Sim //\r\n    candidateList.attachNewE(self)\r\n    self.updateNewE = (candidate) => {\r\n        self.newCandidate(candidate)\r\n    }\r\n\r\n    // Data Setters and Getters //\r\n    self.newCandidate = function (candidate) {\r\n        const canView = new CandidateView(candidate, screen, 21, 21, viewSettings, simOptions, electionOptionsMan)\r\n        canViews.push(canView)\r\n        updateObservers(canView)\r\n    }\r\n    self.getCanViews = () => canViews.filter((canView) => canView.candidate.exists)\r\n    self.getCandidates = () => {\r\n        const canViewsEx = self.getCanViews()\r\n        return canViewsEx.map((canView) => canView.candidate)\r\n    }\r\n    self.getCandidatesAll = () => canViews.map((canView) => canView.candidate)\r\n\r\n    // Update //\r\n\r\n    self.setCandidateFractions = (fractions) => {\r\n        const canViewsEx = self.getCanViews()\r\n        canViewsEx.forEach((canView, index) => {\r\n            const fraction = fractions[index]\r\n            canView.graphic.setFraction(fraction)\r\n        })\r\n    }\r\n    self.setCandidateWins = (winsByCandidate) => {\r\n        const canViewsEx = self.getCanViews()\r\n        canViewsEx.forEach((canView, index) => {\r\n            const win = winsByCandidate[index]\r\n            canView.graphic.setWins(win)\r\n        })\r\n    }\r\n    self.unsetCandidateWins = () => {\r\n        const nk = canViews.length\r\n        const fillUndefined = Array(nk).fill(undefined)\r\n        self.setCandidateWins(fillUndefined)\r\n    }\r\n    self.updateViewXY = () => {\r\n        canViews.forEach((canView) => canView.graphic.updateViewXY())\r\n    }\r\n\r\n    // Render //\r\n\r\n    self.renderForeground = () => {\r\n        if (viewSettings.showGhosts) {\r\n            self.renderForegroundAll()\r\n        } else {\r\n            self.renderForegroundExisting()\r\n        }\r\n    }\r\n    self.renderForegroundExisting = () => {\r\n        const canViewsEx = self.getCanViews()\r\n        canViewsEx.forEach((canView) => canView.graphic.renderForeground())\r\n    }\r\n    self.renderForegroundAll = () => {\r\n        canViews.forEach((canView) => canView.graphic.renderForeground())\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport CandidateGraphic from './CandidateGraphic.js'\r\n\r\n/**\r\n * CandidateView has functionality for a candidate that is specific to a view.\r\n * CandidateView has a candidate component.\r\n * The candidate component is a Candidate, for now.\r\n\r\n * @param {Candidate} candidate - a candidate component that CandidateView builds upon.\r\n * @constructor\r\n */\r\nexport default function CandidateView(candidate, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\r\n    const self = this\r\n    self.candidate = candidate\r\n\r\n    self.graphic = new CandidateGraphic(candidate, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan)\r\n}\r\n","import { drawStrokedColor, textPercent } from '@paretoman/votekit-graphics'\r\nimport tooltipForEntity from '../tooltips/tooltipForEntity.js'\r\nimport EntityGraphic from '../vizEntities/EntityGraphic.js'\r\nimport SquareGraphic from '../vizEntities/SquareGraphic.js'\r\nimport getResultsPhaseOptions from '../phase/getResultsPhaseOptions.js'\r\n\r\n// eslint-disable-next-line max-len\r\nexport default function CandidateGraphic(candidate, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const square = new SquareGraphic(self, candidate, wHandle, hHandle, screen)\r\n    self.square = square\r\n\r\n    EntityGraphic.call(self, candidate, simOptions)\r\n\r\n    self.fraction = 0\r\n    self.setFraction = function (fraction) {\r\n        self.fraction = fraction\r\n    }\r\n\r\n    self.wins = 0\r\n    self.setWins = (wins) => {\r\n        // animate the win or loss.\r\n        if (self.wins !== wins) {\r\n            if (wins > self.wins) {\r\n                square.win()\r\n            } else if (self.wins > wins) {\r\n                square.lose()\r\n            }\r\n        }\r\n        self.wins = wins\r\n    }\r\n\r\n    self.renderForeground = function () {\r\n        square.render()\r\n\r\n        const { exists, party } = candidate\r\n        const { x, y } = self\r\n\r\n        const { fctx } = screen\r\n        const { darkMode } = screen.common\r\n        const color = (darkMode) ? '#fff' : '#222'\r\n\r\n        // show minimal graphics when rendering as a ghost.\r\n        if (exists === 0) return\r\n\r\n        const y1 = y - square.h * 0.5 - 2\r\n        drawStrokedColor(textPercent(self.fraction), x, y1, 20, 2, color, 1, fctx)\r\n\r\n        if (self.wins !== undefined) {\r\n            const y2 = y + square.h * 0.5 + 20 + 2\r\n            drawStrokedColor(self.wins, x, y2, 20, 2, color, 1, fctx)\r\n        }\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        const resultsPhaseOptions = getResultsPhaseOptions(optionsBag, simOptions)\r\n        const { socialChoiceMethod } = resultsPhaseOptions\r\n\r\n        if (socialChoiceMethod === 'olprA') {\r\n            const x3 = x + square.w * 0.1\r\n            const y3 = y + 8\r\n            drawStrokedColor(`p${party}`, x3, y3, 13, 2, color, 1, fctx)\r\n        }\r\n    }\r\n\r\n    // Click Handler\r\n    self.click = () => {\r\n        tooltipForEntity(self, candidate, screen, viewSettings, simOptions)\r\n    }\r\n}\r\n","import { jcopy } from '@paretoman/votekit-utilities'\r\nimport { getStrategy } from '@paretoman/votekit-sim'\r\nimport tooltipBox from './tooltipBox.js'\r\n\r\nexport default function tooltipForEntity(graphic, entity, screen, viewSettings, simOptions, electionOptionsMan) {\r\n    // make a html box appear\r\n\r\n    const tbox = tooltipBox(graphic, screen)\r\n    const { box } = tbox\r\n\r\n    box.innerText = '- Properties -'\r\n\r\n    // Items //\r\n\r\n    const items = {}\r\n\r\n    items.exists = new Item(\r\n        'checkbox',\r\n        'Exists',\r\n        'Exists: ',\r\n        (val) => entity.doSetCommand.exists(val ? 1 : 0),\r\n        entity.exists === 1,\r\n    )\r\n    box.appendChild(items.exists.div)\r\n    const { dimensions } = simOptions\r\n    if (dimensions === 1) {\r\n        if (entity.shape1.w) {\r\n            items.w1 = new Item(\r\n                'range',\r\n                'Width',\r\n                'Width: ',\r\n                (val) => entity.doSetCommand.shape1w(val),\r\n                entity.shape1.w,\r\n            )\r\n            box.appendChild(items.w1.div)\r\n        }\r\n        if (entity.shape1.densityProfile) {\r\n            items.densityProfile1 = new Item(\r\n                'select',\r\n                'Density Profile',\r\n                'Density Profile: ',\r\n                (val) => entity.doSetCommand.shape1densityProfile(val),\r\n                entity.shape1.densityProfile,\r\n                { choices: ['step', 'gaussian'] },\r\n            )\r\n            box.appendChild(items.densityProfile1.div)\r\n        }\r\n    } else {\r\n        if (entity.shape2.w) {\r\n            items.w2 = new Item(\r\n                'range',\r\n                'Width',\r\n                'Width: ',\r\n                (val) => entity.doSetCommand.shape2w(val),\r\n                entity.shape2.w,\r\n            )\r\n            box.appendChild(items.w2.div)\r\n        }\r\n        if (entity.shape2.densityProfile) {\r\n            items.densityProfile2 = new Item(\r\n                'select',\r\n                'Density Profile',\r\n                'Density Profile: ',\r\n                (val) => entity.doSetCommand.shape2densityProfile(val),\r\n                entity.shape2.densityProfile,\r\n                { choices: ['step', 'gaussian'] },\r\n            )\r\n            box.appendChild(items.densityProfile2.div)\r\n        }\r\n    }\r\n    if (entity.doSetCommand.color !== undefined) {\r\n        items.color = new Item(\r\n            'color',\r\n            'Color',\r\n            'Color: ',\r\n            (val) => entity.doSetCommand.color(val),\r\n            entity.color,\r\n        )\r\n        box.appendChild(items.color.div)\r\n    }\r\n    if (entity.doSetCommand.party !== undefined) { // TODO: more parties, up to number of candidates etc\r\n        items.party = new Item(\r\n            'select',\r\n            'Party',\r\n            'Party: ',\r\n            (val) => entity.doSetCommand.party([Number(val)]),\r\n            entity.party,\r\n            { choices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] },\r\n        )\r\n        box.appendChild(items.party.div)\r\n    }\r\n    if (entity.doSetCommand.strategy !== undefined) {\r\n        // for each phase, we need to set properties of the strategy\r\n\r\n        const { sequenceName, sequences } = electionOptionsMan.getOptions().sequenceOptions\r\n        const { phases } = sequences[sequenceName]\r\n\r\n        items.strategyByPhase = {}\r\n\r\n        Object.keys(phases).forEach((phaseName) => {\r\n            const phase = phases[phaseName]\r\n            const { voteCasterName } = phase\r\n\r\n            const itemsForPhase = {}\r\n            items.strategyByPhase[phaseName] = itemsForPhase\r\n\r\n            const strategyList = getStrategy(entity.strategyRules, voteCasterName, phaseName)\r\n            const onlyOneStrategy = (strategyList.length === 1)\r\n            if (onlyOneStrategy) return\r\n\r\n            itemsForPhase.actionPDF1 = new Item(\r\n                'range',\r\n                'Action PDF 1',\r\n                '',\r\n                (val) => {\r\n                    const a0 = Number(val)\r\n                    const a1 = 1 - a0\r\n                    itemsForPhase.actionPDF1.input.value = a0\r\n                    itemsForPhase.actionPDF2.input.value = a1\r\n                    const actionPDF = [a0, a1]\r\n\r\n                    const strategyRules = jcopy(entity.strategyRules)\r\n                    const strategy = getStrategy(strategyRules, voteCasterName)\r\n                    for (let i = 0; i < actionPDF.length; i += 1) {\r\n                        strategy[i].actionWeight = actionPDF[i]\r\n                    }\r\n                    entity.doSetCommand.actionWeight(strategyRules)\r\n                },\r\n                strategyList[0].actionWeight,\r\n                { min: 0, max: 1, step: 0.01 },\r\n            )\r\n            itemsForPhase.actionPDF2 = new Item(\r\n                'range',\r\n                'Action PDF 2',\r\n                '',\r\n                (val) => {\r\n                    const a1 = Number(val)\r\n                    const a0 = 1 - a1\r\n                    itemsForPhase.actionPDF1.input.value = a0\r\n                    itemsForPhase.actionPDF2.input.value = a1\r\n                    const actionPDF = [a0, a1]\r\n\r\n                    const strategyRules = jcopy(entity.strategyRules)\r\n                    const strategy = getStrategy(strategyRules, voteCasterName)\r\n                    for (let i = 0; i < actionPDF.length; i += 1) {\r\n                        strategy[i].actionWeight = actionPDF[i]\r\n                    }\r\n                    entity.doSetCommand.actionWeight(strategyRules)\r\n                },\r\n                strategyList[1].actionWeight,\r\n                { min: 0, max: 1, step: 0.01 },\r\n            )\r\n\r\n            const choices = (voteCasterName === 'score') ? ['normalize', 'normalizeOverFrontrunners'] : ['closest', 'lesserEvil']\r\n\r\n            itemsForPhase.actionName1 = new Item(\r\n                'select',\r\n                'Action 1',\r\n                `${phaseName}: Strategy 1: `,\r\n                (val) => {\r\n                    const strategyRules = jcopy(entity.strategyRules)\r\n                    const strategy = getStrategy(strategyRules, voteCasterName)\r\n                    strategy[0].actionName = val\r\n                    entity.doSetCommand.strategy(strategyRules)\r\n                },\r\n                strategyList[0].actionName,\r\n                { choices },\r\n            )\r\n            itemsForPhase.actionName2 = new Item(\r\n                'select',\r\n                'Action 2',\r\n                `${phaseName}: Strategy 2: `,\r\n                (val) => {\r\n                    const strategyRules = jcopy(entity.strategyRules)\r\n                    const strategy = getStrategy(strategyRules, voteCasterName)\r\n                    strategy[1].actionName = val\r\n                    entity.doSetCommand.strategy(strategyRules)\r\n                },\r\n                strategyList[1].actionName,\r\n                { choices },\r\n            )\r\n            itemsForPhase.actionOptionThreshold = new Item(\r\n                'range',\r\n                'Threshold',\r\n                `${phaseName}: Threshold: `,\r\n                (val) => {\r\n                    const strategyRules = jcopy(entity.strategyRules)\r\n                    const strategy = getStrategy(strategyRules, voteCasterName)\r\n                    strategy[0].actionOptions.threshold.mean = Number(val)\r\n                    strategy[1].actionOptions.threshold.mean = Number(val)\r\n                    entity.doSetCommand.actionOptionThreshold(strategyRules)\r\n                },\r\n                strategyList[0].actionOptions.threshold.mean,\r\n                { min: 0, max: 1, step: 0.01 },\r\n            )\r\n            box.appendChild(itemsForPhase.actionName1.div)\r\n            box.appendChild(itemsForPhase.actionPDF1.div)\r\n            box.appendChild(itemsForPhase.actionName2.div)\r\n            box.appendChild(itemsForPhase.actionPDF2.div)\r\n            box.appendChild(itemsForPhase.actionOptionThreshold.div)\r\n        })\r\n    }\r\n\r\n    items.showGhosts = new Item(\r\n        'checkbox',\r\n        'Show Ghosts',\r\n        'Show Ghosts: ',\r\n        (val) => viewSettings.setShowNonExistingEntities(val),\r\n        viewSettings.showGhosts,\r\n    )\r\n    box.appendChild(items.showGhosts.div)\r\n\r\n    // Append //\r\n\r\n    screen.tooltips.appendChild(box)\r\n}\r\n\r\nfunction Item(type, name, text, onChange, defaultValue, options) {\r\n    const self = this\r\n\r\n    self.div = document.createElement('div')\r\n\r\n    if (type === 'select') {\r\n        self.input = document.createElement('select')\r\n        const { choices } = options\r\n        for (let i = 0; i < choices.length; i++) {\r\n            const option = document.createElement('option')\r\n            option.value = choices[i]\r\n            option.innerText = choices[i]\r\n            self.input.appendChild(option)\r\n        }\r\n        self.input.value = defaultValue\r\n        self.input.addEventListener('input', () => onChange(self.input.value))\r\n    } else {\r\n        self.input = document.createElement('input')\r\n        self.input.type = type\r\n        self.input.id = name\r\n        self.input.name = name\r\n        if (type === 'checkbox') {\r\n            if (defaultValue) {\r\n                self.input.checked = true\r\n            }\r\n            self.input.addEventListener('change', () => onChange(self.input.checked))\r\n        } else if (type === 'range') {\r\n            self.input.min = 1\r\n            self.input.max = 300\r\n            self.input.step = 1\r\n            if (options !== undefined) {\r\n                if (options.min !== undefined) {\r\n                    self.input.min = options.min\r\n                }\r\n                if (options.max !== undefined) {\r\n                    self.input.max = options.max\r\n                }\r\n                if (options.step !== undefined) {\r\n                    self.input.step = options.step\r\n                }\r\n            }\r\n            self.input.value = defaultValue\r\n            self.input.addEventListener('input', () => onChange(self.input.value))\r\n        } else if (type === 'color') {\r\n            self.input.value = defaultValue\r\n            self.input.addEventListener('input', () => onChange(self.input.value))\r\n        }\r\n    }\r\n    self.label = document.createElement('label')\r\n    self.label.for = name\r\n    self.label.innerText = text\r\n    self.label.style['margin-right'] = '4px'\r\n    self.div.appendChild(self.label)\r\n    self.div.appendChild(self.input)\r\n}\r\n","import hideOnClickOutside from './hideOnClickOutside.js'\r\n\r\nexport default function tooltipBox(graphic, screen) {\r\n    const box = document.createElement('div')\r\n\r\n    box.className = 'tooltipBox'\r\n    box.style.position = 'absolute'\r\n\r\n    function update() {\r\n        const { x, y } = graphic\r\n        if (x > screen.width * 0.5) {\r\n            box.style.right = `${screen.width - x}px`\r\n            box.style.left = 'unset'\r\n        } else {\r\n            box.style.left = `${x}px`\r\n            box.style.right = 'unset'\r\n        }\r\n        if (y > screen.height * 0.5) {\r\n            box.style.bottom = `${screen.height - y}px`\r\n            box.style.top = 'unset'\r\n        } else {\r\n            box.style.top = `${y}px`\r\n            box.style.bottom = 'unset'\r\n        }\r\n    }\r\n    update()\r\n    // box.style.width = '10px'\r\n    // box.style.height = '10px'\r\n    box.style.border = (screen.common.darkMode) ? '1px solid white' : '1px solid black'\r\n    box.style.padding = '8px'\r\n    box.style.background = (screen.common.darkMode) ? '#222' : 'white'\r\n\r\n    let pinned = false\r\n    /**\r\n     * Set pinned to true or false, to keep the box persistent.\r\n     * @param {Boolean} b\r\n     */\r\n    const setPin = (b) => {\r\n        pinned = b\r\n    }\r\n\r\n    const hidebox = () => {\r\n        // box.style.display = 'none'\r\n        if (!pinned) {\r\n            box.remove()\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    hideOnClickOutside(box, hidebox)\r\n\r\n    return { box, update, setPin }\r\n}\r\n","export default function hideOnClickOutside(element, hide) {\r\n    const isVisible = (elem) => !!elem\r\n        && !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length)\r\n\r\n    const outsideClickListener = (event) => {\r\n        if (!element.contains(event.target) && isVisible(element)) {\r\n            // or use: event.target.closest(selector) === null\r\n            const success = hide()\r\n            // eslint-disable-next-line no-use-before-define\r\n            if (success) removeClickListener()\r\n        }\r\n    }\r\n\r\n    const removeClickListener = () => {\r\n        document.removeEventListener('mousedown', outsideClickListener)\r\n        document.removeEventListener('touchstart', outsideClickListener)\r\n    }\r\n\r\n    document.addEventListener('mousedown', outsideClickListener)\r\n    document.addEventListener('touchstart', outsideClickListener)\r\n}\r\n","export default function EntityGraphic(entity, simOptions) {\r\n    const self = this\r\n\r\n    // View sets model\r\n    self.setXYView = (p) => {\r\n        const { dimensions } = simOptions\r\n        if (dimensions === 1) {\r\n            entity.doSetCommand.shape1x(p.x)\r\n        } else {\r\n            entity.doSetCommand.shape2p(p)\r\n        }\r\n        self.updateViewXY()\r\n    }\r\n\r\n    /** Model sets view position when entering a view mode */\r\n    self.updateViewXY = () => {\r\n        const { dimensions } = simOptions\r\n        if (dimensions === 1) {\r\n            self.x = entity.shape1.x\r\n            self.y = 250\r\n        } else {\r\n            self.x = entity.shape2.x\r\n            self.y = entity.shape2.y\r\n        }\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { Tween } from '@tweenjs/tween.js'\r\n/**\r\n * Square is a graphic.\r\n * It displays itself on a parent object.\r\n * Its parent object stores its x and y.\r\n * It shows a square at the parent object xy coordinates.\r\n * It animates the square when picking up and dropping.\r\n * @param {Object} parent\r\n * @param {Number} parent.x\r\n * @param {Number} parent.y\r\n * @param {Number} w - width of square to draw.\r\n * @param {Number} h - height of square to draw.\r\n * @param {Screen} screen\r\n * @constructor\r\n */\r\nexport default function SquareGraphic(parent, entity, w, h, screen) {\r\n    const self = this\r\n    self.w = w // display width, because we're going to make animations with it\r\n    self.h = h\r\n    self.trueW = w // true width, because we want to return to this width after animating.\r\n    self.trueH = h\r\n    self.angleFraction = 0\r\n\r\n    self.pickUp = function () {\r\n        self.tweenSq = new Tween(self, screen.tweenGroup)\r\n        self.tweenSq.to({ w: self.trueW + 10, h: self.trueH + 10 }, 100)\r\n        self.tweenSq.start()\r\n    }\r\n    self.drop = function () {\r\n        self.tweenSq = new Tween(self, screen.tweenGroup)\r\n        self.tweenSq.to({ w: self.trueW, h: self.trueH }, 100)\r\n        self.tweenSq.start()\r\n    }\r\n    self.win = function () {\r\n        self.tweenSq = new Tween(self, screen.tweenGroup)\r\n        self.tweenSq.to({ angleFraction: 0.25 }, 300)\r\n        self.tweenSq.start()\r\n    }\r\n    self.lose = function () {\r\n        self.tweenSq = new Tween(self, screen.tweenGroup)\r\n        self.tweenSq.to({ angleFraction: -0.25 }, 300)\r\n        self.tweenSq.start()\r\n    }\r\n\r\n    // Graphics component\r\n    self.render = function () {\r\n        const { fctx } = screen\r\n        const { darkMode } = screen.common\r\n\r\n        fctx.save()\r\n\r\n        if (self.tweenSq) {\r\n            self.tweenSq.update()\r\n        }\r\n\r\n        if (entity.exists === 0) { fctx.globalAlpha = 0.2 }\r\n\r\n        if (self.angleFraction !== 0) {\r\n            fctx.translate(parent.x, parent.y)\r\n            fctx.rotate(self.angleFraction * Math.PI * 2)\r\n            fctx.translate(-parent.x, -parent.y)\r\n        }\r\n\r\n        fctx.beginPath()\r\n        fctx.fillStyle = entity.color\r\n        if (darkMode && entity.darkModeColor) fctx.fillStyle = entity.darkModeColor\r\n        if (darkMode) fctx.strokeStyle = 'white'\r\n        fctx.rect(\r\n            (parent.x - 0.5 * self.w) - 0.5,\r\n            (parent.y - 0.5 * self.h) - 0.5,\r\n            self.w + 1,\r\n            self.h + 1,\r\n        )\r\n        fctx.fill()\r\n        fctx.stroke()\r\n\r\n        fctx.restore()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport VoterView from './VoterView.js'\r\n\r\n/**\r\n * VoterViewList is different from voterShapeList\r\n * because it is a list of VoterView objects rather than VoterShape objects.\r\n * @constructor\r\n */\r\nexport default function VoterViewList(viewSettings, voterShapeList, screen, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const list = []\r\n    self.list = list\r\n\r\n    // Publish to DraggableManager //\r\n    const observers = []\r\n    self.attachNewG = (o) => { observers.push(o) }\r\n    const updateObservers = (g) => { observers.forEach((o) => o.updateNewG(g)) }\r\n\r\n    // Subscribe to Sim //\r\n    voterShapeList.attachNewE(self)\r\n    self.updateNewE = (voterShape) => {\r\n        self.newVoterShape(voterShape)\r\n    }\r\n\r\n    // Setters and Getters //\r\n    self.newVoterShape = function (voterShape) {\r\n        const voterView = new VoterView(voterShape, screen, viewSettings, simOptions, electionOptionsMan)\r\n        list.push(voterView)\r\n        updateObservers(voterView)\r\n    }\r\n\r\n    self.getVoterShapes = () => list.filter((v) => v.voterShape.exists).map((v) => v.voterShape)\r\n    self.getVoterViews = () => list.filter((v) => v.voterShape.exists)\r\n\r\n    // Update //\r\n    self.updateViewXY = () => {\r\n        list.forEach((v) => v.graphic.updateViewXY())\r\n    }\r\n\r\n    // Render //\r\n    self.renderForeground = () => {\r\n        if (viewSettings.showGhosts) {\r\n            self.renderForegroundAll()\r\n        } else {\r\n            self.renderForegroundExisting()\r\n        }\r\n    }\r\n    self.renderForegroundExisting = () => {\r\n        list.forEach((v) => { if (v.voterShape.exists) v.graphic.renderForeground() })\r\n    }\r\n    self.renderForegroundAll = () => {\r\n        list.forEach((v) => { v.graphic.renderForeground() })\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport VoterGraphic from './VoterGraphic.js'\r\n\r\n/**\r\n * Super class\r\n * A VoterView has functionality for a voter that is specific to a simulation.\r\n * Each VoterView has a voter component.\r\n * The voter component is a VoterShape, for now.\r\n * This voter component is common to all views.\r\n * @param {VoterShape} voterShape - a voter component that VoterView builds upon.\r\n * @constructor\r\n */\r\nexport default function VoterView(voterShape, screen, viewSettings, simOptions, electionOptionsMan) {\r\n    const self = this\r\n    self.voterShape = voterShape\r\n\r\n    self.graphic = new VoterGraphic(voterShape, screen, viewSettings, simOptions, electionOptionsMan)\r\n}\r\n","import tooltipForEntity from '../tooltips/tooltipForEntity.js'\r\nimport CircleGraphic from '../vizEntities/CircleGraphic.js'\r\nimport EntityGraphic from '../vizEntities/EntityGraphic.js'\r\n\r\nexport default function VoterGraphic(voterShape, screen, viewSettings, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const circle = new CircleGraphic(self, voterShape, 13, screen)\r\n    self.circle = circle\r\n\r\n    EntityGraphic.call(self, voterShape, simOptions)\r\n\r\n    self.renderForeground = () => {\r\n        // handle\r\n        circle.render()\r\n    }\r\n\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.renderer = rendererMaker(voterShape)\r\n    }\r\n    // Click Handler\r\n\r\n    self.click = () => {\r\n        tooltipForEntity(self, voterShape, screen, viewSettings, simOptions, electionOptionsMan)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport { Tween } from '@tweenjs/tween.js'\r\n\r\n/**\r\n */\r\n\r\n/**\r\n * Shows a circle at the parent object xy coordinates.\r\n * Animates the circle when picking up and dropping.\r\n * @param {(Candidate|CandidateDn|VoterShape)} parent\r\n *  - something with x and y attributes.\r\n * @param {Number} r - radius of graphic\r\n * @param {String} color - color code\r\n * @param {Screen} screen - something with .ctx to draw to.\r\n * @constructor\r\n */\r\nexport default function CircleGraphic(parent, entity, r, screen) {\r\n    const self = this\r\n\r\n    self.r = r\r\n    self.trueR = r\r\n\r\n    self.pickUp = function () {\r\n        self.tween = new Tween(self, screen.tweenGroup)\r\n        self.tween.to({ r: self.trueR * 2 }, 100)\r\n        self.tween.start()\r\n    }\r\n    self.drop = function () {\r\n        self.tween = new Tween(self, screen.tweenGroup)\r\n        self.tween.to({ r: self.trueR }, 100)\r\n        self.tween.start()\r\n    }\r\n\r\n    // Graphics component\r\n    self.render = function () {\r\n        const { fctx } = screen\r\n        const { darkMode } = screen.common\r\n        const { color } = entity\r\n\r\n        fctx.save()\r\n\r\n        if (self.tween) {\r\n            self.tween.update()\r\n        }\r\n\r\n        // handle\r\n\r\n        if (entity.exists === 0) {\r\n            fctx.globalAlpha = 0.2\r\n        }\r\n        fctx.beginPath()\r\n        fctx.fillStyle = color\r\n        if (darkMode) fctx.strokeStyle = 'white'\r\n        fctx.arc(parent.x, parent.y, self.r, 0, 2 * Math.PI)\r\n        fctx.fill()\r\n        fctx.stroke()\r\n\r\n        fctx.restore()\r\n    }\r\n}\r\n","import TestVoterGraphic from './TestVoterGraphic.js'\r\nimport TestVoter from './TestVoter.js'\r\n\r\nexport default function TestVoterView(screen, simOptions, viewEntitiesOne, viewSettings) {\r\n    const self = this\r\n\r\n    self.testVoter = new TestVoter(viewEntitiesOne)\r\n\r\n    self.graphic = new TestVoterGraphic(self.testVoter, screen, simOptions, viewEntitiesOne, viewSettings)\r\n\r\n    viewEntitiesOne.dragm.add(self)\r\n}\r\n","import CircleGraphic from '../vizEntities/CircleGraphic.js'\r\nimport hideOnClickOutside from '../tooltips/hideOnClickOutside.js'\r\nimport tooltipForTestVoter from '../tooltips/tooltipForTestVoter.js'\r\nimport colorBlender, { rgbToString } from '../viz/colorBlender.js'\r\nimport EntityGraphic from '../vizEntities/EntityGraphic.js'\r\nimport getTallyFractionsNameForVote from '../viz/getTallyFractionsNameForVote.js'\r\n\r\nexport default function TestVoterGraphic(testVoter, screen, simOptions, viewEntitiesOne, viewSettings) {\r\n    const self = this\r\n\r\n    // Start displaying testvoter\r\n    self.start = (p) => {\r\n        testVoter.doSetCommand.exists(1)\r\n        self.setXYView(p)\r\n        hideOnClickOutside(screen.wrap, removeTestPoint)\r\n    }\r\n    function removeTestPoint() {\r\n        testVoter.doSetCommand.exists(0)\r\n    }\r\n\r\n    // Dragging\r\n\r\n    const circle = new CircleGraphic(self, testVoter, 9, screen)\r\n    self.circle = circle\r\n\r\n    EntityGraphic.call(self, testVoter, simOptions)\r\n\r\n    // Rendering\r\n\r\n    let tooltip = {}\r\n\r\n    self.update = (vote, candidateList) => {\r\n        // who would this test point vote for?\r\n        if (vote === undefined) return null\r\n\r\n        const canList = candidateList.getEntities()\r\n        const colorSet = canList.map((can) => can.color)\r\n        const colorSetRGBA = canList.map((can) => can.colorRGBA)\r\n        self.colorSet = colorSet\r\n\r\n        const tallyName = getTallyFractionsNameForVote(vote)\r\n        const tallyFractions = vote[tallyName]\r\n        const color = rgbToString(colorBlender(tallyFractions, colorSetRGBA))\r\n        testVoter.doSetCommand.color(color)\r\n\r\n        if (tooltip.box) {\r\n            tooltip.update(vote, self.colorSet)\r\n        }\r\n\r\n        return vote\r\n    }\r\n\r\n    self.click = () => {\r\n        const vote = viewEntitiesOne.testVoteView()\r\n        if (vote === null) return\r\n\r\n        if (tooltip.box) tooltip.box.remove()\r\n        tooltip = tooltipForTestVoter(self, testVoter, screen)\r\n        tooltip.update(vote, self.colorSet)\r\n    }\r\n\r\n    self.renderForeground = () => {\r\n        // handle\r\n        if (testVoter.exists || viewSettings.showGhosts) {\r\n            circle.render()\r\n        }\r\n    }\r\n}\r\n","import tooltipBox from './tooltipBox.js'\r\nimport TooltipVoteText from './TooltipVoteText.js'\r\n\r\nexport default function tooltipForTestVoter(testVoterGraphic, testVoter, screen) {\r\n    // make a html box appear\r\n\r\n    const tbox = tooltipBox(testVoterGraphic, screen)\r\n    const { box, setPin } = tbox\r\n\r\n    box.innerText = 'Vote'\r\n    box.style['min-width'] = '100px'\r\n\r\n    const button = document.createElement('button')\r\n    // button.className = 'button2'\r\n    button.style['min-width'] = '35px'\r\n    button.style.float = 'right'\r\n    button.style.clear = 'right'\r\n\r\n    button.onclick = () => {\r\n        togglePin()\r\n    }\r\n    let pinned = true\r\n    function togglePin() {\r\n        pinned = !pinned\r\n        setPin(pinned)\r\n        // button.innerText = (pinned) ? 'Pinned' : 'Pin'\r\n        button.innerHTML = (pinned) ? '&#x1F6AB;' : '&#x1F4CC;'\r\n    }\r\n    togglePin()\r\n\r\n    const button2 = document.createElement('button')\r\n    // button2.className = 'button2'\r\n    button2.style.float = 'right'\r\n    button2.style['min-width'] = '35px'\r\n    button2.style['font-size'] = '10px'\r\n    button2.innerHTML = '&#x2573;'\r\n    button2.onclick = () => {\r\n        box.remove()\r\n        testVoter.doSetCommand.exists(0)\r\n    }\r\n    box.appendChild(button2)\r\n    box.appendChild(button)\r\n\r\n    const tooltipVoteText = new TooltipVoteText(box)\r\n\r\n    // box.style['pointer-events'] = 'none'\r\n    screen.tooltips.appendChild(box)\r\n\r\n    function update(vote, color, colorSet) {\r\n        tbox.update()\r\n        tooltipVoteText.update(vote, color, colorSet)\r\n    }\r\n\r\n    return { box, update }\r\n}\r\n","import { textPercent } from '@paretoman/votekit-graphics'\r\nimport getTallyFractionsNameForVote from '../viz/getTallyFractionsNameForVote.js'\r\n\r\nexport default function TooltipVoteText(box) {\r\n    const self = this\r\n\r\n    const voteText = document.createElement('div')\r\n    box.append(voteText)\r\n\r\n    self.update = (vote, colorSet) => {\r\n        // box.style.backgroundColor = color\r\n        // const makeSpan = (c) => `<span style=\"background-color:${c};\">&#9638;</span>`\r\n        const makeSpan = (c) => `<span style=\"color:${c};\">&#9632;</span>` // crosshatch: &#9638; square: &#9632; large black square: &#11035;\r\n\r\n        if (vote.ranking) {\r\n            voteText.innerHTML = vote.ranking.map((c, i) => makeSpan(colorSet[i]) + c).join('<br />')\r\n        } else {\r\n            const tallyName = getTallyFractionsNameForVote(vote)\r\n            const tallyFractions = vote[tallyName]\r\n            voteText.innerHTML = tallyFractions.map(textPercent).map((c, i) => makeSpan(colorSet[i]) + c).join('<br />')\r\n        }\r\n    }\r\n}\r\n","export default function TestVoter(viewEntitiesOne) {\r\n    const self = this\r\n\r\n    // State //\r\n\r\n    self.shape1 = {}\r\n    self.shape2 = {}\r\n\r\n    self.setAction = {\r\n        exists(e) {\r\n            self.exists = e\r\n        },\r\n        shape2p(p) {\r\n            self.shape2.x = p.x\r\n            self.shape2.y = p.y\r\n            viewEntitiesOne.testVoteView()\r\n            // todo: maybe add a change\r\n        },\r\n        shape1x(x) {\r\n            self.shape1.x = x\r\n            viewEntitiesOne.testVoteView()\r\n        },\r\n        color(newColor) {\r\n            self.color = newColor\r\n        },\r\n    }\r\n\r\n    // Make Commands //\r\n\r\n    self.doSetCommand = self.setAction\r\n\r\n    // Initialize\r\n\r\n    self.doSetCommand.shape1x(0)\r\n    self.doSetCommand.shape2p({ x: 0, y: 0 })\r\n    self.doSetCommand.color('#999')\r\n}\r\n","import { range } from '@paretoman/votekit-utilities'\r\nimport getTallyFractions from '../viz/getTallyFractions.js'\r\nimport getPhaseResults from '../phase/getPhaseResults.js'\r\nimport getAllocation from '../viz/getAllocation.js'\r\n\r\nexport default function updateCandidateStatistics(candidateViewList, simData, simOptions, optionsBag) {\r\n    const { geoResults } = simData\r\n    if (geoResults.error) return\r\n\r\n    const phaseResults = phaseResultsDistrictPatch(geoResults, simOptions, optionsBag)\r\n    if (phaseResults.error) return\r\n\r\n    const numCans = geoResults.geometry.canPoints.length\r\n    const tf = Array(numCans)\r\n    const al = Array(numCans)\r\n\r\n    const allocation = getAllocation(phaseResults)\r\n    \r\n    const { votes } = phaseResults\r\n    const { socialChoiceMethod } = phaseResults.electionOptions\r\n    const tallyFractions = getTallyFractions(votes, socialChoiceMethod)\r\n\r\n    // map results to original candidate indices\r\n    const canLabels = canLabelsDistrictPatch(phaseResults, optionsBag)\r\n    for (let i = 0; i < canLabels.length; i++) {\r\n        const index = canLabels[i]\r\n        tf[index] = tallyFractions[i]\r\n        al[index] = allocation[i]\r\n    }\r\n    candidateViewList.setCandidateFractions(tf)\r\n    candidateViewList.setCandidateWins(al)\r\n}\r\n\r\nfunction phaseResultsDistrictPatch(geoResults, simOptions, optionsBag) {\r\n    if (optionsBag.useGeography === true) {\r\n        return geoResults\r\n    }\r\n    return getPhaseResults(geoResults.scResultsByDistrict[0], simOptions)\r\n}\r\n\r\nfunction canLabelsDistrictPatch(phaseResults, optionsBag) {\r\n    if (optionsBag.useGeography === true) {\r\n        const numCans = phaseResults.geometry.canPoints.length\r\n        return range(numCans)\r\n    }\r\n\r\n    return phaseResults.geometry.canLabels\r\n}\r\n","/** @module */\r\n\r\nimport getTallyFractions from './getTallyFractions.js'\r\n\r\n/**\r\n * When there is just one winner,\r\n * sometimes the allocation isn't included in the election results.\r\n * @param {Object} electionResults\r\n * @returns {Object} allocation\r\n */\r\nexport default function getAllocation(electionResults) {\r\n    const { socialChoiceResults, votes } = electionResults\r\n    const { allocation } = socialChoiceResults\r\n    if (allocation !== undefined) {\r\n        return allocation\r\n    }\r\n\r\n    // else\r\n    const tallyFractions = getTallyFractions(votes)\r\n    const { iWinner } = socialChoiceResults\r\n    const nk = tallyFractions.length\r\n    const wins = Array(nk).fill(0)\r\n    wins[iWinner] = 1\r\n    return wins\r\n}\r\n","/** @module */\r\n\r\nimport CandidateDnViewList from '../vizCandidateDns/CandidateDnViewList.js'\r\nimport VoterViewList from '../vizVoters/VoterViewList.js'\r\nimport ViewBase from './ViewBase.js'\r\n\r\n/**\r\n * Simulate many sample elections with\r\n *   candidates in random positions within a distribution, and\r\n *   voters in a distribution that will be summed over.\r\n * @param {Screen} screen\r\n * @param {Menu} menu\r\n * @param {Changes} changes\r\n * @param {ViewSettings} viewSettings\r\n * @constructor\r\n */\r\nexport default function ViewEntitiesSample(entities, screen, menu, changes, simOptions, electionOptionsMan, viewMode, viewSettings) {\r\n    const self = this\r\n\r\n    viewMode.viewModes.sample.attach(self)\r\n\r\n    ViewBase.call(self, screen, changes, viewSettings)\r\n\r\n    // Entities //\r\n    const { candidateDnList, voterShapeList } = entities\r\n\r\n    // eslint-disable-next-line max-len\r\n    const candidateDnViewList = new CandidateDnViewList(viewSettings, candidateDnList, screen, simOptions, electionOptionsMan)\r\n    const voterViewList = new VoterViewList(viewSettings, voterShapeList, screen, simOptions, electionOptionsMan)\r\n\r\n    candidateDnViewList.attachNewG(self.dragm)\r\n    voterViewList.attachNewG(self.dragm)\r\n\r\n    // Main State Machine Functions //\r\n\r\n    self.update = (simData) => {\r\n        const { samplingResult } = simData\r\n        // Update players. Run an election. Get result. Visualize result.\r\n        // The election handles any changes.\r\n        // The samplingResult communicates how to visualize the election.\r\n\r\n        if (changes.check(['draggables', 'dimensions', 'mode'])) {\r\n            voterViewList.updateViewXY()\r\n            candidateDnViewList.updateViewXY()\r\n        }\r\n\r\n        const { pointsChanged, partyWinFraction } = samplingResult\r\n\r\n        if (pointsChanged) {\r\n            candidateDnViewList.setCandidateDnWins(partyWinFraction)\r\n        }\r\n\r\n        self.clearForeground()\r\n        self.renderForeground()\r\n    }\r\n\r\n    self.clickEmpty = () => { }\r\n    self.testVoteView = () => null\r\n\r\n    self.renderForeground = () => {\r\n        voterViewList.renderForeground()\r\n        candidateDnViewList.renderForeground()\r\n    }\r\n\r\n    self.clearForeground = () => {\r\n        screen.clearForeground()\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport CandidateDnView from './CandidateDnView.js'\r\n\r\n/**\r\n * A simple list of candidateDnView instances.\r\n * It really just passes along function calls to each member of the list.\r\n * It also checks if that member exists. Alternatively, it was deleted.\r\n * @constructor\r\n */\r\nexport default function CandidateDnViewList(viewSettings, candidateDnList, screen, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const canDnViews = []\r\n    self.rendererMaker = () => ({ render: () => {} })\r\n\r\n    // Publish to DraggableManager //\r\n    const observers = []\r\n    self.attachNewG = (o) => { observers.push(o) }\r\n    const updateObservers = (g) => { observers.forEach((o) => o.updateNewG(g)) }\r\n\r\n    // Subscribe to Sim //\r\n    candidateDnList.attachNewE(self)\r\n    self.updateNewE = (candidateDn) => {\r\n        self.newCandidateDn(candidateDn)\r\n    }\r\n\r\n    // Data Setters and Getters //\r\n\r\n    self.newCandidateDn = function (candidateDn) {\r\n        const canDnView = new CandidateDnView(candidateDn, screen, 21, 21, viewSettings, simOptions, electionOptionsMan)\r\n        canDnViews.push(canDnView)\r\n        canDnView.graphic.setRenderer(self.rendererMaker)\r\n        updateObservers(canDnView)\r\n    }\r\n\r\n    // get sim entities that exist\r\n    self.getCanDnViews = () => {\r\n        const a = canDnViews.filter((canDnView) => canDnView.canDn.exists)\r\n        return a\r\n    }\r\n\r\n    // get the underlying entities of the above\r\n    self.getCandidateDistributions = () => {\r\n        const canDnViewsEx = self.getCanDnViews()\r\n        return canDnViewsEx.map((canDnView) => canDnView.canDn)\r\n    }\r\n    self.getCandidateDistributionsAll = () => canDnViews.map((canDnView) => canDnView.canDn)\r\n\r\n    // Update //\r\n\r\n    self.setCandidateDnWins = (partyWinFraction) => {\r\n        const canDnViewsExisting = self.getCanDnViews()\r\n        if (canDnViewsExisting.length > 1) {\r\n            canDnViewsExisting.forEach((canDnView) => {\r\n                const party0 = canDnView.canDn.party[0]\r\n                const winFraction = partyWinFraction[party0]\r\n                canDnView.graphic.setWinFraction(winFraction)\r\n            })\r\n        }\r\n    }\r\n    self.updateViewXY = () => {\r\n        canDnViews.forEach((canDnView) => canDnView.graphic.updateViewXY())\r\n    }\r\n\r\n    // Render //\r\n\r\n    self.render = () => {\r\n        canDnViews.forEach((canDnView) => {\r\n            if (canDnView.canDn.exists) canDnView.graphic.renderer.render()\r\n        })\r\n    }\r\n\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.rendererMaker = rendererMaker\r\n        canDnViews.forEach((canDnView) => canDnView.graphic.setRenderer(rendererMaker))\r\n    }\r\n    self.renderForeground = () => {\r\n        if (viewSettings.showGhosts) {\r\n            self.renderForegroundAll()\r\n        } else {\r\n            self.renderForegroundExisting()\r\n        }\r\n    }\r\n    self.renderForegroundExisting = () => {\r\n        canDnViews.forEach((canDnView) => {\r\n            if (canDnView.canDn.exists) canDnView.graphic.renderForeground()\r\n        })\r\n    }\r\n    self.renderForegroundAll = () => {\r\n        canDnViews.forEach((canDnView) => canDnView.graphic.renderForeground())\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport CandidateDnGraphic from './CandidateDnGraphic.js'\r\n\r\n/**\r\n * CandidateDnView has functionality for a canDn that is specific to a view.\r\n * CandidateDnView has a canDn component.\r\n * The canDn component is a CandidateDn, for now.\r\n\r\n * @param {CandidateDn} canDn - a canDn component that CandidateView builds upon.\r\n * @constructor\r\n */\r\nexport default function CandidateDnView(canDn, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\r\n    const self = this\r\n    self.canDn = canDn\r\n\r\n    self.graphic = new CandidateDnGraphic(canDn, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan)\r\n}\r\n","import { drawStrokedColor, textPercent } from '@paretoman/votekit-graphics'\r\nimport tooltipForEntity from '../tooltips/tooltipForEntity.js'\r\nimport EntityGraphic from '../vizEntities/EntityGraphic.js'\r\nimport SquareGraphic from '../vizEntities/SquareGraphic.js'\r\nimport getResultsPhaseOptions from '../phase/getResultsPhaseOptions.js'\r\n\r\n// eslint-disable-next-line max-len\r\nexport default function CandidateDnGraphic(candidateDn, screen, wHandle, hHandle, viewSettings, simOptions, electionOptionsMan) {\r\n    const self = this\r\n\r\n    const square = new SquareGraphic(self, candidateDn, wHandle, hHandle, screen)\r\n    self.square = square\r\n\r\n    EntityGraphic.call(self, candidateDn, simOptions)\r\n\r\n    self.setWinFraction = (winFraction) => {\r\n        // animate the win or loss.\r\n        if (self.winFraction !== winFraction) {\r\n            if (winFraction > self.winFraction) {\r\n                square.win()\r\n            } else if (self.winFraction > winFraction) {\r\n                square.lose()\r\n            }\r\n        }\r\n        self.winFraction = winFraction\r\n    }\r\n\r\n    self.renderForeground = () => {\r\n        square.render()\r\n        const { party } = candidateDn\r\n        const { x, y } = self\r\n\r\n        const { fctx } = screen\r\n        const { darkMode } = screen.common\r\n        const color = (darkMode) ? '#fff' : '#222'\r\n\r\n        const optionsBag = electionOptionsMan.getOptions()\r\n\r\n        const resultsPhaseOptions = getResultsPhaseOptions(optionsBag, simOptions)\r\n        const { socialChoiceMethod } = resultsPhaseOptions\r\n\r\n        if (socialChoiceMethod === 'olprA') {\r\n            const x3 = x + square.w * 0.1\r\n            const y3 = y + 8\r\n            drawStrokedColor(`p${party}`, x3, y3, 13, 2, color, 1, fctx)\r\n        }\r\n\r\n        if (self.winFraction !== undefined) {\r\n            const y2 = y + square.h * 0.5 + 20 + 2\r\n            drawStrokedColor(textPercent(self.winFraction), x, y2, 20, 2, color, 1, fctx)\r\n        }\r\n    }\r\n    self.setRenderer = (rendererMaker) => {\r\n        self.renderer = rendererMaker(candidateDn)\r\n    }\r\n\r\n    // Click Handler\r\n    self.click = () => {\r\n        tooltipForEntity(self, candidateDn, screen, viewSettings, simOptions)\r\n    }\r\n}\r\n","/**\r\n * Some common properties for all screens.\r\n * A detail here is that we have browser pixels and device pixels.\r\n * Broswer pixels feel about the same size on any device (visual arc length).\r\n * Device pixels can be much smaller for high-dpi devices.\r\n * @param {Number} w - width in browser pixels of the canvas.\r\n * @param {Number} h - height in browser pixels of the canvas.\r\n */\r\nexport default function ScreenCommon(w, h) {\r\n    const self = this\r\n\r\n    // Publisher\r\n    const observers = []\r\n    self.attach = (observer) => { observers.push(observer) }\r\n\r\n    self.width = w // measured in browser pixels\r\n    self.height = h\r\n\r\n    // dark mode\r\n    self.darkMode = false\r\n    self.setDarkMode = (val) => {\r\n        self.darkMode = val\r\n        const [add, remove] = (val) ? ['darkMode', 'lightMode'] : ['lightMode', 'darkMode']\r\n        const body = document.getElementsByTagName('html')[0]\r\n        body.classList.remove(remove)\r\n        body.classList.add(add)\r\n\r\n        observers.forEach((o) => { o.setDarkMode(val) })\r\n\r\n        // https://stackoverflow.com/a/71001410\r\n    }\r\n    self.setDarkMode(window.matchMedia('(prefers-color-scheme: dark)').matches)\r\n    self.showDownloadScreenLink = false\r\n    self.setShowDownloadScreenLink = (val) => {\r\n        self.showDownloadScreenLink = val\r\n        observers.forEach((o) => { o.setShowDownloadScreenLink(val) })\r\n    }\r\n    self.svgMode = false\r\n    self.setSvgMode = (val) => {\r\n        self.svgMode = val\r\n        observers.forEach((o) => { o.setSvgMode(val) })\r\n    }\r\n}\r\n","import ButtonGroup from '../menu/ButtonGroup.js'\r\nimport { buttonWidth } from '../menu/MenuItem.js'\r\n\r\nexport default function addSvgSwitch(screenCommon, layout, viewMode) {\r\n    const choose = new ButtonGroup({\r\n        label: 'Drawing Mode:',\r\n        width: buttonWidth(3),\r\n        data: [\r\n            { name: 'Canvas', value: false },\r\n            { name: 'SVG', value: true },\r\n        ],\r\n        onChoose: (data) => {\r\n            screenCommon.setSvgMode(data.value)\r\n            viewMode.rerender()\r\n        },\r\n    })\r\n    choose.highlight('value', screenCommon.svgMode)\r\n    layout.newElement('svgSwitch', choose.dom)\r\n}\r\n","import ButtonGroup from '../menu/ButtonGroup.js'\r\nimport { buttonWidth } from '../menu/MenuItem.js'\r\n\r\nexport default function addDownloadScreen(screenCommon, layout) {\r\n    const choose = new ButtonGroup({\r\n        label: 'Show Link to Download Screen Image/SVG:',\r\n        width: buttonWidth(3),\r\n        data: [\r\n            { name: 'Yes', value: true },\r\n            { name: 'No', value: false },\r\n        ],\r\n        onChoose: (data) => {\r\n            screenCommon.setShowDownloadScreenLink(data.value)\r\n        },\r\n    })\r\n    choose.highlight('value', screenCommon.svgMode)\r\n    layout.newElement('showDownloadScreenLink', choose.dom)\r\n}\r\n","import menuSimOptions from './menuSimOptions.js'\r\nimport menuElectionOptions from './menuElectionOptions.js'\r\nimport addUndo from './addUndo.js'\r\nimport addSimControlsLabel from './addSimControlsLabel.js'\r\nimport buttonsToAddEntities from './buttonsToAddEntities.js'\r\nimport Menu from '../menu/Menu.js'\r\nimport addResultsPhaseSelector from '../viewScreens/addResultsPhaseSelector.js'\r\nimport addWarning from './addWarning.js'\r\n/**\r\n * Make buttons for the sandbox.\r\n * @param {*} sim\r\n * @param {*} layout\r\n * @param {*} viewMode\r\n */\r\nexport default function viewButtons(sim, layout, viewMode) {\r\n    const {\r\n        commander, simOptions, electionOptionsMan, entities, changes, pub,\r\n    } = sim\r\n\r\n    const menu = new Menu(pub, changes, layout)\r\n    menuSimOptions(simOptions, menu)\r\n    menuElectionOptions(electionOptionsMan, menu)\r\n\r\n    addResultsPhaseSelector(simOptions, pub, layout, changes, electionOptionsMan)\r\n\r\n    addUndo(layout, commander)\r\n    addSimControlsLabel(layout)\r\n\r\n    buttonsToAddEntities(viewMode, entities, layout)\r\n\r\n    addWarning(electionOptionsMan, viewMode, layout)\r\n\r\n    return { menu }\r\n}\r\n","import menuSeedRandom from './menuSeedRandom.js'\r\n\r\n/**\r\n * Add simOptions to Menu.\r\n * @param {*} simOptions\r\n * @param {*} menu\r\n */\r\nexport default function menuSimOptions(simOptions, menu) {\r\n    menu.addMenuItem({\r\n        label: 'Mode:',\r\n        explain: 'The simulation mode chooses the kind of analysis to do. '\r\n        + 'Either do one election and see more detail or many and get summary stats.',\r\n        options: [\r\n            { name: 'Election',\r\n                value: 'one',\r\n                explain: 'See the votes from one election.' },\r\n            { name: 'Win Density',\r\n                value: 'sample',\r\n                explain: 'See the winning candidates as a density over many elections. '\r\n                + 'The prospective candidates come from a distribution.' },\r\n        ],\r\n        changeList: ['mode'],\r\n        getValue: () => simOptions.mode,\r\n        onChoose: (o) => {\r\n            simOptions.setMode(o.value)\r\n        },\r\n    })\r\n\r\n    menu.addMenuItem({\r\n        label: 'Dimensions:',\r\n        explain: 'Set the number of dimensions for policy space. '\r\n        + 'Policy space is where voters make decisions on which candidates to elect. '\r\n        + 'Voters like candidates closer to them. '\r\n        + 'Also, the way this simulation is organized, the 1D position of a candidate or voter '\r\n        + 'is independent from their 2D position. This sim uses just one or the other.',\r\n        options: [\r\n            { name: '1D', value: 1, explain: 'Use only one axis for policy space.' },\r\n            { name: '2D', value: 2, explain: 'Use two axes for policy space.' },\r\n        ],\r\n        changeList: ['dimensions'],\r\n        getValue: () => simOptions.dimensions,\r\n        onChoose: (o) => {\r\n            simOptions.setDimensions(o.value)\r\n        },\r\n    })\r\n\r\n    menuSeedRandom(menu, simOptions)\r\n}\r\n","export default function menuSeedRandom(menu, simOptions) {\r\n    menu.addMenuItem({\r\n        label: 'Sampling Seed:',\r\n        explain: 'The sampling seed can either be constant or random. '\r\n        + 'Setting the seed to random means every time the sampler starts, '\r\n        + 'it will choose a random sampling seed. '\r\n        + 'The seed is used to sample the same candidates each time, '\r\n        + 'no matter if the other settings change. '\r\n        + 'The only way things would be different '\r\n        + 'is if the size of the candidate distributions change '\r\n        + 'or if the number of candidate distributions change.',\r\n        options: [\r\n            { name: 'Random', value: true, explain: 'New seed for each sampling run.' },\r\n            { name: 'Constant', value: false, explain: 'Same seed for each sampling run.' },\r\n        ],\r\n        changeList: ['seedRandom'],\r\n        getValue: () => simOptions.seedRandom,\r\n        onChoose: (o) => {\r\n            simOptions.setSeedRandom(o.value)\r\n        },\r\n    })\r\n}\r\n","import menuPhaseOptions from './menuPhaseOptions.js'\r\n\r\nexport default function menuElectionOptions(electionOptionsMan, menu) {\r\n    menu.addMenuItem({\r\n        label: 'Number of Census Tracts:',\r\n        explain: 'Tracts add some geography into the election. '\r\n        + 'Tracts are the pixels of the geography. Voters live in tracts. '\r\n        + 'In each tract, the voters are moved in policy space according to a random algorithm called simplex noise. '\r\n        + 'The main feature is that neighboring tracts are similar to each other. '\r\n        + 'This options sets the number of tracts along one axis. ',\r\n        options: [\r\n            { name: '1', value: 1 },\r\n            { name: '9', value: 9 },\r\n        ],\r\n        changeList: ['numTracts'],\r\n        getValue: () => electionOptionsMan.getOptions().numTracts,\r\n        onChoose: (o) => {\r\n            electionOptionsMan.setNumTracts(o.value)\r\n        },\r\n    })\r\n\r\n    menu.addMenuItem({\r\n        label: 'Number of Districts:',\r\n        explain: 'Districts are one way to try to introduce proprtionality into an election. '\r\n        + 'Districts are drawn across tracts. '\r\n        + 'Elections results are summed across the districts. '\r\n        + 'Each district has one or more winners. ',\r\n        options: [\r\n            { name: '1', value: 1 },\r\n            { name: '9', value: 9 },\r\n        ],\r\n        changeList: ['numDistricts'],\r\n        getValue: () => electionOptionsMan.getOptions().numDistricts,\r\n        onChoose: (o) => {\r\n            electionOptionsMan.setNumDistricts(o.value)\r\n        },\r\n    })\r\n\r\n    menu.addMenuItem({\r\n        label: 'Election Sequence:',\r\n        explain: 'An election may be composed of phases of casting votes and determining winners. '\r\n        + 'A primary may be closed or open. '\r\n        + 'A closed primary only allows voters of a party to vote. '\r\n        + 'A nonpartisan open primary allows any voter to vote for any candidate. '\r\n        + 'A general follows the primary. ',\r\n        options: [\r\n            { name: 'General', value: 'general', explain: 'One general phase.' },\r\n            { name: 'Closed P', value: 'closedPrimary', explain: 'A closed primary followed by a general phase.' },\r\n            { name: 'Nonp Open P', value: 'nonpartisanOpenPrimary', explain: 'A nonpartisan open primary followed by a general phase.' },\r\n        ],\r\n        changeList: ['sequenceName'],\r\n        getValue: () => electionOptionsMan.sequenceOptionsMan.getOptions().sequenceName,\r\n        onChoose: (o) => {\r\n            electionOptionsMan.sequenceOptionsMan.setSequenceName(o.value)\r\n        },\r\n    })\r\n\r\n    menuPhaseOptions('general', 'general', 'General', electionOptionsMan, menu)\r\n    menuPhaseOptions('closedPrimary', 'closedPrimary', 'Closed Primary', electionOptionsMan, menu)\r\n    menuPhaseOptions('closedPrimary', 'general', 'General', electionOptionsMan, menu)\r\n    menuPhaseOptions('nonpartisanOpenPrimary', 'nonpartisanOpenPrimary', 'Nonpartisan Open Primary', electionOptionsMan, menu)\r\n    menuPhaseOptions('nonpartisanOpenPrimary', 'general', 'General', electionOptionsMan, menu)\r\n}\r\n","import { socialChoiceMethodMetadata } from '@paretoman/votekit-social-choice-methods'\r\n\r\nexport default function menuPhaseOptions(sequenceName, phaseName, phaseNameTitle, electionOptionsMan, menu) {\r\n    menu.addMenuItem({\r\n        label: `Social Choice Method for ${phaseNameTitle} Phase:`,\r\n        explain: 'The method of choosing winners from a set of prospective candidates.',\r\n        options: socialChoiceMethodMetadata.map(\r\n            ({ shortName, functionName, name, explain }) => (\r\n                { name: shortName, value: functionName, explain: explain || name }\r\n            ),\r\n        ),\r\n        changeList: ['socialChoiceMethod'],\r\n        getValue: () => electionOptionsMan.sequenceOptionsMan.sequences[sequenceName].phases[phaseName].getOptions().socialChoiceMethod,\r\n        onChoose: (o) => {\r\n            electionOptionsMan.sequenceOptionsMan.sequences[sequenceName].phases[phaseName].setSocialChoiceMethod(o.value)\r\n        },\r\n        checkShow: () => (sequenceName === electionOptionsMan.getOptions().sequenceOptions.sequenceName),\r\n    })\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Add buttons to layout for undo and redo, and connect them to commander for functionality.\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */\r\nexport default function addUndo(layout, commander) {\r\n    const undoButton = document.createElement('button')\r\n    const redoButton = document.createElement('button')\r\n\r\n    undoButton.className = 'button2'\r\n    redoButton.className = 'button2'\r\n\r\n    undoButton.innerText = 'Undo'\r\n    redoButton.innerText = 'Redo'\r\n\r\n    undoButton.onclick = commander.undo\r\n    redoButton.onclick = commander.redo\r\n\r\n    layout.newElement('undo', undoButton)\r\n    layout.newElement('redo', redoButton)\r\n}\r\n","/** Add a label for the sim controls */\r\nexport default function addSimControlsLabel(layout) {\r\n    const label = document.createElement('div')\r\n    label.setAttribute('class', 'button-group-label2')\r\n    label.innerText = 'Sim Controls:'\r\n    layout.newElement('simControlsLabel', label)\r\n}\r\n","import candidateAddMakeButton from './candidateAddMakeButton.js'\r\nimport candidateDnAddMakeButton from './candidateDnAddMakeButton.js'\r\nimport voterShapeAddMakeButton from './voterShapeAddMakeButton.js'\r\n\r\nexport default function buttonsToAddEntities(viewMode, entities, layout) {\r\n    const can = candidateAddMakeButton(viewMode, entities.candidateList)\r\n    const candn = candidateDnAddMakeButton(viewMode, entities.candidateDnList)\r\n    const voter = voterShapeAddMakeButton(entities.voterShapeList)\r\n\r\n    const addEntities = document.createElement('div')\r\n    addEntities.append(voter)\r\n    addEntities.append(can)\r\n    addEntities.append(candn)\r\n\r\n    layout.newElement('addEntities', addEntities)\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Add button to layout for adding a candidate\r\n * @param {Layout} layout\r\n * @param {Sim} canList\r\n */\r\nexport default function CandidateAddMakeButton(viewMode, canList) {\r\n    const addCandidateButton = document.createElement('button')\r\n\r\n    addCandidateButton.className = 'button2'\r\n    addCandidateButton.innerText = 'Add Candidate'\r\n\r\n    addCandidateButton.onclick = () => {\r\n        canList.addEntityPressed()\r\n    }\r\n\r\n    hide()\r\n\r\n    viewMode.viewModes.one.attach({\r\n        enter: show,\r\n        exit: hide,\r\n        update: () => {},\r\n    })\r\n\r\n    function show() {\r\n        addCandidateButton.hidden = false\r\n    }\r\n    function hide() {\r\n        addCandidateButton.hidden = true\r\n    }\r\n\r\n    return addCandidateButton\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Add button to layout for adding a candidate\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */\r\nexport default function CandidateDnAddMakeButton(viewMode, canDnList) {\r\n    const addCandidateDistributionButton = document.createElement('button')\r\n\r\n    addCandidateDistributionButton.className = 'button2'\r\n    addCandidateDistributionButton.innerText = 'Add Candidate Group'\r\n\r\n    addCandidateDistributionButton.onclick = () => {\r\n        canDnList.addEntityPressed()\r\n    }\r\n\r\n    hide()\r\n\r\n    viewMode.viewModes.sample.attach({\r\n        enter: show,\r\n        exit: hide,\r\n        update: () => {},\r\n    })\r\n\r\n    function show() {\r\n        addCandidateDistributionButton.hidden = false\r\n    }\r\n    function hide() {\r\n        addCandidateDistributionButton.hidden = true\r\n    }\r\n\r\n    return addCandidateDistributionButton\r\n}\r\n","/** @module */\r\n\r\n/**\r\n * Add buttons to layout for undo and redo, and connect them to commander for functionality.\r\n * @param {Layout} layout\r\n * @param {VoterShapeList} voterShapeList\r\n */\r\nexport default function VoterShapeAddMakeButton(voterShapeList) {\r\n    const addVoterButton = document.createElement('button')\r\n\r\n    addVoterButton.innerText = 'Add Voter Group'\r\n    addVoterButton.className = 'button2'\r\n\r\n    addVoterButton.onclick = () => {\r\n        voterShapeList.addEntityPressed()\r\n    }\r\n    return addVoterButton\r\n}\r\n","/** @module */\r\n\r\nimport MenuItem from './MenuItem.js'\r\n\r\n/**\r\n * Make a menu.\r\n * @param {Changes} changes\r\n * @param {Layout} layout\r\n * @constructor\r\n */\r\nexport default function Menu(pub, changes, layout) {\r\n    const self = this\r\n    self.divMenu = document.createElement('div')\r\n    layout.newElement('menu', self.divMenu)\r\n    self.addMenuItem = function (choice) {\r\n        // eslint-disable-next-line max-len\r\n        const menuItem = new MenuItem(pub, changes, choice)\r\n        menuItem.select()\r\n\r\n        self.divMenu.appendChild(menuItem.choose.dom)\r\n    }\r\n}\r\n","import { range } from '@paretoman/votekit-utilities'\r\nimport ButtonGroup from '../menu/ButtonGroup.js'\r\nimport { buttonWidth } from '../menu/MenuItem.js'\r\n\r\nexport default function addResultsPhaseSelector(simOptions, pub, layout, changes, electionOptionsMan) {\r\n    // make two selectors, one for each sequence with a primary\r\n    const choose1 = addResultsPhaseSelectorForSequence('closedPrimary', simOptions, pub, layout, electionOptionsMan)\r\n    const chooseParty = addResultsPartySelector('closedPrimary', simOptions, pub, layout, electionOptionsMan)\r\n    const choose2 = addResultsPhaseSelectorForSequence('nonpartisanOpenPrimary', simOptions, pub, layout, electionOptionsMan)\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(choose1.dom)\r\n    div.appendChild(chooseParty.dom)\r\n    div.appendChild(choose2.dom)\r\n    layout.newElement('resultsPhaseSelector', div)\r\n}\r\n\r\nfunction addResultsPhaseSelectorForSequence(sequenceName, simOptions, pub, layout, electionOptionsMan) {\r\n    const choose = new ButtonGroup({\r\n        label: 'Phase of Results to Display:',\r\n        width: buttonWidth(3),\r\n        data: [\r\n            { name: 'Primary', value: sequenceName },\r\n            // shortcut: using sequenceName, which happens to be the primary phase name\r\n            { name: 'General', value: 'general' },\r\n        ],\r\n        onChoose: (data) => {\r\n            simOptions.setResultsPhase(sequenceName, data.value)\r\n        },\r\n    })\r\n    pub.attach({ update })\r\n    function update() {\r\n        const show = sequenceName === electionOptionsMan.getOptions().sequenceOptions.sequenceName\r\n        if (show) {\r\n            choose.dom.hidden = false\r\n        } else {\r\n            choose.dom.hidden = true\r\n        }\r\n    }\r\n    choose.highlight('value', simOptions.resultsPhaseBySeq[sequenceName])\r\n    return choose\r\n}\r\n\r\nfunction addResultsPartySelector(sequenceName, simOptions, pub, layout, electionOptionsMan) {\r\n    const choose = new ButtonGroup({\r\n        label: 'Party of Results to Display:',\r\n        width: buttonWidth(10),\r\n        data: range(10).map((i) => ({ name: i, value: i })),\r\n        onChoose: (data) => {\r\n            simOptions.setResultsParty(sequenceName, data.value)\r\n        },\r\n    })\r\n    pub.attach({ update })\r\n    function update() {\r\n        const optSeqName = electionOptionsMan.getOptions().sequenceOptions.sequenceName\r\n        const show1 = sequenceName === optSeqName\r\n        const show2 = simOptions.resultsPhaseBySeq[optSeqName] !== 'general'\r\n        const show = show1 && show2\r\n        if (show) {\r\n            choose.dom.hidden = false\r\n        } else {\r\n            choose.dom.hidden = true\r\n        }\r\n    }\r\n    choose.highlight('value', simOptions.resultsPartyBySeq[sequenceName])\r\n    return choose\r\n}\r\n","export default function addWarning(electionOptionsMan, viewMode, layout) {\r\n    const message = 'Elections with both geographic components and sequence components are not yet implemented. Change number of districts to 1 and number of tracts to 1 or change election sequence to general.'\r\n\r\n    const div = document.createElement('div')\r\n    div.className = 'warning'\r\n    div.innerText = message\r\n\r\n    hide()\r\n\r\n    const observer = {\r\n        enter: () => {},\r\n        exit: () => {},\r\n        update: () => {\r\n            const optionsBag = electionOptionsMan.getOptions()\r\n            const sayWarning = (optionsBag.useGeography === true) && (optionsBag.sequenceOptions.sequenceName !== 'general')\r\n\r\n            if (sayWarning) {\r\n                show()\r\n            } else {\r\n                hide()\r\n            }\r\n        },\r\n    }\r\n    viewMode.viewModes.one.attach(observer)\r\n    viewMode.viewModes.sample.attach(observer)\r\n\r\n    function show() {\r\n        div.hidden = false\r\n    }\r\n    function hide() {\r\n        div.hidden = true\r\n    }\r\n\r\n    layout.newElement('warning', div)\r\n}\r\n","import checkURL from './checkURL.js'\r\n\r\nexport default function loadView(configURL, targetConfig, init, nameInput) {\r\n    checkURL(configURL, nameInput, checkUrlCallback)\r\n\r\n    function checkUrlCallback(cu) {\r\n        const config = (cu.yes) ? cu.config : targetConfig\r\n        init(config)\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport configFromParams from './configFromParams.js'\r\nimport loadShortCode from './loadShortCode.js'\r\n\r\n/**\r\n * Check if the URL is giving a configuration.\r\n * Three cases:\r\n * 1. No config in url\r\n * 2. Long config in url\r\n * 3. Short code in url that requires a database lookup.\r\n * Then use a callback since we might have to wait for the database.\r\n */\r\nexport default function checkURL(configURL, nameInput, checkUrlCallback) {\r\n    const { search } = configURL\r\n    const params = new URLSearchParams(search)\r\n\r\n    const name = params.get('name')\r\n    if (name !== null) nameInput.set(name)\r\n\r\n    const a = params.has('a')\r\n    const b = params.has('b')\r\n    const yes = a || b\r\n\r\n    if (a) {\r\n        const config = configFromParams(params)\r\n        checkUrlCallback({ yes, config })\r\n        return\r\n    }\r\n    if (b) {\r\n        const shortcode = params.get('b')\r\n        loadShortCode(shortcode, checkUrlCallback)\r\n        return\r\n    }\r\n    const config = {}\r\n    checkUrlCallback({ yes, config })\r\n}\r\n","export default function configFromParams(params) {\r\n    const encoded = params.get('a')\r\n    const string = decodeURIComponent(encoded)\r\n    const config = JSON.parse(string)\r\n    return config\r\n}\r\n","import ajaxLite from './ajaxLite.js'\r\nimport configFromParams from './configFromParams.js'\r\nimport shortLinkDatabaseUrl from './shortLinkDatabaseUrl.js'\r\n\r\nexport default function loadShortCode(shortcode, checkURLCallback) {\r\n    ajaxLite.get(shortLinkDatabaseUrl, { shortcode, link: 'getTable' }, (res) => {\r\n        // do the load config again, basically\r\n\r\n        const resObj = JSON.parse(res)\r\n        const { link } = resObj\r\n        const url = new URL(link)\r\n        const { search } = url\r\n        const params = new URLSearchParams(search)\r\n\r\n        const config = configFromParams(params)\r\n        checkURLCallback({ yes: true, config })\r\n    })\r\n}\r\n","const ajaxLite = {} // https://stackoverflow.com/a/18078705\r\n\r\najaxLite.x = function () {\r\n    if (typeof XMLHttpRequest !== 'undefined') {\r\n        return new XMLHttpRequest()\r\n    }\r\n    const versions = [\r\n        'MSXML2.XmlHttp.6.0',\r\n        'MSXML2.XmlHttp.5.0',\r\n        'MSXML2.XmlHttp.4.0',\r\n        'MSXML2.XmlHttp.3.0',\r\n        'MSXML2.XmlHttp.2.0',\r\n        'Microsoft.XmlHttp',\r\n    ]\r\n\r\n    let xhr\r\n    for (let i = 0; i < versions.length; i++) {\r\n        try {\r\n            // eslint-disable-next-line no-undef\r\n            xhr = new ActiveXObject(versions[i])\r\n            break\r\n        } catch (e) {\r\n            // nothing\r\n        }\r\n    }\r\n    return xhr\r\n}\r\n\r\najaxLite.send = function (url, callback, method, data, asyncOpt) {\r\n    let async = asyncOpt\r\n    if (async === undefined) {\r\n        async = true\r\n    }\r\n    const x = ajaxLite.x()\r\n    x.open(method, url, async)\r\n    x.onreadystatechange = function () {\r\n        if (x.readyState === 4) {\r\n            callback(x.responseText)\r\n        }\r\n    }\r\n    if (method === 'POST') {\r\n        x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')\r\n    }\r\n    x.send(data)\r\n}\r\n\r\najaxLite.get = function (url, data, callback, async) {\r\n    const query = []\r\n    const keys = Object.keys(data)\r\n    for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i]\r\n        query.push(`${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)\r\n    }\r\n    ajaxLite.send(url + (query.length ? `?${query.join('&')}` : ''), callback, 'GET', null, async)\r\n}\r\n\r\nexport default ajaxLite\r\n","// reference for url shortener:\r\n// https://medium.com/@dmccoy/how-to-submit-an-html-form-to-google-sheets-without-google-forms-b833952cc175\r\n\r\nconst shortLinkDatabaseUrl = 'https://script.google.com/macros/s/AKfycbw_t8aLSdKGRFVhAenhPu56Gl-N9fEucx6Ic-H9jtfb55g_1flmiFK7WsHfsx1Dg2LSuQ/exec'\r\nexport default shortLinkDatabaseUrl\r\n","import jupyterUpdate, { jupyterClear } from './jupyter.js'\r\n\r\nexport default function viewJupyter(pub, changes) {\r\n    pub.attach({\r\n        update: (simData) => {\r\n            if (changes.checkNone()) return\r\n\r\n            jupyterClear()\r\n            jupyterUpdate(simData)\r\n        },\r\n    })\r\n}\r\n","/**\r\n * Check if we are in a jupyter notebook.\r\n * Send any simData to votekitData variable in python.\r\n * @param {Object} simData - any object with keys to send to python\r\n */\r\n\r\nconst usingIPython = (window.IPython !== undefined)\r\n// const usingJupyterLab = (window._JUPYTERLAB !== undefined)\r\n\r\nif (usingIPython) {\r\n    window.votekitStore = {}\r\n    window.getVotekitStore = () => {\r\n        if (usingIPython) {\r\n            const ex = (command) => window.IPython.notebook.kernel.execute(command)\r\n            ex(`votekitData = '${JSON.stringify(window.votekitStore)}'`)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A function that runs at every update.\r\n * provide a hook that a python notebook can define later.\r\n * for example, the following code might work to get javascript variables into a python function\r\n *   const ex = (command) => window.IPython.notebook.kernel.execute(command)\r\n *   ex(`votekitOnUpdate('${JSON.stringify(store)}')`)\r\n * @param {Object} simData - a list of key-value pairs to assign to window.votekitStore\r\n */\r\nexport default function jupyterUpdate(simData) {\r\n    if (usingIPython) {\r\n        Object.assign(window.votekitStore, simData)\r\n\r\n        // hook to run at every update\r\n        // only runs if someone defines it elsewhere, like in a python notebook\r\n        if (window.votekitUpdate !== undefined) {\r\n            window.votekitUpdate(window.votekitStore, simData)\r\n        }\r\n    }\r\n}\r\n\r\nexport function jupyterClear() {\r\n    window.votekitStore = {}\r\n}\r\n","import addSaveConfigToText from './addSaveConfigToText.js'\r\nimport addLoadConfigText from './addLoadConfigText.js'\r\nimport addSaveConfigToLink from './addSaveConfigToLink.js'\r\nimport addSaveConfigToShortLink from './addSaveConfigToShortLink.js'\r\nimport addName from './addName.js'\r\nimport addSaveData from './addSaveData.js'\r\nimport ViewDownload from './viewDownload.js'\r\n/**\r\n * Make buttons for the sandbox.\r\n * @param {*} sim\r\n * @param {*} layout\r\n * @param {*} sandboxPath\r\n */\r\nexport default function save(sim, layout, sandboxPath) {\r\n    const {\r\n        commander, changes, pub,\r\n    } = sim\r\n\r\n    const nameInput = addName(layout)\r\n    addSaveConfigToLink(layout, commander, sandboxPath, nameInput)\r\n    addSaveConfigToShortLink(layout, commander, sandboxPath, nameInput)\r\n    addSaveConfigToText(layout, commander, nameInput)\r\n    addLoadConfigText(layout, commander, nameInput)\r\n\r\n    const viewDownload = new ViewDownload(pub, changes)\r\n    addSaveData(layout, nameInput, viewDownload)\r\n\r\n    return { nameInput }\r\n}\r\n","/** @module */\r\n\r\nimport DownloadLink from './DownloadLink.js'\r\nimport TextArea from './TextArea.js'\r\nimport orderedJsonStringify from './orderedJsonStringify.js'\r\n\r\n/**\r\n * Add buttons for saving the configuration to a textbox.\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */\r\nexport default function addSaveConfigToText(layout, commander, nameInput) {\r\n    const button = document.createElement('button')\r\n    button.className = 'button2'\r\n    button.innerText = 'Show Config'\r\n\r\n    const button2 = document.createElement('button')\r\n    button2.className = 'button2'\r\n    button2.innerText = 'Download Config'\r\n\r\n    const dLink = new DownloadLink()\r\n    dLink.setFileName('config.json')\r\n    dLink.hide()\r\n\r\n    const text = new TextArea()\r\n    text.hide()\r\n\r\n    button.onclick = () => {\r\n        text.show()\r\n        const config = commander.getConfig()\r\n        const jsonText = orderedJsonStringify(config)\r\n        text.setText(jsonText)\r\n    }\r\n\r\n    button2.onclick = () => {\r\n        button.onclick()\r\n        const url = `data:text/json;charset=utf-8,${encodeURIComponent(text.value)}`\r\n        dLink.setUrl(url)\r\n        const name = nameInput.value\r\n        if (name !== '') dLink.setFileName(`${name}.json`)\r\n        dLink.show()\r\n    }\r\n\r\n    const clearDiv = document.createElement('div')\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(button)\r\n    div.appendChild(button2)\r\n    div.appendChild(dLink.div)\r\n    div.appendChild(clearDiv)\r\n    div.appendChild(text.div)\r\n\r\n    layout.newElement('saveConfigToText', div)\r\n}\r\n","export default function DownloadLink() {\r\n    const self = this\r\n\r\n    self.div = document.createElement('div')\r\n\r\n    const downloadLink = document.createElement('a')\r\n    downloadLink.style.margin = '4px'\r\n    self.div.append(downloadLink)\r\n\r\n    const hideLink = document.createElement('button')\r\n    hideLink.className = 'button2'\r\n    hideLink.innerText = 'X'\r\n    hideLink.onclick = () => { self.hide() }\r\n    self.div.append(hideLink)\r\n\r\n    self.show = () => {\r\n        downloadLink.hidden = false\r\n        hideLink.hidden = false\r\n    }\r\n    self.hide = () => {\r\n        downloadLink.hidden = true\r\n        hideLink.hidden = true\r\n    }\r\n    self.setUrl = (url) => {\r\n        downloadLink.href = url\r\n    }\r\n    self.setFileName = (fn) => {\r\n        downloadLink.innerText = fn\r\n        downloadLink.download = fn\r\n    }\r\n    self.setFileName('download')\r\n}\r\n","export default function TextArea() {\r\n    const self = this\r\n\r\n    self.value = ''\r\n\r\n    self.div = document.createElement('div')\r\n\r\n    const text = document.createElement('textarea')\r\n    text.style.margin = '4px'\r\n    self.div.append(text)\r\n\r\n    const hideLink = document.createElement('button')\r\n    hideLink.className = 'button2'\r\n    hideLink.innerText = 'X'\r\n    hideLink.onclick = () => { self.hide() }\r\n    self.div.append(hideLink)\r\n\r\n    self.show = () => {\r\n        text.hidden = false\r\n        hideLink.hidden = false\r\n    }\r\n    self.hide = () => {\r\n        text.hidden = true\r\n        hideLink.hidden = true\r\n    }\r\n    self.setText = (t) => {\r\n        text.value = t\r\n        self.value = t\r\n    }\r\n}\r\n","export default function orderedJsonStringify(obj) {\r\n    return JSON.stringify(sortObjByKey(obj), null, '\\t')\r\n}\r\n\r\n/** https://stackoverflow.com/a/35810961 */\r\nfunction sortObjByKey(value) {\r\n    // eslint-disable-next-line no-nested-ternary\r\n    return (typeof value === 'object')\r\n        ? (Array.isArray(value)\r\n            ? value.map(sortObjByKey)\r\n            : Object.keys(value).sort().reduce((o, key) => {\r\n                const v = value[key]\r\n                // eslint-disable-next-line no-param-reassign\r\n                o[key] = sortObjByKey(v)\r\n                return o\r\n            }, {})\r\n        )\r\n        : value\r\n}\r\n","/** @module */\r\n\r\nimport addUpload from './addUpload.js'\r\n\r\n/**\r\n * Add buttons to layout for undo and redo, and connect them to commander for functionality.\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */\r\nexport default function addLoadConfigText(layout, commander, nameInput) {\r\n    const button = document.createElement('button')\r\n\r\n    button.className = 'button2'\r\n\r\n    button.innerText = 'Load Pasted Config'\r\n\r\n    const text = document.createElement('textarea')\r\n\r\n    button.onclick = () => {\r\n        if (text.value === '') return\r\n        const config = JSON.parse(text.value)\r\n        commander.loadConfig(config)\r\n    }\r\n\r\n    const upload = addUpload(uploadCallback, nameInput)\r\n    function uploadCallback(event) {\r\n        const { result } = event.target\r\n        const config = JSON.parse(result)\r\n        commander.loadConfig(config)\r\n    }\r\n\r\n    const clearDiv = document.createElement('div')\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(button)\r\n    div.appendChild(upload)\r\n    div.appendChild(clearDiv)\r\n    div.appendChild(text)\r\n\r\n    layout.newElement('loadConfigText', div)\r\n}\r\n","export default function addUpload(uploadCallback, nameInput) {\r\n    const input = document.createElement('input')\r\n    input.type = 'file'\r\n    input.accept = '.json'\r\n    input.onchange = () => {\r\n        const file = input.files[0]\r\n\r\n        const reader = new FileReader()\r\n        reader.addEventListener('load', uploadCallback)\r\n        reader.readAsText(file)\r\n\r\n        const { name } = file\r\n        const nameWithoutExtension = name.split('.').slice(0, -1).join('.')\r\n        nameInput.set(nameWithoutExtension)\r\n    }\r\n\r\n    const button = document.createElement('button')\r\n    button.className = 'button2'\r\n    button.innerText = 'Upload Config'\r\n    button.onclick = () => { input.click() }\r\n\r\n    return button\r\n}\r\n","/** @module */\r\n\r\nimport getLink from './getLink.js'\r\nimport TextArea from './TextArea.js'\r\n\r\n/**\r\n * Add buttons for saving the configuration to a link.\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */\r\nexport default function addSaveConfigToLink(layout, commander, sandboxPath, nameInput) {\r\n    const button = document.createElement('button')\r\n    button.className = 'button2'\r\n    button.innerText = 'Save Long Link'\r\n\r\n    const button2 = document.createElement('button')\r\n    button2.className = 'button2'\r\n    button2.innerText = 'Copy'\r\n\r\n    const text = new TextArea()\r\n    text.hide()\r\n\r\n    button.onclick = () => {\r\n        text.show()\r\n        const config = commander.getConfig()\r\n        const link = getLink(config, sandboxPath, nameInput)\r\n        text.setText(link)\r\n    }\r\n    button2.onclick = () => {\r\n        button.onclick()\r\n        navigator.clipboard.writeText(text.value)\r\n    }\r\n\r\n    const clearDiv = document.createElement('div')\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(button)\r\n    div.appendChild(button2)\r\n    div.appendChild(clearDiv)\r\n    div.appendChild(text.div)\r\n\r\n    layout.newElement('saveConfigToLink', div)\r\n}\r\n","import linkFromParams from './linkFromParams.js'\r\n\r\nexport default function getLink(config, sandboxPath, nameInput) {\r\n    const string = JSON.stringify(config)\r\n    const encoded = encodeURIComponent(string)\r\n\r\n    const a = encoded\r\n    const name = nameInput.value\r\n    const params = (name === '') ? { a } : { a, name }\r\n    const link = linkFromParams(params, sandboxPath)\r\n    return link\r\n}\r\n","export default function linkFromParams(params, sandboxPath) {\r\n    const search = urlSearchString(params)\r\n    const currentUrlFolder = getFolder()\r\n\r\n    const link = `${currentUrlFolder}/${sandboxPath}?${search}`\r\n    return link\r\n}\r\n\r\nfunction urlSearchString(params) {\r\n    const urlParams = new URLSearchParams(params)\r\n    const search = urlParams.toString()\r\n    return search\r\n}\r\n\r\nfunction getFolder() {\r\n    const sp = document.location.href.split('/')\r\n    const sl = sp.slice(0, sp.length - 1)\r\n    const folder = sl.join('/')\r\n    return folder\r\n}\r\n","/** @module */\r\n\r\nimport publishShortLink from './publishShortLink.js'\r\nimport TextArea from './TextArea.js'\r\n\r\n/**\r\n * Add buttons for saving the configuration to a link.\r\n * @param {Layout} layout\r\n * @param {Commander} commander\r\n */\r\nexport default function addSaveConfigToShortLink(layout, commander, sandboxPath, nameInput) {\r\n    const button = document.createElement('button')\r\n    button.className = 'button2'\r\n    button.innerText = 'Publish Short Link'\r\n\r\n    const button2 = document.createElement('button')\r\n    button2.className = 'button2'\r\n    button2.innerText = 'Copy'\r\n\r\n    const text = new TextArea()\r\n    text.hide()\r\n\r\n    const requesting = 'requesting short link...'\r\n\r\n    button.onclick = () => {\r\n        text.show()\r\n        const config = commander.getConfig()\r\n        text.setText(requesting)\r\n        publishShortLink(config, sandboxPath, nameInput, (link) => {\r\n            text.setText(link)\r\n        })\r\n    }\r\n    button2.onclick = () => {\r\n        text.show()\r\n        const config = commander.getConfig()\r\n        text.setText(requesting)\r\n        publishShortLink(config, sandboxPath, nameInput, (link) => {\r\n            navigator.clipboard.writeText(link)\r\n        })\r\n    }\r\n\r\n    const clearDiv = document.createElement('div')\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(button)\r\n    div.appendChild(button2)\r\n    div.appendChild(clearDiv)\r\n    div.appendChild(text.div)\r\n\r\n    layout.newElement('saveConfigToShortLink', div)\r\n}\r\n","import ajaxLite from './ajaxLite.js'\r\nimport getLink from './getLink.js'\r\nimport linkFromParams from './linkFromParams.js'\r\nimport orderedJsonStringify from './orderedJsonStringify.js'\r\nimport shortLinkDatabaseUrl from './shortLinkDatabaseUrl.js'\r\n\r\nexport default function publishShortLink(config, sandboxPath, nameInput, afterPublish) {\r\n    const link = getLink(config, sandboxPath, nameInput)\r\n\r\n    const configString = orderedJsonStringify(config)\r\n    const shortcode = hashCode(configString)\r\n\r\n    ajaxLite.get(shortLinkDatabaseUrl, { shortcode, link }, (res) => {\r\n        if (res !== '') {\r\n            const resObj = JSON.parse(res)\r\n            if (resObj.result === 'success') {\r\n                const name = nameInput.value\r\n                const b = shortcode\r\n                const params = (name === '') ? { b } : { b, name }\r\n                const shortLink = linkFromParams(params, sandboxPath)\r\n                afterPublish(shortLink)\r\n                return\r\n            }\r\n        }\r\n        const shortLink = \"Bad. The link didn't publish. The short link won't work.\"\r\n        afterPublish(shortLink)\r\n    })\r\n}\r\n\r\nexport function hashCode(s) { // https://stackoverflow.com/a/7616484\r\n    let hash = 0; let i; let\r\n        chr\r\n    for (i = 0; i < s.length; i++) {\r\n        chr = s.charCodeAt(i)\r\n        hash = ((hash << 5) - hash) + chr\r\n        hash |= 0 // Convert to 32bit integer\r\n    }\r\n\r\n    // I will only use non-negative integers because it might be easier.\r\n    // So basically, I'm setting the first bit to 0.\r\n    const half = 2147483648\r\n    return (hash + half) % half\r\n}\r\n","export default function addName(layout) {\r\n    const label = document.createElement('label')\r\n    label.className = 'button-group-label2'\r\n    label.innerText = 'Name: '\r\n\r\n    const input = document.createElement('input')\r\n    input.type = 'text'\r\n    input.placeholder = ''\r\n    input.set = (n) => { input.value = n }\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(label)\r\n    div.appendChild(input)\r\n\r\n    layout.newElement('name', div)\r\n    return input\r\n}\r\n","/** @module */\r\n\r\nimport DownloadLink from './DownloadLink.js'\r\nimport TextArea from './TextArea.js'\r\nimport orderedJsonStringify from './orderedJsonStringify.js'\r\n\r\n/**\r\n * Add buttons for saving the configuration to a textbox.\r\n * @param {Layout} layout\r\n */\r\nexport default function addSaveData(layout, nameInput, viewDownload) {\r\n    const button = document.createElement('button')\r\n    button.className = 'button2'\r\n    button.innerText = 'Show Data'\r\n\r\n    const button2 = document.createElement('button')\r\n    button2.className = 'button2'\r\n    button2.innerText = 'Download Data'\r\n\r\n    const dLink = new DownloadLink()\r\n    dLink.setFileName('data.json')\r\n    dLink.hide()\r\n\r\n    const text = new TextArea()\r\n    text.hide()\r\n\r\n    button.onclick = () => {\r\n        text.show()\r\n        const { dataStore } = viewDownload\r\n        const jsonText = orderedJsonStringify(dataStore)\r\n        text.setText(jsonText)\r\n    }\r\n\r\n    button2.onclick = () => {\r\n        button.onclick()\r\n        const url = `data:text/json;charset=utf-8,${encodeURIComponent(text.value)}`\r\n        dLink.setUrl(url)\r\n        const name = nameInput.value\r\n        if (name !== '') dLink.setFileName(`${name}_data.json`)\r\n        dLink.show()\r\n    }\r\n\r\n    const clearDiv = document.createElement('div')\r\n\r\n    const div = document.createElement('div')\r\n    div.appendChild(button)\r\n    div.appendChild(button2)\r\n    div.appendChild(dLink.div)\r\n    div.appendChild(clearDiv)\r\n    div.appendChild(text.div)\r\n\r\n    layout.newElement('saveData', div)\r\n}\r\n","/**\r\n * Store Data for later download.\r\n * @param {Publisher} pub\r\n * @param {Changes} changes\r\n */\r\nexport default function ViewDownload(pub, changes) {\r\n    const self = this\r\n\r\n    pub.attach(self)\r\n\r\n    self.dataStore = {}\r\n\r\n    self.update = (simData) => {\r\n        if (changes.checkNone()) return\r\n\r\n        self.dataStore = simData\r\n    }\r\n}\r\n","/** @module */\r\n\r\nimport sandbox from './sandbox.js'\r\n\r\n/** Find all the divs of class \"sandbox\".\r\n * Add the sandbox as a neighbor under the same parent. */\r\nexport default function addSingleSandboxes() {\r\n    const targets = Array.from(document.getElementsByClassName('sandbox'))\r\n    targets.forEach((target) => {\r\n        const hasConfig = target.dataset.config !== undefined\r\n        const targetConfig = (hasConfig) ? JSON.parse(target.dataset.config) : {}\r\n\r\n        const hasSandboxURL = target.dataset.sandboxurl !== undefined\r\n        const sandboxPath = hasSandboxURL ? target.dataset.sandboxurl : ''\r\n\r\n        const configURL = window.location\r\n        const div = sandbox(configURL, targetConfig, sandboxPath)\r\n        const parent = target.parentNode\r\n        parent.appendChild(div)\r\n    })\r\n}\r\n"],"names":["$bcdac7a19792d2c9$var$cacheDigits","$bcdac7a19792d2c9$var$cacheAppend","$bcdac7a19792d2c9$var$cacheRadius","$bcdac7a19792d2c9$var$cacheCircle","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$a13bab49ccd6d247$export$d40dd1c74110676b","proportion","pmf","$a13bab49ccd6d247$export$36468e3b15474df0","cdf","reduce","p","c","i","pdf","sum","map","$a13bab49ccd6d247$export$2fa81e417e3da73b","rng","random1","findIndex","x","$c9cda941ee132d98$export$d02631cccf789723","Array","$e76ce676473ff390$export$e410eba367ce792b","min","Infinity","iClosest","length","d","$e76ce676473ff390$export$6e0413888cd9bad3","max","iMax","$912c109451e3e417$export$88483c833f74f910","JSON","parse","stringify","$912c109451e3e417$export$f67cbcd1c395127c","b","$c15271acf3d28b91$export$2e2bcd8739ae039","changes","self","add","changeList","forEach","push","check","includes","checkNone","checkAny","clear","splice","numChanges","getChanges","$70368e423808ca8a$export$2e2bcd8739ae039","commander","actions","addSender","args","name","action","props","command","value","go","do","load","loadCommands","addSenderForList","currentValue","execute","undefined","global","module1","define1","Alea","seed","me","mash","data","String","h","charCodeAt","next","t","s0","s1","s2","copy","f","impl","opts","xg","state","prng","int32","double","quick","amd","alea","define","XorGen","strseed","y","z","w","k","top","bot","result","xor128","xorwow","X","j","slice","Date","xorshift7","limit","Math","xor4096","floor","tychei","Group","Tween","now","$ibaza","Easing","Linear","None","amount","Quadratic","In","Out","InOut","Cubic","Quartic","Quintic","Sinusoidal","cos","PI","sin","Exponential","pow","Circular","sqrt","Elastic","Back","Bounce","hrtime","time","performance","bind","getTime","now$1","_tweens","_tweensAddedDuringUpdate","prototype","getAll","_this","keys","tweenId","removeAll","tween","getId","remove","update","preserve","tweenIds","autoStart","Interpolation","m","fn","Utils","Bezier","pw","bn","Bernstein","CatmullRom","p0","p1","fc","Factorial","p2","p3","v0","v1","t2","Sequence","nextId","_nextId","mainGroup","_object","_group","_isPaused","_pauseStart","_valuesStart","_valuesEnd","_valuesStartRepeat","_duration","_initialRepeat","_repeat","_yoyo","_isPlaying","_reversed","_delayTime","_startTime","_easingFunction","_interpolationFunction","_chainedTweens","_onStartCallbackFired","_id","_isChainStopped","_goToEnd","isPlaying","isPaused","to","properties","duration","create","start","property","_swapEndStartRepeatValues","parseFloat","_setupProperties","startValue","startValueIsArray","isArray","propType","isInterpolationList","endValues","_handleRelativeValue","concat","prop","reverse","stop","stopChainedTweens","_onStopCallback","end","pause","resume","numChainedTweens","group","delay","repeat","times","repeatDelay","_repeatDelayTime","yoyo","easing","easingFunction","interpolation","interpolationFunction","chain","tweens","_i","arguments","onStart","callback","_onStartCallback","onUpdate","_onUpdateCallback","onRepeat","_onRepeatCallback","onComplete","_onCompleteCallback","onStop","elapsed","endTime","_updateProperties","isFinite","startIsArray","endIsArray","charAt","tmp","endValue","TWEEN","$d3c1734dacb01657$var$cachedSetTimeout","$d3c1734dacb01657$var$cachedClearTimeout","$d3c1734dacb01657$var$currentQueue","$d3c1734dacb01657$var$process","$d3c1734dacb01657$var$defaultSetTimout","$d3c1734dacb01657$var$defaultClearTimeout","$d3c1734dacb01657$var$runTimeout","fun","setTimeout","clearTimeout","$d3c1734dacb01657$var$queue","$d3c1734dacb01657$var$draining","$d3c1734dacb01657$var$queueIndex","$d3c1734dacb01657$var$cleanUpNextTick","$d3c1734dacb01657$var$drainQueue","timeout","len","run","$d3c1734dacb01657$var$runClearTimeout","marker","$d3c1734dacb01657$var$Item","array","$d3c1734dacb01657$var$noop","nextTick","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","$c1a641038cdfa870$export$2e2bcd8739ae039","constructor","linked","commanders","protect","setLinked","addCommander","broadcastDo","originCommander","com","passDo","broadcastDoCommands","commands","passDoCommands","broadcastLoadConfig","newConfig","passLoadConfig","broadCastLoadCommands","passLoadCommands","$b08a4e41f55fe5b0$export$2e2bcd8739ae039","config","firstActions","isFirstAction","makeUndo","loadConfigPriority","priority","names","isHigh","valueArray","getConfig","structuredClone","$73f365686e2c9818$export$2e2bcd8739ae039","history","head","clearHistory","undoCommand","combineWithCurrentCommand","historyItem","chainTimer","undo","last","pair","isChain","penUltimate","redo","nextnext","$a47780f4820c2a83$export$2e2bcd8739ae039","optComMessenger","commandStore","configKeeper","comMessenger","sender","getCurrentValue","loadConfig","doCommands","$37bbc074930a134e$export$2e2bcd8739ae039","setMode","setDimensions","seeds","setSeedRandom","mode","dimensions","setSeeds","seedRandom","resultsPhaseBySeq","general","closedPrimary","nonpartisanOpenPrimary","setResultsPhase","sequence","val","resultsPartyBySeq","setResultsParty","$b818ddec457ff131$export$2e2bcd8739ae039","simOptions","optionsBag","castOptions","usr","verbosity","numTracts","getOptions","$34532331c6074132$export$2e2bcd8739ae039","votes","socialChoiceOptions","typeOfDivisor","genDivisors","seats","threshold","seatLimits","voteFractionsByCan","candidateTallies","populations","positivePopulations","nPositiveParties","makeAdjustment","candidatesAvailable","minPopulation","populationsSorted","sort","allocation","pops2","_","divisorPattern","fill","signposts","ids","o","pop","numPosts","order","iCan","$b891d2eb16e1a4eb$export$2e2bcd8739ae039","$2a18d953a1e57bd7$export$2e2bcd8739ae039","nk","cansSorted","r","$ef45c1fe8cec5d24$export$ac6cb01020bcb950","shortName","functionName","voteCasterName","socialChoiceType","elect","iWinner","random","scoreFractionAverageByCan","indexOf","firstPreferenceFractions","voteFractions","preferenceTallies","cansByRankList","preferenceLists","nr","quota","resolved","elected","tally","stillIn","canInTally","activeRank","weight","exhausted","iEliminate","ar","canArs","canAr","filter","siWinner","votesForWinner","reweight","moveForward","arf","canArfs","can","console","warn","winFractionPairwise","pairwiseTallies","losses","np","lossDegree","loser","iOverK","abs","iLost","pSorted","iNext","loserLeast","parties","partiesByCan","numParties","numCans","partyVotes","iParty","socialChoiceOptions3","partyAllocation","partyResults","socialChoiceOptions2","cansInParty","tfWithinParty","totalTFInParty","allocationInParty","socialChoiceInParty","scoreVotes","nv","nw","iSortVoters","sumTop","index","score","groupCost","budget","winnersByRound","winnerMaxCostPerScoreByRound","bestCandidate","lowestMaxCostPerScore","groupCostPerScore","withinBudget","maxCostPerScore","totalBudget","supporters","bud","supportersSorted","ns","costLeft","scoreLeft","curMaxCostPerScore","cost","explanation","explain","$ef45c1fe8cec5d24$var$socialChoiceMethods","$ef45c1fe8cec5d24$export$c0d4f4ceebadfbcb","$add8e42a22497fa8$export$2e2bcd8739ae039","phaseOptions","$1980ad30922e431c$export$2e2bcd8739ae039","sequenceName","phaseName","socialChoiceMethod","socialChoiceOptionsMan","setSocialChoiceMethod","metadata","po","$41207dbd9fae2ba1$export$2e2bcd8739ae039","sequences","phases","finalPhaseBySequence","phaseOptionsManList","sequenceOptions","setSequenceName","phaseOptionsMan","$245dafb66e148ea4$export$2e2bcd8739ae039","pollCount","numSampleCandidates","castOptionsMan","sequenceOptionsMan","setNumTracts","setNumDistricts","numDistricts","useDistricts","useTracts","useGeography","finalPhaseName","ob","$6ffe6222418ae1d6$export$2e2bcd8739ae039","entities","nextID","new","entity","num","getList","$90c48da87f10c1fb$export$2e2bcd8739ae039","shape2","shape1","strategyRules","voterRegistrar","doLoad","voterCommander","setStrategyRules","color","densityMax","setAction","exists","shape2p","shape1x","shape2w","shape1w","shape1densityProfile","densityProfile","shape2densityProfile","strategy","actionOptionThreshold","actionWeight","party","doSetCommand","actionKeys","key","cur","$95b7771e135555e3$export$2e2bcd8739ae039","registrar","entityList","prefix","senderList","makeSender","configKey","setNumberEntities","voter","$882735380764a44c$export$2e2bcd8739ae039","ent","$177ecb0a60804ede$export$2e2bcd8739ae039","observers","attachNewE","observer","updateObservers","updateNewE","addEntity","addEntityPressed","addDefaultEntity","getEntities","getGeoms","getPoints","$34f78a09f3b3e7b0$export$2e2bcd8739ae039","condition","actionName","actionOptions","type","mean","radius","$4709d2c6afa23527$export$2e2bcd8739ae039","addVoterCircle","voterShape","getVoterStrategyListByPhase","voterStrategyListByPhase","voterStrategyList","getStrategyList","$4709d2c6afa23527$export$dbbdbaaddf7acf8a","strategyCDF","getParties","$d504e10e24e18d82$var$r","round","$2589a02a34d546fb$export$a2f18a0619b13ed4","text","textsize","lw","alpha","ctx","textAlign","save","globalAlpha","font","lineWidth","fillStyle","fillText","restore","$2589a02a34d546fb$export$120cfc2a1d7ff906","toFixed","$ee4376c793a01fdb$export$2e2bcd8739ae039","candidateRegistrar","candidateCommander","newColor","colorRGBA","d1","l","rgba","toLowerCase","replace","split","parseInt","$5e6608903ddebe20$export$2e2bcd8739ae039","addCandidate","candidate","str","canvas","document","createElement","getContext","sColor","canList","getRGBAList","$816f8839ceda0d76$export$2e2bcd8739ae039","candidateDnRegistrar","candidateDnCommander","darkModeColor","$f148b1a60916375c$export$2e2bcd8739ae039","addCandidateDistribution","candidateDn","$20f81351c64e36a2$export$2e2bcd8739ae039","candidateList","voterShapeList","candidateDnList","$bbf3b8576e24093e$export$2e2bcd8739ae039","usePollsByPhase","usePolls","some","$f2dae5dda642a89f$exports","$gj6Et","$4gDjz","$HLBv4","$ktaoY","$gBs5C","$ktLSh","$fa5d8df011db7ec0$exports","pool","math","nodecrypto","rngname","startdenom","significance","overflow","seedrandom","options","shortseed","mixkey","flatten","obj","depth","typ","entropy","tostring","autoseed","out","randomBytes","Uint8Array","crypto","msCrypto","getRandomValues","navigator","plugins","screen","arc4","ARC4","g","S","pass","is_math_call","keylen","mask","width","count","smear","stringseed","fromCharCode","ex","$63ed14aa294352e1$var$coefInvSqrt2Pi","$63ed14aa294352e1$export$f6e9b6133dd229d9","sd","coef","exp","$63ed14aa294352e1$export$e94e7ee3b047a94d","$63ed14aa294352e1$var$erf","x2","radical","up","ERF_A","sign","$63ed14aa294352e1$export$2fa81e417e3da73b","$7501ec180fc14dab$export$d02631cccf789723","$0944e23b465e7ddb$export$e410eba367ce792b","$0944e23b465e7ddb$export$6fb785c609d82593","$88fb17c192d3ada1$export$f67cbcd1c395127c","$a7526f6bd090f813$export$2e2bcd8739ae039","voterGeom","geometry","canPoints","canBorders","intervals","voronoiIntervals1D","$a7526f6bd090f813$export$db68fffe979e7793","$a7526f6bd090f813$export$a0550d067ba2c229","countByCan","totalVotes","voteCount","interval","lower","upper","lower3","upper3","sigma","$c63ffb7a1930f4bc$export$2e2bcd8739ae039","lines","voronoiLines2D","area","circle","lineSet","x1","y1","half","diff2","high","low","ax","ay","y2","dy","$1b38baec92997001$export$2e2bcd8739ae039","voterPoint","information","voterStrategy","strategyRngs","d2f","$1b38baec92997001$var$d2f1","$1b38baec92997001$var$d2f2","dist2","rnd","highestScore","polling","scoreThreshold","indexViable","dist2Viable","pluralityVote","pluralityAllocation","$0a780afa48a699af$export$2e2bcd8739ae039","gridX","voterPoints","gridPointLength","$0a780afa48a699af$var$findGridX","isGauss","iWidth","density","voteCounts","$0a780afa48a699af$var$findDensity","invNorm","$01979fce4e5838aa$export$2e2bcd8739ae039","ixGrid","iyGrid","gridXMargin","gridYMargin","nx","ny","gridLength","gridY","iy","ix","gx","gy","findDensity","gridPointArea","$01979fce4e5838aa$var$invSqrt8","invNorm2","ni","d2","$675f1a25ef168fcc$export$2e2bcd8739ae039","grid","makeGrid","voteSet","vote","$ee32225c29a71c8c$export$2e2bcd8739ae039","df","$ee32225c29a71c8c$var$df1","$ee32225c29a71c8c$var$df2","dist","distViable","scoreVote","frac","minscore","maxscore","$331c71aac68d7e32$export$2e2bcd8739ae039","$331c71aac68d7e32$var$d2f1","$331c71aac68d7e32$var$d2f2","indexInOrder","cansByRank","ranking","bordaScores","bordaFractions","netWinsPairwise","$d6c30a4e9504875f$export$2e2bcd8739ae039","bordaScoreSumByCan","rankings","bordaFractionAverageByCan","bt","$ad898daa19131485$export$2e2bcd8739ae039","intervalBorders","rankingIntervals1D","$64e498bedbbc6430$export$2e2bcd8739ae039","polygon","$62defbbb6cfa799c$export$2e2bcd8739ae039","c1","c2","c1x","c1y","c2x","c2y","dx","mx","my","$bb366623257a05a3$var$calcDist","plane","point","numerator","$bb366623257a05a3$var$calcNeg","$8ac03c9189b50120$export$2e2bcd8739ae039","cells","$8ac03c9189b50120$var$makeCircle","angle","px","py","bordaScore","cn","newCells","newBordaScore","newC","points","pos","neg","iPos","iNeg","aNeg","bNeg","da","db","$bb366623257a05a3$var$lerp","positive","negative","rik","$912116aa87ff0374$export$2e2bcd8739ae039","areas","$6ee82258e7bb97bb$export$2e2bcd8739ae039","totalArea","winsPairwise","iArea","$6ee82258e7bb97bb$var$calcArea","acos","kArea","$255e71e313f13d96$export$2e2bcd8739ae039","midpoints","iLower","pairwiseIntervals1D","nCans","$255e71e313f13d96$var$sumInterval","lowerWins","iWins","kWins","$5a5b921729ac8324$export$2e2bcd8739ae039","$5a5b921729ac8324$var$d2f1","$5a5b921729ac8324$var$d2f2","$8ef13bc72321e26f$export$2e2bcd8739ae039","netWins","row","net","$a69ca38f385d346d$export$2e2bcd8739ae039","iSorted","mn","uMidpoints","uMidpointPair","ci","ck","midpoint","can1","mSorted","midpointPair","ri","unshift","$5378ef2dbac38c7f$var$voteCasters","plurality","cast","voterGeoms","strategySeed","someGaussian2D","someStrategy","votesByGeom","votesForGeom","countByCanForGeom","totalVotesForGeom","castPoint","makeCanBorders","scoreSumByCan","scoreSumByCanForGeom","scoreFull","invTotalCount","voteIndex","firstPreferences","rankingsForGeom","cansByRankListForGeom","voteCountsForGeom","n1","n2","cr0","c0","pairwise","winsPairwiseForGeom","invTotalCountTimesNMinus1","kx","$5378ef2dbac38c7f$export$9051c087f4e3b1ee","$1ff7a017be0afffc$export$2e2bcd8739ae039","electionOptions","socialChoiceResults","socialChoice","$2b1d54c228b13ade$export$2e2bcd8739ae039","geometry2","$22fb0eef1d0b5c04$export$2e2bcd8739ae039","electionResults","geometry1","lastElectionResults","$73d62e7e163c58e0$export$2e2bcd8739ae039","phaseGeometry","$84709a8ea9110cfe$export$2e2bcd8739ae039","$1e736109da5fcd8d$var$getWinnerList","iWinners","winner","$77baf70a3e5cabee$export$2e2bcd8739ae039","error","primaryResults","primaryPhaseOptions","primaryGeometry","$32bd7cb9bdc64fa9$var$getPrimaryGeometry","partyIndex","g0","voterParties","allCanLabels","canLabels","primaryResult","generalGeometry","primaryWinners","$32bd7cb9bdc64fa9$var$getGeneralGeometry","$32bd7cb9bdc64fa9$var$combineClosedPrimaryGeneral","generalWinnerList","$32bd7cb9bdc64fa9$var$getWinnerList","phaseNames","primary","$1e736109da5fcd8d$var$getGeneralGeometry","$1e736109da5fcd8d$var$combinePrimaryGeneral","$9a77e39367a31884$var$invSqrtHalfPi","$89f6e924a10a936e$var$invSqrt2","$8f7b44bb767967a0$export$2e2bcd8739ae039","totalPartyWins","totalPoints","samplingGeometry","startSim","addSim","samplingSeed","pointsChanged","sampleResult","numSamples","canDnGeoms","geography","canDnCDF","samplingPointsList","samplingPointsCount","partyWins","sParties","canDnGeom","iDist","party0","canPoint","sample","isGaussian","R","mag","log","randomSample","Y","$89f6e924a10a936e$var$randomStandardNormal","scale","$89f6e924a10a936e$var$randomUnitCircle","sequenceResults","winCount","winPoint","winParty","numNewPoints","partyWinFraction","$c80a24d03d53e326$export$2e2bcd8739ae039","pub","districts","electionOptionsMan","electionSampler","cd","samplingResult","$fbd47c7b0fecb2d9$export$2e2bcd8739ae039","votesByTract","numRows","$997fdff8a73e14b5$export$2e2bcd8739ae039","cen","gfSum","gf","$5a664525795fcf70$export$2e2bcd8739ae039","geoResults","$5a664525795fcf70$var$districtPatch","geometry0","voterGeomsByTract","voterGeoms00","allVotes","tallyNames","tallyName","tallyAverage","$dc402228f45655fe$var$getCandidateTallyAverageStatewide","totals","dNorm","$e661719c539dfc13$var$getPairwiseTallyAverageStatewide","pTotals","pairwiseTally","preferencesAll","$3fa308a8452fe9cd$var$concatPreferenceListsStatewide","preferences","tallyAll","$09b2e81faeca07f7$var$concatPreferenceTalliesStatewide","votesByDistrict","census","nd","districtMap","iDistrict","$2c1c61e8260ced75$var$getCandidateTallyAverage","gfNorm","$39eb7fc99bf8f097$var$getPairwiseTallyAverageForDistrict","$db9a5a579a1d2610$var$concatPreferenceListsDistrict","votesInTract","$fc3e0621b0ea595f$var$concatPreferenceTalliesDistrict","tallyNorm","scResultsByDistrict","numCandidates","allocationsSum","voterGeomsByDistrict","colorRGBAOfCandidates","$f19ce2fbf8e19d4c$export$2e2bcd8739ae039","modes","one","$c57a6b566cbb04f2$export$2e2bcd8739ae039","attach","simData","$0c00c6a82cd6c172$var$lineOrient","bx","by","$0c00c6a82cd6c172$var$lineIntersect","cx","cy","bax","bay","dcx","dcy","$0c00c6a82cd6c172$var$polygonClosed","$684ff26a96d5ad1c$export$2e2bcd8739ae039","polygons","xScale","yScale","subject","overlap","clip","subject0","closed","input","$b694069ea7a74f51$export$2e2bcd8739ae039","$901225bbbd8afd6a$export$8a63f25cc62965f1","elen","flen","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","$901225bbbd8afd6a$export$202e0172ed3c7be0","Float64Array","$1b8ebe1b5d7dc8a2$var$B","$1b8ebe1b5d7dc8a2$var$C1","$1b8ebe1b5d7dc8a2$var$C2","$1b8ebe1b5d7dc8a2$var$D","$1b8ebe1b5d7dc8a2$var$u","$1b8ebe1b5d7dc8a2$export$bbb923599a46a7d8","detleft","detright","det","detsum","$1b8ebe1b5d7dc8a2$var$ccwerrboundA","$1b8ebe1b5d7dc8a2$var$orient2dadapt","acxtail","acytail","bcxtail","bcytail","ahi","alo","bhi","blo","_j","_0","t1","t0","u3","acx","bcx","acy","bcy","errbound","$1b8ebe1b5d7dc8a2$var$ccwerrboundB","$1b8ebe1b5d7dc8a2$var$ccwerrboundC","C1len","C2len","Dlen","$7910d402b5fcb5cd$var$EDGE_STACK","Uint32Array","$7910d402b5fcb5cd$export$2e2bcd8739ae039","from","getX","$7910d402b5fcb5cd$var$defaultGetX","getY","$7910d402b5fcb5cd$var$defaultGetY","coords","maxTriangles","_triangles","_halfedges","Int32Array","_hashSize","ceil","_hullPrev","_hullNext","_hullTri","_hullHash","_ids","_dists","i0","i1","i2","hullPrev","hullNext","hullTri","hullHash","minX","minY","maxX","maxY","minDist","$7910d402b5fcb5cd$var$dist","i0x","i0y","i1x","i1y","minRadius","$7910d402b5fcb5cd$var$circumradius","ey","bl","cl","i2x","i2y","$7910d402b5fcb5cd$var$quicksort","hull","d0","subarray","triangles","halfedges","center","$7910d402b5fcb5cd$var$circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","q","_legalize","$7910d402b5fcb5cd$var$pseudoAngle","a0","b0","al","pr","pl","$7910d402b5fcb5cd$var$inCircle","fx","fy","bp","cp","ap","hbl","_link","br","dists","left","right","temp","tempDist","median","$7910d402b5fcb5cd$var$swap","arr","$3ff4c258c072845b$export$2e2bcd8739ae039","_x0","_y0","_x1","_y1","moveTo","closePath","lineTo","arc","x0","y0","rect","$faec48d3859f255b$export$2e2bcd8739ae039","$3d2bc80fc251edd6$export$2e2bcd8739ae039","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","t3","x3","y3","ab","render","context","buffer","inedges","ti","tj","xi","yi","xj","yj","_renderSegment","h0","h1","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","_regioncode","_clipSegment","contains","_step","neighbors","cj","loop","ai","li","aj","lj","_cell","e0","V","_simplify","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","flip","vx0","vy0","vxn","vyn","vx","vy","$d0f7a2297bbeda8e$var$tau","$d0f7a2297bbeda8e$var$pow","$d0f7a2297bbeda8e$var$pointX","$d0f7a2297bbeda8e$var$pointY","$d0f7a2297bbeda8e$export$2e2bcd8739ae039","that","$d0f7a2297bbeda8e$var$flatArray","$d0f7a2297bbeda8e$var$flatIterable","_delaunator","_hullIndex","$d0f7a2297bbeda8e$var$collinear","cross","collinear","bounds","hypot","hullIndex","voronoi","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","trianglePolygons","trianglePolygon","$d187152b91af3f55$export$2e2bcd8739ae039","centroids","tolFraction","converged","tol","$e3400c917024ce02$var$relax","$e3400c917024ce02$var$range","every","$e3400c917024ce02$var$distance2","polygonAreas","$7ae0f8fc9f8f8162$var$F2","$7ae0f8fc9f8f8162$var$G2","$7ae0f8fc9f8f8162$var$F3","$7ae0f8fc9f8f8162$var$G3","$7ae0f8fc9f8f8162$var$F4","$7ae0f8fc9f8f8162$var$G4","$7ae0f8fc9f8f8162$var$grad3","Float32Array","$7ae0f8fc9f8f8162$var$grad4","$7ae0f8fc9f8f8162$export$7cef8d54b4fb09be","randomOrSeed","$7ae0f8fc9f8f8162$var$alea","toString","$7ae0f8fc9f8f8162$export$98cd52c6119fe283","aux","perm","permMod12","noise2D","j1","n0","ii","jj","gi0","gi1","gi2","noise3D","n3","k1","j2","k2","z0","z1","z2","z3","kk","gi3","noise4D","n4","w0","rankx","ranky","rankz","rankw","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","$0afc515ba3c7dd80$export$2e2bcd8739ae039","$0afc515ba3c7dd80$export$c32634e934179703","noiseWidth","noiseHeight","xAmp","yAmp","simplexX","simplexY","sumX","sumY","$0afc515ba3c7dd80$var$range","noiseX","noiseY","meanX","meanY","$df827f6e5b16ff60$export$2e2bcd8739ae039","nDistricts","voterGeomsForTract","$872c994967482d4d$export$2e2bcd8739ae039","tractNoise","rowNoise","cellNoise","vg","xNoise","yNoise","$13e7f360276e9472$export$2e2bcd8739ae039","firstRun","geography0","$42d022d2d0b7b2ca$export$2e2bcd8739ae039","simMode","$79691b908ced9edf$export$2e2bcd8739ae039","$12ee2d67b2ed26c8$export$2e2bcd8739ae039","divsByName","extraDivs","newElement","div","makeComponent","parent","className","appendChild","$9b222bf6a5bc24a5$export$2e2bcd8739ae039","enter","exit","renderForeground","clearForeground","$6c551221973b5c3e$export$2e2bcd8739ae039","viewModes","viewModeState","rerender","$79Zf3","$12c10003ce90c043$export$2e2bcd8739ae039","handlers","move","touchmove","touchstart","touchend","eHandlers","assign","$8ab30dbd0c8eb7ea$export$2e2bcd8739ae039","background","setAttribute","foreground","fctx","setSize","wpx","hpx","pixelRatio","wd","hd","height","style","setDisplayStyle","displayStyle","display","setStrokeStyle","strokeStyle","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio","$e176139983db3b57$export$2e2bcd8739ae039","viewMode","makeSvgButton","innerText","onclick","setFCtx","svg","getSerializedSvg","url","encodeURIComponent","downloadLink","href","download","margin","append","setShowDownloadScreenLink","show","hidden","common","showDownloadScreenLink","$c290346a087eae0d$var$format","RegExp","$c290346a087eae0d$var$randomString","holder","chars","randomstring","$c290346a087eae0d$var$namedEntities","$c290346a087eae0d$var$createNamedToNumberedLookup","items","radix","base10","lookup","$c290346a087eae0d$var$STYLES","svgAttr","$c290346a087eae0d$var$CanvasGradient","gradientNode","__root","__ctx","addColorStop","offset","matches","__createElement","regex","exec","$c290346a087eae0d$var$CanvasPattern","pattern","$c290346a087eae0d$var$ctx","defaultOptions","enableMirroring","__document","__canvas","__setDefaultStyles","__stack","__getStyleState","__groupStack","createElementNS","setAttributeNS","__ids","__defs","__currentElement","elementName","resetFill","element","__applyStyleState","styleState","__applyStyleToCurrentElement","currentElement","currentStyleGroup","__currentElementsToStyle","children","node","childNodes","getAttribute","opacity","attr","__closestGroupOrSvg","nodeName","parentNode","fixNamedEntities","regexp","serialized","XMLSerializer","serializeToString","xmlns","test","getSvg","__addTransform","__applyCurrentDefaultPath","transform","rotate","translate","beginPath","path","__currentDefaultPath","__currentPosition","__addPathCommand","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","quadraticCurveTo","cpx","cpy","$c290346a087eae0d$var$normalize","vector","arcTo","unit_vec_p1_p0","unit_vec_p1_p2","theta","unit_vec_p1_origin","len_p1_origin","unit_vec_origin_start_tangent","unit_vec_origin_end_tangent","getAngle","startAngle","endAngle","stroke","fillRect","strokeRect","__clearCanvas","current","rootGroup","removeChild","clearRect","createLinearGradient","grad","createRadialGradient","r0","r1","__parseFont","fontPart","size","family","decoration","__fontUnderline","__fontHref","__wrapTextLink","__applyText","mapping","textBaseline","textElement","alphabetic","createTextNode","strokeText","measureText","counterClockwise","endX","endY","startX","startY","largeArcFlag","diff","rx","ry","xAxisRotation","sweepFlag","clipPath","newGroup","drawImage","dw","dh","sw","sh","defs","svgImage","image","sx","sy","translateDirective","cloneNode","transformDirective","originTransform","toDataURL","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","drawImageSvg","SVGSVGElement","orgWidth","orgHeight","scaleW","scaleH","createPattern","repetition","img","setLineDash","dashArray","lineDash","join","drawFocusRing","createImageData","getImageData","putImageData","globalCompositeOperation","setTransform","$c290346a087eae0d$export$2e2bcd8739ae039","$d00d542cb927db53$export$2e2bcd8739ae039","$6f4e9b5281dd3fb8$export$2e2bcd8739ae039","screenCommon","layout","layoutName","tweenGroup","tooltips","clearDiv","wrap","outer","setWidth","setHeight","darkMode","noBuffers","switchToSVG","switchToCanvas","setSvgMode","hide","setDarkMode","doDarkMode","eventHandlers","onmousedown","onmousemove","onmouseup","addEventListener","$f895ea350f95b0bf$export$2e2bcd8739ae039","buttonConfig","onChoose","nameIsHTML","dom","fixMargin","marginRight","draw","innerHTML","onClick","turnOff","isOn","turnOn","$adbab3d2c863fd3e$export$2e2bcd8739ae039","makeData","buttonConfigs","doMakeData","labelName","label","labelIsHTML","isCheckbox","isCheckboxBool","justButton","buttonHidden","buttonDOMByValue","buttons","buttonsByName","labelDOM","labelTip","labelToggle","buttonContainer","conf","button","onToggle","selected","updateNames","data2","redraw","configureHidden","buttonName","entries","buttonData","highlight","propName","propValue","ibu","bu","theButton","$28e93f854ff6d0d3$export$2e2bcd8739ae039","choice","getValue","checkShow","choose","$28e93f854ff6d0d3$export$aba002ef70684916","select","numButtons","usableSpace","between","$fe33e11ec59c2627$export$2e2bcd8739ae039","setShowNonExistingEntities","showGhosts","$a7d5e7837ef65ee0$export$2e2bcd8739ae039","$421104df84ecbab8$export$2e2bcd8739ae039","colors","sum2","sumF","$421104df84ecbab8$export$e00a895b09ec9a57","$db2e8da434a90a51$export$2e2bcd8739ae039","chartDataMES","flagNoRender","phaseResults","budgetDataMES","nRounds","nGeoms","costsByGeom","budgetsByGeom","colorRGBAByGeom","nVotes","budgets","costs","curBudget","nextBudget","curCost","sizeChart","costShapesbyGeom","budgetShapesbyGeom","xCenter","budgetShapes","costShapes","budgetShape","costShape","xTranslate","idCol","yTranslate","idRow","bottom","shapeMult","dCurCosti","dCurBudgeti","xb","yb","xc","yc","costShapesByRound","budgetShapesByRound","colorRGBAByRound","$31295da368957eb6$export$2e2bcd8739ae039","resultsPhaseName","$2d400110e848f7b3$export$2e2bcd8739ae039","resultsParty","$3467d21e4791d697$export$2e2bcd8739ae039","menu","vizExplanation","enterStrategy","$65e2037c241d5a3c$export$2e2bcd8739ae039","districtElectionResults","svgMode","smallCircle","drawCircle","$94b65962391a66d0$export$2e2bcd8739ae039","gaussianPath","middle","pa","amp","renderAt","$e18b7d24ec8943a8$export$2e2bcd8739ae039","newX","newY","renderCenterAt2","$8260a04714b64e34$export$2e2bcd8739ae039","voterRendererList","screenMini","VoterRenderer","setRenderer","vizDistrictNoise","$25f487047721f1fc$export$2e2bcd8739ae039","voterGroup","doPath","$f593194ce2071873$export$2e2bcd8739ae039","$27954d0c7f46c245$export$2e2bcd8739ae039","Voronoi","updateGraphic","$0ecfd5c036a78a35$var$invPi","$3c6bca54e10f6fd1$var$invSqrt8","$3c6bca54e10f6fd1$var$range","$8a3183ca0c57c967$var$create3DArray","$40f8c5dff983c3f4$export$2e2bcd8739ae039","beatMap","densityDecoder","pn","vn","bm","ms","ma","sma","$3c6bca54e10f6fd1$var$sum","highs","mid","fmid","$a13bab49ccd6d247$var$erf","areaFromCenter","asin","shade","bc","Path2D","$8ea42eea754b2200$export$2e2bcd8739ae039","colorList","$8ea42eea754b2200$var$renderInterval","$9560e66c8a92f291$export$2e2bcd8739ae039","$9560e66c8a92f291$var$cellPath","cc","first","coord","$ab815f816145f3cc$export$2e2bcd8739ae039","doBeatMap","VoronoiRanking","$a11003c4c3220fc7$export$2e2bcd8739ae039","$0b9ea52e4c5c8e83$export$2e2bcd8739ae039","shapePath","drawOutline","gl","votesForGeom0","renderBackground","$d7ff1390ec6a8560$export$2e2bcd8739ae039","screenMain","singleCanvas","canvases","nHeight","fillDataSeparate","offCtx","imageData","support","fillDataBlend","colorSet","drawBlend","ov","drawSeparate","clipShape","im","$996119eea3e44fbf$export$2e2bcd8739ae039","Grid","$ee07af2b9c6cbd66$export$2e2bcd8739ae039","list","updateNewG","graphic","isCircle","square","isSquare","canDn","testVoter","$2f7afdb36959c999$export$2e2bcd8739ae039","dragm","viewEntities","viewSettings","couldBeClick","startPos","drag","draggables","grabCanvas","event","target","closest","mouse","getMouse","extra","isTouch","hitList","hitTest","iHitListClosest","offX","offY","iDraggableClosest","iDragging","isDragging","pickUp","dataset","cursor","preventDefault","stopPropagation","dragging","setXYView","moveClickDetect","xDist","yDist","click","clickEmpty","drop","passTouch","getBoundingClientRect","changedTouches","clientX","clientY","$38e222933fe6ab29$export$2e2bcd8739ae039","clickDrag","testVoteView","$67949af908ec11a0$export$2e2bcd8739ae039","rendererMaker","renderer","$3af4bd41fff726d7$export$2e2bcd8739ae039","newVoterShape","voterRenderer","getVoterShapes","getVoterRenderers","voterRenderersEx","$379842311498b12e$export$2e2bcd8739ae039","$f643266df7ac597d$export$2e2bcd8739ae039","vizOne","doGrid","doRanking","$eb0fab33c96b3c15$export$2e2bcd8739ae039","canDnRendererList","total","updatePoints","kernel","kernelsize","renderCans","norm","$15b11d3f8c621b55$export$2e2bcd8739ae039","values","valueof","$487dd0f9cbab3b32$var$e10","$487dd0f9cbab3b32$var$e5","$487dd0f9cbab3b32$var$e2","$487dd0f9cbab3b32$var$tickSpec","inc","step","power","log10","factor","$487dd0f9cbab3b32$export$2e2bcd8739ae039","ticks","$487dd0f9cbab3b32$export$bc64d00cc98e7e95","$2c4f6d534fad065c$export$58adb3bec8346d0f","$2c4f6d534fad065c$var$array","$6bcd7857347ef156$export$d6b6c69cb5897b44","source","sr","$6bcd7857347ef156$export$96ba1179f8344c4b","$0cb759b1a7cd07a6$export$2e2bcd8739ae039","$26e3fe1f2046d711$export$2e2bcd8739ae039","LN2","$5ca01d25a009fe4e$export$2e2bcd8739ae039","$cab3ef4358a431fa$export$2e2bcd8739ae039","$b90b07a45fb6f5c3$var$cases","$b90b07a45fb6f5c3$export$2e2bcd8739ae039","smooth","smoothLinear","contours","tz","ts","contour","holes","isorings","fragmentByStart","fragmentByEnd","stitch","line","startIndex","endIndex","ring","hole","$ede27fb7dc44c2de$var$ringContains","pi","pj","$ede27fb7dc44c2de$var$segmentContains","coordinates","xt","yt","_1","thresholds","$32fc6ddad2582b2c$var$defaultX","$32fc6ddad2582b2c$var$defaultY","$32fc6ddad2582b2c$var$defaultWeight","$12ca6452a9242546$export$2e2bcd8739ae039","$a9c4f90c46b9891b$var$streamGeometry","stream","$a9c4f90c46b9891b$var$streamGeometryType","hasOwnProperty","$a9c4f90c46b9891b$var$streamObjectType","Feature","object","FeatureCollection","features","Sphere","sphere","Point","MultiPoint","LineString","$a9c4f90c46b9891b$var$streamLine","MultiLineString","Polygon","$a9c4f90c46b9891b$var$streamPolygon","MultiPolygon","GeometryCollection","geometries","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","$a9c4f90c46b9891b$export$2e2bcd8739ae039","$6ec05ae0eb260f21$export$bda7ba77fb86c375","_partials","_n","hi","lo","valueOf","$57fa69a7e776893c$export$a4b4b4d4d776fe92","$57fa69a7e776893c$export$18c7bea995a110f","$57fa69a7e776893c$export$2335f513bbd82c6d","$57fa69a7e776893c$export$eba8049fb5020b81","$b28aa413bde10d03$export$2e2bcd8739ae039","$5df02d2f69cce112$var$x00","$5df02d2f69cce112$var$y00","$5df02d2f69cce112$var$x0","$5df02d2f69cce112$var$y0","$5df02d2f69cce112$var$areaSum","$5df02d2f69cce112$var$areaRingSum","$5df02d2f69cce112$var$areaStream","$5df02d2f69cce112$var$areaRingStart","$5df02d2f69cce112$var$areaRingEnd","$5df02d2f69cce112$var$areaPointFirst","$5df02d2f69cce112$var$areaPoint","$df73b5500e7eacc3$var$x00","$df73b5500e7eacc3$var$y00","$df73b5500e7eacc3$var$x0","$df73b5500e7eacc3$var$y0","$d0d3ed45b07b0be3$var$x0","$d0d3ed45b07b0be3$var$y0","$d0d3ed45b07b0be3$var$x1","$d0d3ed45b07b0be3$var$y1","$d0d3ed45b07b0be3$export$2e2bcd8739ae039","$df73b5500e7eacc3$var$X0","$df73b5500e7eacc3$var$Y0","$df73b5500e7eacc3$var$Z0","$df73b5500e7eacc3$var$X1","$df73b5500e7eacc3$var$Y1","$df73b5500e7eacc3$var$Z1","$df73b5500e7eacc3$var$X2","$df73b5500e7eacc3$var$Y2","$df73b5500e7eacc3$var$Z2","$df73b5500e7eacc3$var$centroidStream","$df73b5500e7eacc3$var$centroidPoint","$df73b5500e7eacc3$var$centroidLineStart","$df73b5500e7eacc3$var$centroidLineEnd","$df73b5500e7eacc3$var$centroidRingStart","$df73b5500e7eacc3$var$centroidRingEnd","centroid","NaN","$df73b5500e7eacc3$var$centroidPointFirstLine","$df73b5500e7eacc3$var$centroidPointLine","$df73b5500e7eacc3$var$centroidPointFirstRing","$df73b5500e7eacc3$var$centroidPointRing","$85c4323c793ebcf2$export$2e2bcd8739ae039","_context","_radius","pointRadius","_line","_point","$c9fc6c8cc8776d8d$var$lengthRing","$c9fc6c8cc8776d8d$var$x00","$c9fc6c8cc8776d8d$var$y00","$c9fc6c8cc8776d8d$var$x0","$c9fc6c8cc8776d8d$var$y0","$c9fc6c8cc8776d8d$var$lengthSum","$c9fc6c8cc8776d8d$var$lengthStream","$c9fc6c8cc8776d8d$var$lengthPointFirst","$c9fc6c8cc8776d8d$var$lengthPoint","$bcdac7a19792d2c9$export$2e2bcd8739ae039","digits","_append","$bcdac7a19792d2c9$var$append","$bcdac7a19792d2c9$var$appendRound","RangeError","strings","$c6ff1f262edf842d$export$2e2bcd8739ae039","totalCount","densityData","pointsList","pointCounts","updateDensity","btw","values0","values1","pow2k","wi","pow4k","Number","MIN_VALUE","transformPolygon","transformRing","transformPoint","resize","cellSize","bandwidth","gg","projection","projectionStream","contextStream","measure","col","co","$01e88f6a1853bce9$export$2e2bcd8739ae039","$490ef50da749debd$export$2e2bcd8739ae039","newCandidateDn","canDnRenderer","getCanDnRenderers","getCandidateDistributions","canDnRenderersEx","getCandidateDistributionsAll","$54465968db0c2722$export$2e2bcd8739ae039","vizSample","$3edb90b7f49fddac$export$2e2bcd8739ae039","renderAreaText","area1000","textHeight","renderVoronoi","districtMapWidth","districtMapHeight","renderVoronoiGeneral","renderVoronoiColors","textFunction","$96e1eb8626c55622$export$2e2bcd8739ae039","minimaxScore","pairs","$3d875fa9828b9751$export$2e2bcd8739ae039","sn","loadColors","renderWidth","renderHeight","$a864792a6d7ef385$export$2e2bcd8739ae039","districtDraw","mapOfTracts","colorByTract","colorOfVoteByDistrict","colorOfWinsByDistrict","$f76b7d8523210943$var$colorTracts","$f76b7d8523210943$var$colorDistrictWins","winnerColors","renderTractVotes","renderDistrictWins","renderDistrictVotes","$33663a9a11823002$export$2e2bcd8739ae039","districtMapViz","$cff5521001a27159$export$2e2bcd8739ae039","isVisible","elem","offsetWidth","offsetHeight","getClientRects","outsideClickListener","removeClickListener","removeEventListener","$8aec77aa9c33e1fa$export$2e2bcd8739ae039","box","position","border","padding","pinned","setPin","$c3b719420f02de85$export$2e2bcd8739ae039","$c3b719420f02de85$var$Item","densityProfile1","choices","densityProfile2","strategyByPhase","itemsForPhase","strategyList","actionPDF1","a1","actionPDF2","actionPDF","actionName1","actionName2","onChange","defaultValue","option","checked","for","$f18fab46b9b6b951$export$2e2bcd8739ae039","updateViewXY","$b0ac9ae255f3d74d$export$2e2bcd8739ae039","trueW","trueH","angleFraction","tweenSq","win","lose","$e85b1b41a733362a$export$2e2bcd8739ae039","wHandle","hHandle","fraction","setFraction","wins","setWins","$52e270625a69677a$export$2e2bcd8739ae039","$4c0e458dd52263e5$export$2e2bcd8739ae039","canViews","attachNewG","newCandidate","canView","getCanViews","getCandidates","canViewsEx","getCandidatesAll","setCandidateFractions","fractions","setCandidateWins","winsByCandidate","unsetCandidateWins","fillUndefined","renderForegroundAll","renderForegroundExisting","$b62842d2558eb2a5$export$2e2bcd8739ae039","trueR","$da240c675ca5a64e$export$2e2bcd8739ae039","$edc934b1d1c9c6e6$export$2e2bcd8739ae039","$fffb6c00e5df0852$export$2e2bcd8739ae039","voterView","getVoterViews","$7c31fa2c205e6eb7$export$2e2bcd8739ae039","voteText","makeSpan","tallyFractions","$d5747dc43de0bea5$export$2e2bcd8739ae039","viewEntitiesOne","removeTestPoint","tooltip","colorSetRGBA","testVoterGraphic","tbox","float","togglePin","button2","tooltipVoteText","$daad1e0f0c649531$export$2e2bcd8739ae039","$01899a42ff19bbc4$export$2e2bcd8739ae039","$100052672cd0bb56$export$2e2bcd8739ae039","viewChanges","candidateViewList","voterViewList","testVoterView","tf","$2441a92fca464983$export$2e2bcd8739ae039","setWinFraction","winFraction","$f9d4fa36f78cc466$export$2e2bcd8739ae039","$51075ebf4a3429fd$export$2e2bcd8739ae039","canDnViews","canDnView","getCanDnViews","canDnViewsEx","setCandidateDnWins","canDnViewsExisting","$1fc9a95f71fdd883$export$2e2bcd8739ae039","candidateDnViewList","$4f7ed0f9de00f61e$export$2e2bcd8739ae039","body","getElementsByTagName","classList","matchMedia","$18d1d7cb5f3bd0fe$export$2e2bcd8739ae039","phaseNameTitle","addMenuItem","$3b953dc201d486cc$export$2e2bcd8739ae039","divMenu","menuItem","$90c2f2a69ce38576$var$addResultsPhaseSelectorForSequence","$a8db0a660e5b197f$export$2e2bcd8739ae039","params","decodeURIComponent","$a46318dd1b71d871$var$ajaxLite","xhr","XMLHttpRequest","ActiveXObject","send","method","asyncOpt","async","open","onreadystatechange","readyState","responseText","setRequestHeader","query","$c3a0bcc3a54dc577$export$2e2bcd8739ae039","$64c45c66513aa78c$var$usingIPython","IPython","$6ac7add0bf8ff367$export$2e2bcd8739ae039","hideLink","setUrl","setFileName","$bb869f82bd71d020$export$2e2bcd8739ae039","setText","$c7e60aaa60caf2ba$export$2e2bcd8739ae039","$c7e60aaa60caf2ba$var$sortObjByKey","$8f9da01fb5fff854$export$2e2bcd8739ae039","sandboxPath","search","urlParams","URLSearchParams","currentUrlFolder","$8f9da01fb5fff854$var$getFolder","sp","location","sl","$ff5d9465695c9047$export$2e2bcd8739ae039","nameInput","encoded","$6152ab91c2b03ae4$export$2e2bcd8739ae039","afterPublish","link","shortcode","$6152ab91c2b03ae4$export$d41d9ab3de2def3d","hash","res","resObj","$6ea632b5c3b5e633$export$2e2bcd8739ae039","dataStore","$1e211df273e64683$export$2e2bcd8739ae039","configURL","targetConfig","sim","choose1","chooseParty","$90c2f2a69ce38576$var$addResultsPartySelector","optSeqName","show1","show2","choose2","undoButton","redoButton","addCandidateButton","candn","canDnList","addCandidateDistributionButton","addVoterButton","addEntities","placeholder","clipboard","writeText","requesting","dLink","jsonText","upload","uploadCallback","accept","onchange","file","files","reader","FileReader","readAsText","nameWithoutExtension","viewDownload","votekitStore","votekitUpdate","requestAnimationFrame","viewLoop","checkUrlCallback","has","yes","URL","checkURLCallback","cu","getVotekitStore","notebook","targets","getElementsByClassName","hasConfig","hasSandboxURL","sandboxurl","divLink","div1","div2"],"version":3,"file":"demo.js.map"}